; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?MAX_SAMPLE_RATES@RtApi@@1IB			; RtApi::MAX_SAMPLE_RATES
PUBLIC	?SAMPLE_RATES@RtApi@@1QBIB			; RtApi::SAMPLE_RATES
CONST	SEGMENT
$SG129029 DB	'RtApiDs::probeDeviceOpen: error creating callback thread'
	DB	'!', 00H
$SG129654 DB	00H
	ORG $+5
$SG129059 DB	'RtApiDs::closeStream(): no open stream to close!', 00H
	ORG $+3
?MAX_SAMPLE_RATES@RtApi@@1IB DD 0eH			; RtApi::MAX_SAMPLE_RATES
$SG129097 DB	'RtApiDs::startStream(): the stream is already running!', 00H
	ORG $+1
$SG129102 DB	') starting output buffer!', 00H
	ORG $+2
$SG128452 DB	')!', 00H
	ORG $+1
$SG129103 DB	'RtApiDs::startStream: error (', 00H
	ORG $+2
$SG129108 DB	') starting input buffer!', 00H
	ORG $+3
$SG128468 DB	')!', 00H
	ORG $+1
$SG129109 DB	'RtApiDs::startStream: error (', 00H
	ORG $+2
$SG129175 DB	'RtApiDs::stopStream(): the stream is already stopped!', 00H
	ORG $+2
?SAMPLE_RATES@RtApi@@1QBIB DD 0fa0H			; RtApi::SAMPLE_RATES
	DD	01588H
	DD	01f40H
	DD	02580H
	DD	02b11H
	DD	03e80H
	DD	05622H
	DD	07d00H
	DD	0ac44H
	DD	0bb80H
	DD	015888H
	DD	017700H
	DD	02b110H
	DD	02ee00H
$SG129180 DB	') stopping output buffer!', 00H
	ORG $+2
$SG128472 DB	')!', 00H
	ORG $+1
$SG129181 DB	'RtApiDs::stopStream: error (', 00H
	ORG $+3
$SG129184 DB	') locking output buffer!', 00H
	ORG $+3
$SG124424 DB	'5.0.0', 00H
	ORG $+2
$SG129660 DB	0aH, 0aH, 00H
	ORG $+1
$SG128160 DB	') enumerating output devices!', 00H
	ORG $+2
$SG129185 DB	'RtApiDs::stopStream: error (', 00H
	ORG $+3
$SG128161 DB	'RtApiDs::getDeviceCount: error (', 00H
	ORG $+3
$SG128925 DB	')!', 00H
	ORG $+1
$SG128163 DB	') enumerating input devices!', 00H
	ORG $+3
$SG129188 DB	') unlocking output buffer!', 00H
	ORG $+1
$SG128929 DB	')!', 00H
	ORG $+1
$SG128164 DB	'RtApiDs::getDeviceCount: error (', 00H
	ORG $+3
$SG128939 DB	')!', 00H
	ORG $+1
$SG129189 DB	'RtApiDs::stopStream: error (', 00H
	ORG $+3
$SG129195 DB	') stopping input buffer!', 00H
	ORG $+3
$SG128943 DB	')!', 00H
	ORG $+1
$SG129196 DB	'RtApiDs::stopStream: error (', 00H
	ORG $+3
$SG129199 DB	') locking input buffer!', 00H
$SG129200 DB	'RtApiDs::stopStream: error (', 00H
	ORG $+3
$SG129203 DB	') unlocking input buffer!', 00H
	ORG $+2
$SG128947 DB	')!', 00H
	ORG $+1
$SG129204 DB	'RtApiDs::stopStream: error (', 00H
	ORG $+3
$SG129213 DB	'RtApiDs::abortStream(): the stream is already stopped!', 00H
	ORG $+1
$SG125205 DB	0aH, 'RtAudio: no compiled support for specified API argu'
	DB	'ment!', 0aH, 00H
	ORG $+1
$SG128952 DB	')!', 00H
	ORG $+1
$SG125208 DB	0aH, 'RtAudio: no compiled API support found ... critical'
	DB	' error!!', 0aH, 0aH, 00H
	ORG $+1
$SG125271 DB	'RtApi::openStream: a stream is already open!', 00H
	ORG $+3
$SG129396 DB	') getting current write position!', 00H
	ORG $+6
$SG125273 DB	'RtApi::openStream: a non-NULL output StreamParameters st'
	DB	'ructure cannot have an nChannels value less than one.', 00H
	ORG $+2
$SG125275 DB	'RtApi::openStream: a non-NULL input StreamParameters str'
	DB	'ucture cannot have an nChannels value less than one.', 00H
	ORG $+3
$SG125277 DB	'RtApi::openStream: input and output StreamParameters str'
	DB	'uctures are both NULL!', 00H
	ORG $+1
$SG125279 DB	'RtApi::openStream: ''format'' parameter value is undefin'
	DB	'ed.', 00H
	ORG $+2
$SG128956 DB	')!', 00H
	ORG $+1
$SG125282 DB	'RtApi::openStream: output device parameter value is inva'
	DB	'lid.', 00H
	ORG $+3
$SG129381 DB	'RtApiDs::callbackEvent(): the stream is closed ... this '
	DB	'shouldn''t happen!', 00H
	ORG $+2
$SG128960 DB	')!', 00H
	ORG $+1
$SG125285 DB	'RtApi::openStream: input device parameter value is inval'
	DB	'id.', 00H
$SG128964 DB	')!', 00H
	ORG $+1
$SG129397 DB	'RtApiDs::callbackEvent: error (', 00H
$SG129399 DB	') getting current read position!', 00H
	ORG $+3
$SG128969 DB	')!', 00H
	ORG $+1
$SG129400 DB	'RtApiDs::callbackEvent: error (', 00H
$SG129402 DB	') getting current write position!', 00H
	ORG $+2
$SG128973 DB	')!', 00H
	ORG $+1
$SG129403 DB	'RtApiDs::callbackEvent: error (', 00H
$SG129405 DB	') getting current read position!', 00H
	ORG $+3
$SG128985 DB	')!', 00H
	ORG $+1
$SG129406 DB	'RtApiDs::callbackEvent: error (', 00H
$SG129411 DB	') getting current write position!', 00H
	ORG $+2
$SG128989 DB	')!', 00H
	ORG $+1
$SG129412 DB	'RtApiDs::callbackEvent: error (', 00H
$SG129421 DB	') getting current write position!', 00H
	ORG $+2
$SG128993 DB	')!', 00H
	ORG $+1
$SG129422 DB	'RtApiDs::callbackEvent: error (', 00H
$SG129431 DB	') locking buffer during playback!', 00H
	ORG $+2
$SG128997 DB	')!', 00H
	ORG $+1
$SG129432 DB	'RtApiDs::callbackEvent: error (', 00H
$SG129435 DB	') unlocking buffer during playback!', 00H
	ORG $+4
$SG129436 DB	'RtApiDs::callbackEvent: error (', 00H
$SG129444 DB	') getting current read position!', 00H
	ORG $+7
$SG129445 DB	'RtApiDs::callbackEvent: error (', 00H
$SG129457 DB	') getting current read position!', 00H
	ORG $+7
$SG129458 DB	'RtApiDs::callbackEvent: error (', 00H
$SG129461 DB	') locking capture buffer!', 00H
	ORG $+6
$SG129462 DB	'RtApiDs::callbackEvent: error (', 00H
$SG129468 DB	') unlocking capture buffer!', 00H
	ORG $+4
$SG129469 DB	'RtApiDs::callbackEvent: error (', 00H
$SG128446 DB	'RtApiDs::getDeviceInfo: no devices found!', 00H
	ORG $+6
$SG128448 DB	'RtApiDs::getDeviceInfo: device ID is invalid!', 00H
	ORG $+2
$SG128453 DB	') opening output device (', 00H
	ORG $+6
$SG128454 DB	'RtApiDs::getDeviceInfo: error (', 00H
$SG128457 DB	') getting capabilities!', 00H
$SG128458 DB	'RtApiDs::getDeviceInfo: error (', 00H
$SG128469 DB	') opening input device (', 00H
	ORG $+7
$SG128470 DB	'RtApiDs::getDeviceInfo: error (', 00H
$SG128473 DB	') getting object capabilities (', 00H
$SG128474 DB	'RtApiDs::getDeviceInfo: error (', 00H
$SG129546 DB	'Default Device', 00H
	ORG $+1
$SG129608 DB	'Already allocated', 00H
	ORG $+6
$SG129610 DB	'Control unavailable', 00H
	ORG $+4
$SG129612 DB	'Invalid parameter', 00H
	ORG $+6
$SG129614 DB	'Invalid call', 00H
	ORG $+3
$SG129616 DB	'Generic error', 00H
	ORG $+2
$SG129618 DB	'Priority level needed', 00H
	ORG $+2
$SG129620 DB	'Out of memory', 00H
	ORG $+2
$SG129622 DB	'The sample rate or the channel format is not supported', 00H
	ORG $+1
$SG129624 DB	'Not supported', 00H
	ORG $+2
$SG129626 DB	'No driver', 00H
	ORG $+6
$SG129628 DB	'Already initialized', 00H
	ORG $+4
$SG129630 DB	'No aggregation', 00H
	ORG $+1
$SG129632 DB	'Buffer lost', 00H
	ORG $+4
$SG129634 DB	'Another application already has priority', 00H
	ORG $+7
$SG129636 DB	'Uninitialized', 00H
	ORG $+2
$SG129638 DB	'DirectSound unknown error', 00H
	ORG $+6
$SG129667 DB	'RtApi:: a stream is not open!', 00H
	ORG $+2
$SG129689 DB	'RtApi::formatBytes: undefined format.', 00H
	ORG $+10
$SG128906 DB	'RtApiDs::probeDeviceOpen: DirectSound does not support m'
	DB	'ore than 2 channels per device.', 00H
$SG128908 DB	'RtApiDs::probeDeviceOpen: no devices found!', 00H
	ORG $+4
$SG128910 DB	'RtApiDs::probeDeviceOpen: device ID is invalid!', 00H
$SG128914 DB	') does not support output!', 00H
	ORG $+5
$SG128915 DB	'RtApiDs::probeDeviceOpen: device (', 00H
	ORG $+5
$SG128917 DB	') does not support input!', 00H
	ORG $+6
$SG128918 DB	'RtApiDs::probeDeviceOpen: device (', 00H
	ORG $+5
$SG128926 DB	') opening output device (', 00H
	ORG $+6
$SG128927 DB	'RtApiDs::probeDeviceOpen: error (', 00H
	ORG $+6
$SG128930 DB	') getting capabilities (', 00H
	ORG $+7
$SG128931 DB	'RtApiDs::probeDeviceOpen: error (', 00H
	ORG $+6
$SG128933 DB	') does not support stereo playback.', 00H
	ORG $+4
$SG128934 DB	'RtApiDs::getDeviceInfo: the output device (', 00H
	ORG $+4
$SG128940 DB	') setting cooperative level (', 00H
	ORG $+2
$SG128941 DB	'RtApiDs::probeDeviceOpen: error (', 00H
	ORG $+6
$SG128944 DB	') accessing primary buffer (', 00H
	ORG $+3
$SG128945 DB	'RtApiDs::probeDeviceOpen: error (', 00H
	ORG $+6
$SG128948 DB	') setting primary buffer format (', 00H
	ORG $+6
$SG128949 DB	'RtApiDs::probeDeviceOpen: error (', 00H
	ORG $+6
$SG128953 DB	') creating secondary buffer (', 00H
	ORG $+2
$SG128954 DB	'RtApiDs::probeDeviceOpen: error (', 00H
	ORG $+6
$SG128957 DB	') getting buffer settings (', 00H
	ORG $+4
$SG128958 DB	'RtApiDs::probeDeviceOpen: error (', 00H
	ORG $+6
$SG128961 DB	') locking buffer (', 00H
	ORG $+5
$SG128962 DB	'RtApiDs::probeDeviceOpen: error (', 00H
	ORG $+6
$SG128965 DB	') unlocking buffer (', 00H
	ORG $+3
$SG128966 DB	'RtApiDs::probeDeviceOpen: error (', 00H
	ORG $+6
$SG128970 DB	') opening input device (', 00H
	ORG $+7
$SG128971 DB	'RtApiDs::probeDeviceOpen: error (', 00H
	ORG $+6
$SG128974 DB	') getting input capabilities (', 00H
	ORG $+1
$SG128975 DB	'RtApiDs::probeDeviceOpen: error (', 00H
	ORG $+6
$SG128977 DB	'RtApiDs::getDeviceInfo: the input device does not suppor'
	DB	't requested input channels.', 00H
	ORG $+4
$SG128986 DB	') creating input buffer (', 00H
	ORG $+6
$SG128987 DB	'RtApiDs::probeDeviceOpen: error (', 00H
	ORG $+6
$SG128990 DB	') getting buffer settings (', 00H
	ORG $+4
$SG128991 DB	'RtApiDs::probeDeviceOpen: error (', 00H
	ORG $+6
$SG128994 DB	') locking input buffer (', 00H
	ORG $+7
$SG128995 DB	'RtApiDs::probeDeviceOpen: error (', 00H
	ORG $+6
$SG128998 DB	') unlocking input buffer (', 00H
	ORG $+5
$SG128999 DB	'RtApiDs::probeDeviceOpen: error (', 00H
	ORG $+6
$SG129006 DB	'RtApiDs::probeDeviceOpen: error allocating user buffer m'
	DB	'emory.', 00H
	ORG $+9
$SG129015 DB	'RtApiDs::probeDeviceOpen: error allocating device buffer'
	DB	' memory.', 00H
	ORG $+7
$SG129022 DB	'RtApiDs::probeDeviceOpen: error allocating AsioHandle me'
	DB	'mory.', 00H
CONST	ENDS
PUBLIC	fabsl
PUBLIC	frexpl
PUBLIC	__local_stdio_printf_options
PUBLIC	??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
PUBLIC	_vsprintf_s_l
PUBLIC	sprintf_s
PUBLIC	??0exception@std@@QEAA@QEBD@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	??3@YAXPEAX0@Z					; operator delete
PUBLIC	?compare@?$char_traits@D@std@@SAHPEBD0_K@Z	; std::char_traits<char>::compare
PUBLIC	?length@?$char_traits@D@std@@SA_KPEBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAPEADPEAD_KD@Z	; std::char_traits<char>::assign
PUBLIC	?assign@?$char_traits@D@std@@SAXAEADAEBD@Z	; std::char_traits<char>::assign
PUBLIC	?eq@?$char_traits@D@std@@SA_NAEBD0@Z		; std::char_traits<char>::eq
PUBLIC	?to_char_type@?$char_traits@D@std@@SADAEBH@Z	; std::char_traits<char>::to_char_type
PUBLIC	?to_int_type@?$char_traits@D@std@@SAHAEBD@Z	; std::char_traits<char>::to_int_type
PUBLIC	?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z	; std::char_traits<char>::eq_int_type
PUBLIC	?not_eof@?$char_traits@D@std@@SAHAEBH@Z		; std::char_traits<char>::not_eof
PUBLIC	?eof@?$char_traits@D@std@@SAHXZ			; std::char_traits<char>::eof
PUBLIC	?_Orphan_all@_Container_base0@std@@QEAAXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?_Swap_all@_Container_base0@std@@QEAAXAEAU12@@Z	; std::_Container_base0::_Swap_all
PUBLIC	?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z	; std::_Iterator_base0::_Adopt
PUBLIC	?_Allocate@std@@YAPEAX_K0_N@Z			; std::_Allocate
PUBLIC	?_Deallocate@std@@YAXPEAX_K1@Z			; std::_Deallocate
PUBLIC	?_Init_atomic_counter@std@@YAXAEAKK@Z		; std::_Init_atomic_counter
PUBLIC	??0?$allocator@D@std@@QEAA@XZ			; std::allocator<char>::allocator<char>
PUBLIC	??0?$allocator@D@std@@QEAA@AEBV01@@Z		; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QEAAXPEAD_K@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QEAAPEAD_K@Z	; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QEBA_KXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z ; std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction
PUBLIC	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBA?AU12@U_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<char> >::select_on_container_copy_construction
PUBLIC	?address@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBAPEADAEAD@Z ; std::_Wrap_alloc<std::allocator<char> >::address
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@$$QEAU01@@Z ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	??4?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAAEAU01@$$QEAU01@@Z ; std::_Wrap_alloc<std::allocator<char> >::operator=
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAPEAD_K@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAD_K@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBA_KU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
PUBLIC	?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAPEBDXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
PUBLIC	??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Copy_alloc
PUBLIC	?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
PUBLIC	?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Bx
PUBLIC	?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
PUBLIC	?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEB_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
PUBLIC	?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
PUBLIC	??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0AEBV12@00@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
PUBLIC	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0PEBD0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
PUBLIC	?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
PUBLIC	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
PUBLIC	?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
PUBLIC	??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
PUBLIC	?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
PUBLIC	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
PUBLIC	?_Traits_compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAHQEBD_K01@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Traits_compare
PUBLIC	?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Clamp_suffix_size
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAHAEBV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
PUBLIC	?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
PUBLIC	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_N_K_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_NPEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Check_offset
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0runtime_error@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
PUBLIC	??0runtime_error@std@@QEAA@PEBD@Z		; std::runtime_error::runtime_error
PUBLIC	??1runtime_error@std@@UEAA@XZ			; std::runtime_error::~runtime_error
PUBLIC	??0runtime_error@std@@QEAA@AEBV01@@Z		; std::runtime_error::runtime_error
PUBLIC	??_Gruntime_error@std@@UEAAPEAXI@Z		; std::runtime_error::`scalar deleting destructor'
PUBLIC	??0bad_cast@std@@QEAA@XZ			; std::bad_cast::bad_cast
PUBLIC	??1bad_cast@std@@UEAA@XZ			; std::bad_cast::~bad_cast
PUBLIC	??0bad_cast@std@@QEAA@AEBV01@@Z			; std::bad_cast::bad_cast
PUBLIC	??_Gbad_cast@std@@UEAAPEAXI@Z			; std::bad_cast::`scalar deleting destructor'
PUBLIC	??0_Locinfo@std@@QEAA@PEBD@Z			; std::_Locinfo::_Locinfo
PUBLIC	??1_Locinfo@std@@QEAA@XZ			; std::_Locinfo::~_Locinfo
PUBLIC	?_Getctype@_Locinfo@std@@QEBA?AU_Ctypevec@@XZ	; std::_Locinfo::_Getctype
PUBLIC	?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ	; std::_Locinfo::_Getcvt
PUBLIC	?_Getlconv@_Locinfo@std@@QEBAPEBUlconv@@XZ	; std::_Locinfo::_Getlconv
PUBLIC	?_Getfalse@_Locinfo@std@@QEBAPEBDXZ		; std::_Locinfo::_Getfalse
PUBLIC	?_Gettrue@_Locinfo@std@@QEBAPEBDXZ		; std::_Locinfo::_Gettrue
PUBLIC	??0?$_Yarn@D@std@@QEAA@XZ			; std::_Yarn<char>::_Yarn<char>
PUBLIC	??1?$_Yarn@D@std@@QEAA@XZ			; std::_Yarn<char>::~_Yarn<char>
PUBLIC	?c_str@?$_Yarn@D@std@@QEBAPEBDXZ		; std::_Yarn<char>::c_str
PUBLIC	?_Tidy@?$_Yarn@D@std@@AEAAXXZ			; std::_Yarn<char>::_Tidy
PUBLIC	??0?$_Yarn@_W@std@@QEAA@XZ			; std::_Yarn<wchar_t>::_Yarn<wchar_t>
PUBLIC	??1?$_Yarn@_W@std@@QEAA@XZ			; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
PUBLIC	?_Tidy@?$_Yarn@_W@std@@AEAAXXZ			; std::_Yarn<wchar_t>::_Tidy
PUBLIC	??1_Facet_base@std@@UEAA@XZ			; std::_Facet_base::~_Facet_base
PUBLIC	??0_Facet_base@std@@QEAA@XZ			; std::_Facet_base::_Facet_base
PUBLIC	??_G_Facet_base@std@@UEAAPEAXI@Z		; std::_Facet_base::`scalar deleting destructor'
PUBLIC	??0id@locale@std@@QEAA@_K@Z			; std::locale::id::id
PUBLIC	??Bid@locale@std@@QEAA_KXZ			; std::locale::id::operator unsigned __int64
PUBLIC	?_Incref@facet@locale@std@@UEAAXXZ		; std::locale::facet::_Incref
PUBLIC	?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ ; std::locale::facet::_Decref
PUBLIC	??0facet@locale@std@@IEAA@_K@Z			; std::locale::facet::facet
PUBLIC	??1facet@locale@std@@MEAA@XZ			; std::locale::facet::~facet
PUBLIC	??_Gfacet@locale@std@@MEAAPEAXI@Z		; std::locale::facet::`scalar deleting destructor'
PUBLIC	??0locale@std@@QEAA@AEBV01@@Z			; std::locale::locale
PUBLIC	??0locale@std@@QEAA@XZ				; std::locale::locale
PUBLIC	??1locale@std@@QEAA@XZ				; std::locale::~locale
PUBLIC	?c_str@locale@std@@QEBAPEBDXZ			; std::locale::c_str
PUBLIC	?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z	; std::locale::_Getfacet
PUBLIC	??_Glocale@std@@QEAAPEAXI@Z			; std::locale::`scalar deleting destructor'
PUBLIC	??0ctype_base@std@@QEAA@_K@Z			; std::ctype_base::ctype_base
PUBLIC	??1ctype_base@std@@UEAA@XZ			; std::ctype_base::~ctype_base
PUBLIC	??_Gctype_base@std@@UEAAPEAXI@Z			; std::ctype_base::`scalar deleting destructor'
PUBLIC	?widen@?$ctype@D@std@@QEBADD@Z			; std::ctype<char>::widen
PUBLIC	?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z	; std::ctype<char>::widen
PUBLIC	??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z	; std::ctype<char>::ctype<char>
PUBLIC	?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z ; std::ctype<char>::_Getcat
PUBLIC	??1?$ctype@D@std@@MEAA@XZ			; std::ctype<char>::~ctype<char>
PUBLIC	?_Init@?$ctype@D@std@@IEAAXAEBV_Locinfo@2@@Z	; std::ctype<char>::_Init
PUBLIC	?_Tidy@?$ctype@D@std@@IEAAXXZ			; std::ctype<char>::_Tidy
PUBLIC	?do_tolower@?$ctype@D@std@@MEBADD@Z		; std::ctype<char>::do_tolower
PUBLIC	?do_tolower@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z	; std::ctype<char>::do_tolower
PUBLIC	?do_toupper@?$ctype@D@std@@MEBADD@Z		; std::ctype<char>::do_toupper
PUBLIC	?do_toupper@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z	; std::ctype<char>::do_toupper
PUBLIC	?do_widen@?$ctype@D@std@@MEBADD@Z		; std::ctype<char>::do_widen
PUBLIC	?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z	; std::ctype<char>::do_widen
PUBLIC	?do_narrow@?$ctype@D@std@@MEBADDD@Z		; std::ctype<char>::do_narrow
PUBLIC	?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z	; std::ctype<char>::do_narrow
PUBLIC	??_G?$ctype@D@std@@MEAAPEAXI@Z			; std::ctype<char>::`scalar deleting destructor'
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
PUBLIC	?iostream_category@std@@YAAEBVerror_category@1@XZ ; std::iostream_category
PUBLIC	??0error_category@std@@QEAA@XZ			; std::error_category::error_category
PUBLIC	??1error_category@std@@UEAA@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	??8error_category@std@@QEBA_NAEBV01@@Z		; std::error_category::operator==
PUBLIC	??_Gerror_category@std@@UEAAPEAXI@Z		; std::error_category::`scalar deleting destructor'
PUBLIC	??0error_code@std@@QEAA@HAEBVerror_category@1@@Z ; std::error_code::error_code
PUBLIC	?value@error_code@std@@QEBAHXZ			; std::error_code::value
PUBLIC	?category@error_code@std@@QEBAAEBVerror_category@2@XZ ; std::error_code::category
PUBLIC	?message@error_code@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::error_code::message
PUBLIC	??0error_condition@std@@QEAA@HAEBVerror_category@1@@Z ; std::error_condition::error_condition
PUBLIC	?value@error_condition@std@@QEBAHXZ		; std::error_condition::value
PUBLIC	?category@error_condition@std@@QEBAAEBVerror_category@2@XZ ; std::error_condition::category
PUBLIC	??8std@@YA_NAEBVerror_condition@0@0@Z		; std::operator==
PUBLIC	?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ; std::_System_error::_Makestr
PUBLIC	??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
PUBLIC	??1_System_error@std@@UEAA@XZ			; std::_System_error::~_System_error
PUBLIC	??0_System_error@std@@QEAA@AEBV01@@Z		; std::_System_error::_System_error
PUBLIC	??_G_System_error@std@@UEAAPEAXI@Z		; std::_System_error::`scalar deleting destructor'
PUBLIC	??0system_error@std@@QEAA@Verror_code@1@PEBD@Z	; std::system_error::system_error
PUBLIC	??1system_error@std@@UEAA@XZ			; std::system_error::~system_error
PUBLIC	??0system_error@std@@QEAA@AEBV01@@Z		; std::system_error::system_error
PUBLIC	??_Gsystem_error@std@@UEAAPEAXI@Z		; std::system_error::`scalar deleting destructor'
PUBLIC	??0_Generic_error_category@std@@QEAA@XZ		; std::_Generic_error_category::_Generic_error_category
PUBLIC	?name@_Generic_error_category@std@@UEBAPEBDXZ	; std::_Generic_error_category::name
PUBLIC	?message@_Generic_error_category@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
PUBLIC	??1_Generic_error_category@std@@UEAA@XZ		; std::_Generic_error_category::~_Generic_error_category
PUBLIC	??_G_Generic_error_category@std@@UEAAPEAXI@Z	; std::_Generic_error_category::`scalar deleting destructor'
PUBLIC	??0_Iostream_error_category@std@@QEAA@XZ	; std::_Iostream_error_category::_Iostream_error_category
PUBLIC	?name@_Iostream_error_category@std@@UEBAPEBDXZ	; std::_Iostream_error_category::name
PUBLIC	?message@_Iostream_error_category@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message
PUBLIC	??1_Iostream_error_category@std@@UEAA@XZ	; std::_Iostream_error_category::~_Iostream_error_category
PUBLIC	??_G_Iostream_error_category@std@@UEAAPEAXI@Z	; std::_Iostream_error_category::`scalar deleting destructor'
PUBLIC	??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
PUBLIC	??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z ; std::ios_base::failure::failure
PUBLIC	??1failure@ios_base@std@@UEAA@XZ		; std::ios_base::failure::~failure
PUBLIC	??0failure@ios_base@std@@QEAA@AEBV012@@Z	; std::ios_base::failure::failure
PUBLIC	??_Gfailure@ios_base@std@@UEAAPEAXI@Z		; std::ios_base::failure::`scalar deleting destructor'
PUBLIC	?clear@ios_base@std@@QEAAXH_N@Z			; std::ios_base::clear
PUBLIC	?clear@ios_base@std@@QEAAXH@Z			; std::ios_base::clear
PUBLIC	?rdstate@ios_base@std@@QEBAHXZ			; std::ios_base::rdstate
PUBLIC	?good@ios_base@std@@QEBA_NXZ			; std::ios_base::good
PUBLIC	?flags@ios_base@std@@QEBAHXZ			; std::ios_base::flags
PUBLIC	?precision@ios_base@std@@QEBA_JXZ		; std::ios_base::precision
PUBLIC	?width@ios_base@std@@QEBA_JXZ			; std::ios_base::width
PUBLIC	?width@ios_base@std@@QEAA_J_J@Z			; std::ios_base::width
PUBLIC	?getloc@ios_base@std@@QEBA?AVlocale@2@XZ	; std::ios_base::getloc
PUBLIC	??1ios_base@std@@UEAA@XZ			; std::ios_base::~ios_base
PUBLIC	??0ios_base@std@@IEAA@XZ			; std::ios_base::ios_base
PUBLIC	?_Init@ios_base@std@@IEAAXXZ			; std::ios_base::_Init
PUBLIC	??_Gios_base@std@@UEAAPEAXI@Z			; std::ios_base::`scalar deleting destructor'
PUBLIC	??0RtAudioError@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Type@0@@Z ; RtAudioError::RtAudioError
PUBLIC	?printMessage@RtAudioError@@UEBAXXZ		; RtAudioError::printMessage
PUBLIC	?getType@RtAudioError@@UEBAAEBW4Type@1@XZ	; RtAudioError::getType
PUBLIC	?getMessage@RtAudioError@@UEBA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; RtAudioError::getMessage
PUBLIC	??1RtAudioError@@UEAA@XZ			; RtAudioError::~RtAudioError
PUBLIC	??0RtAudioError@@QEAA@AEBV0@@Z			; RtAudioError::RtAudioError
PUBLIC	??_GRtAudioError@@UEAAPEAXI@Z			; RtAudioError::`scalar deleting destructor'
PUBLIC	??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
PUBLIC	?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::clear
PUBLIC	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
PUBLIC	?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
PUBLIC	?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
PUBLIC	?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ ; std::basic_ios<char,std::char_traits<char> >::fill
PUBLIC	?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
PUBLIC	?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IEAAXPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init
PUBLIC	??0?$basic_ios@DU?$char_traits@D@std@@@std@@IEAA@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
PUBLIC	??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
PUBLIC	??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
PUBLIC	?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z ; std::basic_ostream<char,std::char_traits<char> >::put
PUBLIC	?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
PUBLIC	??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??0?$allocator@I@std@@QEAA@XZ			; std::allocator<unsigned int>::allocator<unsigned int>
PUBLIC	??0?$allocator@I@std@@QEAA@AEBV01@@Z		; std::allocator<unsigned int>::allocator<unsigned int>
PUBLIC	?deallocate@?$allocator@I@std@@QEAAXPEAI_K@Z	; std::allocator<unsigned int>::deallocate
PUBLIC	?allocate@?$allocator@I@std@@QEAAPEAI_K@Z	; std::allocator<unsigned int>::allocate
PUBLIC	?max_size@?$allocator@I@std@@QEBA_KXZ		; std::allocator<unsigned int>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@I@std@@@std@@SA_KAEBV?$allocator@I@2@@Z ; std::allocator_traits<std::allocator<unsigned int> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAA@XZ ; std::_Wrap_alloc<std::allocator<unsigned int> >::_Wrap_alloc<std::allocator<unsigned int> >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAA@$$QEAU01@@Z ; std::_Wrap_alloc<std::allocator<unsigned int> >::_Wrap_alloc<std::allocator<unsigned int> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAPEAI_K@Z ; std::_Wrap_alloc<std::allocator<unsigned int> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAI_K@Z ; std::_Wrap_alloc<std::allocator<unsigned int> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEBA_KU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<unsigned int> >::max_size
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAA@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAXXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Orphan_all
PUBLIC	?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAXAEAV12@@Z ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Swap_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Getal
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myend
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myend
PUBLIC	??0?$_Vector_val@U?$_Simple_types@I@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<unsigned int> >::_Vector_val<std::_Simple_types<unsigned int> >
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_second
PUBLIC	??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ	; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >
PUBLIC	??0?$vector@IV?$allocator@I@std@@@std@@QEAA@$$QEAV01@@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >
PUBLIC	?_Assign_rv@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Assign_rv
PUBLIC	?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::push_back
PUBLIC	??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ	; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
PUBLIC	?capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::capacity
PUBLIC	?_Unused_capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Unused_capacity
PUBLIC	?begin@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::begin
PUBLIC	?end@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::end
PUBLIC	?size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
PUBLIC	?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::max_size
PUBLIC	??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::operator[]
PUBLIC	?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAXAEBI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::push_back
PUBLIC	?clear@?$vector@IV?$allocator@I@std@@@std@@QEAAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::clear
PUBLIC	?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IEAAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy
PUBLIC	?_Grow_to@?$vector@IV?$allocator@I@std@@@std@@IEBA_K_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Grow_to
PUBLIC	?_Inside@?$vector@IV?$allocator@I@std@@@std@@IEBA_NPEBI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Inside
PUBLIC	?_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Reallocate
PUBLIC	?_Reserve@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Reserve
PUBLIC	?_Tidy@?$vector@IV?$allocator@I@std@@@std@@IEAAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy
PUBLIC	?_Xlen@?$vector@IV?$allocator@I@std@@@std@@IEBAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@IEBAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range
PUBLIC	??0DeviceInfo@RtAudio@@QEAA@XZ			; RtAudio::DeviceInfo::DeviceInfo
PUBLIC	??1DeviceInfo@RtAudio@@QEAA@XZ			; RtAudio::DeviceInfo::~DeviceInfo
PUBLIC	??0DeviceInfo@RtAudio@@QEAA@$$QEAU01@@Z		; RtAudio::DeviceInfo::DeviceInfo
PUBLIC	?getVersion@RtAudio@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; RtAudio::getVersion
PUBLIC	?getCompiledApi@RtAudio@@SAXAEAV?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@Z ; RtAudio::getCompiledApi
PUBLIC	??0RtAudio@@QEAA@W4Api@0@@Z			; RtAudio::RtAudio
PUBLIC	??1RtAudio@@QEAA@XZ				; RtAudio::~RtAudio
PUBLIC	?openStream@RtAudio@@QEAAXPEAUStreamParameters@1@0KIPEAIP6AHPEAX2INI2@Z2PEAUStreamOptions@1@P6AXW4Type@RtAudioError@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@Z ; RtAudio::openStream
PUBLIC	?openRtApi@RtAudio@@IEAAXW4Api@1@@Z		; RtAudio::openRtApi
PUBLIC	??0CallbackInfo@@QEAA@XZ			; CallbackInfo::CallbackInfo
PUBLIC	??4S24@@QEAAAEAV0@AEBH@Z			; S24::operator=
PUBLIC	?asInt@S24@@QEAAHXZ				; S24::asInt
PUBLIC	??0RtApi@@QEAA@XZ				; RtApi::RtApi
PUBLIC	??1RtApi@@UEAA@XZ				; RtApi::~RtApi
PUBLIC	?getDefaultInputDevice@RtApi@@UEAAIXZ		; RtApi::getDefaultInputDevice
PUBLIC	?getDefaultOutputDevice@RtApi@@UEAAIXZ		; RtApi::getDefaultOutputDevice
PUBLIC	?openStream@RtApi@@QEAAXPEAUStreamParameters@RtAudio@@0KIPEAIP6AHPEAX2INI2@Z2PEAUStreamOptions@3@P6AXW4Type@RtAudioError@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@Z ; RtApi::openStream
PUBLIC	?closeStream@RtApi@@UEAAXXZ			; RtApi::closeStream
PUBLIC	?getStreamLatency@RtApi@@QEAAJXZ		; RtApi::getStreamLatency
PUBLIC	?getStreamSampleRate@RtApi@@QEAAIXZ		; RtApi::getStreamSampleRate
PUBLIC	?getStreamTime@RtApi@@UEAANXZ			; RtApi::getStreamTime
PUBLIC	?setStreamTime@RtApi@@UEAAXN@Z			; RtApi::setStreamTime
PUBLIC	??0?$allocator@H@std@@QEAA@XZ			; std::allocator<int>::allocator<int>
PUBLIC	?deallocate@?$allocator@H@std@@QEAAXPEAH_K@Z	; std::allocator<int>::deallocate
PUBLIC	?allocate@?$allocator@H@std@@QEAAPEAH_K@Z	; std::allocator<int>::allocate
PUBLIC	?max_size@?$allocator@H@std@@QEBA_KXZ		; std::allocator<int>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z ; std::allocator_traits<std::allocator<int> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAA@XZ ; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAPEAH_K@Z ; std::_Wrap_alloc<std::allocator<int> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAH_K@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEBA_KU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<int> >::max_size
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Orphan_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend
PUBLIC	??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second
PUBLIC	??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
PUBLIC	?push_back@?$vector@HV?$allocator@H@std@@@std@@QEAAX$$QEAH@Z ; std::vector<int,std::allocator<int> >::push_back
PUBLIC	??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
PUBLIC	?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::capacity
PUBLIC	?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::_Unused_capacity
PUBLIC	?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::size
PUBLIC	?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::max_size
PUBLIC	??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
PUBLIC	?push_back@?$vector@HV?$allocator@H@std@@@std@@QEAAXAEBH@Z ; std::vector<int,std::allocator<int> >::push_back
PUBLIC	?clear@?$vector@HV?$allocator@H@std@@@std@@QEAAXXZ ; std::vector<int,std::allocator<int> >::clear
PUBLIC	?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IEAAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
PUBLIC	?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IEBA_K_K@Z ; std::vector<int,std::allocator<int> >::_Grow_to
PUBLIC	?_Inside@?$vector@HV?$allocator@H@std@@@std@@IEBA_NPEBH@Z ; std::vector<int,std::allocator<int> >::_Inside
PUBLIC	?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z ; std::vector<int,std::allocator<int> >::_Reallocate
PUBLIC	?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z ; std::vector<int,std::allocator<int> >::_Reserve
PUBLIC	?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IEAAXXZ ; std::vector<int,std::allocator<int> >::_Tidy
PUBLIC	?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IEBAXXZ ; std::vector<int,std::allocator<int> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range
PUBLIC	??0ConvertInfo@RtApi@@QEAA@XZ			; RtApi::ConvertInfo::ConvertInfo
PUBLIC	??1ConvertInfo@RtApi@@QEAA@XZ			; RtApi::ConvertInfo::~ConvertInfo
PUBLIC	??0RtApiStream@RtApi@@QEAA@XZ			; RtApi::RtApiStream::RtApiStream
PUBLIC	??1RtApiStream@RtApi@@QEAA@XZ			; RtApi::RtApiStream::~RtApiStream
PUBLIC	??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAA@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
PUBLIC	??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
PUBLIC	?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
PUBLIC	?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
PUBLIC	?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputn
PUBLIC	?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
PUBLIC	?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
PUBLIC	?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
PUBLIC	?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
PUBLIC	?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pbase
PUBLIC	?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
PUBLIC	?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::egptr
PUBLIC	?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::gbump
PUBLIC	?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg
PUBLIC	?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
PUBLIC	?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
PUBLIC	?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
PUBLIC	?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbump
PUBLIC	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD0@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
PUBLIC	?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
PUBLIC	?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
PUBLIC	?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
PUBLIC	?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init
PUBLIC	?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::overflow
PUBLIC	?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
PUBLIC	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
PUBLIC	?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ ; std::basic_streambuf<char,std::char_traits<char> >::underflow
PUBLIC	?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ ; std::basic_streambuf<char,std::char_traits<char> >::uflow
PUBLIC	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
PUBLIC	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
PUBLIC	?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
PUBLIC	?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
PUBLIC	?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAPEAV12@PEAD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
PUBLIC	?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ ; std::basic_streambuf<char,std::char_traits<char> >::sync
PUBLIC	?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z ; std::basic_streambuf<char,std::char_traits<char> >::imbue
PUBLIC	??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
PUBLIC	??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
PUBLIC	?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
PUBLIC	?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
PUBLIC	?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXPEBD_KH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
PUBLIC	?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
PUBLIC	??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
PUBLIC	?probeDeviceOpen@RtApi@@MEAA_NIW4StreamMode@1@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z ; RtApi::probeDeviceOpen
PUBLIC	?tickStreamTime@RtApi@@IEAAXXZ			; RtApi::tickStreamTime
PUBLIC	?clearStreamInfo@RtApi@@IEAAXXZ			; RtApi::clearStreamInfo
PUBLIC	?verifyStream@RtApi@@IEAAXXZ			; RtApi::verifyStream
PUBLIC	?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z	; RtApi::error
PUBLIC	?convertBuffer@RtApi@@IEAAXPEAD0AEAUConvertInfo@1@@Z ; RtApi::convertBuffer
PUBLIC	?byteSwapBuffer@RtApi@@IEAAXPEADIK@Z		; RtApi::byteSwapBuffer
PUBLIC	?formatBytes@RtApi@@IEAAIK@Z			; RtApi::formatBytes
PUBLIC	?setConvertInfo@RtApi@@IEAAXW4StreamMode@1@I@Z	; RtApi::setConvertInfo
PUBLIC	??_GRtApi@@UEAAPEAXI@Z				; RtApi::`scalar deleting destructor'
PUBLIC	??0RtApiDs@@QEAA@XZ				; RtApiDs::RtApiDs
PUBLIC	??1RtApiDs@@UEAA@XZ				; RtApiDs::~RtApiDs
PUBLIC	?getCurrentApi@RtApiDs@@UEAA?AW4Api@RtAudio@@XZ	; RtApiDs::getCurrentApi
PUBLIC	?getDeviceCount@RtApiDs@@UEAAIXZ		; RtApiDs::getDeviceCount
PUBLIC	?getDefaultOutputDevice@RtApiDs@@UEAAIXZ	; RtApiDs::getDefaultOutputDevice
PUBLIC	?getDefaultInputDevice@RtApiDs@@UEAAIXZ		; RtApiDs::getDefaultInputDevice
PUBLIC	?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z ; RtApiDs::getDeviceInfo
PUBLIC	?closeStream@RtApiDs@@UEAAXXZ			; RtApiDs::closeStream
PUBLIC	?startStream@RtApiDs@@UEAAXXZ			; RtApiDs::startStream
PUBLIC	?stopStream@RtApiDs@@UEAAXXZ			; RtApiDs::stopStream
PUBLIC	?abortStream@RtApiDs@@UEAAXXZ			; RtApiDs::abortStream
PUBLIC	?callbackEvent@RtApiDs@@QEAAXXZ			; RtApiDs::callbackEvent
PUBLIC	??0?$allocator@UDsDevice@@@std@@QEAA@XZ		; std::allocator<DsDevice>::allocator<DsDevice>
PUBLIC	?deallocate@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@_K@Z ; std::allocator<DsDevice>::deallocate
PUBLIC	?allocate@?$allocator@UDsDevice@@@std@@QEAAPEAUDsDevice@@_K@Z ; std::allocator<DsDevice>::allocate
PUBLIC	?max_size@?$allocator@UDsDevice@@@std@@QEBA_KXZ	; std::allocator<DsDevice>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SA_KAEBV?$allocator@UDsDevice@@@2@@Z ; std::allocator_traits<std::allocator<DsDevice> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ ; std::_Wrap_alloc<std::allocator<DsDevice> >::_Wrap_alloc<std::allocator<DsDevice> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAPEAUDsDevice@@_K@Z ; std::_Wrap_alloc<std::allocator<DsDevice> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@_K@Z ; std::_Wrap_alloc<std::allocator<DsDevice> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<DsDevice> >::max_size
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAA@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAXXZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Orphan_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Getal
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myend
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myend
PUBLIC	??0?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<DsDevice> >::_Vector_val<std::_Simple_types<DsDevice> >
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<DsDevice> >,std::_Vector_val<std::_Simple_types<DsDevice> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<DsDevice> >,std::_Vector_val<std::_Simple_types<DsDevice> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<DsDevice> >,std::_Vector_val<std::_Simple_types<DsDevice> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<DsDevice> >,std::_Vector_val<std::_Simple_types<DsDevice> >,1>::_Get_second
PUBLIC	??0?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ ; std::vector<DsDevice,std::allocator<DsDevice> >::vector<DsDevice,std::allocator<DsDevice> >
PUBLIC	??1?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ ; std::vector<DsDevice,std::allocator<DsDevice> >::~vector<DsDevice,std::allocator<DsDevice> >
PUBLIC	?capacity@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ ; std::vector<DsDevice,std::allocator<DsDevice> >::capacity
PUBLIC	?_Unused_capacity@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ ; std::vector<DsDevice,std::allocator<DsDevice> >::_Unused_capacity
PUBLIC	?begin@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@XZ ; std::vector<DsDevice,std::allocator<DsDevice> >::begin
PUBLIC	?_Make_iter@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::_Make_iter
PUBLIC	?size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ ; std::vector<DsDevice,std::allocator<DsDevice> >::size
PUBLIC	?max_size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ ; std::vector<DsDevice,std::allocator<DsDevice> >::max_size
PUBLIC	??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
PUBLIC	?push_back@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAXAEBUDsDevice@@@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::push_back
PUBLIC	?erase@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::erase
PUBLIC	?_Destroy@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAXPEAUDsDevice@@0@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::_Destroy
PUBLIC	?_Grow_to@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBA_K_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::_Grow_to
PUBLIC	?_Inside@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBA_NPEBUDsDevice@@@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::_Inside
PUBLIC	?_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::_Reallocate
PUBLIC	?_Reserve@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::_Reserve
PUBLIC	?_Tidy@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAXXZ ; std::vector<DsDevice,std::allocator<DsDevice> >::_Tidy
PUBLIC	?_Xlen@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBAXXZ ; std::vector<DsDevice,std::allocator<DsDevice> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBAXPEAUDsDevice@@0@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::_Orphan_range
PUBLIC	?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z ; RtApiDs::probeDeviceOpen
PUBLIC	??_GRtApiDs@@UEAAPEAXI@Z			; RtApiDs::`scalar deleting destructor'
PUBLIC	??0?$allocator@W4Api@RtAudio@@@std@@QEAA@XZ	; std::allocator<enum RtAudio::Api>::allocator<enum RtAudio::Api>
PUBLIC	?deallocate@?$allocator@W4Api@RtAudio@@@std@@QEAAXPEAW4Api@RtAudio@@_K@Z ; std::allocator<enum RtAudio::Api>::deallocate
PUBLIC	?allocate@?$allocator@W4Api@RtAudio@@@std@@QEAAPEAW4Api@RtAudio@@_K@Z ; std::allocator<enum RtAudio::Api>::allocate
PUBLIC	?max_size@?$allocator@W4Api@RtAudio@@@std@@QEBA_KXZ ; std::allocator<enum RtAudio::Api>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@W4Api@RtAudio@@@std@@@std@@SA_KAEBV?$allocator@W4Api@RtAudio@@@2@@Z ; std::allocator_traits<std::allocator<enum RtAudio::Api> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ ; std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >::_Wrap_alloc<std::allocator<enum RtAudio::Api> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAPEAW4Api@RtAudio@@_K@Z ; std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXPEAW4Api@RtAudio@@_K@Z ; std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >::max_size
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAA@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAXXZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Orphan_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Getal
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myend
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myend
PUBLIC	??0?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >::_Vector_val<std::_Simple_types<enum RtAudio::Api> >
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >,std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >,std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >,std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >,std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >,1>::_Get_second
PUBLIC	??0?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >
PUBLIC	?push_back@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAX$$QEAW4Api@RtAudio@@@Z ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::push_back
PUBLIC	??1?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::~vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >
PUBLIC	?capacity@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::capacity
PUBLIC	?_Unused_capacity@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Unused_capacity
PUBLIC	?size@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::size
PUBLIC	?max_size@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::max_size
PUBLIC	??A?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAAEAW4Api@RtAudio@@_K@Z ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::operator[]
PUBLIC	?clear@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXXZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::clear
PUBLIC	?_Destroy@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAXPEAW4Api@RtAudio@@0@Z ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Destroy
PUBLIC	?_Grow_to@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBA_K_K@Z ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Grow_to
PUBLIC	?_Inside@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBA_NPEBW4Api@RtAudio@@@Z ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Inside
PUBLIC	?_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Reallocate
PUBLIC	?_Reserve@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Reserve
PUBLIC	?_Tidy@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAXXZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Tidy
PUBLIC	?_Xlen@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBAXXZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Xlen
PUBLIC	?_Orphan_range@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBAXPEAW4Api@RtAudio@@0@Z ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Orphan_range
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??0DsHandle@@QEAA@XZ				; DsHandle::DsHandle
PUBLIC	??0DsDevice@@QEAA@XZ				; DsDevice::DsDevice
PUBLIC	??1DsDevice@@QEAA@XZ				; DsDevice::~DsDevice
PUBLIC	??0DsDevice@@QEAA@AEBU0@@Z			; DsDevice::DsDevice
PUBLIC	??0DsDevice@@QEAA@$$QEAU0@@Z			; DsDevice::DsDevice
PUBLIC	??4DsDevice@@QEAAAEAU0@$$QEAU0@@Z		; DsDevice::operator=
PUBLIC	??_GDsDevice@@QEAAPEAXI@Z			; DsDevice::`scalar deleting destructor'
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAA@PEAUDsDevice@@PEBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >
PUBLIC	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAAAEAV01@_J@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >::operator+=
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAA@PEAUDsDevice@@PEBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >
PUBLIC	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAAAEAV01@_J@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >::operator+=
PUBLIC	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEBA?AV01@_J@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >::operator+
PUBLIC	??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >
PUBLIC	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@QEBAPEAIXZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Unchecked
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@0@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > > >
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Move_unchecked@PEAUDsDevice@@PEAU1@@std@@YAPEAUDsDevice@@PEAU1@00@Z ; std::_Move_unchecked<DsDevice * __ptr64,DsDevice * __ptr64>
PUBLIC	??$addressof@$$CBUDsDevice@@@std@@YAPEBUDsDevice@@AEBU1@@Z ; std::addressof<DsDevice const >
PUBLIC	??$_Unfancy@UDsDevice@@@std@@YAPEAUDsDevice@@PEAU1@@Z ; std::_Unfancy<DsDevice>
PUBLIC	??$construct@UDsDevice@@AEAU1@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z ; std::_Wrap_alloc<std::allocator<DsDevice> >::construct<DsDevice,DsDevice & __ptr64>
PUBLIC	??$construct@UDsDevice@@AEBU1@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z ; std::_Wrap_alloc<std::allocator<DsDevice> >::construct<DsDevice,DsDevice const & __ptr64>
PUBLIC	??$addressof@$$CBH@std@@YAPEBHAEBH@Z		; std::addressof<int const >
PUBLIC	??$_Unfancy@H@std@@YAPEAHPEAH@Z			; std::_Unfancy<int>
PUBLIC	??$construct@HAEAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAHAEAH@Z ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int & __ptr64>
PUBLIC	??$construct@HAEBH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAHAEBH@Z ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int const & __ptr64>
PUBLIC	??$addressof@H@std@@YAPEAHAEAH@Z		; std::addressof<int>
PUBLIC	??$forward@H@std@@YA$$QEAHAEAH@Z		; std::forward<int>
PUBLIC	??$construct@HH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAH$$QEAH@Z ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int>
PUBLIC	??$addressof@W4Api@RtAudio@@@std@@YAPEAW4Api@RtAudio@@AEAW412@@Z ; std::addressof<enum RtAudio::Api>
PUBLIC	??$_Unfancy@W4Api@RtAudio@@@std@@YAPEAW4Api@RtAudio@@PEAW412@@Z ; std::_Unfancy<enum RtAudio::Api>
PUBLIC	??$forward@W4Api@RtAudio@@@std@@YA$$QEAW4Api@RtAudio@@AEAW412@@Z ; std::forward<enum RtAudio::Api>
PUBLIC	??$construct@W4Api@RtAudio@@W412@@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXPEAW4Api@RtAudio@@$$QEAW423@@Z ; std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >::construct<enum RtAudio::Api,enum RtAudio::Api>
PUBLIC	??$addressof@$$CBI@std@@YAPEBIAEBI@Z		; std::addressof<unsigned int const >
PUBLIC	??$_Unfancy@I@std@@YAPEAIPEAI@Z			; std::_Unfancy<unsigned int>
PUBLIC	??$construct@IAEAI@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAIAEAI@Z ; std::_Wrap_alloc<std::allocator<unsigned int> >::construct<unsigned int,unsigned int & __ptr64>
PUBLIC	??$construct@IAEBI@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAIAEBI@Z ; std::_Wrap_alloc<std::allocator<unsigned int> >::construct<unsigned int,unsigned int const & __ptr64>
PUBLIC	??$addressof@I@std@@YAPEAIAEAI@Z		; std::addressof<unsigned int>
PUBLIC	??$forward@I@std@@YA$$QEAIAEAI@Z		; std::forward<unsigned int>
PUBLIC	??$construct@II@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAI$$QEAI@Z ; std::_Wrap_alloc<std::allocator<unsigned int> >::construct<unsigned int,unsigned int>
PUBLIC	??$move@AEAU?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@AEAU10@@Z ; std::move<std::_Wrap_alloc<std::allocator<unsigned int> > & __ptr64>
PUBLIC	??$?0U?$_Wrap_alloc@V?$allocator@I@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAA@$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > ><std::_Wrap_alloc<std::allocator<unsigned int> >,void>
PUBLIC	??$forward@V?$vector@IV?$allocator@I@std@@@std@@@std@@YA$$QEAV?$vector@IV?$allocator@I@std@@@0@AEAV10@@Z ; std::forward<std::vector<unsigned int,std::allocator<unsigned int> > >
PUBLIC	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base0@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
PUBLIC	??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_JAEBV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator-
PUBLIC	??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator==
PUBLIC	?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAXAEBV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat
PUBLIC	??$?9V?$allocator@D@std@@V01@@std@@YA_NAEBU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z ; std::operator!=<std::allocator<char>,std::allocator<char> >
PUBLIC	??$?9DD@std@@YA_NAEBV?$allocator@D@0@0@Z	; std::operator!=<char,char>
PUBLIC	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base0@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
PUBLIC	??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_JAEBV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator-
PUBLIC	??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > >
PUBLIC	??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$move@AEAU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEAU10@@Z ; std::move<std::_Wrap_alloc<std::allocator<char> > & __ptr64>
PUBLIC	??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::_Wrap_alloc<std::allocator<char> >,void>
PUBLIC	??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
PUBLIC	??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ		; std::fpos<_Mbstatet>::operator __int64
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
PUBLIC	?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
PUBLIC	??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
PUBLIC	??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_J@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
PUBLIC	?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
PUBLIC	?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
PUBLIC	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
PUBLIC	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
PUBLIC	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
PUBLIC	??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
PUBLIC	??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
PUBLIC	??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
PUBLIC	??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
PUBLIC	??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
PUBLIC	?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
PUBLIC	??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >,std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >,std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >,1><>
PUBLIC	??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<DsDevice> >,std::_Vector_val<std::_Simple_types<DsDevice> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<DsDevice> >,std::_Vector_val<std::_Simple_types<DsDevice> >,1><>
PUBLIC	??$_Destroy_range@V?$allocator@UDsDevice@@@std@@PEAUDsDevice@@@std@@YAXPEAUDsDevice@@0AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<DsDevice>,DsDevice * __ptr64>
PUBLIC	??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1><>
PUBLIC	??$_Destroy_range@V?$allocator@H@std@@PEAH@std@@YAXPEAH0AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Destroy_range<std::allocator<int>,int * __ptr64>
PUBLIC	??$_Destroy_range@V?$allocator@W4Api@RtAudio@@@std@@PEAW4Api@RtAudio@@@std@@YAXPEAW4Api@RtAudio@@0AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<enum RtAudio::Api>,enum RtAudio::Api * __ptr64>
PUBLIC	??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1><>
PUBLIC	??$_Destroy_range@V?$allocator@I@std@@PEAI@std@@YAXPEAI0AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@@Z ; std::_Destroy_range<std::allocator<unsigned int>,unsigned int * __ptr64>
PUBLIC	??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
PUBLIC	?decimal_point@?$numpunct@D@std@@QEBADXZ	; std::numpunct<char>::decimal_point
PUBLIC	?thousands_sep@?$numpunct@D@std@@QEBADXZ	; std::numpunct<char>::thousands_sep
PUBLIC	?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
PUBLIC	?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
PUBLIC	?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
PUBLIC	??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z	; std::numpunct<char>::numpunct<char>
PUBLIC	?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z ; std::numpunct<char>::_Getcat
PUBLIC	??1?$numpunct@D@std@@MEAA@XZ			; std::numpunct<char>::~numpunct<char>
PUBLIC	?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z ; std::numpunct<char>::_Init
PUBLIC	?do_decimal_point@?$numpunct@D@std@@MEBADXZ	; std::numpunct<char>::do_decimal_point
PUBLIC	?do_thousands_sep@?$numpunct@D@std@@MEBADXZ	; std::numpunct<char>::do_thousands_sep
PUBLIC	?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_grouping
PUBLIC	?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_falsename
PUBLIC	?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_truename
PUBLIC	?_Tidy@?$numpunct@D@std@@AEAAXXZ		; std::numpunct<char>::_Tidy
PUBLIC	??_G?$numpunct@D@std@@MEAAPEAXI@Z		; std::numpunct<char>::`scalar deleting destructor'
PUBLIC	??$?0V?$allocator@D@std@@@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> ><std::allocator<char> >
PUBLIC	??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z ; std::_Pocma<std::_Wrap_alloc<std::allocator<char> > >
PUBLIC	??$_Pocca@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEBU10@@Z ; std::_Pocca<std::_Wrap_alloc<std::allocator<char> > >
PUBLIC	??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z	; std::addressof<char * __ptr64>
PUBLIC	??$destroy@PEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char * __ptr64>
PUBLIC	??$_Unfancy@D@std@@YAPEADPEAD@Z			; std::_Unfancy<char>
PUBLIC	??$construct@PEADAEAPEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEADAEAPEAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 & __ptr64>
PUBLIC	??$_Umove@PEAUDsDevice@@@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAPEAUDsDevice@@PEAU2@00@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::_Umove<DsDevice * __ptr64>
PUBLIC	??$_Umove@PEAH@?$vector@HV?$allocator@H@std@@@std@@IEAAPEAHPEAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int * __ptr64>
PUBLIC	??$_Umove@PEAW4Api@RtAudio@@@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAPEAW4Api@RtAudio@@PEAW423@00@Z ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Umove<enum RtAudio::Api * __ptr64>
PUBLIC	??$_Umove@PEAI@?$vector@IV?$allocator@I@std@@@std@@IEAAPEAIPEAI00@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Umove<unsigned int * __ptr64>
PUBLIC	?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z ; std::pointer_traits<char * __ptr64>::pointer_to
PUBLIC	??$addressof@D@std@@YAPEADAEAD@Z		; std::addressof<char>
PUBLIC	??0?$_Immortalizer@V_Iostream_error_category@std@@@std@@QEAA@XZ ; std::_Immortalizer<std::_Iostream_error_category>::_Immortalizer<std::_Iostream_error_category>
PUBLIC	??1?$_Immortalizer@V_Iostream_error_category@std@@@std@@QEAA@XZ ; std::_Immortalizer<std::_Iostream_error_category>::~_Immortalizer<std::_Iostream_error_category>
PUBLIC	??__F_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ@YAXXZ ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::`dynamic atexit destructor for '_Static''
PUBLIC	??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@0U?$less@X@0@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >,std::less<void> >
PUBLIC	??$_Ptr_move_cat@UDsDevice@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@AEBQEAUDsDevice@@0@Z ; std::_Ptr_move_cat<DsDevice,DsDevice>
PUBLIC	??$_Move_unchecked1@PEAUDsDevice@@PEAU1@@std@@YAPEAUDsDevice@@PEAU1@00U_General_ptr_iterator_tag@0@@Z ; std::_Move_unchecked1<DsDevice * __ptr64,DsDevice * __ptr64>
PUBLIC	??$forward@AEAUDsDevice@@@std@@YAAEAUDsDevice@@AEAU1@@Z ; std::forward<DsDevice & __ptr64>
PUBLIC	??$construct@UDsDevice@@AEAU1@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@AEAU3@@Z ; std::allocator_traits<std::allocator<DsDevice> >::construct<DsDevice,DsDevice & __ptr64>
PUBLIC	??$forward@AEBUDsDevice@@@std@@YAAEBUDsDevice@@AEBU1@@Z ; std::forward<DsDevice const & __ptr64>
PUBLIC	??$construct@UDsDevice@@AEBU1@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@AEBU3@@Z ; std::allocator_traits<std::allocator<DsDevice> >::construct<DsDevice,DsDevice const & __ptr64>
PUBLIC	??$forward@AEAH@std@@YAAEAHAEAH@Z		; std::forward<int & __ptr64>
PUBLIC	??$construct@HAEAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@PEAHAEAH@Z ; std::allocator_traits<std::allocator<int> >::construct<int,int & __ptr64>
PUBLIC	??$forward@AEBH@std@@YAAEBHAEBH@Z		; std::forward<int const & __ptr64>
PUBLIC	??$construct@HAEBH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@PEAHAEBH@Z ; std::allocator_traits<std::allocator<int> >::construct<int,int const & __ptr64>
PUBLIC	??$construct@HH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@PEAH$$QEAH@Z ; std::allocator_traits<std::allocator<int> >::construct<int,int>
PUBLIC	??$construct@W4Api@RtAudio@@W412@@?$allocator_traits@V?$allocator@W4Api@RtAudio@@@std@@@std@@SAXAEAV?$allocator@W4Api@RtAudio@@@1@PEAW4Api@RtAudio@@$$QEAW434@@Z ; std::allocator_traits<std::allocator<enum RtAudio::Api> >::construct<enum RtAudio::Api,enum RtAudio::Api>
PUBLIC	??$forward@AEAI@std@@YAAEAIAEAI@Z		; std::forward<unsigned int & __ptr64>
PUBLIC	??$construct@IAEAI@?$allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@PEAIAEAI@Z ; std::allocator_traits<std::allocator<unsigned int> >::construct<unsigned int,unsigned int & __ptr64>
PUBLIC	??$forward@AEBI@std@@YAAEBIAEBI@Z		; std::forward<unsigned int const & __ptr64>
PUBLIC	??$construct@IAEBI@?$allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@PEAIAEBI@Z ; std::allocator_traits<std::allocator<unsigned int> >::construct<unsigned int,unsigned int const & __ptr64>
PUBLIC	??$construct@II@?$allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@PEAI$$QEAI@Z ; std::allocator_traits<std::allocator<unsigned int> >::construct<unsigned int,unsigned int>
PUBLIC	??$forward@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@AEAU10@@Z ; std::forward<std::_Wrap_alloc<std::allocator<unsigned int> > >
PUBLIC	??$?0U?$_Wrap_alloc@V?$allocator@I@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1><std::_Wrap_alloc<std::allocator<unsigned int> > >
PUBLIC	??$?8V?$allocator@D@std@@V01@@std@@YA_NAEBU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z ; std::operator==<std::allocator<char>,std::allocator<char> >
PUBLIC	??$?8DD@std@@YA_NAEBV?$allocator@D@0@0@Z	; std::operator==<char,char>
PUBLIC	??$forward@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEAU10@@Z ; std::forward<std::_Wrap_alloc<std::allocator<char> > >
PUBLIC	??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><std::_Wrap_alloc<std::allocator<char> > >
PUBLIC	??$_Destroy_range1@V?$allocator@UDsDevice@@@std@@PEAUDsDevice@@@std@@YAXPEAUDsDevice@@0AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<DsDevice>,DsDevice * __ptr64>
PUBLIC	??$_Destroy_range1@V?$allocator@H@std@@PEAH@std@@YAXPEAH0AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<int>,int * __ptr64>
PUBLIC	??$_Destroy_range1@V?$allocator@W4Api@RtAudio@@@std@@PEAW4Api@RtAudio@@@std@@YAXPEAW4Api@RtAudio@@0AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<enum RtAudio::Api>,enum RtAudio::Api * __ptr64>
PUBLIC	??$_Destroy_range1@V?$allocator@I@std@@PEAI@std@@YAXPEAI0AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<unsigned int>,unsigned int * __ptr64>
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ; std::forward<std::allocator<char> >
PUBLIC	??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0U?$integral_constant@_N$00@0@@Z ; std::_Pocma<std::_Wrap_alloc<std::allocator<char> > >
PUBLIC	??$_Pocca@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEBU10@U?$integral_constant@_N$0A@@0@@Z ; std::_Pocca<std::_Wrap_alloc<std::allocator<char> > >
PUBLIC	??$destroy@PEAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@PEAPEAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char * __ptr64>
PUBLIC	??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z	; std::forward<char * __ptr64 & __ptr64>
PUBLIC	??$construct@PEADAEAPEAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@PEAPEADAEAPEAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 & __ptr64>
PUBLIC	??$_Uninitialized_move@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z ; std::_Uninitialized_move<DsDevice * __ptr64,DsDevice * __ptr64,std::allocator<DsDevice> >
PUBLIC	??$_Uninitialized_move@PEAHPEAHV?$allocator@H@std@@@std@@YAPEAHPEAH00AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Uninitialized_move<int * __ptr64,int * __ptr64,std::allocator<int> >
PUBLIC	??$_Uninitialized_move@PEAW4Api@RtAudio@@PEAW412@V?$allocator@W4Api@RtAudio@@@std@@@std@@YAPEAW4Api@RtAudio@@PEAW412@00AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@@Z ; std::_Uninitialized_move<enum RtAudio::Api * __ptr64,enum RtAudio::Api * __ptr64,std::allocator<enum RtAudio::Api> >
PUBLIC	??$_Uninitialized_move@PEAIPEAIV?$allocator@I@std@@@std@@YAPEAIPEAI00AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@@Z ; std::_Uninitialized_move<unsigned int * __ptr64,unsigned int * __ptr64,std::allocator<unsigned int> >
PUBLIC	??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
PUBLIC	??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z	; std::_Maklocchr<char>
PUBLIC	??$_Getvals@D@?$numpunct@D@std@@IEAAXDPEBUlconv@@U_Cvtvec@@@Z ; std::numpunct<char>::_Getvals<char>
PUBLIC	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@YAPEAIV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<unsigned int> > >
PUBLIC	??$_Sort_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z ; std::_Sort_unchecked<unsigned int * __ptr64,std::less<void> >
PUBLIC	??$move@AEAUDsDevice@@@std@@YA$$QEAUDsDevice@@AEAU1@@Z ; std::move<DsDevice & __ptr64>
PUBLIC	??$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z ; std::allocator<DsDevice>::construct<DsDevice,DsDevice & __ptr64>
PUBLIC	??$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z ; std::allocator<DsDevice>::construct<DsDevice,DsDevice const & __ptr64>
PUBLIC	??$construct@HAEAH@?$allocator@H@std@@QEAAXPEAHAEAH@Z ; std::allocator<int>::construct<int,int & __ptr64>
PUBLIC	??$construct@HAEBH@?$allocator@H@std@@QEAAXPEAHAEBH@Z ; std::allocator<int>::construct<int,int const & __ptr64>
PUBLIC	??$construct@HH@?$allocator@H@std@@QEAAXPEAH$$QEAH@Z ; std::allocator<int>::construct<int,int>
PUBLIC	??$construct@W4Api@RtAudio@@W412@@?$allocator@W4Api@RtAudio@@@std@@QEAAXPEAW4Api@RtAudio@@$$QEAW423@@Z ; std::allocator<enum RtAudio::Api>::construct<enum RtAudio::Api,enum RtAudio::Api>
PUBLIC	??$construct@IAEAI@?$allocator@I@std@@QEAAXPEAIAEAI@Z ; std::allocator<unsigned int>::construct<unsigned int,unsigned int & __ptr64>
PUBLIC	??$construct@IAEBI@?$allocator@I@std@@QEAAXPEAIAEBI@Z ; std::allocator<unsigned int>::construct<unsigned int,unsigned int const & __ptr64>
PUBLIC	??$construct@II@?$allocator@I@std@@QEAAXPEAI$$QEAI@Z ; std::allocator<unsigned int>::construct<unsigned int,unsigned int>
PUBLIC	??$destroy@UDsDevice@@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@@Z ; std::_Wrap_alloc<std::allocator<DsDevice> >::destroy<DsDevice>
PUBLIC	??$destroy@PEAD@?$allocator@D@std@@QEAAXPEAPEAD@Z ; std::allocator<char>::destroy<char * __ptr64>
PUBLIC	??$construct@PEADAEAPEAD@?$allocator@D@std@@QEAAXPEAPEADAEAPEAD@Z ; std::allocator<char>::construct<char * __ptr64,char * __ptr64 & __ptr64>
PUBLIC	??$_Unchecked@PEAUDsDevice@@@std@@YAPEAUDsDevice@@PEAU1@@Z ; std::_Unchecked<DsDevice * __ptr64>
PUBLIC	??$_Uninitialized_move_al_unchecked@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z ; std::_Uninitialized_move_al_unchecked<DsDevice * __ptr64,DsDevice * __ptr64,std::allocator<DsDevice> >
PUBLIC	??$_Rechecked@PEAUDsDevice@@PEAU1@@std@@YAAEAPEAUDsDevice@@AEAPEAU1@PEAU1@@Z ; std::_Rechecked<DsDevice * __ptr64,DsDevice * __ptr64>
PUBLIC	??$_Unchecked@PEAH@std@@YAPEAHPEAH@Z		; std::_Unchecked<int * __ptr64>
PUBLIC	??$_Uninitialized_move_al_unchecked@PEAHPEAHV?$allocator@H@std@@@std@@YAPEAHPEAH00AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Uninitialized_move_al_unchecked<int * __ptr64,int * __ptr64,std::allocator<int> >
PUBLIC	??$_Rechecked@PEAHPEAH@std@@YAAEAPEAHAEAPEAHPEAH@Z ; std::_Rechecked<int * __ptr64,int * __ptr64>
PUBLIC	??$_Unchecked@PEAW4Api@RtAudio@@@std@@YAPEAW4Api@RtAudio@@PEAW412@@Z ; std::_Unchecked<enum RtAudio::Api * __ptr64>
PUBLIC	??$_Uninitialized_move_al_unchecked@PEAW4Api@RtAudio@@PEAW412@V?$allocator@W4Api@RtAudio@@@std@@@std@@YAPEAW4Api@RtAudio@@PEAW412@00AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@@Z ; std::_Uninitialized_move_al_unchecked<enum RtAudio::Api * __ptr64,enum RtAudio::Api * __ptr64,std::allocator<enum RtAudio::Api> >
PUBLIC	??$_Rechecked@PEAW4Api@RtAudio@@PEAW412@@std@@YAAEAPEAW4Api@RtAudio@@AEAPEAW412@PEAW412@@Z ; std::_Rechecked<enum RtAudio::Api * __ptr64,enum RtAudio::Api * __ptr64>
PUBLIC	??$_Unchecked@PEAI@std@@YAPEAIPEAI@Z		; std::_Unchecked<unsigned int * __ptr64>
PUBLIC	??$_Uninitialized_move_al_unchecked@PEAIPEAIV?$allocator@I@std@@@std@@YAPEAIPEAI00AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@@Z ; std::_Uninitialized_move_al_unchecked<unsigned int * __ptr64,unsigned int * __ptr64,std::allocator<unsigned int> >
PUBLIC	??$_Rechecked@PEAIPEAI@std@@YAAEAPEAIAEAPEAIPEAI@Z ; std::_Rechecked<unsigned int * __ptr64,unsigned int * __ptr64>
PUBLIC	??$_Sort_unchecked1@PEAI_JU?$less@X@std@@@std@@YAXPEAI0_JAEAU?$less@X@0@@Z ; std::_Sort_unchecked1<unsigned int * __ptr64,__int64,std::less<void> >
PUBLIC	??$destroy@UDsDevice@@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@@Z ; std::allocator_traits<std::allocator<DsDevice> >::destroy<DsDevice>
PUBLIC	??$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked1<DsDevice * __ptr64,DsDevice * __ptr64,std::allocator<DsDevice> >
PUBLIC	??$?0U?$integral_constant@_N$00@std@@@_Any_tag@std@@QEAA@$$QEAU?$integral_constant@_N$00@1@@Z ; std::_Any_tag::_Any_tag<std::integral_constant<bool,1> >
PUBLIC	??$_Ptr_move_cat@HH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAH0@Z ; std::_Ptr_move_cat<int,int>
PUBLIC	??$_Uninitialized_move_al_unchecked1@HHV?$allocator@H@std@@@std@@YAPEAHPEAH00AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked1<int,int,std::allocator<int> >
PUBLIC	??$_Ptr_move_cat@W4Api@RtAudio@@W412@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAW4Api@RtAudio@@0@Z ; std::_Ptr_move_cat<enum RtAudio::Api,enum RtAudio::Api>
PUBLIC	??$_Uninitialized_move_al_unchecked1@W4Api@RtAudio@@W412@V?$allocator@W4Api@RtAudio@@@std@@@std@@YAPEAW4Api@RtAudio@@PEAW412@00AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked1<enum RtAudio::Api,enum RtAudio::Api,std::allocator<enum RtAudio::Api> >
PUBLIC	??$move@AEAI@std@@YA$$QEAIAEAI@Z		; std::move<unsigned int & __ptr64>
PUBLIC	??$_Ptr_move_cat@II@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAI0@Z ; std::_Ptr_move_cat<unsigned int,unsigned int>
PUBLIC	??$_Uninitialized_move_al_unchecked1@IIV?$allocator@I@std@@@std@@YAPEAIPEAI00AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked1<unsigned int,unsigned int,std::allocator<unsigned int> >
PUBLIC	??$_Partition_by_median_guess_unchecked@PEAIU?$less@X@std@@@std@@YA?AU?$pair@PEAIPEAI@0@PEAI0AEAU?$less@X@0@@Z ; std::_Partition_by_median_guess_unchecked<unsigned int * __ptr64,std::less<void> >
PUBLIC	??$_Make_heap_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z ; std::_Make_heap_unchecked<unsigned int * __ptr64,std::less<void> >
PUBLIC	??$_Sort_heap_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z ; std::_Sort_heap_unchecked<unsigned int * __ptr64,std::less<void> >
PUBLIC	??$_Insertion_sort_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z ; std::_Insertion_sort_unchecked<unsigned int * __ptr64,std::less<void> >
PUBLIC	??$destroy@UDsDevice@@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@@Z ; std::allocator<DsDevice>::destroy<DsDevice>
PUBLIC	??$construct@UDsDevice@@U1@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@$$QEAU2@@Z ; std::_Wrap_alloc<std::allocator<DsDevice> >::construct<DsDevice,DsDevice>
PUBLIC	??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z	; std::_Copy_memmove<int * __ptr64,int * __ptr64>
PUBLIC	??$_Copy_memmove@PEAW4Api@RtAudio@@PEAW412@@std@@YAPEAW4Api@RtAudio@@PEAW412@00@Z ; std::_Copy_memmove<enum RtAudio::Api * __ptr64,enum RtAudio::Api * __ptr64>
PUBLIC	??$_Copy_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z	; std::_Copy_memmove<unsigned int * __ptr64,unsigned int * __ptr64>
PUBLIC	??$_Guess_median_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI00AEAU?$less@X@0@@Z ; std::_Guess_median_unchecked<unsigned int * __ptr64,std::less<void> >
PUBLIC	??$?RAEAIAEAI@?$less@X@std@@QEBA_NAEAI0@Z	; std::less<void>::operator()<unsigned int & __ptr64,unsigned int & __ptr64>
PUBLIC	??$iter_swap@PEAIPEAI@std@@YAXPEAI0@Z		; std::iter_swap<unsigned int * __ptr64,unsigned int * __ptr64>
PUBLIC	??$?0AEAPEAIAEAPEAIX$0A@@?$pair@PEAIPEAI@std@@QEAA@AEAPEAI0@Z ; std::pair<unsigned int * __ptr64,unsigned int * __ptr64>::pair<unsigned int * __ptr64,unsigned int * __ptr64><unsigned int * __ptr64 & __ptr64,unsigned int * __ptr64 & __ptr64,void,0>
PUBLIC	??$_Pop_heap_hole_by_index@PEAI_JIU?$less@X@std@@@std@@YAXPEAI_J1$$QEAIAEAU?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<unsigned int * __ptr64,__int64,unsigned int,std::less<void> >
PUBLIC	??$_Pop_heap_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z ; std::_Pop_heap_unchecked<unsigned int * __ptr64,std::less<void> >
PUBLIC	??$_Move_backward_unchecked@PEAIPEAI@std@@YAPEAIPEAI00@Z ; std::_Move_backward_unchecked<unsigned int * __ptr64,unsigned int * __ptr64>
PUBLIC	??$forward@UDsDevice@@@std@@YA$$QEAUDsDevice@@AEAU1@@Z ; std::forward<DsDevice>
PUBLIC	??$construct@UDsDevice@@U1@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@$$QEAU3@@Z ; std::allocator_traits<std::allocator<DsDevice> >::construct<DsDevice,DsDevice>
PUBLIC	??$_Med3_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI00AEAU?$less@X@0@@Z ; std::_Med3_unchecked<unsigned int * __ptr64,std::less<void> >
PUBLIC	??$swap@IX@std@@YAXAEAI0@Z			; std::swap<unsigned int,void>
PUBLIC	??$forward@AEAPEAI@std@@YAAEAPEAIAEAPEAI@Z	; std::forward<unsigned int * __ptr64 & __ptr64>
PUBLIC	??$_Push_heap_by_index@PEAI_JIU?$less@X@std@@@std@@YAXPEAI_J1$$QEAIAEAU?$less@X@0@@Z ; std::_Push_heap_by_index<unsigned int * __ptr64,__int64,unsigned int,std::less<void> >
PUBLIC	??$_Pop_heap_hole_unchecked@PEAIIU?$less@X@std@@@std@@YAXPEAI00$$QEAIAEAU?$less@X@0@@Z ; std::_Pop_heap_hole_unchecked<unsigned int * __ptr64,unsigned int,std::less<void> >
PUBLIC	??$_Move_backward_unchecked1@PEAIPEAI@std@@YAPEAIPEAI00U_Trivially_copyable_ptr_iterator_tag@0@@Z ; std::_Move_backward_unchecked1<unsigned int * __ptr64,unsigned int * __ptr64>
PUBLIC	??$construct@UDsDevice@@U1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@$$QEAU2@@Z ; std::allocator<DsDevice>::construct<DsDevice,DsDevice>
PUBLIC	??$_Copy_backward_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z ; std::_Copy_backward_memmove<unsigned int * __ptr64,unsigned int * __ptr64>
PUBLIC	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
PUBLIC	??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@EAAPEAXI@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception?$AA@	; `string'
PUBLIC	?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2_KB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??_7bad_cast@std@@6B@				; std::bad_cast::`vftable'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast?$AA@			; `string'
PUBLIC	_TI2?AVruntime_error@std@@
PUBLIC	_CTA2?AVruntime_error@std@@
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVruntime_error@std@@@824
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@824
PUBLIC	??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@	; `string'
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	??_7_Facet_base@std@@6B@			; std::_Facet_base::`vftable'
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_7ctype_base@std@@6B@				; std::ctype_base::`vftable'
PUBLIC	??_7?$ctype@D@std@@6B@				; std::ctype<char>::`vftable'
PUBLIC	??_7error_category@std@@6B@			; std::error_category::`vftable'
PUBLIC	??_7_System_error@std@@6B@			; std::_System_error::`vftable'
PUBLIC	??_C@_02LMMGGCAJ@?3?5?$AA@			; `string'
PUBLIC	??_7system_error@std@@6B@			; std::system_error::`vftable'
PUBLIC	??_7_Generic_error_category@std@@6B@		; std::_Generic_error_category::`vftable'
PUBLIC	??_C@_07DCLBNMLN@generic?$AA@			; `string'
PUBLIC	??_7_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream?$AA@			; `string'
PUBLIC	??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@	; `string'
PUBLIC	??_7failure@ios_base@std@@6B@			; std::ios_base::failure::`vftable'
PUBLIC	??_7ios_base@std@@6B@				; std::ios_base::`vftable'
PUBLIC	_TI5?AVfailure@ios_base@std@@
PUBLIC	_CTA5?AVfailure@ios_base@std@@
PUBLIC	??_R0?AVfailure@ios_base@std@@@8		; std::ios_base::failure `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVfailure@ios_base@std@@@840
PUBLIC	??_R0?AVsystem_error@std@@@8			; std::system_error `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVsystem_error@std@@@840
PUBLIC	??_R0?AV_System_error@std@@@8			; std::_System_error `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AV_System_error@std@@@840
PUBLIC	??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@	; `string'
PUBLIC	??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ ; `string'
PUBLIC	??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@	; `string'
PUBLIC	??_7RtAudioError@@6B@				; RtAudioError::`vftable'
PUBLIC	??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
PUBLIC	??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
PUBLIC	??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
PUBLIC	??_C@_02PHMGELLB@?6?6?$AA@			; `string'
PUBLIC	??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
PUBLIC	??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??_7RtApi@@6B@					; RtApi::`vftable'
PUBLIC	??_7RtApiDs@@6B@				; RtApiDs::`vftable'
PUBLIC	_TI3?AVRtAudioError@@
PUBLIC	_CTA3?AVRtAudioError@@
PUBLIC	??_R0?AVRtAudioError@@@8			; RtAudioError `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVRtAudioError@@@832
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
PUBLIC	??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
PUBLIC	??_C@_02BBAHNLBA@?$CFp?$AA@			; `string'
PUBLIC	??_C@_02CLHGNPPK@Lu?$AA@			; `string'
PUBLIC	??_C@_02HIKPPMOK@Ld?$AA@			; `string'
PUBLIC	??_C@_02BDDLJJBK@lu?$AA@			; `string'
PUBLIC	??_C@_02EAOCLKAK@ld?$AA@			; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	??_7?$numpunct@D@std@@6B@			; std::numpunct<char>::`vftable'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_02MDKMJEGG@eE?$AA@			; `string'
PUBLIC	??_C@_02OOPEBDOJ@pP?$AA@			; `string'
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	_TI2?AVbad_cast@std@@
PUBLIC	_CTA2?AVbad_cast@std@@
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_cast@std@@@824
PUBLIC	?_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@1@XZ@4U?$_Immortalizer@V_Iostream_error_category@std@@@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Static
PUBLIC	?$TSS0@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@1@XZ@4HA ; TSS0<`template-parameter-2',unsigned int,std::V_Iostream_error_category::mortalize>
PUBLIC	?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PEBVfacet@locale@2@EB ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
PUBLIC	?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PEBVfacet@locale@2@EB ; std::_Facetptr<std::numpunct<char> >::_Psave
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ios_base@std@@6B@				; std::ios_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R17A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
PUBLIC	??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_cast@std@@6B@				; std::bad_cast::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_cast@std@@8				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_cast@std@@8				; std::bad_cast::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_cast@std@@8			; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Facet_base@std@@6B@			; std::_Facet_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Facet_base@std@@@8			; std::_Facet_base `RTTI Type Descriptor'
PUBLIC	??_R3_Facet_base@std@@8				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Facet_base@std@@8				; std::_Facet_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Facet_base@std@@8		; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R17?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AU_Crt_new_delete@std@@@8			; std::_Crt_new_delete `RTTI Type Descriptor'
PUBLIC	??_R3_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R4ctype_base@std@@6B@			; std::ctype_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUctype_base@std@@@8			; std::ctype_base `RTTI Type Descriptor'
PUBLIC	??_R3ctype_base@std@@8				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ctype_base@std@@8				; std::ctype_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ctype_base@std@@8			; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ctype@D@std@@6B@				; std::ctype<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@D@std@@@8			; std::ctype<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@D@std@@8				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@D@std@@8				; std::ctype<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@D@std@@8			; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4error_category@std@@6B@			; std::error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error@std@@6B@			; std::_System_error::`RTTI Complete Object Locator'
PUBLIC	??_R3_System_error@std@@8			; std::_System_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error@std@@8			; std::_System_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error@std@@8		; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4system_error@std@@6B@			; std::system_error::`RTTI Complete Object Locator'
PUBLIC	??_R3system_error@std@@8			; std::system_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2system_error@std@@8			; std::system_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@system_error@std@@8		; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Generic_error_category@std@@6B@		; std::_Generic_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Generic_error_category@std@@@8		; std::_Generic_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Generic_error_category@std@@8		; std::_Generic_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Generic_error_category@std@@8	; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category@std@@6B@		; std::_Iostream_error_category::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category@std@@@8	; std::_Iostream_error_category `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category@std@@8		; std::_Iostream_error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category@std@@8	; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4failure@ios_base@std@@6B@			; std::ios_base::failure::`RTTI Complete Object Locator'
PUBLIC	??_R3failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@failure@ios_base@std@@8		; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4RtAudioError@@6B@				; RtAudioError::`RTTI Complete Object Locator'
PUBLIC	??_R3RtAudioError@@8				; RtAudioError::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RtAudioError@@8				; RtAudioError::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RtAudioError@@8			; RtAudioError::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4RtApi@@6B@					; RtApi::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVRtApi@@@8				; RtApi `RTTI Type Descriptor'
PUBLIC	??_R3RtApi@@8					; RtApi::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RtApi@@8					; RtApi::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RtApi@@8				; RtApi::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4RtApiDs@@6B@				; RtApiDs::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVRtApiDs@@@8				; RtApiDs `RTTI Type Descriptor'
PUBLIC	??_R3RtApiDs@@8					; RtApiDs::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2RtApiDs@@8					; RtApiDs::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RtApiDs@@8			; RtApiDs::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$numpunct@D@std@@6B@			; std::numpunct<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$numpunct@D@std@@@8			; std::numpunct<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$numpunct@D@std@@8		; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@0000000000000000
PUBLIC	__real@30000000
PUBLIC	__real@34000001
PUBLIC	__real@38000080
PUBLIC	__real@3c008081
PUBLIC	__real@3e00000000100000
PUBLIC	__real@3e80000010000010
PUBLIC	__real@3f00001000100010
PUBLIC	__real@3f80101010101010
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@405fe00000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@40dfffe000000000
PUBLIC	__real@415fffffe0000000
PUBLIC	__real@41dfffffffe00000
PUBLIC	__real@4202a05f20000000
EXTRN	??_L@YAXPEAX_K1P6AX0@Z2@Z:PROC			; `eh vector constructor iterator'
EXTRN	??_M@YAXPEAX_K1P6AX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	_purecall:PROC
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX@Z:PROC				; operator delete
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	??_V@YAXPEAX@Z:PROC				; operator delete[]
EXTRN	atexit:PROC
EXTRN	_Init_thread_header:PROC
EXTRN	_Init_thread_abort:PROC
EXTRN	_Init_thread_footer:PROC
EXTRN	_invalid_parameter_noinfo_noreturn:PROC
EXTRN	??0_Lockit@std@@QEAA@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QEAA@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	abs:PROC
EXTRN	fabs:PROC
EXTRN	frexp:PROC
EXTRN	calloc:PROC
EXTRN	free:PROC
EXTRN	__stdio_common_vsprintf_s:PROC
EXTRN	memcmp:PROC
EXTRN	memcpy:PROC
EXTRN	memmove:PROC
EXTRN	memset:PROC
EXTRN	strcspn:PROC
EXTRN	strlen:PROC
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPEBD@Z:PROC		; std::_Xout_of_range
EXTRN	??_Eruntime_error@std@@UEAAPEAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
EXTRN	??_Ebad_cast@std@@UEAAPEAXI@Z:PROC		; std::bad_cast::`vector deleting destructor'
EXTRN	localeconv:PROC
EXTRN	_Getctype:PROC
EXTRN	_Getcvt:PROC
EXTRN	_Tolower:PROC
EXTRN	_Toupper:PROC
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPEAV12@PEBD@Z:PROC ; std::_Locinfo::_Locinfo_ctor
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPEAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
EXTRN	??_E_Facet_base@std@@UEAAPEAXI@Z:PROC		; std::_Facet_base::`vector deleting destructor'
EXTRN	?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	??_Efacet@locale@std@@MEAAPEAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
EXTRN	?_Init@locale@std@@CAPEAV_Locimp@12@_N@Z:PROC	; std::locale::_Init
EXTRN	?_Getgloballocale@locale@std@@CAPEAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	??_Ectype_base@std@@UEAAPEAXI@Z:PROC		; std::ctype_base::`vector deleting destructor'
EXTRN	??_E?$ctype@D@std@@MEAAPEAXI@Z:PROC		; std::ctype<char>::`vector deleting destructor'
EXTRN	??_Eerror_category@std@@UEAAPEAXI@Z:PROC	; std::error_category::`vector deleting destructor'
EXTRN	??_E_System_error@std@@UEAAPEAXI@Z:PROC		; std::_System_error::`vector deleting destructor'
EXTRN	??_Esystem_error@std@@UEAAPEAXI@Z:PROC		; std::system_error::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPEBDH@Z:PROC		; std::_Syserror_map
EXTRN	??_E_Generic_error_category@std@@UEAAPEAXI@Z:PROC ; std::_Generic_error_category::`vector deleting destructor'
EXTRN	??_E_Iostream_error_category@std@@UEAAPEAXI@Z:PROC ; std::_Iostream_error_category::`vector deleting destructor'
EXTRN	??_Efailure@ios_base@std@@UEAAPEAXI@Z:PROC	; std::ios_base::failure::`vector deleting destructor'
EXTRN	?_Addstd@ios_base@std@@SAXPEAV12@@Z:PROC	; std::ios_base::_Addstd
EXTRN	?_Ios_base_dtor@ios_base@std@@CAXPEAV12@@Z:PROC	; std::ios_base::_Ios_base_dtor
EXTRN	??_Eios_base@std@@UEAAPEAXI@Z:PROC		; std::ios_base::`vector deleting destructor'
EXTRN	??_ERtAudioError@@UEAAPEAXI@Z:PROC		; RtAudioError::`vector deleting destructor'
EXTRN	??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z:PROC ; std::basic_ios<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z:PROC ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_InitializeCriticalSection:PROC
EXTRN	__imp_EnterCriticalSection:PROC
EXTRN	__imp_LeaveCriticalSection:PROC
EXTRN	__imp_DeleteCriticalSection:PROC
EXTRN	__imp_SetEvent:PROC
EXTRN	__imp_ResetEvent:PROC
EXTRN	__imp_WaitForSingleObject:PROC
EXTRN	__imp_CreateEventA:PROC
EXTRN	__imp_Sleep:PROC
EXTRN	__imp_SetThreadPriority:PROC
EXTRN	__imp_GetDesktopWindow:PROC
EXTRN	__imp_timeBeginPeriod:PROC
EXTRN	__imp_timeEndPeriod:PROC
EXTRN	__imp_CoUninitialize:PROC
EXTRN	__imp_CoInitialize:PROC
EXTRN	_beginthreadex:PROC
EXTRN	_endthreadex:PROC
EXTRN	??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z:PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z:PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	??_ERtApi@@UEAAPEAXI@Z:PROC			; RtApi::`vector deleting destructor'
EXTRN	??_ERtApiDs@@UEAAPEAXI@Z:PROC			; RtApiDs::`vector deleting destructor'
EXTRN	DirectSoundCreate:PROC
EXTRN	DirectSoundEnumerateA:PROC
EXTRN	DirectSoundCaptureCreate:PROC
EXTRN	DirectSoundCaptureEnumerateA:PROC
EXTRN	??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z:PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vector deleting destructor'
EXTRN	??_E?$numpunct@D@std@@MEAAPEAXI@Z:PROC		; std::numpunct<char>::`vector deleting destructor'
EXTRN	_CxxThrowException:PROC
EXTRN	__CxxFrameHandler3:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	_Init_thread_epoch:DWORD
EXTRN	?_BADOFF@std@@3_JB:QWORD			; std::_BADOFF
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	?id@?$ctype@D@std@@2V0locale@2@A:QWORD		; std::ctype<char>::id
EXTRN	?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE ; std::cerr
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
EXTRN	_tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A DQ 01H DUP (?) ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DQ 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB DQ 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT ?_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@1@XZ@4U?$_Immortalizer@V_Iostream_error_category@std@@@1@A
_BSS	SEGMENT
?_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@1@XZ@4U?$_Immortalizer@V_Iostream_error_category@std@@@1@A DB 010H DUP (?) ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Static
_BSS	ENDS
;	COMDAT ?$TSS0@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@1@XZ@4HA
_BSS	SEGMENT
?$TSS0@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@1@XZ@4HA DD 01H DUP (?) ; TSS0<`template-parameter-2',unsigned int,std::V_Iostream_error_category::mortalize>
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PEBVfacet@locale@2@EB
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PEBVfacet@locale@2@EB DQ 01H DUP (?) ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PEBVfacet@locale@2@EB
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PEBVfacet@locale@2@EB DQ 01H DUP (?) ; std::_Facetptr<std::numpunct<char> >::_Psave
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fabsl DD	imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$fabsl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$frexpl DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$frexpl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+110
	DD	imagerel $unwind$_vsprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf_s DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$sprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+56
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?compare@?$char_traits@D@std@@SAHPEBD0_K@Z DD imagerel $LN5
	DD	imagerel $LN5+70
	DD	imagerel $unwind$?compare@?$char_traits@D@std@@SAHPEBD0_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$char_traits@D@std@@SA_KPEBD@Z DD imagerel $LN5
	DD	imagerel $LN5+57
	DD	imagerel $unwind$?length@?$char_traits@D@std@@SA_KPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z DD imagerel $LN5
	DD	imagerel $LN5+74
	DD	imagerel $unwind$?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$char_traits@D@std@@SAPEADPEAD_KD@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?assign@?$char_traits@D@std@@SAPEADPEAD_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eq@?$char_traits@D@std@@SA_NAEBD0@Z DD imagerel $LN5
	DD	imagerel $LN5+59
	DD	imagerel $unwind$?eq@?$char_traits@D@std@@SA_NAEBD0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z DD imagerel $LN5
	DD	imagerel $LN5+55
	DD	imagerel $unwind$?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?not_eof@?$char_traits@D@std@@SAHAEBH@Z DD imagerel $LN7
	DD	imagerel $LN7+80
	DD	imagerel $unwind$?not_eof@?$char_traits@D@std@@SAHAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@std@@YAPEAX_K0_N@Z DD imagerel $LN10
	DD	imagerel $LN10+248
	DD	imagerel $unwind$?_Allocate@std@@YAPEAX_K0_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Deallocate@std@@YAXPEAX_K1@Z DD imagerel $LN9
	DD	imagerel $LN9+228
	DD	imagerel $unwind$?_Deallocate@std@@YAXPEAX_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@D@std@@QEAAXPEAD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?deallocate@?$allocator@D@std@@QEAAXPEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBA?AU12@U_Nil@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBA?AU12@U_Nil@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?address@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBAPEADAEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$?address@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBAPEADAEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@$$QEAU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@$$QEAU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAAEAU01@$$QEAU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??4?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAAEAU01@$$QEAU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAPEAD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAPEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBA_KU_Nil@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBA_KU_Nil@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+58
	DD	imagerel $unwind$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAPEBDXZ DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+37
	DD	imagerel $unwind$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEB_KXZ DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEB_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z DD imagerel $LN4
	DD	imagerel $LN4+117
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA+24
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z DD imagerel $LN4
	DD	imagerel $LN4+85
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z@4HA+24
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+75
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z@4HA+24
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z DD imagerel $LN4
	DD	imagerel $LN4+86
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA+24
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z DD imagerel $LN7
	DD	imagerel $LN7+285
	DD	imagerel $unwind$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z DD imagerel $LN7
	DD	imagerel $LN7+187
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@@Z DD imagerel $LN5
	DD	imagerel $LN5+283
	DD	imagerel $unwind$?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z DD imagerel $LN5
	DD	imagerel $LN5+143
	DD	imagerel $unwind$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z DD imagerel $LN5
	DD	imagerel $LN5+265
	DD	imagerel $unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z DD imagerel $LN6
	DD	imagerel $LN6+268
	DD	imagerel $unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z DD imagerel $LN5
	DD	imagerel $LN5+177
	DD	imagerel $unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z DD imagerel $LN6
	DD	imagerel $LN6+225
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z DD imagerel $LN5
	DD	imagerel $LN5+165
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z DD imagerel $LN5
	DD	imagerel $LN5+116
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z DD imagerel $LN5
	DD	imagerel $LN5+287
	DD	imagerel $unwind$?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z DD imagerel $LN6
	DD	imagerel $LN6+206
	DD	imagerel $unwind$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0AEBV12@00@Z DD imagerel $LN15
	DD	imagerel $LN15+1522
	DD	imagerel $unwind$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0AEBV12@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0PEBD0@Z DD imagerel $LN9
	DD	imagerel $LN9+601
	DD	imagerel $unwind$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0PEBD0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z DD imagerel $LN5
	DD	imagerel $LN5+273
	DD	imagerel $unwind$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+112
	DD	imagerel $unwind$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+121
	DD	imagerel $unwind$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD imagerel $LN5
	DD	imagerel $LN5+79
	DD	imagerel $unwind$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z DD imagerel $LN5
	DD	imagerel $LN5+104
	DD	imagerel $unwind$?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+53
	DD	imagerel $unwind$?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Traits_compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAHQEBD_K01@Z DD imagerel $LN8
	DD	imagerel $LN8+150
	DD	imagerel $unwind$?_Traits_compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAHQEBD_K01@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+76
	DD	imagerel $unwind$?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAHAEBV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAHAEBV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0D@Z DD imagerel $LN5
	DD	imagerel $LN5+101
	DD	imagerel $unwind$?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z DD imagerel $LN23
	DD	imagerel $LN23+560
	DD	imagerel $unwind$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA DD imagerel ?catch$1@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA
	DD	imagerel ?catch$1@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA+90
	DD	imagerel $unwind$?catch$1@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA DD imagerel ?catch$0@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA
	DD	imagerel ?catch$0@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA+54
	DD	imagerel $unwind$?catch$0@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_N_K_N@Z DD imagerel $LN13
	DD	imagerel $LN13+238
	DD	imagerel $unwind$?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_N_K_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_NPEBD@Z DD imagerel $LN6
	DD	imagerel $LN6+95
	DD	imagerel $unwind$?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_NPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z DD imagerel $LN7
	DD	imagerel $LN7+262
	DD	imagerel $unwind$?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0runtime_error@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$??0runtime_error@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0runtime_error@std@@QEAA@PEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+54
	DD	imagerel $unwind$??0runtime_error@std@@QEAA@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1runtime_error@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??1runtime_error@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0runtime_error@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??0runtime_error@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gruntime_error@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_Gruntime_error@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_cast@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??0bad_cast@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_cast@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??1bad_cast@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_cast@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??0bad_cast@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_cast@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_Gbad_cast@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Locinfo@std@@QEAA@PEBD@Z DD imagerel $LN12
	DD	imagerel $LN12+215
	DD	imagerel $unwind$??0_Locinfo@std@@QEAA@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA DD imagerel ?dtor$0@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA+24
	DD	imagerel $unwind$?dtor$0@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA DD imagerel ?dtor$1@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA
	DD	imagerel ?dtor$1@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA+28
	DD	imagerel $unwind$?dtor$1@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA DD imagerel ?dtor$2@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA
	DD	imagerel ?dtor$2@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA+28
	DD	imagerel $unwind$?dtor$2@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA DD imagerel ?dtor$3@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA
	DD	imagerel ?dtor$3@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA+28
	DD	imagerel $unwind$?dtor$3@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$4@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA DD imagerel ?dtor$4@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA
	DD	imagerel ?dtor$4@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA+28
	DD	imagerel $unwind$?dtor$4@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$5@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA DD imagerel ?dtor$5@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA
	DD	imagerel ?dtor$5@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA+28
	DD	imagerel $unwind$?dtor$5@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$6@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA DD imagerel ?dtor$6@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA
	DD	imagerel ?dtor$6@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA+28
	DD	imagerel $unwind$?dtor$6@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Locinfo@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+156
	DD	imagerel $unwind$??1_Locinfo@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getctype@_Locinfo@std@@QEBA?AU_Ctypevec@@XZ DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$?_Getctype@_Locinfo@std@@QEBA?AU_Ctypevec@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ DD imagerel $LN3
	DD	imagerel $LN3+122
	DD	imagerel $unwind$?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getlconv@_Locinfo@std@@QEBAPEBUlconv@@XZ DD imagerel $LN3
	DD	imagerel $LN3+19
	DD	imagerel $unwind$?_Getlconv@_Locinfo@std@@QEBAPEBUlconv@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Yarn@D@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??1?$_Yarn@D@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?c_str@?$_Yarn@D@std@@QEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+56
	DD	imagerel $unwind$?c_str@?$_Yarn@D@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$_Yarn@D@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+50
	DD	imagerel $unwind$?_Tidy@?$_Yarn@D@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Yarn@_W@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??1?$_Yarn@_W@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$_Yarn@_W@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+50
	DD	imagerel $unwind$?_Tidy@?$_Yarn@_W@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G_Facet_base@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_G_Facet_base@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bid@locale@std@@QEAA_KXZ DD imagerel $LN6
	DD	imagerel $LN6+95
	DD	imagerel $unwind$??Bid@locale@std@@QEAA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0facet@locale@std@@IEAA@_K@Z DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$??0facet@locale@std@@IEAA@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0facet@locale@std@@IEAA@_K@Z@4HA DD imagerel ?dtor$0@?0???0facet@locale@std@@IEAA@_K@Z@4HA
	DD	imagerel ?dtor$0@?0???0facet@locale@std@@IEAA@_K@Z@4HA+24
	DD	imagerel $unwind$?dtor$0@?0???0facet@locale@std@@IEAA@_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1facet@locale@std@@MEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$??1facet@locale@std@@MEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gfacet@locale@std@@MEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_Gfacet@locale@std@@MEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0locale@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??0locale@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0locale@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$??0locale@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1locale@std@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+120
	DD	imagerel $unwind$??1locale@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?c_str@locale@std@@QEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+71
	DD	imagerel $unwind$?c_str@locale@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z DD imagerel $LN10
	DD	imagerel $LN10+186
	DD	imagerel $unwind$?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Glocale@std@@QEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_Glocale@std@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ctype_base@std@@QEAA@_K@Z DD imagerel $LN4
	DD	imagerel $LN4+54
	DD	imagerel $unwind$??0ctype_base@std@@QEAA@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ctype_base@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$??1ctype_base@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gctype_base@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_Gctype_base@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?widen@?$ctype@D@std@@QEBADD@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?widen@?$ctype@D@std@@QEBADD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z DD imagerel $LN4
	DD	imagerel $LN4+85
	DD	imagerel $unwind$??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z@4HA DD imagerel ?dtor$0@?0???0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z@4HA+24
	DD	imagerel $unwind$?dtor$0@?0???0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z DD imagerel $LN10
	DD	imagerel $LN10+241
	DD	imagerel $unwind$?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA DD imagerel ?dtor$0@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA
	DD	imagerel ?dtor$0@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA+29
	DD	imagerel $unwind$?dtor$0@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA DD imagerel ?dtor$1@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA
	DD	imagerel ?dtor$1@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA+38
	DD	imagerel $unwind$?dtor$1@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ctype@D@std@@MEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??1?$ctype@D@std@@MEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Init@?$ctype@D@std@@IEAAXAEBV_Locinfo@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?_Init@?$ctype@D@std@@IEAAXAEBV_Locinfo@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$ctype@D@std@@IEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+90
	DD	imagerel $unwind$?_Tidy@?$ctype@D@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_tolower@?$ctype@D@std@@MEBADD@Z DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$?do_tolower@?$ctype@D@std@@MEBADD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_tolower@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z DD imagerel $LN6
	DD	imagerel $LN6+90
	DD	imagerel $unwind$?do_tolower@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_toupper@?$ctype@D@std@@MEBADD@Z DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$?do_toupper@?$ctype@D@std@@MEBADD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_toupper@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z DD imagerel $LN6
	DD	imagerel $LN6+90
	DD	imagerel $unwind$?do_toupper@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$ctype@D@std@@MEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_G?$ctype@D@std@@MEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z DD imagerel $LN11
	DD	imagerel $LN11+258
	DD	imagerel $unwind$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA DD imagerel ?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA+24
	DD	imagerel $unwind$?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?iostream_category@std@@YAAEBVerror_category@1@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?iostream_category@std@@YAAEBVerror_category@1@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z DD imagerel $LN5
	DD	imagerel $LN5+93
	DD	imagerel $unwind$?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??8error_category@std@@QEBA_NAEBV01@@Z DD imagerel $LN5
	DD	imagerel $LN5+59
	DD	imagerel $unwind$??8error_category@std@@QEBA_NAEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gerror_category@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_Gerror_category@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?message@error_code@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD imagerel $LN5
	DD	imagerel $LN5+102
	DD	imagerel $unwind$?message@error_code@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??8std@@YA_NAEBVerror_condition@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+122
	DD	imagerel $unwind$??8std@@YA_NAEBVerror_condition@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD imagerel $LN8
	DD	imagerel $LN8+224
	DD	imagerel $unwind$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA DD imagerel ?dtor$0@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA
	DD	imagerel ?dtor$0@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA+27
	DD	imagerel $unwind$?dtor$0@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA DD imagerel ?dtor$1@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA
	DD	imagerel ?dtor$1@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA+24
	DD	imagerel $unwind$?dtor$1@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD imagerel $LN6
	DD	imagerel $LN6+256
	DD	imagerel $unwind$??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z@4HA DD imagerel ?dtor$1@?0???0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z@4HA
	DD	imagerel ?dtor$1@?0???0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z@4HA+27
	DD	imagerel $unwind$?dtor$1@?0???0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_System_error@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??1_System_error@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_System_error@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??0_System_error@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G_System_error@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_G_System_error@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0system_error@std@@QEAA@Verror_code@1@PEBD@Z DD imagerel $LN5
	DD	imagerel $LN5+167
	DD	imagerel $unwind$??0system_error@std@@QEAA@Verror_code@1@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0system_error@std@@QEAA@Verror_code@1@PEBD@Z@4HA DD imagerel ?dtor$0@?0???0system_error@std@@QEAA@Verror_code@1@PEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???0system_error@std@@QEAA@Verror_code@1@PEBD@Z@4HA+24
	DD	imagerel $unwind$?dtor$0@?0???0system_error@std@@QEAA@Verror_code@1@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1system_error@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??1system_error@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0system_error@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??0system_error@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gsystem_error@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_Gsystem_error@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Generic_error_category@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??0_Generic_error_category@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?message@_Generic_error_category@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD imagerel $LN5
	DD	imagerel $LN5+70
	DD	imagerel $unwind$?message@_Generic_error_category@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Generic_error_category@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??1_Generic_error_category@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G_Generic_error_category@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_G_Generic_error_category@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Iostream_error_category@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??0_Iostream_error_category@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?message@_Iostream_error_category@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD imagerel $LN7
	DD	imagerel $LN7+112
	DD	imagerel $unwind$?message@_Iostream_error_category@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Iostream_error_category@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??1_Iostream_error_category@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G_Iostream_error_category@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_G_Iostream_error_category@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ DD imagerel $LN5
	DD	imagerel $LN5+120
	DD	imagerel $unwind$??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ@4HA DD imagerel ?dtor$0@?0???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ@4HA
	DD	imagerel ?dtor$0@?0???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ@4HA+27
	DD	imagerel $unwind$?dtor$0@?0???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z DD imagerel $LN4
	DD	imagerel $LN4+88
	DD	imagerel $unwind$??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1failure@ios_base@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??1failure@ios_base@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0failure@ios_base@std@@QEAA@AEBV012@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??0failure@ios_base@std@@QEAA@AEBV012@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gfailure@ios_base@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_Gfailure@ios_base@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@ios_base@std@@QEAAXH_N@Z DD imagerel $LN11
	DD	imagerel $LN11+340
	DD	imagerel $unwind$?clear@ios_base@std@@QEAAXH_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@ios_base@std@@QEAAXH@Z DD imagerel $LN3
	DD	imagerel $LN3+35
	DD	imagerel $unwind$?clear@ios_base@std@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?good@ios_base@std@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+51
	DD	imagerel $unwind$?good@ios_base@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?width@ios_base@std@@QEAA_J_J@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$?width@ios_base@std@@QEAA_J_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getloc@ios_base@std@@QEBA?AVlocale@2@XZ DD imagerel $LN5
	DD	imagerel $LN5+62
	DD	imagerel $unwind$?getloc@ios_base@std@@QEBA?AVlocale@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ios_base@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??1ios_base@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Init@ios_base@std@@IEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+191
	DD	imagerel $unwind$?_Init@ios_base@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gios_base@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_Gios_base@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0RtAudioError@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Type@0@@Z DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$??0RtAudioError@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Type@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?printMessage@RtAudioError@@UEBAXXZ DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$?printMessage@RtAudioError@@UEBAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?getMessage@RtAudioError@@UEBA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD imagerel $LN5
	DD	imagerel $LN5+72
	DD	imagerel $unwind$?getMessage@RtAudioError@@UEBA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1RtAudioError@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??1RtAudioError@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0RtAudioError@@QEAA@AEBV0@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0RtAudioError@@QEAA@AEBV0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GRtAudioError@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_GRtAudioError@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z DD imagerel $LN5
	DD	imagerel $LN5+76
	DD	imagerel $unwind$?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z DD imagerel $LN4
	DD	imagerel $LN4+62
	DD	imagerel $unwind$?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z DD imagerel $LN4
	DD	imagerel $LN4+97
	DD	imagerel $unwind$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z@4HA DD imagerel ?dtor$0@?0??widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z@4HA
	DD	imagerel ?dtor$0@?0??widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z@4HA+24
	DD	imagerel $unwind$?dtor$0@?0??widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IEAAXPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z DD imagerel $LN5
	DD	imagerel $LN5+130
	DD	imagerel $unwind$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IEAAXPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_ios@DU?$char_traits@D@std@@@std@@IEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+44
	DD	imagerel $unwind$??0?$basic_ios@DU?$char_traits@D@std@@@std@@IEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD imagerel $LN6
	DD	imagerel $LN6+210
	DD	imagerel $unwind$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z@4HA+42
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD imagerel $LN11
	DD	imagerel $LN11+216
	DD	imagerel $unwind$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA DD imagerel ?catch$0@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA
	DD	imagerel ?catch$0@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA+27
	DD	imagerel $unwind$?catch$0@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z DD imagerel $LN15
	DD	imagerel $LN15+513
	DD	imagerel $unwind$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA DD imagerel ?dtor$0@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA
	DD	imagerel ?dtor$0@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA+24
	DD	imagerel $unwind$?dtor$0@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA DD imagerel ?dtor$1@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA
	DD	imagerel ?dtor$1@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA+27
	DD	imagerel $unwind$?dtor$1@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$2@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA DD imagerel ?catch$2@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA
	DD	imagerel ?catch$2@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA+71
	DD	imagerel $unwind$?catch$2@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z DD imagerel $LN13
	DD	imagerel $LN13+251
	DD	imagerel $unwind$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA DD imagerel ?dtor$0@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA
	DD	imagerel ?dtor$0@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA+24
	DD	imagerel $unwind$?dtor$0@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA DD imagerel ?catch$1@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA
	DD	imagerel ?catch$1@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA+65
	DD	imagerel $unwind$?catch$1@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ DD imagerel $LN6
	DD	imagerel $LN6+191
	DD	imagerel $unwind$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ@4HA DD imagerel ?dtor$0@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ@4HA
	DD	imagerel ?dtor$0@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ@4HA+24
	DD	imagerel $unwind$?dtor$0@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+77
	DD	imagerel $unwind$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel $LN25
	DD	imagerel $LN25+940
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+27
	DD	imagerel $unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+71
	DD	imagerel $unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DD imagerel $LN23
	DD	imagerel $LN23+885
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA DD imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA+27
	DD	imagerel $unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA DD imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA+71
	DD	imagerel $unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@I@std@@QEAAXPEAI_K@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?deallocate@?$allocator@I@std@@QEAAXPEAI_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@I@std@@QEAAPEAI_K@Z DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$?allocate@?$allocator@I@std@@QEAAPEAI_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$allocator_traits@V?$allocator@I@std@@@std@@SA_KAEBV?$allocator@I@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?max_size@?$allocator_traits@V?$allocator@I@std@@@std@@SA_KAEBV?$allocator@I@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$??0?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAA@$$QEAU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??0?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAA@$$QEAU01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAPEAI_K@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?allocate@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAPEAI_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAI_K@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?deallocate@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAI_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEBA_KU_Nil@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?max_size@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEBA_KU_Nil@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$??0?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAXAEAV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAXAEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@$$QEAV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@$$QEAV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Assign_rv@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+198
	DD	imagerel $unwind$?_Assign_rv@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAI@Z DD imagerel $LN7
	DD	imagerel $LN7+621
	DD	imagerel $unwind$?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$?capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Unused_capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$?_Unused_capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?begin@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$?begin@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?end@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$?end@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$?size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAXAEBI@Z DD imagerel $LN7
	DD	imagerel $LN7+595
	DD	imagerel $unwind$?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAXAEBI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$vector@IV?$allocator@I@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+121
	DD	imagerel $unwind$?clear@?$vector@IV?$allocator@I@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IEAAXPEAI0@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IEAAXPEAI0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Grow_to@?$vector@IV?$allocator@I@std@@@std@@IEBA_K_K@Z DD imagerel $LN6
	DD	imagerel $LN6+161
	DD	imagerel $unwind$?_Grow_to@?$vector@IV?$allocator@I@std@@@std@@IEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Inside@?$vector@IV?$allocator@I@std@@@std@@IEBA_NPEBI@Z DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$?_Inside@?$vector@IV?$allocator@I@std@@@std@@IEBA_NPEBI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z DD imagerel $LN11
	DD	imagerel $LN11+447
	DD	imagerel $unwind$?_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0??_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z@4HA DD imagerel ?catch$0@?0??_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z@4HA
	DD	imagerel ?catch$0@?0??_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z@4HA+68
	DD	imagerel $unwind$?catch$0@?0??_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Reserve@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+130
	DD	imagerel $unwind$?_Reserve@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@IV?$allocator@I@std@@@std@@IEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+241
	DD	imagerel $unwind$?_Tidy@?$vector@IV?$allocator@I@std@@@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen@?$vector@IV?$allocator@I@std@@@std@@IEBAXXZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Xlen@?$vector@IV?$allocator@I@std@@@std@@IEBAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0DeviceInfo@RtAudio@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+139
	DD	imagerel $unwind$??0DeviceInfo@RtAudio@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1DeviceInfo@RtAudio@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??1DeviceInfo@RtAudio@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0DeviceInfo@RtAudio@@QEAA@$$QEAU01@@Z DD imagerel $LN3
	DD	imagerel $LN3+205
	DD	imagerel $unwind$??0DeviceInfo@RtAudio@@QEAA@$$QEAU01@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?getVersion@RtAudio@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD imagerel $LN5
	DD	imagerel $LN5+55
	DD	imagerel $unwind$?getVersion@RtAudio@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
$pdata$?getCompiledApi@RtAudio@@SAXAEAV?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$?getCompiledApi@RtAudio@@SAXAEAV?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@Z
$pdata$??0RtAudio@@QEAA@W4Api@0@@Z DD imagerel $LN13
	DD	imagerel $LN13+428
	DD	imagerel $unwind$??0RtAudio@@QEAA@W4Api@0@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0???0RtAudio@@QEAA@W4Api@0@@Z@4HA DD imagerel ?dtor$0@?0???0RtAudio@@QEAA@W4Api@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???0RtAudio@@QEAA@W4Api@0@@Z@4HA+24
	DD	imagerel $unwind$?dtor$0@?0???0RtAudio@@QEAA@W4Api@0@@Z@4HA
$pdata$?dtor$1@?0???0RtAudio@@QEAA@W4Api@0@@Z@4HA DD imagerel ?dtor$1@?0???0RtAudio@@QEAA@W4Api@0@@Z@4HA
	DD	imagerel ?dtor$1@?0???0RtAudio@@QEAA@W4Api@0@@Z@4HA+24
	DD	imagerel $unwind$?dtor$1@?0???0RtAudio@@QEAA@W4Api@0@@Z@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$??1RtAudio@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+92
	DD	imagerel $unwind$??1RtAudio@@QEAA@XZ
$pdata$?openStream@RtAudio@@QEAAXPEAUStreamParameters@1@0KIPEAIP6AHPEAX2INI2@Z2PEAUStreamOptions@1@P6AXW4Type@RtAudioError@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@Z DD imagerel $LN3
	DD	imagerel $LN3+133
	DD	imagerel $unwind$?openStream@RtAudio@@QEAAXPEAUStreamParameters@1@0KIPEAIP6AHPEAX2INI2@Z2PEAUStreamOptions@1@P6AXW4Type@RtAudioError@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@Z
$pdata$?openRtApi@RtAudio@@IEAAXW4Api@1@@Z DD imagerel $LN10
	DD	imagerel $LN10+196
	DD	imagerel $unwind$?openRtApi@RtAudio@@IEAAXW4Api@1@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??openRtApi@RtAudio@@IEAAXW4Api@1@@Z@4HA DD imagerel ?dtor$0@?0??openRtApi@RtAudio@@IEAAXW4Api@1@@Z@4HA
	DD	imagerel ?dtor$0@?0??openRtApi@RtAudio@@IEAAXW4Api@1@@Z@4HA+29
	DD	imagerel $unwind$?dtor$0@?0??openRtApi@RtAudio@@IEAAXW4Api@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?asInt@S24@@QEAAHXZ DD imagerel $LN4
	DD	imagerel $LN4+107
	DD	imagerel $unwind$?asInt@S24@@QEAAHXZ
pdata	ENDS
pdata	SEGMENT
$pdata$??0RtApi@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+253
	DD	imagerel $unwind$??0RtApi@@QEAA@XZ
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0???0RtApi@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0RtApi@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0RtApi@@QEAA@XZ@4HA+28
	DD	imagerel $unwind$?dtor$0@?0???0RtApi@@QEAA@XZ@4HA
$pdata$?dtor$1@?0???0RtApi@@QEAA@XZ@4HA DD imagerel ?dtor$1@?0???0RtApi@@QEAA@XZ@4HA
	DD	imagerel ?dtor$1@?0???0RtApi@@QEAA@XZ@4HA+31
	DD	imagerel $unwind$?dtor$1@?0???0RtApi@@QEAA@XZ@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$??1RtApi@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+104
	DD	imagerel $unwind$??1RtApi@@UEAA@XZ
$pdata$?openStream@RtApi@@QEAAXPEAUStreamParameters@RtAudio@@0KIPEAIP6AHPEAX2INI2@Z2PEAUStreamOptions@3@P6AXW4Type@RtAudioError@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@Z DD imagerel $LN18
	DD	imagerel $LN18+973
	DD	imagerel $unwind$?openStream@RtApi@@QEAAXPEAUStreamParameters@RtAudio@@0KIPEAIP6AHPEAX2INI2@Z2PEAUStreamOptions@3@P6AXW4Type@RtAudioError@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@Z
$pdata$?getStreamLatency@RtApi@@QEAAJXZ DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?getStreamLatency@RtApi@@QEAAJXZ
$pdata$?getStreamSampleRate@RtApi@@QEAAIXZ DD imagerel $LN3
	DD	imagerel $LN3+35
	DD	imagerel $unwind$?getStreamSampleRate@RtApi@@QEAAIXZ
$pdata$?getStreamTime@RtApi@@UEAANXZ DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$?getStreamTime@RtApi@@UEAANXZ
$pdata$?setStreamTime@RtApi@@UEAAXN@Z DD imagerel $LN4
	DD	imagerel $LN4+65
	DD	imagerel $unwind$?setStreamTime@RtApi@@UEAAXN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@H@std@@QEAAXPEAH_K@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?deallocate@?$allocator@H@std@@QEAAXPEAH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@H@std@@QEAAPEAH_K@Z DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$?allocate@?$allocator@H@std@@QEAAPEAH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAPEAH_K@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAPEAH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAH_K@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEBA_KU_Nil@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEBA_KU_Nil@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$??0?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$vector@HV?$allocator@H@std@@@std@@QEAAX$$QEAH@Z DD imagerel $LN7
	DD	imagerel $LN7+621
	DD	imagerel $unwind$?push_back@?$vector@HV?$allocator@H@std@@@std@@QEAAX$$QEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$vector@HV?$allocator@H@std@@@std@@QEAAXAEBH@Z DD imagerel $LN7
	DD	imagerel $LN7+595
	DD	imagerel $unwind$?push_back@?$vector@HV?$allocator@H@std@@@std@@QEAAXAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$vector@HV?$allocator@H@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+121
	DD	imagerel $unwind$?clear@?$vector@HV?$allocator@H@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IEAAXPEAH0@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IEAAXPEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IEBA_K_K@Z DD imagerel $LN6
	DD	imagerel $LN6+161
	DD	imagerel $unwind$?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Inside@?$vector@HV?$allocator@H@std@@@std@@IEBA_NPEBH@Z DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$?_Inside@?$vector@HV?$allocator@H@std@@@std@@IEBA_NPEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z DD imagerel $LN11
	DD	imagerel $LN11+447
	DD	imagerel $unwind$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0??_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z@4HA DD imagerel ?catch$0@?0??_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z@4HA
	DD	imagerel ?catch$0@?0??_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z@4HA+68
	DD	imagerel $unwind$?catch$0@?0??_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+130
	DD	imagerel $unwind$?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+241
	DD	imagerel $unwind$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IEBAXXZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IEBAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ConvertInfo@RtApi@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??0ConvertInfo@RtApi@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ConvertInfo@RtApi@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??1ConvertInfo@RtApi@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0RtApiStream@RtApi@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+155
	DD	imagerel $unwind$??0RtApiStream@RtApi@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1RtApiStream@RtApi@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$??1RtApiStream@RtApi@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DD imagerel $LN8
	DD	imagerel $LN8+218
	DD	imagerel $unwind$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA+45
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA DD imagerel ?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA
	DD	imagerel ?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA+28
	DD	imagerel $unwind$?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD imagerel $LN5
	DD	imagerel $LN5+65
	DD	imagerel $unwind$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+107
	DD	imagerel $unwind$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z DD imagerel $LN5
	DD	imagerel $LN5+122
	DD	imagerel $unwind$?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ DD imagerel $LN5
	DD	imagerel $LN5+56
	DD	imagerel $unwind$?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ DD imagerel $LN5
	DD	imagerel $LN5+56
	DD	imagerel $unwind$?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+155
	DD	imagerel $unwind$?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z DD imagerel $LN3
	DD	imagerel $LN3+23
	DD	imagerel $unwind$?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z DD imagerel $LN3
	DD	imagerel $LN3+23
	DD	imagerel $unwind$?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD imagerel $LN3
	DD	imagerel $LN3+19
	DD	imagerel $unwind$?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD imagerel $LN5
	DD	imagerel $LN5+102
	DD	imagerel $unwind$?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z DD imagerel $LN11
	DD	imagerel $LN11+322
	DD	imagerel $unwind$?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z DD imagerel $LN11
	DD	imagerel $LN11+327
	DD	imagerel $unwind$?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DD imagerel $LN4
	DD	imagerel $LN4+108
	DD	imagerel $unwind$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA+24
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD imagerel $LN14
	DD	imagerel $LN14+537
	DD	imagerel $unwind$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z DD imagerel $LN24
	DD	imagerel $LN24+1239
	DD	imagerel $unwind$?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+270
	DD	imagerel $unwind$?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ DD imagerel $LN11
	DD	imagerel $LN11+315
	DD	imagerel $unwind$?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z DD imagerel $LN24
	DD	imagerel $LN24+799
	DD	imagerel $unwind$?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z DD imagerel $LN15
	DD	imagerel $LN15+534
	DD	imagerel $unwind$?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXPEBD_KH@Z DD imagerel $LN9
	DD	imagerel $LN9+371
	DD	imagerel $unwind$?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXPEBD_KH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+202
	DD	imagerel $unwind$?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+108
	DD	imagerel $unwind$?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+83
	DD	imagerel $unwind$??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?clearStreamInfo@RtApi@@IEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+647
	DD	imagerel $unwind$?clearStreamInfo@RtApi@@IEAAXXZ
$pdata$?verifyStream@RtApi@@IEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+69
	DD	imagerel $unwind$?verifyStream@RtApi@@IEAAXXZ
$pdata$?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z DD imagerel $LN12
	DD	imagerel $LN12+488
	DD	imagerel $unwind$?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??error@RtApi@@IEAAXW4Type@RtAudioError@@@Z@4HA DD imagerel ?dtor$0@?0??error@RtApi@@IEAAXW4Type@RtAudioError@@@Z@4HA
	DD	imagerel ?dtor$0@?0??error@RtApi@@IEAAXW4Type@RtAudioError@@@Z@4HA+24
	DD	imagerel $unwind$?dtor$0@?0??error@RtApi@@IEAAXW4Type@RtAudioError@@@Z@4HA
$pdata$?dtor$1@?0??error@RtApi@@IEAAXW4Type@RtAudioError@@@Z@4HA DD imagerel ?dtor$1@?0??error@RtApi@@IEAAXW4Type@RtAudioError@@@Z@4HA
	DD	imagerel ?dtor$1@?0??error@RtApi@@IEAAXW4Type@RtAudioError@@@Z@4HA+24
	DD	imagerel $unwind$?dtor$1@?0??error@RtApi@@IEAAXW4Type@RtAudioError@@@Z@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?convertBuffer@RtApi@@IEAAXPEAD0AEAUConvertInfo@1@@Z DD imagerel $LN296
	DD	imagerel $LN296+13347
	DD	imagerel $unwind$?convertBuffer@RtApi@@IEAAXPEAD0AEAUConvertInfo@1@@Z
$pdata$?byteSwapBuffer@RtApi@@IEAAXPEADIK@Z DD imagerel $LN23
	DD	imagerel $LN23+652
	DD	imagerel $unwind$?byteSwapBuffer@RtApi@@IEAAXPEADIK@Z
$pdata$?formatBytes@RtApi@@IEAAIK@Z DD imagerel $LN13
	DD	imagerel $LN13+143
	DD	imagerel $unwind$?formatBytes@RtApi@@IEAAIK@Z
$pdata$?setConvertInfo@RtApi@@IEAAXW4StreamMode@1@I@Z DD imagerel $LN46
	DD	imagerel $LN46+2168
	DD	imagerel $unwind$?setConvertInfo@RtApi@@IEAAXW4StreamMode@1@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GRtApi@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_GRtApi@@UEAAPEAXI@Z
pdata	ENDS
pdata	SEGMENT
$pdata$??0RtApiDs@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+106
	DD	imagerel $unwind$??0RtApiDs@@QEAA@XZ
$pdata$??1RtApiDs@@UEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+117
	DD	imagerel $unwind$??1RtApiDs@@UEAA@XZ
$pdata$?getDeviceCount@RtApiDs@@UEAAIXZ DD imagerel $LN15
	DD	imagerel $LN15+780
	DD	imagerel $unwind$?getDeviceCount@RtApiDs@@UEAAIXZ
$pdata$?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z DD imagerel $LN89
	DD	imagerel $LN89+4266
	DD	imagerel $unwind$?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z@4HA DD imagerel ?dtor$0@?0??getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z@4HA
	DD	imagerel ?dtor$0@?0??getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z@4HA+27
	DD	imagerel $unwind$?dtor$0@?0??getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z@4HA
$pdata$?dtor$6@?0??getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z@4HA DD imagerel ?dtor$6@?0??getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z@4HA
	DD	imagerel ?dtor$6@?0??getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z@4HA+24
	DD	imagerel $unwind$?dtor$6@?0??getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?closeStream@RtApiDs@@UEAAXXZ DD imagerel $LN14
	DD	imagerel $LN14+637
	DD	imagerel $unwind$?closeStream@RtApiDs@@UEAAXXZ
$pdata$?startStream@RtApiDs@@UEAAXXZ DD imagerel $LN16
	DD	imagerel $LN16+939
	DD	imagerel $unwind$?startStream@RtApiDs@@UEAAXXZ
$pdata$?stopStream@RtApiDs@@UEAAXXZ DD imagerel $LN29
	DD	imagerel $LN29+1906
	DD	imagerel $unwind$?stopStream@RtApiDs@@UEAAXXZ
$pdata$?abortStream@RtApiDs@@UEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+122
	DD	imagerel $unwind$?abortStream@RtApiDs@@UEAAXXZ
$pdata$?callbackEvent@RtApiDs@@QEAAXXZ DD imagerel $LN98
	DD	imagerel $LN98+7263
	DD	imagerel $unwind$?callbackEvent@RtApiDs@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?deallocate@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@UDsDevice@@@std@@QEAAPEAUDsDevice@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$?allocate@?$allocator@UDsDevice@@@std@@QEAAPEAUDsDevice@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SA_KAEBV?$allocator@UDsDevice@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?max_size@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SA_KAEBV?$allocator@UDsDevice@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$??0?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAPEAUDsDevice@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?allocate@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAPEAUDsDevice@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?deallocate@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KU_Nil@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?max_size@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KU_Nil@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$??0?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$??0?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??1?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$?capacity@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Unused_capacity@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$?_Unused_capacity@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?begin@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$?begin@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Make_iter@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?_Make_iter@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$?size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$?max_size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAXAEBUDsDevice@@@Z DD imagerel $LN7
	DD	imagerel $LN7+601
	DD	imagerel $unwind$?push_back@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAXAEBUDsDevice@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?erase@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+169
	DD	imagerel $unwind$?erase@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Destroy@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAXPEAUDsDevice@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?_Destroy@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAXPEAUDsDevice@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Grow_to@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBA_K_K@Z DD imagerel $LN6
	DD	imagerel $LN6+161
	DD	imagerel $unwind$?_Grow_to@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Inside@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBA_NPEBUDsDevice@@@Z DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$?_Inside@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBA_NPEBUDsDevice@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z DD imagerel $LN11
	DD	imagerel $LN11+459
	DD	imagerel $unwind$?_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0??_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z@4HA DD imagerel ?catch$0@?0??_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z@4HA
	DD	imagerel ?catch$0@?0??_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z@4HA+68
	DD	imagerel $unwind$?catch$0@?0??_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Reserve@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+130
	DD	imagerel $unwind$?_Reserve@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+247
	DD	imagerel $unwind$?_Tidy@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBAXXZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Xlen@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z DD imagerel $LN110
	DD	imagerel $LN110+9522
	DD	imagerel $unwind$?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$18@?0??probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z@4HA DD imagerel ?dtor$18@?0??probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z@4HA
	DD	imagerel ?dtor$18@?0??probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z@4HA+32
	DD	imagerel $unwind$?dtor$18@?0??probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z@4HA
$pdata$?catch$19@?0??probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z@4HA DD imagerel ?catch$19@?0??probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z@4HA
	DD	imagerel ?catch$19@?0??probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z@4HA+65
	DD	imagerel $unwind$?catch$19@?0??probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GRtApiDs@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_GRtApiDs@@UEAAPEAXI@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?convertCharPointerToStdString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBD@Z DD imagerel ?convertCharPointerToStdString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBD@Z
	DD	imagerel ?convertCharPointerToStdString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBD@Z+58
	DD	imagerel $unwind$?convertCharPointerToStdString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@W4Api@RtAudio@@@std@@QEAAXPEAW4Api@RtAudio@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?deallocate@?$allocator@W4Api@RtAudio@@@std@@QEAAXPEAW4Api@RtAudio@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@W4Api@RtAudio@@@std@@QEAAPEAW4Api@RtAudio@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$?allocate@?$allocator@W4Api@RtAudio@@@std@@QEAAPEAW4Api@RtAudio@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$allocator_traits@V?$allocator@W4Api@RtAudio@@@std@@@std@@SA_KAEBV?$allocator@W4Api@RtAudio@@@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?max_size@?$allocator_traits@V?$allocator@W4Api@RtAudio@@@std@@@std@@SA_KAEBV?$allocator@W4Api@RtAudio@@@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$??0?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAPEAW4Api@RtAudio@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$?allocate@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAPEAW4Api@RtAudio@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXPEAW4Api@RtAudio@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?deallocate@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXPEAW4Api@RtAudio@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KU_Nil@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?max_size@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KU_Nil@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$??0?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?_Getal@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?_Getal@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myend@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?_Myend@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myend@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$?_Myend@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$??0?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAX$$QEAW4Api@RtAudio@@@Z DD imagerel $LN7
	DD	imagerel $LN7+621
	DD	imagerel $unwind$?push_back@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAX$$QEAW4Api@RtAudio@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??1?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$?capacity@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Unused_capacity@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$?_Unused_capacity@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$?size@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$?max_size@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAAEAW4Api@RtAudio@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??A?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAAEAW4Api@RtAudio@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+121
	DD	imagerel $unwind$?clear@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Destroy@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAXPEAW4Api@RtAudio@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?_Destroy@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAXPEAW4Api@RtAudio@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Grow_to@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBA_K_K@Z DD imagerel $LN6
	DD	imagerel $LN6+161
	DD	imagerel $unwind$?_Grow_to@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Inside@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBA_NPEBW4Api@RtAudio@@@Z DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$?_Inside@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBA_NPEBW4Api@RtAudio@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z DD imagerel $LN11
	DD	imagerel $LN11+447
	DD	imagerel $unwind$?_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0??_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z@4HA DD imagerel ?catch$0@?0??_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z@4HA
	DD	imagerel ?catch$0@?0??_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z@4HA+68
	DD	imagerel $unwind$?catch$0@?0??_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Reserve@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+130
	DD	imagerel $unwind$?_Reserve@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+241
	DD	imagerel $unwind$?_Tidy@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBAXXZ DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$?_Xlen@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dsPointerBetween@@YAKKKKK@Z DD imagerel ?dsPointerBetween@@YAKKKKK@Z
	DD	imagerel ?dsPointerBetween@@YAKKKKK@Z+144
	DD	imagerel $unwind$?dsPointerBetween@@YAKKKKK@Z
$pdata$?deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z DD imagerel ?deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z
	DD	imagerel ?deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z+931
	DD	imagerel $unwind$?deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z
pdata	ENDS
pdata	SEGMENT
$pdata$?dtor$0@?0??deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z@4HA DD imagerel ?dtor$0@?0??deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z@4HA
	DD	imagerel ?dtor$0@?0??deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z@4HA+24
	DD	imagerel $unwind$?dtor$0@?0??deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z@4HA
$pdata$?dtor$1@?0??deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z@4HA DD imagerel ?dtor$1@?0??deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z@4HA
	DD	imagerel ?dtor$1@?0??deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z@4HA+27
	DD	imagerel $unwind$?dtor$1@?0??deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z@4HA
pdata	ENDS
pdata	SEGMENT
$pdata$?getErrorString@@YAPEBDH@Z DD imagerel ?getErrorString@@YAPEBDH@Z
	DD	imagerel ?getErrorString@@YAPEBDH@Z+481
	DD	imagerel $unwind$?getErrorString@@YAPEBDH@Z
$pdata$?callbackHandler@@YAIPEAX@Z DD imagerel ?callbackHandler@@YAIPEAX@Z
	DD	imagerel ?callbackHandler@@YAIPEAX@Z+85
	DD	imagerel $unwind$?callbackHandler@@YAIPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0DsDevice@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+83
	DD	imagerel $unwind$??0DsDevice@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1DsDevice@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$??1DsDevice@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0DsDevice@@QEAA@AEBU0@@Z DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$??0DsDevice@@QEAA@AEBU0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0DsDevice@@QEAA@$$QEAU0@@Z DD imagerel $LN3
	DD	imagerel $LN3+106
	DD	imagerel $unwind$??0DsDevice@@QEAA@$$QEAU0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4DsDevice@@QEAAAEAU0@$$QEAU0@@Z DD imagerel $LN9
	DD	imagerel $LN9+202
	DD	imagerel $unwind$??4DsDevice@@QEAAAEAU0@$$QEAU0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GDsDevice@@QEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_GDsDevice@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAA@PEAUDsDevice@@PEBU_Container_base0@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAA@PEAUDsDevice@@PEBU_Container_base0@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAA@PEAUDsDevice@@PEBU_Container_base0@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAA@PEAUDsDevice@@PEBU_Container_base0@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAAAEAV01@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAAAEAV01@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEBA?AV01@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEBA?AV01@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD imagerel $LN25
	DD	imagerel $LN25+942
	DD	imagerel $unwind$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA DD imagerel ?dtor$0@?0???$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA+27
	DD	imagerel $unwind$?dtor$0@?0???$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA DD imagerel ?catch$1@?0???$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
	DD	imagerel ?catch$1@?0???$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA+71
	DD	imagerel $unwind$?catch$1@?0???$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Move_unchecked@PEAUDsDevice@@PEAU1@@std@@YAPEAUDsDevice@@PEAU1@00@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$_Move_unchecked@PEAUDsDevice@@PEAU1@@std@@YAPEAUDsDevice@@PEAU1@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@UDsDevice@@AEAU1@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$construct@UDsDevice@@AEAU1@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@UDsDevice@@AEBU1@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$construct@UDsDevice@@AEBU1@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@HAEAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAHAEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$construct@HAEAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAHAEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@HAEBH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAHAEBH@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$construct@HAEBH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAHAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@HH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAH$$QEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$construct@HH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAH$$QEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@W4Api@RtAudio@@W412@@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXPEAW4Api@RtAudio@@$$QEAW423@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$construct@W4Api@RtAudio@@W412@@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXPEAW4Api@RtAudio@@$$QEAW423@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@IAEAI@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAIAEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$construct@IAEAI@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAIAEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@IAEBI@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAIAEBI@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$construct@IAEBI@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAIAEBI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@II@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAI$$QEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$construct@II@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAI$$QEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$_Wrap_alloc@V?$allocator@I@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAA@$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$?0U?$_Wrap_alloc@V?$allocator@I@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAA@$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base0@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base0@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_JAEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_JAEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_NAEBV01@@Z DD imagerel $LN5
	DD	imagerel $LN5+75
	DD	imagerel $unwind$??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_NAEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?9V?$allocator@D@std@@V01@@std@@YA_NAEBU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z DD imagerel $LN5
	DD	imagerel $LN5+64
	DD	imagerel $unwind$??$?9V?$allocator@D@std@@V01@@std@@YA_NAEBU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base0@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base0@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_JAEBV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_JAEBV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z DD imagerel $LN3
	DD	imagerel $LN3+105
	DD	imagerel $unwind$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+52
	DD	imagerel $unwind$??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN4
	DD	imagerel $LN4+151
	DD	imagerel $unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+140
	DD	imagerel $unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN5
	DD	imagerel $LN5+239
	DD	imagerel $unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA+24
	DD	imagerel $unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z DD imagerel $LN11
	DD	imagerel $LN11+258
	DD	imagerel $unwind$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z@4HA DD imagerel ?dtor$0@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z@4HA+24
	DD	imagerel $unwind$?dtor$0@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z DD imagerel $LN10
	DD	imagerel $LN10+241
	DD	imagerel $unwind$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA DD imagerel ?dtor$0@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA
	DD	imagerel ?dtor$0@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA+29
	DD	imagerel $unwind$?dtor$0@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA DD imagerel ?dtor$1@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA
	DD	imagerel ?dtor$1@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA+38
	DD	imagerel $unwind$?dtor$1@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z DD imagerel $LN4
	DD	imagerel $LN4+85
	DD	imagerel $unwind$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z@4HA DD imagerel ?dtor$0@?0???0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z@4HA+24
	DD	imagerel $unwind$?dtor$0@?0???0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z DD imagerel $LN3
	DD	imagerel $LN3+112
	DD	imagerel $unwind$?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z DD imagerel $LN14
	DD	imagerel $LN14+916
	DD	imagerel $unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA DD imagerel ?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA
	DD	imagerel ?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA+27
	DD	imagerel $unwind$?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA DD imagerel ?dtor$1@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA
	DD	imagerel ?dtor$1@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA+27
	DD	imagerel $unwind$?dtor$1@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z DD imagerel $LN3
	DD	imagerel $LN3+234
	DD	imagerel $unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z DD imagerel $LN3
	DD	imagerel $LN3+234
	DD	imagerel $unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_J@Z DD imagerel $LN3
	DD	imagerel $LN3+234
	DD	imagerel $unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_K@Z DD imagerel $LN3
	DD	imagerel $LN3+234
	DD	imagerel $unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z DD imagerel $LN9
	DD	imagerel $LN9+604
	DD	imagerel $unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z@4HA DD imagerel ?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z@4HA
	DD	imagerel ?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z@4HA+27
	DD	imagerel $unwind$?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z DD imagerel $LN9
	DD	imagerel $LN9+604
	DD	imagerel $unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z@4HA DD imagerel ?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z@4HA
	DD	imagerel ?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z@4HA+27
	DD	imagerel $unwind$?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z DD imagerel $LN3
	DD	imagerel $LN3+197
	DD	imagerel $unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z DD imagerel $LN20
	DD	imagerel $LN20+434
	DD	imagerel $unwind$?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z DD imagerel $LN26
	DD	imagerel $LN26+1995
	DD	imagerel $unwind$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA DD imagerel ?dtor$0@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA
	DD	imagerel ?dtor$0@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA+27
	DD	imagerel $unwind$?dtor$0@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA DD imagerel ?dtor$1@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA
	DD	imagerel ?dtor$1@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA+27
	DD	imagerel $unwind$?dtor$1@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA DD imagerel ?dtor$2@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA
	DD	imagerel ?dtor$2@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA+27
	DD	imagerel $unwind$?dtor$2@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA DD imagerel ?dtor$3@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA
	DD	imagerel ?dtor$3@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA+27
	DD	imagerel $unwind$?dtor$3@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z DD imagerel $LN13
	DD	imagerel $LN13+390
	DD	imagerel $unwind$?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z DD imagerel $LN22
	DD	imagerel $LN22+1735
	DD	imagerel $unwind$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA DD imagerel ?dtor$0@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA
	DD	imagerel ?dtor$0@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA+27
	DD	imagerel $unwind$?dtor$0@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA DD imagerel ?dtor$1@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA
	DD	imagerel ?dtor$1@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA+27
	DD	imagerel $unwind$?dtor$1@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA DD imagerel ?dtor$2@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA
	DD	imagerel ?dtor$2@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA+27
	DD	imagerel $unwind$?dtor$2@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA DD imagerel ?dtor$3@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA
	DD	imagerel ?dtor$3@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA+27
	DD	imagerel $unwind$?dtor$3@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z DD imagerel $LN6
	DD	imagerel $LN6+129
	DD	imagerel $unwind$?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z DD imagerel $LN6
	DD	imagerel $LN6+113
	DD	imagerel $unwind$?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z DD imagerel $LN5
	DD	imagerel $LN5+97
	DD	imagerel $unwind$??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@UDsDevice@@@std@@PEAUDsDevice@@@std@@YAXPEAUDsDevice@@0AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@UDsDevice@@@std@@PEAUDsDevice@@@std@@YAXPEAUDsDevice@@0AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@H@std@@PEAH@std@@YAXPEAH0AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@H@std@@PEAH@std@@YAXPEAH0AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@W4Api@RtAudio@@@std@@PEAW4Api@RtAudio@@@std@@YAXPEAW4Api@RtAudio@@0AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@W4Api@RtAudio@@@std@@PEAW4Api@RtAudio@@@std@@YAXPEAW4Api@RtAudio@@0AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@V?$allocator@I@std@@PEAI@std@@YAXPEAI0AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??$_Destroy_range@V?$allocator@I@std@@PEAI@std@@YAXPEAI0AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z DD imagerel $LN11
	DD	imagerel $LN11+258
	DD	imagerel $unwind$??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z@4HA DD imagerel ?dtor$0@?0???$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z@4HA
	DD	imagerel ?dtor$0@?0???$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z@4HA+24
	DD	imagerel $unwind$?dtor$0@?0???$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?decimal_point@?$numpunct@D@std@@QEBADXZ DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$?decimal_point@?$numpunct@D@std@@QEBADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?thousands_sep@?$numpunct@D@std@@QEBADXZ DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$?thousands_sep@?$numpunct@D@std@@QEBADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD imagerel $LN5
	DD	imagerel $LN5+64
	DD	imagerel $unwind$?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD imagerel $LN5
	DD	imagerel $LN5+64
	DD	imagerel $unwind$?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD imagerel $LN5
	DD	imagerel $LN5+64
	DD	imagerel $unwind$?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z DD imagerel $LN4
	DD	imagerel $LN4+96
	DD	imagerel $unwind$??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z@4HA DD imagerel ?dtor$0@?0???0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z@4HA+24
	DD	imagerel $unwind$?dtor$0@?0???0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z DD imagerel $LN10
	DD	imagerel $LN10+244
	DD	imagerel $unwind$?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA DD imagerel ?dtor$0@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA
	DD	imagerel ?dtor$0@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA+29
	DD	imagerel $unwind$?dtor$0@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA DD imagerel ?dtor$1@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA
	DD	imagerel ?dtor$1@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA+38
	DD	imagerel $unwind$?dtor$1@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$numpunct@D@std@@MEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??1?$numpunct@D@std@@MEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z DD imagerel $LN14
	DD	imagerel $LN14+512
	DD	imagerel $unwind$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0??_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z@4HA DD imagerel ?catch$0@?0??_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z@4HA
	DD	imagerel ?catch$0@?0??_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z@4HA+49
	DD	imagerel $unwind$?catch$0@?0??_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD imagerel $LN5
	DD	imagerel $LN5+62
	DD	imagerel $unwind$?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD imagerel $LN5
	DD	imagerel $LN5+62
	DD	imagerel $unwind$?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD imagerel $LN5
	DD	imagerel $LN5+62
	DD	imagerel $unwind$?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$numpunct@D@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?_Tidy@?$numpunct@D@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$numpunct@D@std@@MEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$??_G?$numpunct@D@std@@MEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0V?$allocator@D@std@@@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??$?0V?$allocator@D@std@@@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Pocca@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEBU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$??$_Pocca@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEBU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+46
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$destroy@PEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??$destroy@PEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@PEADAEAPEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEADAEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$construct@PEADAEAPEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEADAEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Umove@PEAUDsDevice@@@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAPEAUDsDevice@@PEAU2@00@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$_Umove@PEAUDsDevice@@@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAPEAUDsDevice@@PEAU2@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Umove@PEAH@?$vector@HV?$allocator@H@std@@@std@@IEAAPEAHPEAH00@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$_Umove@PEAH@?$vector@HV?$allocator@H@std@@@std@@IEAAPEAHPEAH00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Umove@PEAW4Api@RtAudio@@@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAPEAW4Api@RtAudio@@PEAW423@00@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$_Umove@PEAW4Api@RtAudio@@@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAPEAW4Api@RtAudio@@PEAW423@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Umove@PEAI@?$vector@IV?$allocator@I@std@@@std@@IEAAPEAIPEAI00@Z DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??$_Umove@PEAI@?$vector@IV?$allocator@I@std@@@std@@IEAAPEAIPEAI00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Immortalizer@V_Iostream_error_category@std@@@std@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+76
	DD	imagerel $unwind$??0?$_Immortalizer@V_Iostream_error_category@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__F_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+21
	DD	imagerel $unwind$??__F_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@0U?$less@X@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@0U?$less@X@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Ptr_move_cat@UDsDevice@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@AEBQEAUDsDevice@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$_Ptr_move_cat@UDsDevice@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@AEBQEAUDsDevice@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Move_unchecked1@PEAUDsDevice@@PEAU1@@std@@YAPEAUDsDevice@@PEAU1@00U_General_ptr_iterator_tag@0@@Z DD imagerel $LN6
	DD	imagerel $LN6+101
	DD	imagerel $unwind$??$_Move_unchecked1@PEAUDsDevice@@PEAU1@@std@@YAPEAUDsDevice@@PEAU1@00U_General_ptr_iterator_tag@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@UDsDevice@@AEAU1@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@AEAU3@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$construct@UDsDevice@@AEAU1@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@AEAU3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@UDsDevice@@AEBU1@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@AEBU3@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$construct@UDsDevice@@AEBU1@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@AEBU3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@HAEAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@PEAHAEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$construct@HAEAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@PEAHAEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@HAEBH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@PEAHAEBH@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$construct@HAEBH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@PEAHAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@HH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@PEAH$$QEAH@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$construct@HH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@PEAH$$QEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@W4Api@RtAudio@@W412@@?$allocator_traits@V?$allocator@W4Api@RtAudio@@@std@@@std@@SAXAEAV?$allocator@W4Api@RtAudio@@@1@PEAW4Api@RtAudio@@$$QEAW434@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$construct@W4Api@RtAudio@@W412@@?$allocator_traits@V?$allocator@W4Api@RtAudio@@@std@@@std@@SAXAEAV?$allocator@W4Api@RtAudio@@@1@PEAW4Api@RtAudio@@$$QEAW434@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@IAEAI@?$allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@PEAIAEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$construct@IAEAI@?$allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@PEAIAEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@IAEBI@?$allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@PEAIAEBI@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$construct@IAEBI@?$allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@PEAIAEBI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@II@?$allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@PEAI$$QEAI@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$construct@II@?$allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@PEAI$$QEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$_Wrap_alloc@V?$allocator@I@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??$?0U?$_Wrap_alloc@V?$allocator@I@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?8V?$allocator@D@std@@V01@@std@@YA_NAEBU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??$?8V?$allocator@D@std@@V01@@std@@YA_NAEBU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z DD imagerel $LN4
	DD	imagerel $LN4+64
	DD	imagerel $unwind$??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range1@V?$allocator@UDsDevice@@@std@@PEAUDsDevice@@@std@@YAXPEAUDsDevice@@0AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z DD imagerel $LN6
	DD	imagerel $LN6+82
	DD	imagerel $unwind$??$_Destroy_range1@V?$allocator@UDsDevice@@@std@@PEAUDsDevice@@@std@@YAXPEAUDsDevice@@0AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0U?$integral_constant@_N$00@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0U?$integral_constant@_N$00@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$destroy@PEAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@PEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??$destroy@PEAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@PEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@PEADAEAPEAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@PEAPEADAEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$construct@PEADAEAPEAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@PEAPEADAEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$??$_Uninitialized_move@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAHPEAHV?$allocator@H@std@@@std@@YAPEAHPEAH00AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$??$_Uninitialized_move@PEAHPEAHV?$allocator@H@std@@@std@@YAPEAHPEAH00AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAW4Api@RtAudio@@PEAW412@V?$allocator@W4Api@RtAudio@@@std@@@std@@YAPEAW4Api@RtAudio@@PEAW412@00AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$??$_Uninitialized_move@PEAW4Api@RtAudio@@PEAW412@V?$allocator@W4Api@RtAudio@@@std@@@std@@YAPEAW4Api@RtAudio@@PEAW412@00AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move@PEAIPEAIV?$allocator@I@std@@@std@@YAPEAIPEAI00AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$??$_Uninitialized_move@PEAIPEAIV?$allocator@I@std@@@std@@YAPEAIPEAI00AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z DD imagerel $LN7
	DD	imagerel $LN7+156
	DD	imagerel $unwind$??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Getvals@D@?$numpunct@D@std@@IEAAXDPEBUlconv@@U_Cvtvec@@@Z DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$??$_Getvals@D@?$numpunct@D@std@@IEAAXDPEBUlconv@@U_Cvtvec@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ DD imagerel ??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
	DD	imagerel ??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ+23
	DD	imagerel $unwind$??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ DD imagerel ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
	DD	imagerel ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ+23
	DD	imagerel $unwind$??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@YAPEAIV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@YAPEAIV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Sort_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??$_Sort_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z DD imagerel $LN6
	DD	imagerel $LN6+110
	DD	imagerel $unwind$??$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z@4HA DD imagerel ?dtor$0@?0???$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z@4HA
	DD	imagerel ?dtor$0@?0???$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z@4HA+28
	DD	imagerel $unwind$?dtor$0@?0???$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z DD imagerel $LN6
	DD	imagerel $LN6+110
	DD	imagerel $unwind$??$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z@4HA DD imagerel ?dtor$0@?0???$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z@4HA
	DD	imagerel ?dtor$0@?0???$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z@4HA+28
	DD	imagerel $unwind$?dtor$0@?0???$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@HAEAH@?$allocator@H@std@@QEAAXPEAHAEAH@Z DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$??$construct@HAEAH@?$allocator@H@std@@QEAAXPEAHAEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@HAEBH@?$allocator@H@std@@QEAAXPEAHAEBH@Z DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$??$construct@HAEBH@?$allocator@H@std@@QEAAXPEAHAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@HH@?$allocator@H@std@@QEAAXPEAH$$QEAH@Z DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$??$construct@HH@?$allocator@H@std@@QEAAXPEAH$$QEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@W4Api@RtAudio@@W412@@?$allocator@W4Api@RtAudio@@@std@@QEAAXPEAW4Api@RtAudio@@$$QEAW423@@Z DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$??$construct@W4Api@RtAudio@@W412@@?$allocator@W4Api@RtAudio@@@std@@QEAAXPEAW4Api@RtAudio@@$$QEAW423@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@IAEAI@?$allocator@I@std@@QEAAXPEAIAEAI@Z DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$??$construct@IAEAI@?$allocator@I@std@@QEAAXPEAIAEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@IAEBI@?$allocator@I@std@@QEAAXPEAIAEBI@Z DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$??$construct@IAEBI@?$allocator@I@std@@QEAAXPEAIAEBI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@II@?$allocator@I@std@@QEAAXPEAI$$QEAI@Z DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$??$construct@II@?$allocator@I@std@@QEAAXPEAI$$QEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$destroy@UDsDevice@@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??$destroy@UDsDevice@@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@PEADAEAPEAD@?$allocator@D@std@@QEAAXPEAPEADAEAPEAD@Z DD imagerel $LN5
	DD	imagerel $LN5+94
	DD	imagerel $unwind$??$construct@PEADAEAPEAD@?$allocator@D@std@@QEAAXPEAPEADAEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move_al_unchecked@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+114
	DD	imagerel $unwind$??$_Uninitialized_move_al_unchecked@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move_al_unchecked@PEAHPEAHV?$allocator@H@std@@@std@@YAPEAHPEAH00AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$_Uninitialized_move_al_unchecked@PEAHPEAHV?$allocator@H@std@@@std@@YAPEAHPEAH00AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move_al_unchecked@PEAW4Api@RtAudio@@PEAW412@V?$allocator@W4Api@RtAudio@@@std@@@std@@YAPEAW4Api@RtAudio@@PEAW412@00AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$_Uninitialized_move_al_unchecked@PEAW4Api@RtAudio@@PEAW412@V?$allocator@W4Api@RtAudio@@@std@@@std@@YAPEAW4Api@RtAudio@@PEAW412@00AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move_al_unchecked@PEAIPEAIV?$allocator@I@std@@@std@@YAPEAIPEAI00AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??$_Uninitialized_move_al_unchecked@PEAIPEAIV?$allocator@I@std@@@std@@YAPEAIPEAI00AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Sort_unchecked1@PEAI_JU?$less@X@std@@@std@@YAXPEAI0_JAEAU?$less@X@0@@Z DD imagerel $LN10
	DD	imagerel $LN10+350
	DD	imagerel $unwind$??$_Sort_unchecked1@PEAI_JU?$less@X@std@@@std@@YAXPEAI0_JAEAU?$less@X@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$destroy@UDsDevice@@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??$destroy@UDsDevice@@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z DD imagerel $LN13
	DD	imagerel $LN13+142
	DD	imagerel $unwind$??$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$0@?0???$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z@4HA DD imagerel ?catch$0@?0???$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z@4HA
	DD	imagerel ?catch$0@?0???$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z@4HA+54
	DD	imagerel $unwind$?catch$0@?0???$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move_al_unchecked1@HHV?$allocator@H@std@@@std@@YAPEAHPEAH00AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??$_Uninitialized_move_al_unchecked1@HHV?$allocator@H@std@@@std@@YAPEAHPEAH00AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move_al_unchecked1@W4Api@RtAudio@@W412@V?$allocator@W4Api@RtAudio@@@std@@@std@@YAPEAW4Api@RtAudio@@PEAW412@00AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??$_Uninitialized_move_al_unchecked1@W4Api@RtAudio@@W412@V?$allocator@W4Api@RtAudio@@@std@@@std@@YAPEAW4Api@RtAudio@@PEAW412@00AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_move_al_unchecked1@IIV?$allocator@I@std@@@std@@YAPEAIPEAI00AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??$_Uninitialized_move_al_unchecked1@IIV?$allocator@I@std@@@std@@YAPEAIPEAI00AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Partition_by_median_guess_unchecked@PEAIU?$less@X@std@@@std@@YA?AU?$pair@PEAIPEAI@0@PEAI0AEAU?$less@X@0@@Z DD imagerel $LN33
	DD	imagerel $LN33+1056
	DD	imagerel $unwind$??$_Partition_by_median_guess_unchecked@PEAIU?$less@X@std@@@std@@YA?AU?$pair@PEAIPEAI@0@PEAI0AEAU?$less@X@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Make_heap_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+169
	DD	imagerel $unwind$??$_Make_heap_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Sort_heap_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z DD imagerel $LN6
	DD	imagerel $LN6+88
	DD	imagerel $unwind$??$_Sort_heap_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Insertion_sort_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z DD imagerel $LN12
	DD	imagerel $LN12+296
	DD	imagerel $unwind$??$_Insertion_sort_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$destroy@UDsDevice@@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@@Z DD imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$??$destroy@UDsDevice@@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@UDsDevice@@U1@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@$$QEAU2@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$construct@UDsDevice@@U1@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@$$QEAU2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAW4Api@RtAudio@@PEAW412@@std@@YAPEAW4Api@RtAudio@@PEAW412@00@Z DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$??$_Copy_memmove@PEAW4Api@RtAudio@@PEAW412@@std@@YAPEAW4Api@RtAudio@@PEAW412@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$??$_Copy_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Guess_median_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI00AEAU?$less@X@0@@Z DD imagerel $LN5
	DD	imagerel $LN5+344
	DD	imagerel $unwind$??$_Guess_median_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI00AEAU?$less@X@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?RAEAIAEAI@?$less@X@std@@QEBA_NAEAI0@Z DD imagerel $LN5
	DD	imagerel $LN5+60
	DD	imagerel $unwind$??$?RAEAIAEAI@?$less@X@std@@QEBA_NAEAI0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$iter_swap@PEAIPEAI@std@@YAXPEAI0@Z DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$??$iter_swap@PEAIPEAI@std@@YAXPEAI0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0AEAPEAIAEAPEAIX$0A@@?$pair@PEAIPEAI@std@@QEAA@AEAPEAI0@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??$?0AEAPEAIAEAPEAIX$0A@@?$pair@PEAIPEAI@std@@QEAA@AEAPEAI0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Pop_heap_hole_by_index@PEAI_JIU?$less@X@std@@@std@@YAXPEAI_J1$$QEAIAEAU?$less@X@0@@Z DD imagerel $LN7
	DD	imagerel $LN7+352
	DD	imagerel $unwind$??$_Pop_heap_hole_by_index@PEAI_JIU?$less@X@std@@@std@@YAXPEAI_J1$$QEAIAEAU?$less@X@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Pop_heap_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z DD imagerel $LN4
	DD	imagerel $LN4+123
	DD	imagerel $unwind$??$_Pop_heap_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Move_backward_unchecked@PEAIPEAI@std@@YAPEAIPEAI00@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$_Move_backward_unchecked@PEAIPEAI@std@@YAPEAIPEAI00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@UDsDevice@@U1@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@$$QEAU3@@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$construct@UDsDevice@@U1@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@$$QEAU3@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Med3_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI00AEAU?$less@X@0@@Z DD imagerel $LN6
	DD	imagerel $LN6+155
	DD	imagerel $unwind$??$_Med3_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI00AEAU?$less@X@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$swap@IX@std@@YAXAEAI0@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??$swap@IX@std@@YAXAEAI0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Push_heap_by_index@PEAI_JIU?$less@X@std@@@std@@YAXPEAI_J1$$QEAIAEAU?$less@X@0@@Z DD imagerel $LN6
	DD	imagerel $LN6+198
	DD	imagerel $unwind$??$_Push_heap_by_index@PEAI_JIU?$less@X@std@@@std@@YAXPEAI_J1$$QEAIAEAU?$less@X@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Pop_heap_hole_unchecked@PEAIIU?$less@X@std@@@std@@YAXPEAI00$$QEAIAEAU?$less@X@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+106
	DD	imagerel $unwind$??$_Pop_heap_hole_unchecked@PEAIIU?$less@X@std@@@std@@YAXPEAI00$$QEAIAEAU?$less@X@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Move_backward_unchecked1@PEAIPEAI@std@@YAPEAIPEAI00U_Trivially_copyable_ptr_iterator_tag@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$??$_Move_backward_unchecked1@PEAIPEAI@std@@YAPEAIPEAI00U_Trivially_copyable_ptr_iterator_tag@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$construct@UDsDevice@@U1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@$$QEAU2@@Z DD imagerel $LN5
	DD	imagerel $LN5+91
	DD	imagerel $unwind$??$construct@UDsDevice@@U1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@$$QEAU2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_backward_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z DD imagerel $LN3
	DD	imagerel $LN3+109
	DD	imagerel $unwind$??$_Copy_backward_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z
pdata	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??id$initializer$@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2P6AXXZEA@@3P6AXXZEA DQ FLAT:??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; ??id$initializer$@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2P6AXXZEA@@3P6AXXZEA
CRT$XCU	ENDS
;	COMDAT __real@4202a05f20000000
CONST	SEGMENT
__real@4202a05f20000000 DQ 04202a05f20000000r	; 1e+10
CONST	ENDS
;	COMDAT __real@41dfffffffe00000
CONST	SEGMENT
__real@41dfffffffe00000 DQ 041dfffffffe00000r	; 2.14748e+09
CONST	ENDS
;	COMDAT __real@415fffffe0000000
CONST	SEGMENT
__real@415fffffe0000000 DQ 0415fffffe0000000r	; 8.38861e+06
CONST	ENDS
;	COMDAT __real@40dfffe000000000
CONST	SEGMENT
__real@40dfffe000000000 DQ 040dfffe000000000r	; 32767.5
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@405fe00000000000
CONST	SEGMENT
__real@405fe00000000000 DQ 0405fe00000000000r	; 127.5
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f80101010101010
CONST	SEGMENT
__real@3f80101010101010 DQ 03f80101010101010r	; 0.00784314
CONST	ENDS
;	COMDAT __real@3f00001000100010
CONST	SEGMENT
__real@3f00001000100010 DQ 03f00001000100010r	; 3.0518e-05
CONST	ENDS
;	COMDAT __real@3e80000010000010
CONST	SEGMENT
__real@3e80000010000010 DQ 03e80000010000010r	; 1.19209e-07
CONST	ENDS
;	COMDAT __real@3e00000000100000
CONST	SEGMENT
__real@3e00000000100000 DQ 03e00000000100000r	; 4.65661e-10
CONST	ENDS
;	COMDAT __real@3c008081
CONST	SEGMENT
__real@3c008081 DD 03c008081r			; 0.00784314
CONST	ENDS
;	COMDAT __real@38000080
CONST	SEGMENT
__real@38000080 DD 038000080r			; 3.0518e-05
CONST	ENDS
;	COMDAT __real@34000001
CONST	SEGMENT
__real@34000001 DD 034000001r			; 1.19209e-07
CONST	ENDS
;	COMDAT __real@30000000
CONST	SEGMENT
__real@30000000 DD 030000000r			; 4.65661e-10
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$numpunct@D@std@@8 DD imagerel ??_R0?AV?$numpunct@D@std@@@8 ; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R2?$numpunct@D@std@@8 DD imagerel ??_R1A@?0A@EA@?$numpunct@D@std@@8 ; std::numpunct<char>::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@facet@locale@std@@8
	DD	imagerel ??_R1A@?0A@EA@_Facet_base@std@@8
	DD	imagerel ??_R17?0A@EA@_Crt_new_delete@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R3?$numpunct@D@std@@8 DD 00H				; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	imagerel ??_R2?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
data$r	SEGMENT
??_R0?AV?$numpunct@D@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::numpunct<char> `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$numpunct@D@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT
??_R4?$numpunct@D@std@@6B@ DD 01H			; std::numpunct<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV?$numpunct@D@std@@@8
	DD	imagerel ??_R3?$numpunct@D@std@@8
	DD	imagerel ??_R4?$numpunct@D@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@RtApiDs@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RtApiDs@@8 DD imagerel ??_R0?AVRtApiDs@@@8 ; RtApiDs::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3RtApiDs@@8
rdata$r	ENDS
;	COMDAT ??_R2RtApiDs@@8
rdata$r	SEGMENT
??_R2RtApiDs@@8 DD imagerel ??_R1A@?0A@EA@RtApiDs@@8	; RtApiDs::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@RtApi@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3RtApiDs@@8
rdata$r	SEGMENT
??_R3RtApiDs@@8 DD 00H					; RtApiDs::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2RtApiDs@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRtApiDs@@@8
data$r	SEGMENT
??_R0?AVRtApiDs@@@8 DQ FLAT:??_7type_info@@6B@		; RtApiDs `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVRtApiDs@@', 00H
data$r	ENDS
;	COMDAT ??_R4RtApiDs@@6B@
rdata$r	SEGMENT
??_R4RtApiDs@@6B@ DD 01H				; RtApiDs::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVRtApiDs@@@8
	DD	imagerel ??_R3RtApiDs@@8
	DD	imagerel ??_R4RtApiDs@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@RtApi@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RtApi@@8 DD imagerel ??_R0?AVRtApi@@@8	; RtApi::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3RtApi@@8
rdata$r	ENDS
;	COMDAT ??_R2RtApi@@8
rdata$r	SEGMENT
??_R2RtApi@@8 DD imagerel ??_R1A@?0A@EA@RtApi@@8	; RtApi::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3RtApi@@8
rdata$r	SEGMENT
??_R3RtApi@@8 DD 00H					; RtApi::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2RtApi@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRtApi@@@8
data$r	SEGMENT
??_R0?AVRtApi@@@8 DQ FLAT:??_7type_info@@6B@		; RtApi `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVRtApi@@', 00H
data$r	ENDS
;	COMDAT ??_R4RtApi@@6B@
rdata$r	SEGMENT
??_R4RtApi@@6B@ DD 01H					; RtApi::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVRtApi@@@8
	DD	imagerel ??_R3RtApi@@8
	DD	imagerel ??_R4RtApi@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD imagerel ??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@facet@locale@std@@8
	DD	imagerel ??_R1A@?0A@EA@_Facet_base@std@@8
	DD	imagerel ??_R17?0A@EA@_Crt_new_delete@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	imagerel ??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@'
	DB	'std@@@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD 01H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
	DD	imagerel ??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
	DD	imagerel ??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@RtAudioError@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RtAudioError@@8 DD imagerel ??_R0?AVRtAudioError@@@8 ; RtAudioError::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3RtAudioError@@8
rdata$r	ENDS
;	COMDAT ??_R2RtAudioError@@8
rdata$r	SEGMENT
??_R2RtAudioError@@8 DD imagerel ??_R1A@?0A@EA@RtAudioError@@8 ; RtAudioError::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@runtime_error@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3RtAudioError@@8
rdata$r	SEGMENT
??_R3RtAudioError@@8 DD 00H				; RtAudioError::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2RtAudioError@@8
rdata$r	ENDS
;	COMDAT ??_R4RtAudioError@@6B@
rdata$r	SEGMENT
??_R4RtAudioError@@6B@ DD 01H				; RtAudioError::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVRtAudioError@@@8
	DD	imagerel ??_R3RtAudioError@@8
	DD	imagerel ??_R4RtAudioError@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@failure@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@failure@ios_base@std@@8 DD imagerel ??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT
??_R2failure@ios_base@std@@8 DD imagerel ??_R1A@?0A@EA@failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@system_error@std@@8
	DD	imagerel ??_R1A@?0A@EA@_System_error@std@@8
	DD	imagerel ??_R1A@?0A@EA@runtime_error@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT
??_R3failure@ios_base@std@@8 DD 00H			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	imagerel ??_R2failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT
??_R4failure@ios_base@std@@6B@ DD 01H			; std::ios_base::failure::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVfailure@ios_base@std@@@8
	DD	imagerel ??_R3failure@ios_base@std@@8
	DD	imagerel ??_R4failure@ios_base@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category@std@@8 DD imagerel ??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category@std@@8 DD imagerel ??_R1A@?0A@EA@_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@_Generic_error_category@std@@8
	DD	imagerel ??_R1A@?0A@EA@error_category@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category@std@@8 DD 00H		; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2_Iostream_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_Iostream_error_category@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV_Iostream_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Iostream_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category@std@@6B@ DD 01H		; std::_Iostream_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV_Iostream_error_category@std@@@8
	DD	imagerel ??_R3_Iostream_error_category@std@@8
	DD	imagerel ??_R4_Iostream_error_category@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Generic_error_category@std@@8 DD imagerel ??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R2_Generic_error_category@std@@8 DD imagerel ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@error_category@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3_Generic_error_category@std@@8
rdata$r	SEGMENT
??_R3_Generic_error_category@std@@8 DD 00H		; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2_Generic_error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Generic_error_category@std@@@8
data$r	SEGMENT
??_R0?AV_Generic_error_category@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::_Generic_error_category `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV_Generic_error_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Generic_error_category@std@@6B@
rdata$r	SEGMENT
??_R4_Generic_error_category@std@@6B@ DD 01H		; std::_Generic_error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV_Generic_error_category@std@@@8
	DD	imagerel ??_R3_Generic_error_category@std@@8
	DD	imagerel ??_R4_Generic_error_category@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@system_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@system_error@std@@8 DD imagerel ??_R0?AVsystem_error@std@@@8 ; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2system_error@std@@8
rdata$r	SEGMENT
??_R2system_error@std@@8 DD imagerel ??_R1A@?0A@EA@system_error@std@@8 ; std::system_error::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@_System_error@std@@8
	DD	imagerel ??_R1A@?0A@EA@runtime_error@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3system_error@std@@8
rdata$r	SEGMENT
??_R3system_error@std@@8 DD 00H				; std::system_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	imagerel ??_R2system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4system_error@std@@6B@
rdata$r	SEGMENT
??_R4system_error@std@@6B@ DD 01H			; std::system_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVsystem_error@std@@@8
	DD	imagerel ??_R3system_error@std@@8
	DD	imagerel ??_R4system_error@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error@std@@8 DD imagerel ??_R0?AV_System_error@std@@@8 ; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error@std@@8
rdata$r	SEGMENT
??_R2_System_error@std@@8 DD imagerel ??_R1A@?0A@EA@_System_error@std@@8 ; std::_System_error::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@runtime_error@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3_System_error@std@@8
rdata$r	SEGMENT
??_R3_System_error@std@@8 DD 00H			; std::_System_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4_System_error@std@@6B@
rdata$r	SEGMENT
??_R4_System_error@std@@6B@ DD 01H			; std::_System_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV_System_error@std@@@8
	DD	imagerel ??_R3_System_error@std@@8
	DD	imagerel ??_R4_System_error@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD imagerel ??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD imagerel ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
data$r	SEGMENT
??_R0?AVerror_category@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVerror_category@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4error_category@std@@6B@
rdata$r	SEGMENT
??_R4error_category@std@@6B@ DD 01H			; std::error_category::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVerror_category@std@@@8
	DD	imagerel ??_R3error_category@std@@8
	DD	imagerel ??_R4error_category@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ctype@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@D@std@@8 DD imagerel ??_R0?AV?$ctype@D@std@@@8 ; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT
??_R2?$ctype@D@std@@8 DD imagerel ??_R1A@?0A@EA@?$ctype@D@std@@8 ; std::ctype<char>::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@ctype_base@std@@8
	DD	imagerel ??_R1A@?0A@EA@facet@locale@std@@8
	DD	imagerel ??_R1A@?0A@EA@_Facet_base@std@@8
	DD	imagerel ??_R17?0A@EA@_Crt_new_delete@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT
??_R3?$ctype@D@std@@8 DD 00H				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	imagerel ??_R2?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
data$r	SEGMENT
??_R0?AV?$ctype@D@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::ctype<char> `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$ctype@D@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@D@std@@6B@ DD 01H				; std::ctype<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV?$ctype@D@std@@@8
	DD	imagerel ??_R3?$ctype@D@std@@8
	DD	imagerel ??_R4?$ctype@D@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ctype_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ctype_base@std@@8 DD imagerel ??_R0?AUctype_base@std@@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ctype_base@std@@8
rdata$r	SEGMENT
??_R2ctype_base@std@@8 DD imagerel ??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@facet@locale@std@@8
	DD	imagerel ??_R1A@?0A@EA@_Facet_base@std@@8
	DD	imagerel ??_R17?0A@EA@_Crt_new_delete@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3ctype_base@std@@8
rdata$r	SEGMENT
??_R3ctype_base@std@@8 DD 00H				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	imagerel ??_R2ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
data$r	SEGMENT
??_R0?AUctype_base@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::ctype_base `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AUctype_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4ctype_base@std@@6B@
rdata$r	SEGMENT
??_R4ctype_base@std@@6B@ DD 01H				; std::ctype_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AUctype_base@std@@@8
	DD	imagerel ??_R3ctype_base@std@@8
	DD	imagerel ??_R4ctype_base@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 01H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVfacet@locale@std@@@8
	DD	imagerel ??_R3facet@locale@std@@8
	DD	imagerel ??_R4facet@locale@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Crt_new_delete@std@@8 DD imagerel ??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R2_Crt_new_delete@std@@8 DD imagerel ??_R1A@?0A@EA@_Crt_new_delete@std@@8 ; std::_Crt_new_delete::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R3_Crt_new_delete@std@@8 DD 00H			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU_Crt_new_delete@std@@@8
data$r	SEGMENT
??_R0?AU_Crt_new_delete@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::_Crt_new_delete `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AU_Crt_new_delete@std@@', 00H
data$r	ENDS
;	COMDAT ??_R17?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@_Crt_new_delete@std@@8 DD imagerel ??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD imagerel ??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@_Facet_base@std@@8
	DD	imagerel ??_R17?0A@EA@_Crt_new_delete@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	imagerel ??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
data$r	SEGMENT
??_R0?AVfacet@locale@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVfacet@locale@std@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD imagerel ??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Facet_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Facet_base@std@@8 DD imagerel ??_R0?AV_Facet_base@std@@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Facet_base@std@@8
rdata$r	SEGMENT
??_R2_Facet_base@std@@8 DD imagerel ??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3_Facet_base@std@@8
rdata$r	SEGMENT
??_R3_Facet_base@std@@8 DD 00H				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Facet_base@std@@@8
data$r	SEGMENT
??_R0?AV_Facet_base@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::_Facet_base `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV_Facet_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4_Facet_base@std@@6B@
rdata$r	SEGMENT
??_R4_Facet_base@std@@6B@ DD 01H			; std::_Facet_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV_Facet_base@std@@@8
	DD	imagerel ??_R3_Facet_base@std@@8
	DD	imagerel ??_R4_Facet_base@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_cast@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_cast@std@@8 DD imagerel ??_R0?AVbad_cast@std@@@8 ; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_cast@std@@8
rdata$r	SEGMENT
??_R2bad_cast@std@@8 DD imagerel ??_R1A@?0A@EA@bad_cast@std@@8 ; std::bad_cast::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_cast@std@@8
rdata$r	SEGMENT
??_R3bad_cast@std@@8 DD 00H				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_cast@std@@6B@
rdata$r	SEGMENT
??_R4bad_cast@std@@6B@ DD 01H				; std::bad_cast::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_cast@std@@@8
	DD	imagerel ??_R3bad_cast@std@@8
	DD	imagerel ??_R4bad_cast@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD imagerel ??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD imagerel ??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 01H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVruntime_error@std@@@8
	DD	imagerel ??_R3runtime_error@std@@8
	DD	imagerel ??_R4runtime_error@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD imagerel ??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3EA@ios_base@std@@8
	DD	imagerel ??_R17A@3EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	imagerel ??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allo'
	DB	'cator@D@2@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 01H ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	088H
	DD	04H
	DD	imagerel ??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	imagerel ??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
	DD	imagerel ??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD imagerel ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocato'
	DB	'r@D@2@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 01H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	imagerel ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
	DD	imagerel ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17A@3EA@?$_Iosb@H@std@@8 DD imagerel ??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
	DD	00H
	DD	08H
	DD	00H
	DD	04H
	DD	040H
	DD	imagerel ??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD imagerel ??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	imagerel ??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	imagerel ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3EA@ios_base@std@@8
	DD	imagerel ??_R17A@3EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	imagerel ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DD 01H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	010H
	DD	04H
	DD	imagerel ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
	DD	imagerel ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DD 01H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
	DD	imagerel ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@ios_base@std@@8
	DD	imagerel ??_R17?0A@EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DD 01H ; std::basic_ios<char,std::char_traits<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
	DD	imagerel ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD imagerel ??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD imagerel ??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
data$r	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$_Iosb@H@std@@', 00H
data$r	ENDS
;	COMDAT ??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$_Iosb@H@std@@8 DD imagerel ??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD imagerel ??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD imagerel ??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	imagerel ??_R17?0A@EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
data$r	SEGMENT
??_R0?AVios_base@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVios_base@std@@', 00H
data$r	ENDS
;	COMDAT ??_R4ios_base@std@@6B@
rdata$r	SEGMENT
??_R4ios_base@std@@6B@ DD 01H				; std::ios_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVios_base@std@@@8
	DD	imagerel ??_R3ios_base@std@@8
	DD	imagerel ??_R4ios_base@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT _CT??_R0?AVbad_cast@std@@@824
xdata$x	SEGMENT
_CT??_R0?AVbad_cast@std@@@824 DD 00H
	DD	imagerel ??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_cast@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
data$r	SEGMENT
??_R0?AVbad_cast@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_cast@std@@', 00H
data$r	ENDS
;	COMDAT _CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
_CTA2?AVbad_cast@std@@ DD 02H
	DD	imagerel _CT??_R0?AVbad_cast@std@@@824
	DD	imagerel _CT??_R0?AVexception@std@@@824
xdata$x	ENDS
;	COMDAT _TI2?AVbad_cast@std@@
xdata$x	SEGMENT
_TI2?AVbad_cast@std@@ DD 00H
	DD	imagerel ??1bad_cast@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OOPEBDOJ@pP?$AA@
CONST	SEGMENT
??_C@_02OOPEBDOJ@pP?$AA@ DB 'pP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MDKMJEGG@eE?$AA@
CONST	SEGMENT
??_C@_02MDKMJEGG@eE?$AA@ DB 'eE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_7?$numpunct@D@std@@6B@
CONST	SEGMENT
??_7?$numpunct@D@std@@6B@ DQ FLAT:??_R4?$numpunct@D@std@@6B@ ; std::numpunct<char>::`vftable'
	DQ	FLAT:??_E?$numpunct@D@std@@MEAAPEAXI@Z
	DQ	FLAT:?_Incref@facet@locale@std@@UEAAXXZ
	DQ	FLAT:?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ
	DQ	FLAT:?do_decimal_point@?$numpunct@D@std@@MEBADXZ
	DQ	FLAT:?do_thousands_sep@?$numpunct@D@std@@MEBADXZ
	DQ	FLAT:?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DQ	FLAT:?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DQ	FLAT:?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
CONST	ENDS
;	COMDAT ??_C@_02EAOCLKAK@ld?$AA@
CONST	SEGMENT
??_C@_02EAOCLKAK@ld?$AA@ DB 'ld', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BDDLJJBK@lu?$AA@
CONST	SEGMENT
??_C@_02BDDLJJBK@lu?$AA@ DB 'lu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HIKPPMOK@Ld?$AA@
CONST	SEGMENT
??_C@_02HIKPPMOK@Ld?$AA@ DB 'Ld', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CLHGNPPK@Lu?$AA@
CONST	SEGMENT
??_C@_02CLHGNPPK@Lu?$AA@ DB 'Lu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BBAHNLBA@?$CFp?$AA@
CONST	SEGMENT
??_C@_02BBAHNLBA@?$CFp?$AA@ DB '%p', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
CONST	SEGMENT
??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DQ FLAT:??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
	DQ	FLAT:??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z
	DQ	FLAT:?_Incref@facet@locale@std@@UEAAXXZ
	DQ	FLAT:?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ
	DQ	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z
	DQ	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z
	DQ	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z
	DQ	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_K@Z
	DQ	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_J@Z
	DQ	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z
	DQ	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z
	DQ	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z
CONST	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVRtAudioError@@@832
xdata$x	SEGMENT
_CT??_R0?AVRtAudioError@@@832 DD 00H
	DD	imagerel ??_R0?AVRtAudioError@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	020H
	DD	imagerel ??0RtAudioError@@QEAA@AEBV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVRtAudioError@@@8
data$r	SEGMENT
??_R0?AVRtAudioError@@@8 DQ FLAT:??_7type_info@@6B@	; RtAudioError `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVRtAudioError@@', 00H
data$r	ENDS
;	COMDAT _CTA3?AVRtAudioError@@
xdata$x	SEGMENT
_CTA3?AVRtAudioError@@ DD 03H
	DD	imagerel _CT??_R0?AVRtAudioError@@@832
	DD	imagerel _CT??_R0?AVruntime_error@std@@@824
	DD	imagerel _CT??_R0?AVexception@std@@@824
xdata$x	ENDS
;	COMDAT _TI3?AVRtAudioError@@
xdata$x	SEGMENT
_TI3?AVRtAudioError@@ DD 00H
	DD	imagerel ??1RtAudioError@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVRtAudioError@@
xdata$x	ENDS
;	COMDAT ??_7RtApiDs@@6B@
CONST	SEGMENT
??_7RtApiDs@@6B@ DQ FLAT:??_R4RtApiDs@@6B@		; RtApiDs::`vftable'
	DQ	FLAT:??_ERtApiDs@@UEAAPEAXI@Z
	DQ	FLAT:?getCurrentApi@RtApiDs@@UEAA?AW4Api@RtAudio@@XZ
	DQ	FLAT:?getDeviceCount@RtApiDs@@UEAAIXZ
	DQ	FLAT:?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z
	DQ	FLAT:?getDefaultInputDevice@RtApiDs@@UEAAIXZ
	DQ	FLAT:?getDefaultOutputDevice@RtApiDs@@UEAAIXZ
	DQ	FLAT:?closeStream@RtApiDs@@UEAAXXZ
	DQ	FLAT:?startStream@RtApiDs@@UEAAXXZ
	DQ	FLAT:?stopStream@RtApiDs@@UEAAXXZ
	DQ	FLAT:?abortStream@RtApiDs@@UEAAXXZ
	DQ	FLAT:?getStreamTime@RtApi@@UEAANXZ
	DQ	FLAT:?setStreamTime@RtApi@@UEAAXN@Z
	DQ	FLAT:?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z
CONST	ENDS
;	COMDAT ??_7RtApi@@6B@
CONST	SEGMENT
??_7RtApi@@6B@ DQ FLAT:??_R4RtApi@@6B@			; RtApi::`vftable'
	DQ	FLAT:??_ERtApi@@UEAAPEAXI@Z
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
	DQ	FLAT:?getDefaultInputDevice@RtApi@@UEAAIXZ
	DQ	FLAT:?getDefaultOutputDevice@RtApi@@UEAAIXZ
	DQ	FLAT:?closeStream@RtApi@@UEAAXXZ
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
	DQ	FLAT:?getStreamTime@RtApi@@UEAANXZ
	DQ	FLAT:?setStreamTime@RtApi@@UEAAXN@Z
	DQ	FLAT:?probeDeviceOpen@RtApi@@MEAA_NIW4StreamMode@1@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z
CONST	ENDS
;	COMDAT ??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@
CONST	SEGMENT
??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@ DD 00H ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	088H
CONST	ENDS
;	COMDAT ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DQ FLAT:??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DQ	FLAT:??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@EAAPEAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DQ FLAT:??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DQ	FLAT:??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z
	DQ	FLAT:?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
	DQ	FLAT:?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
	DQ	FLAT:?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z
	DQ	FLAT:?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z
	DQ	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JXZ
	DQ	FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ
	DQ	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DQ	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z
	DQ	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z
	DQ	FLAT:?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DQ	FLAT:?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DQ	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAPEAV12@PEAD_J@Z
	DQ	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DQ	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ DQ FLAT:??_R4?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_streambuf<char,std::char_traits<char> >::`vftable'
	DQ	FLAT:??_E?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
	DQ	FLAT:?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
	DQ	FLAT:?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
	DQ	FLAT:?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
	DQ	FLAT:?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
	DQ	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JXZ
	DQ	FLAT:?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DQ	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DQ	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z
	DQ	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z
	DQ	FLAT:?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DQ	FLAT:?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DQ	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAPEAV12@PEAD_J@Z
	DQ	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DQ	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_C@_02PHMGELLB@?6?6?$AA@
CONST	SEGMENT
??_C@_02PHMGELLB@?6?6?$AA@ DB 0aH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
CONST	SEGMENT
??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@ DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`vbtable'
	DD	010H
CONST	ENDS
;	COMDAT ??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ DQ FLAT:??_R4?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ostream<char,std::char_traits<char> >::`vftable'
	DQ	FLAT:??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
CONST	SEGMENT
??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ DQ FLAT:??_R4?$basic_ios@DU?$char_traits@D@std@@@std@@6B@ ; std::basic_ios<char,std::char_traits<char> >::`vftable'
	DQ	FLAT:??_E?$basic_ios@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
CONST	ENDS
;	COMDAT ??_7RtAudioError@@6B@
CONST	SEGMENT
??_7RtAudioError@@6B@ DQ FLAT:??_R4RtAudioError@@6B@	; RtAudioError::`vftable'
	DQ	FLAT:??_ERtAudioError@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
	DQ	FLAT:?printMessage@RtAudioError@@UEBAXXZ
	DQ	FLAT:?getType@RtAudioError@@UEBAAEBW4Type@1@XZ
	DQ	FLAT:?getMessage@RtAudioError@@UEBA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
CONST	ENDS
;	COMDAT ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@ DB 'ios_base::eofbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
CONST	SEGMENT
??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@ DB 'ios_base::failbit se'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
CONST	SEGMENT
??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@ DB 'ios_base::badbit set', 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AV_System_error@std@@@840
xdata$x	SEGMENT
_CT??_R0?AV_System_error@std@@@840 DD 00H
	DD	imagerel ??_R0?AV_System_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	imagerel ??0_System_error@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AV_System_error@std@@@8
data$r	SEGMENT
??_R0?AV_System_error@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::_System_error `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV_System_error@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVsystem_error@std@@@840
xdata$x	SEGMENT
_CT??_R0?AVsystem_error@std@@@840 DD 00H
	DD	imagerel ??_R0?AVsystem_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	imagerel ??0system_error@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVsystem_error@std@@@8
data$r	SEGMENT
??_R0?AVsystem_error@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::system_error `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVsystem_error@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVfailure@ios_base@std@@@840
xdata$x	SEGMENT
_CT??_R0?AVfailure@ios_base@std@@@840 DD 00H
	DD	imagerel ??_R0?AVfailure@ios_base@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	imagerel ??0failure@ios_base@std@@QEAA@AEBV012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
data$r	SEGMENT
??_R0?AVfailure@ios_base@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::ios_base::failure `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVfailure@ios_base@std@@', 00H
data$r	ENDS
;	COMDAT _CTA5?AVfailure@ios_base@std@@
xdata$x	SEGMENT
_CTA5?AVfailure@ios_base@std@@ DD 05H
	DD	imagerel _CT??_R0?AVfailure@ios_base@std@@@840
	DD	imagerel _CT??_R0?AVsystem_error@std@@@840
	DD	imagerel _CT??_R0?AV_System_error@std@@@840
	DD	imagerel _CT??_R0?AVruntime_error@std@@@824
	DD	imagerel _CT??_R0?AVexception@std@@@824
xdata$x	ENDS
;	COMDAT _TI5?AVfailure@ios_base@std@@
xdata$x	SEGMENT
_TI5?AVfailure@ios_base@std@@ DD 00H
	DD	imagerel ??1failure@ios_base@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA5?AVfailure@ios_base@std@@
xdata$x	ENDS
;	COMDAT ??_7ios_base@std@@6B@
CONST	SEGMENT
??_7ios_base@std@@6B@ DQ FLAT:??_R4ios_base@std@@6B@	; std::ios_base::`vftable'
	DQ	FLAT:??_Eios_base@std@@UEAAPEAXI@Z
CONST	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT
??_7failure@ios_base@std@@6B@ DQ FLAT:??_R4failure@ios_base@std@@6B@ ; std::ios_base::failure::`vftable'
	DQ	FLAT:??_Efailure@ios_base@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
CONST	SEGMENT
??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ DB 'iostream stream error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream?$AA@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream?$AA@ DB 'iostream', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category@std@@6B@ DQ FLAT:??_R4_Iostream_error_category@std@@6B@ ; std::_Iostream_error_category::`vftable'
	DQ	FLAT:??_E_Iostream_error_category@std@@UEAAPEAXI@Z
	DQ	FLAT:?name@_Iostream_error_category@std@@UEBAPEBDXZ
	DQ	FLAT:?message@_Iostream_error_category@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DQ	FLAT:?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z
	DQ	FLAT:?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z
	DQ	FLAT:?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_C@_07DCLBNMLN@generic?$AA@
CONST	SEGMENT
??_C@_07DCLBNMLN@generic?$AA@ DB 'generic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Generic_error_category@std@@6B@
CONST	SEGMENT
??_7_Generic_error_category@std@@6B@ DQ FLAT:??_R4_Generic_error_category@std@@6B@ ; std::_Generic_error_category::`vftable'
	DQ	FLAT:??_E_Generic_error_category@std@@UEAAPEAXI@Z
	DQ	FLAT:?name@_Generic_error_category@std@@UEBAPEBDXZ
	DQ	FLAT:?message@_Generic_error_category@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DQ	FLAT:?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z
	DQ	FLAT:?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z
	DQ	FLAT:?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7system_error@std@@6B@
CONST	SEGMENT
??_7system_error@std@@6B@ DQ FLAT:??_R4system_error@std@@6B@ ; std::system_error::`vftable'
	DQ	FLAT:??_Esystem_error@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5?$AA@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5?$AA@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7_System_error@std@@6B@
CONST	SEGMENT
??_7_System_error@std@@6B@ DQ FLAT:??_R4_System_error@std@@6B@ ; std::_System_error::`vftable'
	DQ	FLAT:??_E_System_error@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7error_category@std@@6B@
CONST	SEGMENT
??_7error_category@std@@6B@ DQ FLAT:??_R4error_category@std@@6B@ ; std::error_category::`vftable'
	DQ	FLAT:??_Eerror_category@std@@UEAAPEAXI@Z
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
	DQ	FLAT:?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z
	DQ	FLAT:?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z
	DQ	FLAT:?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z
CONST	ENDS
;	COMDAT ??_7?$ctype@D@std@@6B@
CONST	SEGMENT
??_7?$ctype@D@std@@6B@ DQ FLAT:??_R4?$ctype@D@std@@6B@	; std::ctype<char>::`vftable'
	DQ	FLAT:??_E?$ctype@D@std@@MEAAPEAXI@Z
	DQ	FLAT:?_Incref@facet@locale@std@@UEAAXXZ
	DQ	FLAT:?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ
	DQ	FLAT:?do_tolower@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z
	DQ	FLAT:?do_tolower@?$ctype@D@std@@MEBADD@Z
	DQ	FLAT:?do_toupper@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z
	DQ	FLAT:?do_toupper@?$ctype@D@std@@MEBADD@Z
	DQ	FLAT:?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z
	DQ	FLAT:?do_widen@?$ctype@D@std@@MEBADD@Z
	DQ	FLAT:?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z
	DQ	FLAT:?do_narrow@?$ctype@D@std@@MEBADDD@Z
CONST	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT
??_7ctype_base@std@@6B@ DQ FLAT:??_R4ctype_base@std@@6B@ ; std::ctype_base::`vftable'
	DQ	FLAT:??_Ectype_base@std@@UEAAPEAXI@Z
	DQ	FLAT:?_Incref@facet@locale@std@@UEAAXXZ
	DQ	FLAT:?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DQ FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DQ	FLAT:??_Efacet@locale@std@@MEAAPEAXI@Z
	DQ	FLAT:?_Incref@facet@locale@std@@UEAAXXZ
	DQ	FLAT:?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_7_Facet_base@std@@6B@
CONST	SEGMENT
??_7_Facet_base@std@@6B@ DQ FLAT:??_R4_Facet_base@std@@6B@ ; std::_Facet_base::`vftable'
	DQ	FLAT:??_E_Facet_base@std@@UEAAPEAXI@Z
	DQ	FLAT:_purecall
	DQ	FLAT:_purecall
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@
CONST	SEGMENT
??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@ DB 'bad locale name', 00H ; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@824
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@824 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVruntime_error@std@@@824
xdata$x	SEGMENT
_CT??_R0?AVruntime_error@std@@@824 DD 00H
	DD	imagerel ??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0runtime_error@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
data$r	SEGMENT
??_R0?AVruntime_error@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVruntime_error@std@@', 00H
data$r	ENDS
;	COMDAT _CTA2?AVruntime_error@std@@
xdata$x	SEGMENT
_CTA2?AVruntime_error@std@@ DD 02H
	DD	imagerel _CT??_R0?AVruntime_error@std@@@824
	DD	imagerel _CT??_R0?AVexception@std@@@824
xdata$x	ENDS
;	COMDAT _TI2?AVruntime_error@std@@
xdata$x	SEGMENT
_TI2?AVruntime_error@std@@ DD 00H
	DD	imagerel ??1runtime_error@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVruntime_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast?$AA@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast?$AA@ DB 'bad cast', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7bad_cast@std@@6B@
CONST	SEGMENT
??_7bad_cast@std@@6B@ DQ FLAT:??_R4bad_cast@std@@6B@	; std::bad_cast::`vftable'
	DQ	FLAT:??_Ebad_cast@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DQ FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DQ	FLAT:??_Eruntime_error@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2_KB
CONST	SEGMENT
?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2_KB DQ ffffffffffffffffH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception?$AA@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception?$AA@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_backward_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@UDsDevice@@U1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@$$QEAU2@@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Move_backward_unchecked1@PEAIPEAI@std@@YAPEAIPEAI00U_Trivially_copyable_ptr_iterator_tag@0@@Z DD 011801H
	DD	04218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Pop_heap_hole_unchecked@PEAIIU?$less@X@std@@@std@@YAXPEAI00$$QEAIAEAU?$less@X@0@@Z DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Push_heap_by_index@PEAI_JIU?$less@X@std@@@std@@YAXPEAI_J1$$QEAIAEAU?$less@X@0@@Z DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$swap@IX@std@@YAXAEAI0@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Med3_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI00AEAU?$less@X@0@@Z DD 011801H
	DD	04218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@UDsDevice@@U1@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@$$QEAU3@@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Move_backward_unchecked@PEAIPEAI@std@@YAPEAIPEAI00@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Pop_heap_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Pop_heap_hole_by_index@PEAI_JIU?$less@X@std@@@std@@YAXPEAI_J1$$QEAIAEAU?$less@X@0@@Z DD 011801H
	DD	0a218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0AEAPEAIAEAPEAIX$0A@@?$pair@PEAIPEAI@std@@QEAA@AEAPEAI0@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$iter_swap@PEAIPEAI@std@@YAXPEAI0@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?RAEAIAEAI@?$less@X@std@@QEBA_NAEAI0@Z DD 011301H
	DD	02213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Guess_median_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI00AEAU?$less@X@0@@Z DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAW4Api@RtAudio@@PEAW412@@std@@YAPEAW4Api@RtAudio@@PEAW412@00@Z DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@UDsDevice@@U1@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@$$QEAU2@@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$destroy@UDsDevice@@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Insertion_sort_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Sort_heap_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Make_heap_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Partition_by_median_guess_unchecked@PEAIU?$less@X@std@@@std@@YA?AU?$pair@PEAIPEAI@0@PEAI0AEAU?$less@X@0@@Z DD 011801H
	DD	0e218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move_al_unchecked1@IIV?$allocator@I@std@@@std@@YAPEAIPEAI00AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z DD 011801H
	DD	04218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move_al_unchecked1@W4Api@RtAudio@@W412@V?$allocator@W4Api@RtAudio@@@std@@@std@@YAPEAW4Api@RtAudio@@PEAW412@00AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z DD 011801H
	DD	04218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move_al_unchecked1@HHV?$allocator@H@std@@@std@@YAPEAHPEAH00AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z DD 011801H
	DD	04218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0???$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z DD imagerel ??$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
	DD	0ffffffffH
	DD	imagerel ??$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z+43
	DD	00H
	DD	imagerel ??$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z+130
	DD	0ffffffffH
	DD	imagerel ?catch$0@?0???$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z@4HA
	DD	00H
	DD	imagerel ?catch$0@?0???$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z@4HA+13
	DD	01H
	DD	imagerel ?catch$0@?0???$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z@4HA+40
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$??$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0???$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$??$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
	DD	01H
	DD	imagerel $tryMap$??$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
	DD	06H
	DD	imagerel $ip2state$??$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
	DD	030H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z DD 012119H
	DD	08218H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$destroy@UDsDevice@@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Sort_unchecked1@PEAI_JU?$less@X@std@@@std@@YAXPEAI0_JAEAU?$less@X@0@@Z DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move_al_unchecked@PEAIPEAIV?$allocator@I@std@@@std@@YAPEAIPEAI00AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@@Z DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move_al_unchecked@PEAW4Api@RtAudio@@PEAW412@V?$allocator@W4Api@RtAudio@@@std@@@std@@YAPEAW4Api@RtAudio@@PEAW412@00AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@@Z DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move_al_unchecked@PEAHPEAHV?$allocator@H@std@@@std@@YAPEAHPEAH00AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move_al_unchecked@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@PEADAEAPEAD@?$allocator@D@std@@QEAAXPEAPEADAEAPEAD@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$destroy@UDsDevice@@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@II@?$allocator@I@std@@QEAAXPEAI$$QEAI@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@IAEBI@?$allocator@I@std@@QEAAXPEAIAEBI@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@IAEAI@?$allocator@I@std@@QEAAXPEAIAEAI@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@W4Api@RtAudio@@W412@@?$allocator@W4Api@RtAudio@@@std@@QEAAXPEAW4Api@RtAudio@@$$QEAW423@@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@HH@?$allocator@H@std@@QEAAXPEAH$$QEAH@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@HAEBH@?$allocator@H@std@@QEAAXPEAHAEBH@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@HAEAH@?$allocator@H@std@@QEAAXPEAHAEAH@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z DD imagerel ??$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z
	DD	0ffffffffH
	DD	imagerel ??$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z+48
	DD	00H
	DD	imagerel ??$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z+105
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z
	DD	030H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z DD 011c11H
	DD	08213H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z DD imagerel ??$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z
	DD	0ffffffffH
	DD	imagerel ??$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z+48
	DD	00H
	DD	imagerel ??$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z+105
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z
	DD	030H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z DD 011c11H
	DD	08213H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Sort_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@YAPEAIV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@@Z DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Getvals@D@?$numpunct@D@std@@IEAAXDPEBUlconv@@U_Cvtvec@@@Z DD 011701H
	DD	04217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAIPEAIV?$allocator@I@std@@@std@@YAPEAIPEAI00AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@@Z DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAW4Api@RtAudio@@PEAW412@V?$allocator@W4Api@RtAudio@@@std@@@std@@YAPEAW4Api@RtAudio@@PEAW412@00AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@@Z DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAHPEAHV?$allocator@H@std@@@std@@YAPEAHPEAH00AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_move@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@PEADAEAPEAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@PEAPEADAEAPEAD@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$destroy@PEAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@PEAPEAD@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0U?$integral_constant@_N$00@0@@Z DD imagerel ??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0U?$integral_constant@_N$00@0@@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0U?$integral_constant@_N$00@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0U?$integral_constant@_N$00@0@@Z
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0U?$integral_constant@_N$00@0@@Z DD 011c19H
	DD	06213H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0U?$integral_constant@_N$00@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range1@V?$allocator@UDsDevice@@@std@@PEAUDsDevice@@@std@@YAXPEAUDsDevice@@0AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z DD 011801H
	DD	04218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z DD 011201H
	DD	04212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8V?$allocator@D@std@@V01@@std@@YA_NAEBU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$_Wrap_alloc@V?$allocator@I@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@1@@Z DD 011201H
	DD	04212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@II@?$allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@PEAI$$QEAI@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@IAEBI@?$allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@PEAIAEBI@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@IAEAI@?$allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@PEAIAEAI@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@W4Api@RtAudio@@W412@@?$allocator_traits@V?$allocator@W4Api@RtAudio@@@std@@@std@@SAXAEAV?$allocator@W4Api@RtAudio@@@1@PEAW4Api@RtAudio@@$$QEAW434@@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@HH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@PEAH$$QEAH@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@HAEBH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@PEAHAEBH@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@HAEAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@PEAHAEAH@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@UDsDevice@@AEBU1@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@AEBU3@@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@UDsDevice@@AEAU1@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@AEAU3@@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Move_unchecked1@PEAUDsDevice@@PEAU1@@std@@YAPEAUDsDevice@@PEAU1@00U_General_ptr_iterator_tag@0@@Z DD 011801H
	DD	04218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Ptr_move_cat@UDsDevice@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@AEBQEAUDsDevice@@0@Z DD 020f01H
	DD	0700b120fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@0U?$less@X@0@@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__F_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Immortalizer@V_Iostream_error_category@std@@@std@@QEAA@XZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Umove@PEAI@?$vector@IV?$allocator@I@std@@@std@@IEAAPEAIPEAI00@Z DD 011801H
	DD	04218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Umove@PEAW4Api@RtAudio@@@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAPEAW4Api@RtAudio@@PEAW423@00@Z DD 011801H
	DD	04218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Umove@PEAH@?$vector@HV?$allocator@H@std@@@std@@IEAAPEAHPEAH00@Z DD 011801H
	DD	04218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Umove@PEAUDsDevice@@@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAPEAUDsDevice@@PEAU2@00@Z DD 011801H
	DD	04218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@PEADAEAPEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEADAEAPEAD@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$destroy@PEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEAD@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Pocca@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEBU10@@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0V?$allocator@D@std@@@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$numpunct@D@std@@MEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$numpunct@D@std@@AEAAXXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0??_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z DD imagerel ?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z
	DD	0ffffffffH
	DD	imagerel ?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z+138
	DD	00H
	DD	imagerel ?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z+363
	DD	0ffffffffH
	DD	imagerel ?catch$0@?0??_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z@4HA
	DD	00H
	DD	imagerel ?catch$0@?0??_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z@4HA+13
	DD	01H
	DD	imagerel ?catch$0@?0??_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z@4HA+35
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0??_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z
	DD	01H
	DD	imagerel $tryMap$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z
	DD	06H
	DD	imagerel $ip2state$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z
	DD	060H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z DD 043319H
	DD	0230118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z
	DD	0103H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$numpunct@D@std@@MEAA@XZ DD imagerel ??1?$numpunct@D@std@@MEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$numpunct@D@std@@MEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$numpunct@D@std@@MEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$numpunct@D@std@@MEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$numpunct@D@std@@MEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z DD imagerel ?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
	DD	0ffffffffH
	DD	imagerel ?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z+82
	DD	00H
	DD	imagerel ?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z+131
	DD	01H
	DD	imagerel ?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z+170
	DD	00H
	DD	imagerel ?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z+179
	DD	01H
	DD	imagerel ?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z+189
	DD	02H
	DD	imagerel ?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z+205
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
	DD	00H
	DD	00H
	DD	07H
	DD	imagerel $ip2state$?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
	DD	050H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z DD 021a11H
	DD	0190111H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z DD imagerel ??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z
	DD	0ffffffffH
	DD	imagerel ??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z+49
	DD	00H
	DD	imagerel ??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z+86
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z DD 012111H
	DD	06218H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?thousands_sep@?$numpunct@D@std@@QEBADXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?decimal_point@?$numpunct@D@std@@QEBADXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z DD imagerel ??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z
	DD	0ffffffffH
	DD	imagerel ??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z+31
	DD	00H
	DD	imagerel ??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z+238
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z
	DD	050H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z DD 011211H
	DD	0e209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@I@std@@PEAI@std@@YAXPEAI0AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@W4Api@RtAudio@@@std@@PEAW4Api@RtAudio@@@std@@YAXPEAW4Api@RtAudio@@0AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@H@std@@PEAH@std@@YAXPEAH0AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@V?$allocator@UDsDevice@@@std@@PEAUDsDevice@@@std@@YAXPEAUDsDevice@@0AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z DD 031a01H
	DD	07016421aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z DD 031a01H
	DD	07016421aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z DD imagerel ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z
	DD	0ffffffffH
	DD	imagerel ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z+307
	DD	00H
	DD	imagerel ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z+322
	DD	0ffffffffH
	DD	imagerel ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z+360
	DD	01H
	DD	imagerel ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z+481
	DD	02H
	DD	imagerel ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z+499
	DD	01H
	DD	imagerel ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z+531
	DD	03H
	DD	imagerel ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z+1674
	DD	01H
	DD	imagerel ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z+1688
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA
	DD	01H
	DD	imagerel ?dtor$2@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA
	DD	01H
	DD	imagerel ?dtor$3@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z DD 019930522H
	DD	04H
	DD	imagerel $stateUnwindMap$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z
	DD	00H
	DD	00H
	DD	09H
	DD	imagerel $ip2state$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z
	DD	098H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z DD 043b19H
	DD	03d011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z
	DD	01d2H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z DD 011801H
	DD	02218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z DD imagerel ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z
	DD	0ffffffffH
	DD	imagerel ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z+485
	DD	00H
	DD	imagerel ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z+506
	DD	0ffffffffH
	DD	imagerel ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z+544
	DD	01H
	DD	imagerel ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z+668
	DD	02H
	DD	imagerel ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z+686
	DD	01H
	DD	imagerel ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z+718
	DD	03H
	DD	imagerel ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z+1934
	DD	01H
	DD	imagerel ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z+1948
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA
	DD	01H
	DD	imagerel ?dtor$2@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA
	DD	01H
	DD	imagerel ?dtor$3@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z DD 019930522H
	DD	04H
	DD	imagerel $stateUnwindMap$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z
	DD	00H
	DD	00H
	DD	09H
	DD	imagerel $ip2state$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z
	DD	0c8H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z DD 043b19H
	DD	043011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z
	DD	0202H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z DD 011801H
	DD	04218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z DD 042f19H
	DD	015011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	090H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z DD imagerel ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z
	DD	0ffffffffH
	DD	imagerel ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z+73
	DD	00H
	DD	imagerel ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z+557
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z
	DD	080H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z DD 043b19H
	DD	01b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z
	DD	0caH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z DD imagerel ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z
	DD	0ffffffffH
	DD	imagerel ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z+73
	DD	00H
	DD	imagerel ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z+557
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z
	DD	080H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z DD 043b19H
	DD	01b011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z
	DD	0caH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_K@Z DD 042f19H
	DD	017011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_J@Z DD 042f19H
	DD	017011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z DD 042f19H
	DD	017011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z DD 042f19H
	DD	017011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z DD imagerel ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z
	DD	0ffffffffH
	DD	imagerel ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z+241
	DD	00H
	DD	imagerel ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z+256
	DD	0ffffffffH
	DD	imagerel ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z+283
	DD	01H
	DD	imagerel ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z+869
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z
	DD	00H
	DD	00H
	DD	05H
	DD	imagerel $ip2state$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z
	DD	088H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z DD 043b19H
	DD	02f011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z
	DD	0162H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z DD 031a01H
	DD	07016821aH
	DD	06015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z DD imagerel ??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z
	DD	0ffffffffH
	DD	imagerel ??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z+44
	DD	00H
	DD	imagerel ??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z+75
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z DD 011c11H
	DD	06213H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z DD imagerel ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
	DD	0ffffffffH
	DD	imagerel ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z+82
	DD	00H
	DD	imagerel ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z+131
	DD	01H
	DD	imagerel ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z+167
	DD	00H
	DD	imagerel ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z+176
	DD	01H
	DD	imagerel ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z+186
	DD	02H
	DD	imagerel ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z+202
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
	DD	00H
	DD	00H
	DD	07H
	DD	imagerel $ip2state$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
	DD	050H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z DD 021a11H
	DD	0190111H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z DD imagerel ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z
	DD	0ffffffffH
	DD	imagerel ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z+31
	DD	00H
	DD	imagerel ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z+238
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z
	DD	050H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z DD 011211H
	DD	0e209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	0ffffffffH
	DD	imagerel ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z+39
	DD	00H
	DD	imagerel ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z+229
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 011711H
	DD	0620eH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	038H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 011219H
	DD	08209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z DD 010b01H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_JAEBV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base0@1@@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?9V?$allocator@D@std@@V01@@std@@YA_NAEBU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_NAEBV01@@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_JAEBV01@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base0@1@@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$_Wrap_alloc@V?$allocator@I@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAA@$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@1@@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@II@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAI$$QEAI@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@IAEBI@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAIAEBI@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@IAEAI@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAIAEAI@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@W4Api@RtAudio@@W412@@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXPEAW4Api@RtAudio@@$$QEAW423@@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@HH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAH$$QEAH@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@HAEBH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAHAEBH@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@HAEAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAHAEAH@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@UDsDevice@@AEBU1@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$construct@UDsDevice@@AEAU1@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Move_unchecked@PEAUDsDevice@@PEAU1@@std@@YAPEAUDsDevice@@PEAU1@00@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@0@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD imagerel ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
	DD	0ffffffffH
	DD	imagerel ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z+231
	DD	00H
	DD	imagerel ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z+267
	DD	01H
	DD	imagerel ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z+851
	DD	00H
	DD	imagerel ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z+913
	DD	0ffffffffH
	DD	imagerel ?catch$1@?0???$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
	DD	00H
	DD	imagerel ?catch$1@?0???$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA+13
	DD	02H
	DD	imagerel ?catch$1@?0???$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA+57
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$1@?0???$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	imagerel $handlerMap$0$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA
	DD	00H
	DD	00H
	DD	00H
	DD	00H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
	DD	01H
	DD	imagerel $tryMap$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
	DD	08H
	DD	imagerel $ip2state$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
	DD	098H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 021d19H
	DD	0150111H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEBA?AV01@_J@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAAAEAV01@_J@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAA@PEAUDsDevice@@PEBU_Container_base0@1@@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAA@PEAUDsDevice@@PEBU_Container_base0@1@@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GDsDevice@@QEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4DsDevice@@QEAAAEAU0@$$QEAU0@@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0DsDevice@@QEAA@$$QEAU0@@Z DD 031001H
	DD	0700c4210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0DsDevice@@QEAA@AEBU0@@Z DD 031001H
	DD	0700c4210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1DsDevice@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0DsDevice@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBAXXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAXXZ DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Reserve@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0??_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z DD imagerel ?_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z
	DD	0ffffffffH
	DD	imagerel ?_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z+57
	DD	00H
	DD	imagerel ?_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z+118
	DD	0ffffffffH
	DD	imagerel ?catch$0@?0??_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z@4HA
	DD	00H
	DD	imagerel ?catch$0@?0??_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z@4HA+13
	DD	01H
	DD	imagerel ?catch$0@?0??_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z@4HA+54
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$?_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0??_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$?_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$?_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z
	DD	01H
	DD	imagerel $tryMap$?_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z
	DD	06H
	DD	imagerel $ip2state$?_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z
	DD	068H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z DD 011719H
	DD	0e20eH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Inside@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBA_NPEBW4Api@RtAudio@@@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Grow_to@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBA_K_K@Z DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Destroy@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAXPEAW4Api@RtAudio@@0@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?clear@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXXZ DD imagerel ?clear@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXXZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?clear@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?clear@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXXZ
	DD	030H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXXZ DD 011219H
	DD	08209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?clear@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAAEAW4Api@RtAudio@@_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Unused_capacity@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ DD imagerel ??1?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAX$$QEAW4Api@RtAudio@@@Z DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ DD imagerel ??0?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??0?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myend@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myend@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAXXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAA@XZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KU_Nil@2@@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXPEAW4Api@RtAudio@@_K@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAPEAW4Api@RtAudio@@_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$allocator_traits@V?$allocator@W4Api@RtAudio@@@std@@@std@@SA_KAEBV?$allocator@W4Api@RtAudio@@@2@@Z DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@W4Api@RtAudio@@@std@@QEAAPEAW4Api@RtAudio@@_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@W4Api@RtAudio@@@std@@QEAAXPEAW4Api@RtAudio@@_K@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GRtApiDs@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBAXXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAXXZ DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Reserve@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0??_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z DD imagerel ?_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z
	DD	0ffffffffH
	DD	imagerel ?_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z+57
	DD	00H
	DD	imagerel ?_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z+118
	DD	0ffffffffH
	DD	imagerel ?catch$0@?0??_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z@4HA
	DD	00H
	DD	imagerel ?catch$0@?0??_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z@4HA+13
	DD	01H
	DD	imagerel ?catch$0@?0??_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z@4HA+54
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$?_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0??_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$?_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$?_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z
	DD	01H
	DD	imagerel $tryMap$?_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z
	DD	06H
	DD	imagerel $ip2state$?_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z
	DD	068H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z DD 011719H
	DD	0e20eH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Inside@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBA_NPEBUDsDevice@@@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Grow_to@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBA_K_K@Z DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Destroy@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAXPEAUDsDevice@@0@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAXAEBUDsDevice@@@Z DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Make_iter@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?begin@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@XZ DD imagerel ?begin@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?begin@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?begin@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@XZ
	DD	028H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?begin@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@XZ DD 011719H
	DD	0620eH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?begin@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Unused_capacity@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ DD imagerel ??1?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ DD imagerel ??0?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??0?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAXXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAA@XZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KU_Nil@2@@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@_K@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAPEAUDsDevice@@_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SA_KAEBV?$allocator@UDsDevice@@@2@@Z DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@UDsDevice@@@std@@QEAAPEAUDsDevice@@_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@_K@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GRtApi@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAHH@Z DD 010d01H
	DD	0220dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXPEBD_KH@Z DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z DD 011801H
	DD	0a218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z DD 011801H
	DD	0a218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z DD 010d01H
	DD	0820dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z DD 021001H
	DD	0150110H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 022319H
	DD	0170111H
	DD	imagerel __GSHandlerCheck
	DD	0a8H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ DD imagerel ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DD imagerel ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
	DD	0ffffffffH
	DD	imagerel ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z+33
	DD	00H
	DD	imagerel ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z+98
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DD 011611H
	DD	0620dH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z DD 011801H
	DD	04218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z DD 011801H
	DD	04218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z DD 010d01H
	DD	0820dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAA@XZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DD imagerel ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
	DD	0ffffffffH
	DD	imagerel ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z+77
	DD	00H
	DD	imagerel ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z+117
	DD	01H
	DD	imagerel ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z+208
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
	DD	00H
	DD	00H
	DD	04H
	DD	imagerel $ip2state$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
	DD	028H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DD 011b11H
	DD	06212H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1RtApiStream@RtApi@@QEAA@XZ DD imagerel ??1RtApiStream@RtApi@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1RtApiStream@RtApi@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1RtApiStream@RtApi@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1RtApiStream@RtApi@@QEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1RtApiStream@RtApi@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0RtApiStream@RtApi@@QEAA@XZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ConvertInfo@RtApi@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ConvertInfo@RtApi@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IEBAXXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IEAAXXZ DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0??_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z DD imagerel ?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z
	DD	0ffffffffH
	DD	imagerel ?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z+57
	DD	00H
	DD	imagerel ?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z+118
	DD	0ffffffffH
	DD	imagerel ?catch$0@?0??_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z@4HA
	DD	00H
	DD	imagerel ?catch$0@?0??_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z@4HA+13
	DD	01H
	DD	imagerel ?catch$0@?0??_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z@4HA+54
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0??_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z
	DD	01H
	DD	imagerel $tryMap$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z
	DD	06H
	DD	imagerel $ip2state$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z
	DD	068H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z DD 011719H
	DD	0e20eH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Inside@?$vector@HV?$allocator@H@std@@@std@@IEBA_NPEBH@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IEBA_K_K@Z DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IEAAXPEAH0@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?clear@?$vector@HV?$allocator@H@std@@@std@@QEAAXXZ DD imagerel ?clear@?$vector@HV?$allocator@H@std@@@std@@QEAAXXZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?clear@?$vector@HV?$allocator@H@std@@@std@@QEAAXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?clear@?$vector@HV?$allocator@H@std@@@std@@QEAAXXZ
	DD	030H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$vector@HV?$allocator@H@std@@@std@@QEAAXXZ DD 011219H
	DD	08209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?clear@?$vector@HV?$allocator@H@std@@@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$vector@HV?$allocator@H@std@@@std@@QEAAXAEBH@Z DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DD imagerel ??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$vector@HV?$allocator@H@std@@@std@@QEAAX$$QEAH@Z DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DD imagerel ??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEBA_KU_Nil@2@@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAH_K@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAPEAH_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@H@std@@QEAAPEAH_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@H@std@@QEAAXPEAH_K@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?asInt@S24@@QEAAHXZ DD 010901H
	DD	02209H
xdata	ENDS
CONST	SEGMENT
	ORG $+2
$cppxdata$??0RtAudio@@QEAA@W4Api@0@@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??0RtAudio@@QEAA@W4Api@0@@Z
	DD	00H
	DD	00H
	DD	06H
	DD	imagerel $ip2state$??0RtAudio@@QEAA@W4Api@0@@Z
	DD	048H
	DD	00H
	DD	01H
$cppxdata$?openRtApi@RtAudio@@IEAAXW4Api@1@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?openRtApi@RtAudio@@IEAAXW4Api@1@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?openRtApi@RtAudio@@IEAAXW4Api@1@@Z
	DD	050H
	DD	00H
	DD	01H
$cppxdata$??0RtApi@@QEAA@XZ DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$??0RtApi@@QEAA@XZ
	DD	00H
	DD	00H
	DD	04H
	DD	imagerel $ip2state$??0RtApi@@QEAA@XZ
	DD	020H
	DD	00H
	DD	01H
$cppxdata$?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z
	DD	00H
	DD	00H
	DD	05H
	DD	imagerel $ip2state$?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z
	DD	030H
	DD	00H
	DD	01H
$cppxdata$??1RtApiDs@@UEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1RtApiDs@@UEAA@XZ
	DD	020H
	DD	00H
	DD	05H
$cppxdata$?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z
	DD	00H
	DD	00H
	DD	012H
	DD	imagerel $ip2state$?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z
	DD	0138H
	DD	00H
	DD	01H
$cppxdata$?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z
	DD	01H
	DD	imagerel $tryMap$?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z
	DD	08H
	DD	imagerel $ip2state$?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z
	DD	0318H
	DD	00H
	DD	01H
$cppxdata$?deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z
	DD	00H
	DD	00H
	DD	07H
	DD	imagerel $ip2state$?deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z
	DD	060H
	DD	00H
	DD	01H
CONST	ENDS
xdata	SEGMENT
$unwind$?getVersion@RtAudio@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 010901H
	DD	06209H
$unwind$?getCompiledApi@RtAudio@@SAXAEAV?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@Z DD 010901H
	DD	06209H
$unwind$??0RtAudio@@QEAA@W4Api@0@@Z DD 022b19H
	DD	0150110H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$??0RtAudio@@QEAA@W4Api@0@@Z
	DD	092H
$stateUnwindMap$??0RtAudio@@QEAA@W4Api@0@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0RtAudio@@QEAA@W4Api@0@@Z@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0???0RtAudio@@QEAA@W4Api@0@@Z@4HA
$ip2state$??0RtAudio@@QEAA@W4Api@0@@Z DD imagerel ??0RtAudio@@QEAA@W4Api@0@@Z
	DD	0ffffffffH
	DD	imagerel ??0RtAudio@@QEAA@W4Api@0@@Z+152
	DD	00H
	DD	imagerel ??0RtAudio@@QEAA@W4Api@0@@Z+306
	DD	0ffffffffH
	DD	imagerel ??0RtAudio@@QEAA@W4Api@0@@Z+318
	DD	00H
	DD	imagerel ??0RtAudio@@QEAA@W4Api@0@@Z+336
	DD	01H
	DD	imagerel ??0RtAudio@@QEAA@W4Api@0@@Z+396
	DD	0ffffffffH
$unwind$?dtor$0@?0???0RtAudio@@QEAA@W4Api@0@@Z@4HA DD 020601H
	DD	050023206H
$unwind$?dtor$1@?0???0RtAudio@@QEAA@W4Api@0@@Z@4HA DD 020601H
	DD	050023206H
$unwind$??1RtAudio@@QEAA@XZ DD 010901H
	DD	08209H
$unwind$?openStream@RtAudio@@QEAAXPEAUStreamParameters@1@0KIPEAIP6AHPEAX2INI2@Z2PEAUStreamOptions@1@P6AXW4Type@RtAudioError@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@Z DD 011801H
	DD	0a218H
$unwind$?openRtApi@RtAudio@@IEAAXW4Api@1@@Z DD 011611H
	DD	0c20dH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?openRtApi@RtAudio@@IEAAXW4Api@1@@Z
$stateUnwindMap$?openRtApi@RtAudio@@IEAAXW4Api@1@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??openRtApi@RtAudio@@IEAAXW4Api@1@@Z@4HA
$ip2state$?openRtApi@RtAudio@@IEAAXW4Api@1@@Z DD imagerel ?openRtApi@RtAudio@@IEAAXW4Api@1@@Z
	DD	0ffffffffH
	DD	imagerel ?openRtApi@RtAudio@@IEAAXW4Api@1@@Z+134
	DD	00H
	DD	imagerel ?openRtApi@RtAudio@@IEAAXW4Api@1@@Z+178
	DD	0ffffffffH
$unwind$?dtor$0@?0??openRtApi@RtAudio@@IEAAXW4Api@1@@Z@4HA DD 020601H
	DD	050023206H
$unwind$??0RtApi@@QEAA@XZ DD 011211H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0RtApi@@QEAA@XZ
$stateUnwindMap$??0RtApi@@QEAA@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0RtApi@@QEAA@XZ@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0???0RtApi@@QEAA@XZ@4HA
$ip2state$??0RtApi@@QEAA@XZ DD imagerel ??0RtApi@@QEAA@XZ
	DD	0ffffffffH
	DD	imagerel ??0RtApi@@QEAA@XZ+62
	DD	00H
	DD	imagerel ??0RtApi@@QEAA@XZ+82
	DD	01H
	DD	imagerel ??0RtApi@@QEAA@XZ+243
	DD	0ffffffffH
$unwind$?dtor$0@?0???0RtApi@@QEAA@XZ@4HA DD 020601H
	DD	050023206H
$unwind$?dtor$1@?0???0RtApi@@QEAA@XZ@4HA DD 020601H
	DD	050023206H
$unwind$??1RtApi@@UEAA@XZ DD 010901H
	DD	04209H
$unwind$?openStream@RtApi@@QEAAXPEAUStreamParameters@RtAudio@@0KIPEAIP6AHPEAX2INI2@Z2PEAUStreamOptions@3@P6AXW4Type@RtAudioError@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@Z DD 011801H
	DD	0c218H
$unwind$?getStreamLatency@RtApi@@QEAAJXZ DD 010901H
	DD	06209H
$unwind$?getStreamSampleRate@RtApi@@QEAAIXZ DD 010901H
	DD	04209H
$unwind$?getStreamTime@RtApi@@UEAANXZ DD 010901H
	DD	04209H
$unwind$?setStreamTime@RtApi@@UEAAXN@Z DD 010f01H
	DD	0420fH
$unwind$?clearStreamInfo@RtApi@@IEAAXXZ DD 010901H
	DD	06209H
$unwind$?verifyStream@RtApi@@IEAAXXZ DD 010901H
	DD	04209H
$unwind$?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z DD 022b19H
	DD	0150110H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z
	DD	09aH
$stateUnwindMap$?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??error@RtApi@@IEAAXW4Type@RtAudioError@@@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0??error@RtApi@@IEAAXW4Type@RtAudioError@@@Z@4HA
$ip2state$?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z DD imagerel ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z
	DD	0ffffffffH
	DD	imagerel ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z+61
	DD	00H
	DD	imagerel ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z+87
	DD	0ffffffffH
	DD	imagerel ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z+196
	DD	01H
	DD	imagerel ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z+291
	DD	0ffffffffH
$unwind$?dtor$0@?0??error@RtApi@@IEAAXW4Type@RtAudioError@@@Z@4HA DD 020601H
	DD	050023206H
$unwind$?dtor$1@?0??error@RtApi@@IEAAXW4Type@RtAudioError@@@Z@4HA DD 020601H
	DD	050023206H
$unwind$?convertBuffer@RtApi@@IEAAXPEAD0AEAUConvertInfo@1@@Z DD 041d01H
	DD	085011dH
	DD	060157016H
$unwind$?byteSwapBuffer@RtApi@@IEAAXPEADIK@Z DD 011801H
	DD	04218H
$unwind$?formatBytes@RtApi@@IEAAIK@Z DD 010d01H
	DD	0420dH
$unwind$?setConvertInfo@RtApi@@IEAAXW4StreamMode@1@I@Z DD 011201H
	DD	0e212H
$unwind$??0RtApiDs@@QEAA@XZ DD 010901H
	DD	06209H
$unwind$??1RtApiDs@@UEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1RtApiDs@@UEAA@XZ
$ip2state$??1RtApiDs@@UEAA@XZ DD imagerel ??1RtApiDs@@UEAA@XZ
	DD	0ffffffffH
$unwind$?getDeviceCount@RtApiDs@@UEAAIXZ DD 021e19H
	DD	01d010cH
	DD	imagerel __GSHandlerCheck
	DD	0d8H
$unwind$?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z DD 023419H
	DD	0550116H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z
	DD	0292H
$stateUnwindMap$?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z@4HA
	DD	00H
	DD	imagerel ?dtor$6@?0??getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z@4HA
$ip2state$?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z DD imagerel ?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z
	DD	0ffffffffH
	DD	imagerel ?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z+74
	DD	00H
	DD	imagerel ?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z+241
	DD	0ffffffffH
	DD	imagerel ?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z+267
	DD	00H
	DD	imagerel ?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z+394
	DD	0ffffffffH
	DD	imagerel ?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z+420
	DD	00H
	DD	imagerel ?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z+1531
	DD	0ffffffffH
	DD	imagerel ?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z+1557
	DD	00H
	DD	imagerel ?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z+1903
	DD	0ffffffffH
	DD	imagerel ?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z+1929
	DD	00H
	DD	imagerel ?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z+2271
	DD	0ffffffffH
	DD	imagerel ?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z+2297
	DD	00H
	DD	imagerel ?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z+2322
	DD	01H
	DD	imagerel ?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z+3692
	DD	00H
	DD	imagerel ?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z+3703
	DD	0ffffffffH
	DD	imagerel ?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z+3729
	DD	01H
	DD	imagerel ?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z+4210
	DD	00H
	DD	imagerel ?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z+4221
	DD	0ffffffffH
$unwind$?dtor$0@?0??getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z@4HA DD 020601H
	DD	050023206H
$unwind$?dtor$6@?0??getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z@4HA DD 020601H
	DD	050023206H
$unwind$?closeStream@RtApiDs@@UEAAXXZ DD 010901H
	DD	0c209H
$unwind$?startStream@RtApiDs@@UEAAXXZ DD 021e19H
	DD	017010cH
	DD	imagerel __GSHandlerCheck
	DD	0a8H
$unwind$?stopStream@RtApiDs@@UEAAXXZ DD 021e19H
	DD	035010cH
	DD	imagerel __GSHandlerCheck
	DD	0198H
$unwind$?abortStream@RtApiDs@@UEAAXXZ DD 010901H
	DD	06209H
$unwind$?callbackEvent@RtApiDs@@QEAAXXZ DD 021e19H
	DD	06d010cH
	DD	imagerel __GSHandlerCheck
	DD	0350H
$unwind$?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z DD 023819H
	DD	0cb011aH
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z
	DD	0643H
$stateUnwindMap$?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	imagerel ?dtor$18@?0??probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z@4HA
	DD	0ffffffffH
	DD	00H
$tryMap$?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	imagerel $handlerMap$0$?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z
$handlerMap$0$?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z DD 08H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	imagerel ?catch$19@?0??probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z@4HA
	DD	058H
$ip2state$?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z DD imagerel ?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z
	DD	0ffffffffH
	DD	imagerel ?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z+8254
	DD	00H
	DD	imagerel ?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z+8288
	DD	01H
	DD	imagerel ?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z+8366
	DD	00H
	DD	imagerel ?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z+8379
	DD	0ffffffffH
	DD	imagerel ?catch$19@?0??probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z@4HA
	DD	00H
	DD	imagerel ?catch$19@?0??probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z@4HA+13
	DD	02H
	DD	imagerel ?catch$19@?0??probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z@4HA+42
	DD	00H
$unwind$?dtor$18@?0??probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z@4HA DD 020601H
	DD	050023206H
$unwind$?catch$19@?0??probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z@4HA DD 020a19H
	DD	05006720aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z
$unwind$?convertCharPointerToStdString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBD@Z DD 010e01H
	DD	0620eH
$unwind$?dsPointerBetween@@YAKKKKK@Z DD 011601H
	DD	02216H
$unwind$?deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z DD 023619H
	DD	029011bH
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z
	DD	0132H
$stateUnwindMap$?deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0??deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z@4HA
$ip2state$?deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z DD imagerel ?deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z
	DD	0ffffffffH
	DD	imagerel ?deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z+377
	DD	00H
	DD	imagerel ?deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z+691
	DD	0ffffffffH
	DD	imagerel ?deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z+710
	DD	00H
	DD	imagerel ?deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z+729
	DD	01H
	DD	imagerel ?deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z+872
	DD	00H
	DD	imagerel ?deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z+893
	DD	0ffffffffH
$unwind$?dtor$0@?0??deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z@4HA DD 020601H
	DD	050023206H
$unwind$?dtor$1@?0??deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z@4HA DD 020601H
	DD	050023206H
$unwind$?getErrorString@@YAPEBDH@Z DD 010801H
	DD	02208H
$unwind$?callbackHandler@@YAIPEAX@Z DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0DeviceInfo@RtAudio@@QEAA@$$QEAU01@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1DeviceInfo@RtAudio@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0DeviceInfo@RtAudio@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen@?$vector@IV?$allocator@I@std@@@std@@IEBAXXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$vector@IV?$allocator@I@std@@@std@@IEAAXXZ DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Reserve@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0??_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z DD imagerel ?_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z
	DD	0ffffffffH
	DD	imagerel ?_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z+57
	DD	00H
	DD	imagerel ?_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z+118
	DD	0ffffffffH
	DD	imagerel ?catch$0@?0??_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z@4HA
	DD	00H
	DD	imagerel ?catch$0@?0??_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z@4HA+13
	DD	01H
	DD	imagerel ?catch$0@?0??_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z@4HA+54
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$?_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0??_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$?_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$?_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z
	DD	01H
	DD	imagerel $tryMap$?_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z
	DD	06H
	DD	imagerel $ip2state$?_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z
	DD	068H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z DD 011719H
	DD	0e20eH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Inside@?$vector@IV?$allocator@I@std@@@std@@IEBA_NPEBI@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Grow_to@?$vector@IV?$allocator@I@std@@@std@@IEBA_K_K@Z DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IEAAXPEAI0@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?clear@?$vector@IV?$allocator@I@std@@@std@@QEAAXXZ DD imagerel ?clear@?$vector@IV?$allocator@I@std@@@std@@QEAAXXZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?clear@?$vector@IV?$allocator@I@std@@@std@@QEAAXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?clear@?$vector@IV?$allocator@I@std@@@std@@QEAAXXZ
	DD	030H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$vector@IV?$allocator@I@std@@@std@@QEAAXXZ DD 011219H
	DD	08209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?clear@?$vector@IV?$allocator@I@std@@@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAXAEBI@Z DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?end@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ DD imagerel ?end@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?end@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?end@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ
	DD	028H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?end@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ DD 011719H
	DD	0620eH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?end@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?begin@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ DD imagerel ?begin@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?begin@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?begin@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ
	DD	028H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?begin@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ DD 011719H
	DD	0620eH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?begin@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Unused_capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ DD imagerel ??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAI@Z DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Assign_rv@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@$$QEAV01@@Z DD imagerel ??0?$vector@IV?$allocator@I@std@@@std@@QEAA@$$QEAV01@@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@$$QEAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@$$QEAV01@@Z
	DD	028H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@$$QEAV01@@Z DD 011719H
	DD	0620eH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@$$QEAV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ DD imagerel ??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAXAEAV12@@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAXXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAA@XZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEBA_KU_Nil@2@@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAI_K@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAPEAI_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAA@$$QEAU01@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$allocator_traits@V?$allocator@I@std@@@std@@SA_KAEBV?$allocator@I@2@@Z DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@I@std@@QEAAPEAI_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@I@std@@QEAAXPEAI_K@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DD imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
	DD	0ffffffffH
	DD	imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z+58
	DD	00H
	DD	imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z+191
	DD	01H
	DD	imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z+761
	DD	00H
	DD	imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z+859
	DD	0ffffffffH
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
	DD	00H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA+13
	DD	02H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA+57
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	imagerel $handlerMap$0$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
	DD	00H
	DD	00H
	DD	00H
	DD	00H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
	DD	01H
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
	DD	08H
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
	DD	090H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DD 021c19H
	DD	0150110H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	0ffffffffH
	DD	imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z+231
	DD	00H
	DD	imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z+267
	DD	01H
	DD	imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z+849
	DD	00H
	DD	imagerel ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z+911
	DD	0ffffffffH
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	00H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+13
	DD	02H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+57
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	imagerel $handlerMap$0$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	00H
	DD	00H
	DD	00H
	DD	00H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	01H
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	08H
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	098H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 021d19H
	DD	0150111H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ DD imagerel ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ
	DD	0ffffffffH
	DD	imagerel ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ+70
	DD	00H
	DD	imagerel ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ+171
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ DD 011211H
	DD	08209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z DD imagerel ?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z
	DD	0ffffffffH
	DD	imagerel ?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z+46
	DD	00H
	DD	imagerel ?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z+76
	DD	01H
	DD	imagerel ?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z+181
	DD	00H
	DD	imagerel ?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z+231
	DD	0ffffffffH
	DD	imagerel ?catch$1@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA
	DD	00H
	DD	imagerel ?catch$1@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA+13
	DD	02H
	DD	imagerel ?catch$1@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA+51
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$1@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	imagerel $handlerMap$0$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA
	DD	00H
	DD	00H
	DD	00H
	DD	00H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z
	DD	01H
	DD	imagerel $tryMap$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z
	DD	08H
	DD	imagerel $ip2state$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z
	DD	040H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z DD 011619H
	DD	0c20dH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$2@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA DD 020a19H
	DD	05006520aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z DD imagerel ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z
	DD	0ffffffffH
	DD	imagerel ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z+57
	DD	00H
	DD	imagerel ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z+138
	DD	01H
	DD	imagerel ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z+153
	DD	00H
	DD	imagerel ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z+167
	DD	02H
	DD	imagerel ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z+429
	DD	00H
	DD	imagerel ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z+488
	DD	0ffffffffH
	DD	imagerel ?catch$2@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA
	DD	00H
	DD	imagerel ?catch$2@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA+13
	DD	03H
	DD	imagerel ?catch$2@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA+57
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$2@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA
	DD	048H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	imagerel $handlerMap$0$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA
	DD	00H
	DD	00H
	DD	00H
	DD	00H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z DD 019930522H
	DD	04H
	DD	imagerel $stateUnwindMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z
	DD	01H
	DD	imagerel $tryMap$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z
	DD	0aH
	DD	imagerel $ip2state$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z
	DD	080H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z DD 041e19H
	DD	01b0112H
	DD	0600a700bH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD imagerel ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
	DD	0ffffffffH
	DD	imagerel ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ+18
	DD	00H
	DD	imagerel ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ+209
	DD	0ffffffffH
	DD	imagerel ?catch$0@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	imagerel $handlerMap$0$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
	DD	01H
	DD	imagerel $tryMap$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
	DD	04H
	DD	imagerel $ip2state$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
	DD	038H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ DD 011219H
	DD	08209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD imagerel ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
	DD	0ffffffffH
	DD	imagerel ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z+81
	DD	00H
	DD	imagerel ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z+200
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
	DD	028H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z DD 012111H
	DD	06218H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_ios@DU?$char_traits@D@std@@@std@@IEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IEAAXPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z DD imagerel ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z
	DD	0ffffffffH
	DD	imagerel ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z+52
	DD	00H
	DD	imagerel ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z+67
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z
	DD	038H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z DD 011611H
	DD	0a20dH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z DD 011201H
	DD	04212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z DD 011201H
	DD	06212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GRtAudioError@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0RtAudioError@@QEAA@AEBV0@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1RtAudioError@@UEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getMessage@RtAudioError@@UEBA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?printMessage@RtAudioError@@UEBAXXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0RtAudioError@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Type@0@@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gios_base@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Init@ios_base@std@@IEAAXXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1ios_base@std@@UEAA@XZ DD imagerel ??1ios_base@std@@UEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1ios_base@std@@UEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1ios_base@std@@UEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ios_base@std@@UEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1ios_base@std@@UEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?getloc@ios_base@std@@QEBA?AVlocale@2@XZ DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?width@ios_base@std@@QEAA_J_J@Z DD 010e01H
	DD	0220eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?good@ios_base@std@@QEBA_NXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@ios_base@std@@QEAAXH@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@ios_base@std@@QEAAXH_N@Z DD 021501H
	DD	01b0115H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gfailure@ios_base@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0failure@ios_base@std@@QEAA@AEBV012@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1failure@ios_base@std@@UEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ DD imagerel ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ
	DD	0ffffffffH
	DD	imagerel ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ+71
	DD	00H
	DD	imagerel ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ+96
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ DD 010d11H
	DD	06204H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G_Iostream_error_category@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Iostream_error_category@std@@UEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?message@_Iostream_error_category@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Iostream_error_category@std@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G_Generic_error_category@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Generic_error_category@std@@UEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?message@_Generic_error_category@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Generic_error_category@std@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gsystem_error@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0system_error@std@@QEAA@AEBV01@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1system_error@std@@UEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0system_error@std@@QEAA@Verror_code@1@PEBD@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0system_error@std@@QEAA@Verror_code@1@PEBD@Z DD imagerel ??0system_error@std@@QEAA@Verror_code@1@PEBD@Z
	DD	0ffffffffH
	DD	imagerel ??0system_error@std@@QEAA@Verror_code@1@PEBD@Z+64
	DD	00H
	DD	imagerel ??0system_error@std@@QEAA@Verror_code@1@PEBD@Z+111
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0system_error@std@@QEAA@Verror_code@1@PEBD@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0system_error@std@@QEAA@Verror_code@1@PEBD@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0system_error@std@@QEAA@Verror_code@1@PEBD@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0system_error@std@@QEAA@Verror_code@1@PEBD@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0system_error@std@@QEAA@Verror_code@1@PEBD@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0system_error@std@@QEAA@Verror_code@1@PEBD@Z DD 032d19H
	DD	07011e215H
	DD	06010H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$??0system_error@std@@QEAA@Verror_code@1@PEBD@Z
	DD	062H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G_System_error@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_System_error@std@@QEAA@AEBV01@@Z DD 031001H
	DD	0700c4210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_System_error@std@@UEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD imagerel ??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	0ffffffffH
	DD	imagerel ??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z+145
	DD	00H
	DD	imagerel ??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z+164
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	imagerel ?dtor$1@?0???0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	040H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 043319H
	DD	0170118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	0a2H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD imagerel ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
	DD	0ffffffffH
	DD	imagerel ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z+51
	DD	00H
	DD	imagerel ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z+124
	DD	01H
	DD	imagerel ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z+143
	DD	00H
	DD	imagerel ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z+185
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD 019930522H
	DD	02H
	DD	imagerel $stateUnwindMap$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
	DD	00H
	DD	00H
	DD	05H
	DD	imagerel $ip2state$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
	DD	038H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD 012b19H
	DD	0e213H
	DD	imagerel __GSHandlerCheck_EH
	DD	imagerel $cppxdata$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
	DD	062H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??8std@@YA_NAEBVerror_condition@0@0@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?message@error_code@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gerror_category@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??8error_category@std@@QEBA_NAEBV01@@Z DD 010e01H
	DD	0220eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z DD 011201H
	DD	06212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?iostream_category@std@@YAAEBVerror_category@1@XZ DD imagerel ?iostream_category@std@@YAAEBVerror_category@1@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?iostream_category@std@@YAAEBVerror_category@1@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?iostream_category@std@@YAAEBVerror_category@1@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?iostream_category@std@@YAAEBVerror_category@1@XZ DD 010d19H
	DD	06204H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?iostream_category@std@@YAAEBVerror_category@1@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z DD imagerel ??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z
	DD	0ffffffffH
	DD	imagerel ??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z+31
	DD	00H
	DD	imagerel ??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z+238
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z
	DD	050H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z DD 011211H
	DD	0e209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$ctype@D@std@@MEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z DD 011801H
	DD	04218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z DD 011801H
	DD	04218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_toupper@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_toupper@?$ctype@D@std@@MEBADD@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_tolower@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?do_tolower@?$ctype@D@std@@MEBADD@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$ctype@D@std@@IEAAXXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Init@?$ctype@D@std@@IEAAXAEBV_Locinfo@2@@Z DD 031001H
	DD	0700c8210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ctype@D@std@@MEAA@XZ DD imagerel ??1?$ctype@D@std@@MEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$ctype@D@std@@MEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$ctype@D@std@@MEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ctype@D@std@@MEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$ctype@D@std@@MEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z DD imagerel ?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
	DD	0ffffffffH
	DD	imagerel ?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z+82
	DD	00H
	DD	imagerel ?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z+131
	DD	01H
	DD	imagerel ?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z+167
	DD	00H
	DD	imagerel ?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z+176
	DD	01H
	DD	imagerel ?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z+186
	DD	02H
	DD	imagerel ?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z+202
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA
	DD	0ffffffffH
	DD	imagerel ?dtor$1@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z DD 019930522H
	DD	03H
	DD	imagerel $stateUnwindMap$?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
	DD	00H
	DD	00H
	DD	07H
	DD	imagerel $ip2state$?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
	DD	050H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z DD 021a11H
	DD	0190111H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z DD imagerel ??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z
	DD	0ffffffffH
	DD	imagerel ??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z+44
	DD	00H
	DD	imagerel ??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z+75
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z DD 011c11H
	DD	06213H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z DD 011801H
	DD	04218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?widen@?$ctype@D@std@@QEBADD@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gctype_base@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ctype_base@std@@UEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ctype_base@std@@QEAA@_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Glocale@std@@QEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?c_str@locale@std@@QEBAPEBDXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1locale@std@@QEAA@XZ DD imagerel ??1locale@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1locale@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1locale@std@@QEAA@XZ
	DD	038H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1locale@std@@QEAA@XZ DD 011219H
	DD	08209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1locale@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0locale@std@@QEAA@XZ DD imagerel ??0locale@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0locale@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??0locale@std@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0locale@std@@QEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0locale@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0locale@std@@QEAA@AEBV01@@Z DD imagerel ??0locale@std@@QEAA@AEBV01@@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0locale@std@@QEAA@AEBV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??0locale@std@@QEAA@AEBV01@@Z
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0locale@std@@QEAA@AEBV01@@Z DD 011719H
	DD	0620eH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0locale@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gfacet@locale@std@@MEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1facet@locale@std@@MEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0facet@locale@std@@IEAA@_K@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0facet@locale@std@@IEAA@_K@Z DD imagerel ??0facet@locale@std@@IEAA@_K@Z
	DD	0ffffffffH
	DD	imagerel ??0facet@locale@std@@IEAA@_K@Z+34
	DD	00H
	DD	imagerel ??0facet@locale@std@@IEAA@_K@Z+71
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0facet@locale@std@@IEAA@_K@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0facet@locale@std@@IEAA@_K@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0facet@locale@std@@IEAA@_K@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0facet@locale@std@@IEAA@_K@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0facet@locale@std@@IEAA@_K@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0facet@locale@std@@IEAA@_K@Z DD 011711H
	DD	0620eH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0facet@locale@std@@IEAA@_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bid@locale@std@@QEAA_KXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G_Facet_base@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$_Yarn@_W@std@@AEAAXXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$_Yarn@_W@std@@QEAA@XZ DD imagerel ??1?$_Yarn@_W@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$_Yarn@_W@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$_Yarn@_W@std@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Yarn@_W@std@@QEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$_Yarn@_W@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$_Yarn@D@std@@AEAAXXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?c_str@?$_Yarn@D@std@@QEBAPEBDXZ DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$_Yarn@D@std@@QEAA@XZ DD imagerel ??1?$_Yarn@D@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$_Yarn@D@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$_Yarn@D@std@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Yarn@D@std@@QEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$_Yarn@D@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getlconv@_Locinfo@std@@QEBAPEBUlconv@@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ DD 042519H
	DD	0130113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	080H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getctype@_Locinfo@std@@QEBA?AU_Ctypevec@@XZ DD 031001H
	DD	0700cc210H
	DD	0600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Locinfo@std@@QEAA@XZ DD imagerel ??1_Locinfo@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1_Locinfo@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1_Locinfo@std@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Locinfo@std@@QEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1_Locinfo@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$6@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$5@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$4@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0_Locinfo@std@@QEAA@PEBD@Z DD imagerel ??0_Locinfo@std@@QEAA@PEBD@Z
	DD	0ffffffffH
	DD	imagerel ??0_Locinfo@std@@QEAA@PEBD@Z+39
	DD	00H
	DD	imagerel ??0_Locinfo@std@@QEAA@PEBD@Z+57
	DD	01H
	DD	imagerel ??0_Locinfo@std@@QEAA@PEBD@Z+75
	DD	02H
	DD	imagerel ??0_Locinfo@std@@QEAA@PEBD@Z+93
	DD	03H
	DD	imagerel ??0_Locinfo@std@@QEAA@PEBD@Z+111
	DD	04H
	DD	imagerel ??0_Locinfo@std@@QEAA@PEBD@Z+129
	DD	05H
	DD	imagerel ??0_Locinfo@std@@QEAA@PEBD@Z+147
	DD	06H
	DD	imagerel ??0_Locinfo@std@@QEAA@PEBD@Z+205
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0_Locinfo@std@@QEAA@PEBD@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA
	DD	00H
	DD	imagerel ?dtor$1@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA
	DD	01H
	DD	imagerel ?dtor$2@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA
	DD	02H
	DD	imagerel ?dtor$3@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA
	DD	03H
	DD	imagerel ?dtor$4@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA
	DD	04H
	DD	imagerel ?dtor$5@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA
	DD	05H
	DD	imagerel ?dtor$6@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0_Locinfo@std@@QEAA@PEBD@Z DD 019930522H
	DD	07H
	DD	imagerel $stateUnwindMap$??0_Locinfo@std@@QEAA@PEBD@Z
	DD	00H
	DD	00H
	DD	09H
	DD	imagerel $ip2state$??0_Locinfo@std@@QEAA@PEBD@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Locinfo@std@@QEAA@PEBD@Z DD 011711H
	DD	0820eH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0_Locinfo@std@@QEAA@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_cast@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_cast@std@@QEAA@AEBV01@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_cast@std@@UEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_cast@std@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gruntime_error@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0runtime_error@std@@QEAA@AEBV01@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1runtime_error@std@@UEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0runtime_error@std@@QEAA@PEBD@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0runtime_error@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAX_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z DD 011201H
	DD	08212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_NPEBD@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_N_K_N@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$0@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA DD 020a19H
	DD	05006320aH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z DD imagerel ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z
	DD	0ffffffffH
	DD	imagerel ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z+310
	DD	00H
	DD	imagerel ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z+367
	DD	0ffffffffH
	DD	imagerel ?catch$1@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA
	DD	00H
	DD	imagerel ?catch$1@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA+13
	DD	01H
	DD	imagerel ?catch$1@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA+24
	DD	02H
	DD	imagerel ?catch$1@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA+74
	DD	01H
	DD	imagerel ?catch$1@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA+76
	DD	00H
	DD	imagerel ?catch$0@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA+13
	DD	03H
	DD	imagerel ?catch$0@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA+40
	DD	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$1$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$0@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$0$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z DD 040H
	DD	00H
	DD	00H
	DD	imagerel ?catch$1@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA
	DD	038H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z DD 00H
	DD	00H
	DD	03H
	DD	01H
	DD	imagerel $handlerMap$0$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	imagerel $handlerMap$1$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z DD 019930522H
	DD	04H
	DD	imagerel $stateUnwindMap$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z
	DD	02H
	DD	imagerel $tryMap$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z
	DD	0aH
	DD	imagerel $ip2state$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z
	DD	080H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z DD 022219H
	DD	0130116H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0D@Z DD 011801H
	DD	04218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$allocator@D@2@XZ DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAHAEBV12@@Z DD imagerel ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAHAEBV12@@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAHAEBV12@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAHAEBV12@@Z
	DD	038H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAHAEBV12@@Z DD 011719H
	DD	0820eH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAHAEBV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K0@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Traits_compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAHQEBD_K01@Z DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD imagerel ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD imagerel ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
	DD	030H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD 011719H
	DD	0820eH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD imagerel ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
	DD	030H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ DD 011719H
	DD	0820eH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z DD 011801H
	DD	0c218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0PEBD0@Z DD 011801H
	DD	0c218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0AEBV12@00@Z DD 021b01H
	DD	015011bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@@Z DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z DD imagerel ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z
	DD	030H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z DD 011719H
	DD	0820eH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z DD imagerel ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z
	DD	038H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z DD 011719H
	DD	0a20eH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z DD imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z DD 011719H
	DD	0620eH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z DD imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z
	DD	0ffffffffH
	DD	imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z+39
	DD	00H
	DD	imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z+76
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z DD 011c11H
	DD	06213H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z DD imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z
	DD	0ffffffffH
	DD	imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z+34
	DD	00H
	DD	imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z+65
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z DD 011711H
	DD	0620eH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z DD imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z
	DD	0ffffffffH
	DD	imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z+39
	DD	00H
	DD	imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z+75
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z
	DD	020H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z DD 011c11H
	DD	06213H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DD	0ffffffffH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DD	020H
	DD	00H
	DD	05H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 011219H
	DD	06209H
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z DD imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z
	DD	0ffffffffH
	DD	imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z+66
	DD	00H
	DD	imagerel ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z+107
	DD	0ffffffffH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z DD 0ffffffffH
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z DD 019930522H
	DD	01H
	DD	imagerel $stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z
	DD	00H
	DD	00H
	DD	03H
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z
	DD	028H
	DD	00H
	DD	01H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z DD 011711H
	DD	0620eH
	DD	imagerel __CxxFrameHandler3
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEB_KXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAPEBDXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBA_KU_Nil@2@@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAD_K@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAPEAD_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAAEAU01@$$QEAU01@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@$$QEAU01@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?address@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBAPEADAEAD@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBA?AU12@U_Nil@2@@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@D@std@@QEAAXPEAD_K@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Deallocate@std@@YAXPEAX_K1@Z DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@std@@YAPEAX_K0_N@Z DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?not_eof@?$char_traits@D@std@@SAHAEBH@Z DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z DD 010e01H
	DD	0220eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eq@?$char_traits@D@std@@SA_NAEBD0@Z DD 010e01H
	DD	0220eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$char_traits@D@std@@SAPEADPEAD_KD@Z DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$char_traits@D@std@@SA_KPEBD@Z DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?compare@?$char_traits@D@std@@SAHPEBD0_K@Z DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 020f01H
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 011001H
	DD	07010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBD@Z DD 020f01H
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf_s DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_s_l DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$frexpl DD 010f01H
	DD	0420fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fabsl DD 010a01H
	DD	0420aH
xdata	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??id$initializer$@?$numpunct@D@std@@2P6AXXZEA@@3P6AXXZEA DQ FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; ??id$initializer$@?$numpunct@D@std@@2P6AXXZEA@@3P6AXXZEA
CRT$XCU	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@EAAPEAXI@Z
_TEXT	SEGMENT
??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@EAAPEAXI@Z PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor', COMDAT
  00000	48 63 41 fc	 movsxd	 rax, DWORD PTR [rcx-4]
  00004	48 2b c8	 sub	 rcx, rax
  00007	e9 00 00 00 00	 jmp	 ??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z
??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@EAAPEAXI@Z ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odsp
;	COMDAT ??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z
_TEXT	SEGMENT
??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor', COMDAT
  00000	48 63 41 fc	 movsxd	 rax, DWORD PTR [rcx-4]
  00004	48 2b c8	 sub	 rcx, rax
  00007	e9 00 00 00 00	 jmp	 ??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
??_E?$basic_ostream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Copy_backward_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z
_TEXT	SEGMENT
_Count$ = 32
_First_ch$ = 40
_Last_ch$ = 48
_Dest_ch$ = 56
_First$ = 80
_Last$ = 88
_Dest$ = 96
??$_Copy_backward_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z PROC ; std::_Copy_backward_memmove<unsigned int * __ptr64,unsigned int * __ptr64>, COMDAT

; 2508 : 	{	// implement copy_backward-like function as memmove

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2509 : 	const char * const _First_ch = reinterpret_cast<const char *>(_First);

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR _First$[rsp]
  00018	48 89 44 24 28	 mov	 QWORD PTR _First_ch$[rsp], rax

; 2510 : 	const char * const _Last_ch = reinterpret_cast<const char *>(_Last);

  0001d	48 8b 44 24 58	 mov	 rax, QWORD PTR _Last$[rsp]
  00022	48 89 44 24 30	 mov	 QWORD PTR _Last_ch$[rsp], rax

; 2511 : 	char * const _Dest_ch = reinterpret_cast<char *>(_Dest);

  00027	48 8b 44 24 60	 mov	 rax, QWORD PTR _Dest$[rsp]
  0002c	48 89 44 24 38	 mov	 QWORD PTR _Dest_ch$[rsp], rax

; 2512 : 	const size_t _Count = _Last_ch - _First_ch;

  00031	48 8b 44 24 28	 mov	 rax, QWORD PTR _First_ch$[rsp]
  00036	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Last_ch$[rsp]
  0003b	48 2b c8	 sub	 rcx, rax
  0003e	48 8b c1	 mov	 rax, rcx
  00041	48 89 44 24 20	 mov	 QWORD PTR _Count$[rsp], rax

; 2513 : 	return (static_cast<_BidIt2>(

  00046	48 8b 44 24 20	 mov	 rax, QWORD PTR _Count$[rsp]
  0004b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Dest_ch$[rsp]
  00050	48 2b c8	 sub	 rcx, rax
  00053	48 8b c1	 mov	 rax, rcx
  00056	4c 8b 44 24 20	 mov	 r8, QWORD PTR _Count$[rsp]
  0005b	48 8b 54 24 28	 mov	 rdx, QWORD PTR _First_ch$[rsp]
  00060	48 8b c8	 mov	 rcx, rax
  00063	e8 00 00 00 00	 call	 memmove

; 2514 : 		_CSTD memmove(_Dest_ch - _Count, _First_ch, _Count)));
; 2515 : 	}

  00068	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006c	c3		 ret	 0
??$_Copy_backward_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z ENDP ; std::_Copy_backward_memmove<unsigned int * __ptr64,unsigned int * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UDsDevice@@U1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@$$QEAU2@@Z
_TEXT	SEGMENT
$T1 = 32
tv76 = 40
this$ = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@UDsDevice@@U1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@$$QEAU2@@Z PROC ; std::allocator<DsDevice>::construct<DsDevice,DsDevice>, COMDAT

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00018	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  0001d	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  00022	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00027	48 83 7c 24 20
	00		 cmp	 QWORD PTR $T1[rsp], 0
  0002d	74 1e		 je	 SHORT $LN3@construct
  0002f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00034	e8 00 00 00 00	 call	 ??$forward@UDsDevice@@@std@@YA$$QEAUDsDevice@@AEAU1@@Z ; std::forward<DsDevice>
  00039	48 8b d0	 mov	 rdx, rax
  0003c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  00041	e8 00 00 00 00	 call	 ??0DsDevice@@QEAA@$$QEAU0@@Z
  00046	48 89 44 24 28	 mov	 QWORD PTR tv76[rsp], rax
  0004b	eb 09		 jmp	 SHORT $LN4@construct
$LN3@construct:
  0004d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv76[rsp], 0
$LN4@construct:

; 738  : 		}

  00056	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005a	c3		 ret	 0
??$construct@UDsDevice@@U1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@$$QEAU2@@Z ENDP ; std::allocator<DsDevice>::construct<DsDevice,DsDevice>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Move_backward_unchecked1@PEAIPEAI@std@@YAPEAIPEAI00U_Trivially_copyable_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
__formal$ = 72
??$_Move_backward_unchecked1@PEAIPEAI@std@@YAPEAIPEAI00U_Trivially_copyable_ptr_iterator_tag@0@@Z PROC ; std::_Move_backward_unchecked1<unsigned int * __ptr64,unsigned int * __ptr64>, COMDAT

; 2668 : 	{	// move [_First, _Last) backwards to [..., _Dest), memmove optimization

$LN3:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2669 : 	return (_Copy_backward_memmove(_First, _Last, _Dest));

  00018	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Dest$[rsp]
  0001d	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Last$[rsp]
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _First$[rsp]
  00027	e8 00 00 00 00	 call	 ??$_Copy_backward_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z ; std::_Copy_backward_memmove<unsigned int * __ptr64,unsigned int * __ptr64>

; 2670 : 	}

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
??$_Move_backward_unchecked1@PEAIPEAI@std@@YAPEAIPEAI00U_Trivially_copyable_ptr_iterator_tag@0@@Z ENDP ; std::_Move_backward_unchecked1<unsigned int * __ptr64,unsigned int * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Pop_heap_hole_unchecked@PEAIIU?$less@X@std@@@std@@YAXPEAI00$$QEAIAEAU?$less@X@0@@Z
_TEXT	SEGMENT
_First$ = 64
_Last$ = 72
_Dest$ = 80
_Val$ = 88
_Pred$ = 96
??$_Pop_heap_hole_unchecked@PEAIIU?$less@X@std@@@std@@YAXPEAI00$$QEAIAEAU?$less@X@0@@Z PROC ; std::_Pop_heap_hole_unchecked<unsigned int * __ptr64,unsigned int,std::less<void> >, COMDAT

; 2067 : 	{	// pop *_First to *_Dest and reheap, using _Pred

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2068 : 		// precondition: _First != _Last
; 2069 : 		// precondition: _First != _Dest
; 2070 : 	*_Dest = _STD move(*_First);

  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First$[rsp]
  0001d	e8 00 00 00 00	 call	 ??$move@AEAI@std@@YA$$QEAIAEAI@Z ; std::move<unsigned int & __ptr64>
  00022	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Dest$[rsp]
  00027	8b 00		 mov	 eax, DWORD PTR [rax]
  00029	89 01		 mov	 DWORD PTR [rcx], eax

; 2071 : 	_Pop_heap_hole_by_index(_First, _Iter_diff_t<_RanIt>(0), _Iter_diff_t<_RanIt>(_Last - _First),

  0002b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Val$[rsp]
  00030	e8 00 00 00 00	 call	 ??$move@AEAI@std@@YA$$QEAIAEAI@Z ; std::move<unsigned int & __ptr64>
  00035	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First$[rsp]
  0003a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Last$[rsp]
  0003f	48 2b d1	 sub	 rdx, rcx
  00042	48 8b ca	 mov	 rcx, rdx
  00045	48 c1 f9 02	 sar	 rcx, 2
  00049	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Pred$[rsp]
  0004e	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  00053	4c 8b c8	 mov	 r9, rax
  00056	4c 8b c1	 mov	 r8, rcx
  00059	33 d2		 xor	 edx, edx
  0005b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First$[rsp]
  00060	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PEAI_JIU?$less@X@std@@@std@@YAXPEAI_J1$$QEAIAEAU?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<unsigned int * __ptr64,__int64,unsigned int,std::less<void> >

; 2072 : 		_STD move(_Val), _Pred);
; 2073 : 	}

  00065	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00069	c3		 ret	 0
??$_Pop_heap_hole_unchecked@PEAIIU?$less@X@std@@@std@@YAXPEAI00$$QEAIAEAU?$less@X@0@@Z ENDP ; std::_Pop_heap_hole_unchecked<unsigned int * __ptr64,unsigned int,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Push_heap_by_index@PEAI_JIU?$less@X@std@@@std@@YAXPEAI_J1$$QEAIAEAU?$less@X@0@@Z
_TEXT	SEGMENT
_Idx$1 = 32
_First$ = 64
_Hole$ = 72
_Top$ = 80
_Val$ = 88
_Pred$ = 96
??$_Push_heap_by_index@PEAI_JIU?$less@X@std@@@std@@YAXPEAI_J1$$QEAIAEAU?$less@X@0@@Z PROC ; std::_Push_heap_by_index<unsigned int * __ptr64,__int64,unsigned int,std::less<void> >, COMDAT

; 1989 : 	{	// percolate _Hole to _Top or where _Val belongs, using _Pred

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1990 : 	for (_Diff _Idx = (_Hole - 1) / 2;

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR _Hole$[rsp]
  0001d	48 ff c8	 dec	 rax
  00020	48 99		 cdq
  00022	48 2b c2	 sub	 rax, rdx
  00025	48 d1 f8	 sar	 rax, 1
  00028	48 89 44 24 20	 mov	 QWORD PTR _Idx$1[rsp], rax
  0002d	eb 15		 jmp	 SHORT $LN4@Push_heap_
$LN2@Push_heap_:

; 1992 : 		_Idx = (_Hole - 1) / 2)

  0002f	48 8b 44 24 48	 mov	 rax, QWORD PTR _Hole$[rsp]
  00034	48 ff c8	 dec	 rax
  00037	48 99		 cdq
  00039	48 2b c2	 sub	 rax, rdx
  0003c	48 d1 f8	 sar	 rax, 1
  0003f	48 89 44 24 20	 mov	 QWORD PTR _Idx$1[rsp], rax
$LN4@Push_heap_:

; 1991 : 		_Top < _Hole && _DEBUG_LT_PRED(_Pred, *(_First + _Idx), _Val);

  00044	48 8b 44 24 48	 mov	 rax, QWORD PTR _Hole$[rsp]
  00049	48 39 44 24 50	 cmp	 QWORD PTR _Top$[rsp], rax
  0004e	7d 58		 jge	 SHORT $LN3@Push_heap_
  00050	48 8b 44 24 40	 mov	 rax, QWORD PTR _First$[rsp]
  00055	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Idx$1[rsp]
  0005a	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  0005e	4c 8b 44 24 58	 mov	 r8, QWORD PTR _Val$[rsp]
  00063	48 8b d0	 mov	 rdx, rax
  00066	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _Pred$[rsp]
  0006b	e8 00 00 00 00	 call	 ??$?RAEAIAEAI@?$less@X@std@@QEBA_NAEAI0@Z ; std::less<void>::operator()<unsigned int & __ptr64,unsigned int & __ptr64>
  00070	0f b6 c0	 movzx	 eax, al
  00073	85 c0		 test	 eax, eax
  00075	74 31		 je	 SHORT $LN3@Push_heap_

; 1993 : 		{	// move _Hole up to parent
; 1994 : 		*(_First + _Hole) = _STD move(*(_First + _Idx));

  00077	48 8b 44 24 40	 mov	 rax, QWORD PTR _First$[rsp]
  0007c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Idx$1[rsp]
  00081	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  00085	48 8b c8	 mov	 rcx, rax
  00088	e8 00 00 00 00	 call	 ??$move@AEAI@std@@YA$$QEAIAEAI@Z ; std::move<unsigned int & __ptr64>
  0008d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First$[rsp]
  00092	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Hole$[rsp]
  00097	8b 00		 mov	 eax, DWORD PTR [rax]
  00099	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax

; 1995 : 		_Hole = _Idx;

  0009c	48 8b 44 24 20	 mov	 rax, QWORD PTR _Idx$1[rsp]
  000a1	48 89 44 24 48	 mov	 QWORD PTR _Hole$[rsp], rax

; 1996 : 		}

  000a6	eb 87		 jmp	 SHORT $LN2@Push_heap_
$LN3@Push_heap_:

; 1997 : 
; 1998 : 	*(_First + _Hole) = _STD move(_Val);	// drop _Val into final hole

  000a8	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Val$[rsp]
  000ad	e8 00 00 00 00	 call	 ??$move@AEAI@std@@YA$$QEAIAEAI@Z ; std::move<unsigned int & __ptr64>
  000b2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First$[rsp]
  000b7	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Hole$[rsp]
  000bc	8b 00		 mov	 eax, DWORD PTR [rax]
  000be	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax

; 1999 : 	}

  000c1	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c5	c3		 ret	 0
??$_Push_heap_by_index@PEAI_JIU?$less@X@std@@@std@@YAXPEAI_J1$$QEAIAEAU?$less@X@0@@Z ENDP ; std::_Push_heap_by_index<unsigned int * __ptr64,__int64,unsigned int,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AEAPEAI@std@@YAAEAPEAIAEAPEAI@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEAPEAI@std@@YAAEAPEAIAEAPEAI@Z PROC		; std::forward<unsigned int * __ptr64 & __ptr64>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1277 : 	}

  0000a	c3		 ret	 0
??$forward@AEAPEAI@std@@YAAEAPEAIAEAPEAI@Z ENDP		; std::forward<unsigned int * __ptr64 & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$swap@IX@std@@YAXAEAI0@Z
_TEXT	SEGMENT
_Tmp$ = 32
_Left$ = 64
_Right$ = 72
??$swap@IX@std@@YAXAEAI0@Z PROC				; std::swap<unsigned int,void>, COMDAT

; 48   : 	{	// exchange values stored at _Left and _Right

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 49   : 	_Ty _Tmp = _STD move(_Left);

  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Left$[rsp]
  00013	e8 00 00 00 00	 call	 ??$move@AEAI@std@@YA$$QEAIAEAI@Z ; std::move<unsigned int & __ptr64>
  00018	8b 00		 mov	 eax, DWORD PTR [rax]
  0001a	89 44 24 20	 mov	 DWORD PTR _Tmp$[rsp], eax

; 50   : 	_Left = _STD move(_Right);

  0001e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  00023	e8 00 00 00 00	 call	 ??$move@AEAI@std@@YA$$QEAIAEAI@Z ; std::move<unsigned int & __ptr64>
  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Left$[rsp]
  0002d	8b 00		 mov	 eax, DWORD PTR [rax]
  0002f	89 01		 mov	 DWORD PTR [rcx], eax

; 51   : 	_Right = _STD move(_Tmp);

  00031	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Tmp$[rsp]
  00036	e8 00 00 00 00	 call	 ??$move@AEAI@std@@YA$$QEAIAEAI@Z ; std::move<unsigned int & __ptr64>
  0003b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  00040	8b 00		 mov	 eax, DWORD PTR [rax]
  00042	89 01		 mov	 DWORD PTR [rcx], eax

; 52   : 	}

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
??$swap@IX@std@@YAXAEAI0@Z ENDP				; std::swap<unsigned int,void>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Med3_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI00AEAU?$less@X@0@@Z
_TEXT	SEGMENT
_First$ = 48
_Mid$ = 56
_Last$ = 64
_Pred$ = 72
??$_Med3_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI00AEAU?$less@X@0@@Z PROC ; std::_Med3_unchecked<unsigned int * __ptr64,std::less<void> >, COMDAT

; 2653 : 	{	// sort median of three elements to middle

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2654 : 	if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  00018	4c 8b 44 24 30	 mov	 r8, QWORD PTR _First$[rsp]
  0001d	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Mid$[rsp]
  00022	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Pred$[rsp]
  00027	e8 00 00 00 00	 call	 ??$?RAEAIAEAI@?$less@X@std@@QEBA_NAEAI0@Z ; std::less<void>::operator()<unsigned int & __ptr64,unsigned int & __ptr64>
  0002c	0f b6 c0	 movzx	 eax, al
  0002f	85 c0		 test	 eax, eax
  00031	74 0f		 je	 SHORT $LN2@Med3_unche

; 2655 : 		_STD iter_swap(_Mid, _First);

  00033	48 8b 54 24 30	 mov	 rdx, QWORD PTR _First$[rsp]
  00038	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Mid$[rsp]
  0003d	e8 00 00 00 00	 call	 ??$iter_swap@PEAIPEAI@std@@YAXPEAI0@Z ; std::iter_swap<unsigned int * __ptr64,unsigned int * __ptr64>
$LN2@Med3_unche:

; 2656 : 	if (_DEBUG_LT_PRED(_Pred, *_Last, *_Mid))

  00042	4c 8b 44 24 38	 mov	 r8, QWORD PTR _Mid$[rsp]
  00047	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Last$[rsp]
  0004c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Pred$[rsp]
  00051	e8 00 00 00 00	 call	 ??$?RAEAIAEAI@?$less@X@std@@QEBA_NAEAI0@Z ; std::less<void>::operator()<unsigned int & __ptr64,unsigned int & __ptr64>
  00056	0f b6 c0	 movzx	 eax, al
  00059	85 c0		 test	 eax, eax
  0005b	74 39		 je	 SHORT $LN3@Med3_unche

; 2657 : 		{	// swap middle and last, then test first again
; 2658 : 		_STD iter_swap(_Last, _Mid);

  0005d	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Mid$[rsp]
  00062	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Last$[rsp]
  00067	e8 00 00 00 00	 call	 ??$iter_swap@PEAIPEAI@std@@YAXPEAI0@Z ; std::iter_swap<unsigned int * __ptr64,unsigned int * __ptr64>

; 2659 : 		if (_DEBUG_LT_PRED(_Pred, *_Mid, *_First))

  0006c	4c 8b 44 24 30	 mov	 r8, QWORD PTR _First$[rsp]
  00071	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Mid$[rsp]
  00076	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Pred$[rsp]
  0007b	e8 00 00 00 00	 call	 ??$?RAEAIAEAI@?$less@X@std@@QEBA_NAEAI0@Z ; std::less<void>::operator()<unsigned int & __ptr64,unsigned int & __ptr64>
  00080	0f b6 c0	 movzx	 eax, al
  00083	85 c0		 test	 eax, eax
  00085	74 0f		 je	 SHORT $LN4@Med3_unche

; 2660 : 			_STD iter_swap(_Mid, _First);

  00087	48 8b 54 24 30	 mov	 rdx, QWORD PTR _First$[rsp]
  0008c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Mid$[rsp]
  00091	e8 00 00 00 00	 call	 ??$iter_swap@PEAIPEAI@std@@YAXPEAI0@Z ; std::iter_swap<unsigned int * __ptr64,unsigned int * __ptr64>
$LN4@Med3_unche:
$LN3@Med3_unche:

; 2661 : 		}
; 2662 : 	}

  00096	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0009a	c3		 ret	 0
??$_Med3_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI00AEAU?$less@X@0@@Z ENDP ; std::_Med3_unchecked<unsigned int * __ptr64,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UDsDevice@@U1@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@$$QEAU3@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@UDsDevice@@U1@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@$$QEAU3@@Z PROC ; std::allocator_traits<std::allocator<DsDevice> >::construct<DsDevice,DsDevice>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00018	e8 00 00 00 00	 call	 ??$forward@UDsDevice@@@std@@YA$$QEAUDsDevice@@AEAU1@@Z ; std::forward<DsDevice>
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$construct@UDsDevice@@U1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@$$QEAU2@@Z ; std::allocator<DsDevice>::construct<DsDevice,DsDevice>

; 858  : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
??$construct@UDsDevice@@U1@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@$$QEAU3@@Z ENDP ; std::allocator_traits<std::allocator<DsDevice> >::construct<DsDevice,DsDevice>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@UDsDevice@@@std@@YA$$QEAUDsDevice@@AEAU1@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@UDsDevice@@@std@@YA$$QEAUDsDevice@@AEAU1@@Z PROC ; std::forward<DsDevice>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1277 : 	}

  0000a	c3		 ret	 0
??$forward@UDsDevice@@@std@@YA$$QEAUDsDevice@@AEAU1@@Z ENDP ; std::forward<DsDevice>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Move_backward_unchecked@PEAIPEAI@std@@YAPEAIPEAI00@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
_First$ = 64
_Last$ = 72
_Dest$ = 80
??$_Move_backward_unchecked@PEAIPEAI@std@@YAPEAIPEAI00@Z PROC ; std::_Move_backward_unchecked<unsigned int * __ptr64,unsigned int * __ptr64>, COMDAT

; 2676 : 	{	// move [_First, _Last) backwards to [..., _Dest), choose optimization

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2677 : 	return (_Move_backward_unchecked1(_First, _Last,

  00013	4c 8d 44 24 50	 lea	 r8, QWORD PTR _Dest$[rsp]
  00018	48 8d 54 24 40	 lea	 rdx, QWORD PTR _First$[rsp]
  0001d	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  00022	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@II@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAI0@Z ; std::_Ptr_move_cat<unsigned int,unsigned int>
  00027	44 0f b6 4c 24
	21		 movzx	 r9d, BYTE PTR $T2[rsp]
  0002d	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Dest$[rsp]
  00032	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Last$[rsp]
  00037	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First$[rsp]
  0003c	e8 00 00 00 00	 call	 ??$_Move_backward_unchecked1@PEAIPEAI@std@@YAPEAIPEAI00U_Trivially_copyable_ptr_iterator_tag@0@@Z ; std::_Move_backward_unchecked1<unsigned int * __ptr64,unsigned int * __ptr64>

; 2678 : 		_Dest, _Ptr_move_cat(_First, _Dest)));
; 2679 : 	}

  00041	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00045	c3		 ret	 0
??$_Move_backward_unchecked@PEAIPEAI@std@@YAPEAIPEAI00@Z ENDP ; std::_Move_backward_unchecked<unsigned int * __ptr64,unsigned int * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Pop_heap_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z
_TEXT	SEGMENT
_Val$1 = 48
_First$ = 80
_Last$ = 88
_Pred$ = 96
??$_Pop_heap_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z PROC ; std::_Pop_heap_unchecked<unsigned int * __ptr64,std::less<void> >, COMDAT

; 2078 : 	{	// pop *_First to *(_Last - 1) and reheap, using _Pred

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2079 : 	if (2 <= _Last - _First)

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR _First$[rsp]
  00018	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Last$[rsp]
  0001d	48 2b c8	 sub	 rcx, rax
  00020	48 8b c1	 mov	 rax, rcx
  00023	48 c1 f8 02	 sar	 rax, 2
  00027	48 83 f8 02	 cmp	 rax, 2
  0002b	7c 49		 jl	 SHORT $LN2@Pop_heap_u

; 2080 : 		{
; 2081 : 		--_Last;

  0002d	48 8b 44 24 58	 mov	 rax, QWORD PTR _Last$[rsp]
  00032	48 83 e8 04	 sub	 rax, 4
  00036	48 89 44 24 58	 mov	 QWORD PTR _Last$[rsp], rax

; 2082 : 		_Iter_value_t<_RanIt> _Val = _STD move(*_Last);

  0003b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Last$[rsp]
  00040	e8 00 00 00 00	 call	 ??$move@AEAI@std@@YA$$QEAIAEAI@Z ; std::move<unsigned int & __ptr64>
  00045	8b 00		 mov	 eax, DWORD PTR [rax]
  00047	89 44 24 30	 mov	 DWORD PTR _Val$1[rsp], eax

; 2083 : 		_Pop_heap_hole_unchecked(_First, _Last, _Last,

  0004b	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Val$1[rsp]
  00050	e8 00 00 00 00	 call	 ??$move@AEAI@std@@YA$$QEAIAEAI@Z ; std::move<unsigned int & __ptr64>
  00055	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _Pred$[rsp]
  0005a	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0005f	4c 8b c8	 mov	 r9, rax
  00062	4c 8b 44 24 58	 mov	 r8, QWORD PTR _Last$[rsp]
  00067	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Last$[rsp]
  0006c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _First$[rsp]
  00071	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_unchecked@PEAIIU?$less@X@std@@@std@@YAXPEAI00$$QEAIAEAU?$less@X@0@@Z ; std::_Pop_heap_hole_unchecked<unsigned int * __ptr64,unsigned int,std::less<void> >
$LN2@Pop_heap_u:

; 2084 : 			_STD move(_Val), _Pred);
; 2085 : 		}
; 2086 : 	}

  00076	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0007a	c3		 ret	 0
??$_Pop_heap_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z ENDP ; std::_Pop_heap_unchecked<unsigned int * __ptr64,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Pop_heap_hole_by_index@PEAI_JIU?$less@X@std@@@std@@YAXPEAI_J1$$QEAIAEAU?$less@X@0@@Z
_TEXT	SEGMENT
_Idx$ = 48
_Max_sequence_non_leaf$ = 56
_Top$ = 64
_First$ = 96
_Hole$ = 104
_Bottom$ = 112
_Val$ = 120
_Pred$ = 128
??$_Pop_heap_hole_by_index@PEAI_JIU?$less@X@std@@@std@@YAXPEAI_J1$$QEAIAEAU?$less@X@0@@Z PROC ; std::_Pop_heap_hole_by_index<unsigned int * __ptr64,__int64,unsigned int,std::less<void> >, COMDAT

; 2036 : 	{	// percolate _Hole to _Bottom, then push _Val, using _Pred

$LN7:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2037 : 		// precondition: _Bottom != 0
; 2038 : 	const _Diff _Top = _Hole;

  00018	48 8b 44 24 68	 mov	 rax, QWORD PTR _Hole$[rsp]
  0001d	48 89 44 24 40	 mov	 QWORD PTR _Top$[rsp], rax

; 2039 : 	_Diff _Idx = _Hole;

  00022	48 8b 44 24 68	 mov	 rax, QWORD PTR _Hole$[rsp]
  00027	48 89 44 24 30	 mov	 QWORD PTR _Idx$[rsp], rax

; 2040 : 
; 2041 : 	// Check whether _Idx can have a child before calculating that child's index, since
; 2042 : 	// calculating the child's index can trigger integer overflows
; 2043 : 	const _Diff _Max_sequence_non_leaf = (_Bottom - 1) / 2;

  0002c	48 8b 44 24 70	 mov	 rax, QWORD PTR _Bottom$[rsp]
  00031	48 ff c8	 dec	 rax
  00034	48 99		 cdq
  00036	48 2b c2	 sub	 rax, rdx
  00039	48 d1 f8	 sar	 rax, 1
  0003c	48 89 44 24 38	 mov	 QWORD PTR _Max_sequence_non_leaf$[rsp], rax
$LN2@Pop_heap_h:

; 2044 : 	while (_Idx < _Max_sequence_non_leaf)

  00041	48 8b 44 24 38	 mov	 rax, QWORD PTR _Max_sequence_non_leaf$[rsp]
  00046	48 39 44 24 30	 cmp	 QWORD PTR _Idx$[rsp], rax
  0004b	0f 8d 87 00 00
	00		 jge	 $LN3@Pop_heap_h

; 2045 : 		{	// move _Hole down to larger child
; 2046 : 		_Idx = 2 * _Idx + 2;

  00051	48 8b 44 24 30	 mov	 rax, QWORD PTR _Idx$[rsp]
  00056	48 8d 44 00 02	 lea	 rax, QWORD PTR [rax+rax+2]
  0005b	48 89 44 24 30	 mov	 QWORD PTR _Idx$[rsp], rax

; 2047 : 		if (_DEBUG_LT_PRED(_Pred, *(_First + _Idx), *(_First + (_Idx - 1))))

  00060	48 8b 44 24 60	 mov	 rax, QWORD PTR _First$[rsp]
  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Idx$[rsp]
  0006a	48 8d 44 88 fc	 lea	 rax, QWORD PTR [rax+rcx*4-4]
  0006f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _First$[rsp]
  00074	48 8b 54 24 30	 mov	 rdx, QWORD PTR _Idx$[rsp]
  00079	48 8d 0c 91	 lea	 rcx, QWORD PTR [rcx+rdx*4]
  0007d	4c 8b c0	 mov	 r8, rax
  00080	48 8b d1	 mov	 rdx, rcx
  00083	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Pred$[rsp]
  0008b	e8 00 00 00 00	 call	 ??$?RAEAIAEAI@?$less@X@std@@QEBA_NAEAI0@Z ; std::less<void>::operator()<unsigned int & __ptr64,unsigned int & __ptr64>
  00090	0f b6 c0	 movzx	 eax, al
  00093	85 c0		 test	 eax, eax
  00095	74 0d		 je	 SHORT $LN4@Pop_heap_h

; 2048 : 			--_Idx;

  00097	48 8b 44 24 30	 mov	 rax, QWORD PTR _Idx$[rsp]
  0009c	48 ff c8	 dec	 rax
  0009f	48 89 44 24 30	 mov	 QWORD PTR _Idx$[rsp], rax
$LN4@Pop_heap_h:

; 2049 : 		*(_First + _Hole) = _STD move(*(_First + _Idx));

  000a4	48 8b 44 24 60	 mov	 rax, QWORD PTR _First$[rsp]
  000a9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Idx$[rsp]
  000ae	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  000b2	48 8b c8	 mov	 rcx, rax
  000b5	e8 00 00 00 00	 call	 ??$move@AEAI@std@@YA$$QEAIAEAI@Z ; std::move<unsigned int & __ptr64>
  000ba	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _First$[rsp]
  000bf	48 8b 54 24 68	 mov	 rdx, QWORD PTR _Hole$[rsp]
  000c4	8b 00		 mov	 eax, DWORD PTR [rax]
  000c6	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax

; 2050 : 		_Hole = _Idx;

  000c9	48 8b 44 24 30	 mov	 rax, QWORD PTR _Idx$[rsp]
  000ce	48 89 44 24 68	 mov	 QWORD PTR _Hole$[rsp], rax

; 2051 : 		}

  000d3	e9 69 ff ff ff	 jmp	 $LN2@Pop_heap_h
$LN3@Pop_heap_h:

; 2052 : 
; 2053 : 	if (_Idx == _Max_sequence_non_leaf && _Bottom % 2 == 0)

  000d8	48 8b 44 24 38	 mov	 rax, QWORD PTR _Max_sequence_non_leaf$[rsp]
  000dd	48 39 44 24 30	 cmp	 QWORD PTR _Idx$[rsp], rax
  000e2	75 49		 jne	 SHORT $LN5@Pop_heap_h
  000e4	48 8b 44 24 70	 mov	 rax, QWORD PTR _Bottom$[rsp]
  000e9	48 99		 cdq
  000eb	48 83 e0 01	 and	 rax, 1
  000ef	48 33 c2	 xor	 rax, rdx
  000f2	48 2b c2	 sub	 rax, rdx
  000f5	48 85 c0	 test	 rax, rax
  000f8	75 33		 jne	 SHORT $LN5@Pop_heap_h

; 2054 : 		{	// only child at bottom, move _Hole down to it
; 2055 : 		*(_First + _Hole) = _STD move(*(_First + (_Bottom - 1)));

  000fa	48 8b 44 24 60	 mov	 rax, QWORD PTR _First$[rsp]
  000ff	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Bottom$[rsp]
  00104	48 8d 44 88 fc	 lea	 rax, QWORD PTR [rax+rcx*4-4]
  00109	48 8b c8	 mov	 rcx, rax
  0010c	e8 00 00 00 00	 call	 ??$move@AEAI@std@@YA$$QEAIAEAI@Z ; std::move<unsigned int & __ptr64>
  00111	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _First$[rsp]
  00116	48 8b 54 24 68	 mov	 rdx, QWORD PTR _Hole$[rsp]
  0011b	8b 00		 mov	 eax, DWORD PTR [rax]
  0011d	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax

; 2056 : 		_Hole = _Bottom - 1;

  00120	48 8b 44 24 70	 mov	 rax, QWORD PTR _Bottom$[rsp]
  00125	48 ff c8	 dec	 rax
  00128	48 89 44 24 68	 mov	 QWORD PTR _Hole$[rsp], rax
$LN5@Pop_heap_h:

; 2057 : 		}
; 2058 : 
; 2059 : 	_Push_heap_by_index(_First, _Hole, _Top, _STD move(_Val), _Pred);

  0012d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Val$[rsp]
  00132	e8 00 00 00 00	 call	 ??$move@AEAI@std@@YA$$QEAIAEAI@Z ; std::move<unsigned int & __ptr64>
  00137	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Pred$[rsp]
  0013f	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00144	4c 8b c8	 mov	 r9, rax
  00147	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Top$[rsp]
  0014c	48 8b 54 24 68	 mov	 rdx, QWORD PTR _Hole$[rsp]
  00151	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _First$[rsp]
  00156	e8 00 00 00 00	 call	 ??$_Push_heap_by_index@PEAI_JIU?$less@X@std@@@std@@YAXPEAI_J1$$QEAIAEAU?$less@X@0@@Z ; std::_Push_heap_by_index<unsigned int * __ptr64,__int64,unsigned int,std::less<void> >

; 2060 : 	}

  0015b	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0015f	c3		 ret	 0
??$_Pop_heap_hole_by_index@PEAI_JIU?$less@X@std@@@std@@YAXPEAI_J1$$QEAIAEAU?$less@X@0@@Z ENDP ; std::_Pop_heap_hole_by_index<unsigned int * __ptr64,__int64,unsigned int,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$?0AEAPEAIAEAPEAIX$0A@@?$pair@PEAIPEAI@std@@QEAA@AEAPEAI0@Z
_TEXT	SEGMENT
this$ = 48
_Val1$ = 56
_Val2$ = 64
??$?0AEAPEAIAEAPEAIX$0A@@?$pair@PEAIPEAI@std@@QEAA@AEAPEAI0@Z PROC ; std::pair<unsigned int * __ptr64,unsigned int * __ptr64>::pair<unsigned int * __ptr64,unsigned int * __ptr64><unsigned int * __ptr64 & __ptr64,unsigned int * __ptr64 & __ptr64,void,0>, COMDAT

; 172  : 		{	// construct from moved values

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 170  : 		: first(_STD forward<_Other1>(_Val1)),

  00013	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Val1$[rsp]
  00018	e8 00 00 00 00	 call	 ??$forward@AEAPEAI@std@@YAAEAPEAIAEAPEAI@Z ; std::forward<unsigned int * __ptr64 & __ptr64>
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00022	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00025	48 89 01	 mov	 QWORD PTR [rcx], rax

; 171  : 				second(_STD forward<_Other2>(_Val2))

  00028	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Val2$[rsp]
  0002d	e8 00 00 00 00	 call	 ??$forward@AEAPEAI@std@@YAAEAPEAIAEAPEAI@Z ; std::forward<unsigned int * __ptr64 & __ptr64>
  00032	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00037	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003a	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 173  : 		}

  0003e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00043	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00047	c3		 ret	 0
??$?0AEAPEAIAEAPEAIX$0A@@?$pair@PEAIPEAI@std@@QEAA@AEAPEAI0@Z ENDP ; std::pair<unsigned int * __ptr64,unsigned int * __ptr64>::pair<unsigned int * __ptr64,unsigned int * __ptr64><unsigned int * __ptr64 & __ptr64,unsigned int * __ptr64 & __ptr64,void,0>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\utility
;	COMDAT ??$iter_swap@PEAIPEAI@std@@YAXPEAI0@Z
_TEXT	SEGMENT
_Left$ = 48
_Right$ = 56
??$iter_swap@PEAIPEAI@std@@YAXPEAI0@Z PROC		; std::iter_swap<unsigned int * __ptr64,unsigned int * __ptr64>, COMDAT

; 22   : 	{	// swap *_Left and *_Right

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 23   : 	swap(*_Left, *_Right);

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Right$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Left$[rsp]
  00018	e8 00 00 00 00	 call	 ??$swap@IX@std@@YAXAEAI0@Z ; std::swap<unsigned int,void>

; 24   : 	}

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
??$iter_swap@PEAIPEAI@std@@YAXPEAI0@Z ENDP		; std::iter_swap<unsigned int * __ptr64,unsigned int * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$?RAEAIAEAI@?$less@X@std@@QEBA_NAEAI0@Z
_TEXT	SEGMENT
tv65 = 0
this$ = 32
_Left$ = 40
_Right$ = 48
??$?RAEAIAEAI@?$less@X@std@@QEBA_NAEAI0@Z PROC		; std::less<void>::operator()<unsigned int & __ptr64,unsigned int & __ptr64>, COMDAT

; 322  : 		{	// transparently apply operator< to operands

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 18	 sub	 rsp, 24

; 323  : 		return (static_cast<_Ty1&&>(_Left)

  00013	48 8b 44 24 28	 mov	 rax, QWORD PTR _Left$[rsp]
  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Right$[rsp]
  0001d	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0001f	39 08		 cmp	 DWORD PTR [rax], ecx
  00021	73 09		 jae	 SHORT $LN3@operator
  00023	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv65[rsp], 1
  0002a	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0002c	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv65[rsp], 0
$LN4@operator:
  00033	0f b6 04 24	 movzx	 eax, BYTE PTR tv65[rsp]

; 324  : 			< static_cast<_Ty2&&>(_Right));
; 325  : 		}

  00037	48 83 c4 18	 add	 rsp, 24
  0003b	c3		 ret	 0
??$?RAEAIAEAI@?$less@X@std@@QEBA_NAEAI0@Z ENDP		; std::less<void>::operator()<unsigned int & __ptr64,unsigned int & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Guess_median_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI00AEAU?$less@X@0@@Z
_TEXT	SEGMENT
_Step$1 = 32
_First$ = 64
_Mid$ = 72
_Last$ = 80
_Pred$ = 88
??$_Guess_median_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI00AEAU?$less@X@0@@Z PROC ; std::_Guess_median_unchecked<unsigned int * __ptr64,std::less<void> >, COMDAT

; 2667 : 	{	// sort median element to middle

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2668 : 	if (40 < _Last - _First)

  00018	48 8b 44 24 40	 mov	 rax, QWORD PTR _First$[rsp]
  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Last$[rsp]
  00022	48 2b c8	 sub	 rcx, rax
  00025	48 8b c1	 mov	 rax, rcx
  00028	48 c1 f8 02	 sar	 rax, 2
  0002c	48 83 f8 28	 cmp	 rax, 40			; 00000028H
  00030	0f 8e 04 01 00
	00		 jle	 $LN2@Guess_medi

; 2669 : 		{	// median of nine
; 2670 : 		size_t _Step = (_Last - _First + 1) / 8;

  00036	48 8b 44 24 40	 mov	 rax, QWORD PTR _First$[rsp]
  0003b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Last$[rsp]
  00040	48 2b c8	 sub	 rcx, rax
  00043	48 8b c1	 mov	 rax, rcx
  00046	48 c1 f8 02	 sar	 rax, 2
  0004a	48 ff c0	 inc	 rax
  0004d	48 99		 cdq
  0004f	48 83 e2 07	 and	 rdx, 7
  00053	48 03 c2	 add	 rax, rdx
  00056	48 c1 f8 03	 sar	 rax, 3
  0005a	48 89 44 24 20	 mov	 QWORD PTR _Step$1[rsp], rax

; 2671 : 		_Med3_unchecked(_First, _First + _Step, _First + 2 * _Step, _Pred);

  0005f	48 8b 44 24 20	 mov	 rax, QWORD PTR _Step$1[rsp]
  00064	48 03 c0	 add	 rax, rax
  00067	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First$[rsp]
  0006c	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00070	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First$[rsp]
  00075	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Step$1[rsp]
  0007a	48 8d 0c 91	 lea	 rcx, QWORD PTR [rcx+rdx*4]
  0007e	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Pred$[rsp]
  00083	4c 8b c0	 mov	 r8, rax
  00086	48 8b d1	 mov	 rdx, rcx
  00089	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First$[rsp]
  0008e	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI00AEAU?$less@X@0@@Z ; std::_Med3_unchecked<unsigned int * __ptr64,std::less<void> >

; 2672 : 		_Med3_unchecked(_Mid - _Step, _Mid, _Mid + _Step, _Pred);

  00093	48 8b 44 24 48	 mov	 rax, QWORD PTR _Mid$[rsp]
  00098	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Step$1[rsp]
  0009d	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  000a1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Step$1[rsp]
  000a6	48 c1 e1 02	 shl	 rcx, 2
  000aa	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Mid$[rsp]
  000af	48 2b d1	 sub	 rdx, rcx
  000b2	48 8b ca	 mov	 rcx, rdx
  000b5	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Pred$[rsp]
  000ba	4c 8b c0	 mov	 r8, rax
  000bd	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Mid$[rsp]
  000c2	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI00AEAU?$less@X@0@@Z ; std::_Med3_unchecked<unsigned int * __ptr64,std::less<void> >

; 2673 : 		_Med3_unchecked(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);

  000c7	48 8b 44 24 20	 mov	 rax, QWORD PTR _Step$1[rsp]
  000cc	48 c1 e0 02	 shl	 rax, 2
  000d0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Last$[rsp]
  000d5	48 2b c8	 sub	 rcx, rax
  000d8	48 8b c1	 mov	 rax, rcx
  000db	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Step$1[rsp]
  000e0	48 03 c9	 add	 rcx, rcx
  000e3	48 c1 e1 02	 shl	 rcx, 2
  000e7	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Last$[rsp]
  000ec	48 2b d1	 sub	 rdx, rcx
  000ef	48 8b ca	 mov	 rcx, rdx
  000f2	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Pred$[rsp]
  000f7	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Last$[rsp]
  000fc	48 8b d0	 mov	 rdx, rax
  000ff	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI00AEAU?$less@X@0@@Z ; std::_Med3_unchecked<unsigned int * __ptr64,std::less<void> >

; 2674 : 		_Med3_unchecked(_First + _Step, _Mid, _Last - _Step, _Pred);

  00104	48 8b 44 24 20	 mov	 rax, QWORD PTR _Step$1[rsp]
  00109	48 c1 e0 02	 shl	 rax, 2
  0010d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Last$[rsp]
  00112	48 2b c8	 sub	 rcx, rax
  00115	48 8b c1	 mov	 rax, rcx
  00118	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First$[rsp]
  0011d	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Step$1[rsp]
  00122	48 8d 0c 91	 lea	 rcx, QWORD PTR [rcx+rdx*4]
  00126	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Pred$[rsp]
  0012b	4c 8b c0	 mov	 r8, rax
  0012e	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Mid$[rsp]
  00133	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI00AEAU?$less@X@0@@Z ; std::_Med3_unchecked<unsigned int * __ptr64,std::less<void> >

; 2675 : 		}
; 2676 : 	else

  00138	eb 19		 jmp	 SHORT $LN3@Guess_medi
$LN2@Guess_medi:

; 2677 : 		_Med3_unchecked(_First, _Mid, _Last, _Pred);

  0013a	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Pred$[rsp]
  0013f	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Last$[rsp]
  00144	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Mid$[rsp]
  00149	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First$[rsp]
  0014e	e8 00 00 00 00	 call	 ??$_Med3_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI00AEAU?$less@X@0@@Z ; std::_Med3_unchecked<unsigned int * __ptr64,std::less<void> >
$LN3@Guess_medi:

; 2678 : 	}

  00153	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00157	c3		 ret	 0
??$_Guess_median_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI00AEAU?$less@X@0@@Z ENDP ; std::_Guess_median_unchecked<unsigned int * __ptr64,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Copy_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z
_TEXT	SEGMENT
_First_ch$ = 32
_Count$ = 40
_Dest_ch$ = 48
_Last_ch$ = 56
_First$ = 80
_Last$ = 88
_Dest$ = 96
??$_Copy_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z PROC	; std::_Copy_memmove<unsigned int * __ptr64,unsigned int * __ptr64>, COMDAT

; 2301 : 	{	// implement copy-like function as memmove

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2302 : 	const char * const _First_ch = reinterpret_cast<const char *>(_First);

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR _First$[rsp]
  00018	48 89 44 24 20	 mov	 QWORD PTR _First_ch$[rsp], rax

; 2303 : 	const char * const _Last_ch = reinterpret_cast<const char *>(_Last);

  0001d	48 8b 44 24 58	 mov	 rax, QWORD PTR _Last$[rsp]
  00022	48 89 44 24 38	 mov	 QWORD PTR _Last_ch$[rsp], rax

; 2304 : 	char * const _Dest_ch = reinterpret_cast<char *>(_Dest);

  00027	48 8b 44 24 60	 mov	 rax, QWORD PTR _Dest$[rsp]
  0002c	48 89 44 24 30	 mov	 QWORD PTR _Dest_ch$[rsp], rax

; 2305 : 	const size_t _Count = _Last_ch - _First_ch;

  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR _First_ch$[rsp]
  00036	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Last_ch$[rsp]
  0003b	48 2b c8	 sub	 rcx, rax
  0003e	48 8b c1	 mov	 rax, rcx
  00041	48 89 44 24 28	 mov	 QWORD PTR _Count$[rsp], rax

; 2306 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00046	4c 8b 44 24 28	 mov	 r8, QWORD PTR _Count$[rsp]
  0004b	48 8b 54 24 20	 mov	 rdx, QWORD PTR _First_ch$[rsp]
  00050	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Dest_ch$[rsp]
  00055	e8 00 00 00 00	 call	 memmove

; 2307 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  0005a	48 8b 44 24 28	 mov	 rax, QWORD PTR _Count$[rsp]
  0005f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Dest_ch$[rsp]
  00064	48 03 c8	 add	 rcx, rax
  00067	48 8b c1	 mov	 rax, rcx

; 2308 : 	}

  0006a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006e	c3		 ret	 0
??$_Copy_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z ENDP	; std::_Copy_memmove<unsigned int * __ptr64,unsigned int * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Copy_memmove@PEAW4Api@RtAudio@@PEAW412@@std@@YAPEAW4Api@RtAudio@@PEAW412@00@Z
_TEXT	SEGMENT
_First_ch$ = 32
_Count$ = 40
_Dest_ch$ = 48
_Last_ch$ = 56
_First$ = 80
_Last$ = 88
_Dest$ = 96
??$_Copy_memmove@PEAW4Api@RtAudio@@PEAW412@@std@@YAPEAW4Api@RtAudio@@PEAW412@00@Z PROC ; std::_Copy_memmove<enum RtAudio::Api * __ptr64,enum RtAudio::Api * __ptr64>, COMDAT

; 2301 : 	{	// implement copy-like function as memmove

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2302 : 	const char * const _First_ch = reinterpret_cast<const char *>(_First);

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR _First$[rsp]
  00018	48 89 44 24 20	 mov	 QWORD PTR _First_ch$[rsp], rax

; 2303 : 	const char * const _Last_ch = reinterpret_cast<const char *>(_Last);

  0001d	48 8b 44 24 58	 mov	 rax, QWORD PTR _Last$[rsp]
  00022	48 89 44 24 38	 mov	 QWORD PTR _Last_ch$[rsp], rax

; 2304 : 	char * const _Dest_ch = reinterpret_cast<char *>(_Dest);

  00027	48 8b 44 24 60	 mov	 rax, QWORD PTR _Dest$[rsp]
  0002c	48 89 44 24 30	 mov	 QWORD PTR _Dest_ch$[rsp], rax

; 2305 : 	const size_t _Count = _Last_ch - _First_ch;

  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR _First_ch$[rsp]
  00036	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Last_ch$[rsp]
  0003b	48 2b c8	 sub	 rcx, rax
  0003e	48 8b c1	 mov	 rax, rcx
  00041	48 89 44 24 28	 mov	 QWORD PTR _Count$[rsp], rax

; 2306 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00046	4c 8b 44 24 28	 mov	 r8, QWORD PTR _Count$[rsp]
  0004b	48 8b 54 24 20	 mov	 rdx, QWORD PTR _First_ch$[rsp]
  00050	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Dest_ch$[rsp]
  00055	e8 00 00 00 00	 call	 memmove

; 2307 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  0005a	48 8b 44 24 28	 mov	 rax, QWORD PTR _Count$[rsp]
  0005f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Dest_ch$[rsp]
  00064	48 03 c8	 add	 rcx, rax
  00067	48 8b c1	 mov	 rax, rcx

; 2308 : 	}

  0006a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006e	c3		 ret	 0
??$_Copy_memmove@PEAW4Api@RtAudio@@PEAW412@@std@@YAPEAW4Api@RtAudio@@PEAW412@00@Z ENDP ; std::_Copy_memmove<enum RtAudio::Api * __ptr64,enum RtAudio::Api * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z
_TEXT	SEGMENT
_First_ch$ = 32
_Count$ = 40
_Dest_ch$ = 48
_Last_ch$ = 56
_First$ = 80
_Last$ = 88
_Dest$ = 96
??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z PROC	; std::_Copy_memmove<int * __ptr64,int * __ptr64>, COMDAT

; 2301 : 	{	// implement copy-like function as memmove

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2302 : 	const char * const _First_ch = reinterpret_cast<const char *>(_First);

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR _First$[rsp]
  00018	48 89 44 24 20	 mov	 QWORD PTR _First_ch$[rsp], rax

; 2303 : 	const char * const _Last_ch = reinterpret_cast<const char *>(_Last);

  0001d	48 8b 44 24 58	 mov	 rax, QWORD PTR _Last$[rsp]
  00022	48 89 44 24 38	 mov	 QWORD PTR _Last_ch$[rsp], rax

; 2304 : 	char * const _Dest_ch = reinterpret_cast<char *>(_Dest);

  00027	48 8b 44 24 60	 mov	 rax, QWORD PTR _Dest$[rsp]
  0002c	48 89 44 24 30	 mov	 QWORD PTR _Dest_ch$[rsp], rax

; 2305 : 	const size_t _Count = _Last_ch - _First_ch;

  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR _First_ch$[rsp]
  00036	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Last_ch$[rsp]
  0003b	48 2b c8	 sub	 rcx, rax
  0003e	48 8b c1	 mov	 rax, rcx
  00041	48 89 44 24 28	 mov	 QWORD PTR _Count$[rsp], rax

; 2306 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00046	4c 8b 44 24 28	 mov	 r8, QWORD PTR _Count$[rsp]
  0004b	48 8b 54 24 20	 mov	 rdx, QWORD PTR _First_ch$[rsp]
  00050	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Dest_ch$[rsp]
  00055	e8 00 00 00 00	 call	 memmove

; 2307 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  0005a	48 8b 44 24 28	 mov	 rax, QWORD PTR _Count$[rsp]
  0005f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Dest_ch$[rsp]
  00064	48 03 c8	 add	 rcx, rax
  00067	48 8b c1	 mov	 rax, rcx

; 2308 : 	}

  0006a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006e	c3		 ret	 0
??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z ENDP	; std::_Copy_memmove<int * __ptr64,int * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UDsDevice@@U1@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@$$QEAU2@@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@UDsDevice@@U1@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@$$QEAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<DsDevice> >::construct<DsDevice,DsDevice>, COMDAT

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00018	e8 00 00 00 00	 call	 ??$forward@UDsDevice@@@std@@YA$$QEAUDsDevice@@AEAU1@@Z ; std::forward<DsDevice>
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$construct@UDsDevice@@U1@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@$$QEAU3@@Z ; std::allocator_traits<std::allocator<DsDevice> >::construct<DsDevice,DsDevice>

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
??$construct@UDsDevice@@U1@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@$$QEAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<DsDevice> >::construct<DsDevice,DsDevice>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UDsDevice@@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
??$destroy@UDsDevice@@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@@Z PROC ; std::allocator<DsDevice>::destroy<DsDevice>, COMDAT

; 743  : 		{	// destroy object at _Ptr

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 744  : 		_Ptr->~_Uty();

  0000e	33 d2		 xor	 edx, edx
  00010	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00015	e8 00 00 00 00	 call	 ??_GDsDevice@@QEAAPEAXI@Z

; 745  : 		}

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
??$destroy@UDsDevice@@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@@Z ENDP ; std::allocator<DsDevice>::destroy<DsDevice>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Insertion_sort_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z
_TEXT	SEGMENT
_Val$1 = 32
_Next1$2 = 40
_Next$3 = 48
_First1$4 = 56
_First$ = 80
_Last$ = 88
_Pred$ = 96
??$_Insertion_sort_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z PROC ; std::_Insertion_sort_unchecked<unsigned int * __ptr64,std::less<void> >, COMDAT

; 2627 : 	{	// insertion sort [_First, _Last), using _Pred

$LN12:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2628 : 	if (_First != _Last)

  00013	48 8b 44 24 58	 mov	 rax, QWORD PTR _Last$[rsp]
  00018	48 39 44 24 50	 cmp	 QWORD PTR _First$[rsp], rax
  0001d	0f 84 00 01 00
	00		 je	 $LN8@Insertion_

; 2629 : 		for (_BidIt _Next = _First; ++_Next != _Last; )

  00023	48 8b 44 24 50	 mov	 rax, QWORD PTR _First$[rsp]
  00028	48 89 44 24 30	 mov	 QWORD PTR _Next$3[rsp], rax
$LN2@Insertion_:
  0002d	48 8b 44 24 30	 mov	 rax, QWORD PTR _Next$3[rsp]
  00032	48 83 c0 04	 add	 rax, 4
  00036	48 89 44 24 30	 mov	 QWORD PTR _Next$3[rsp], rax
  0003b	48 8b 44 24 58	 mov	 rax, QWORD PTR _Last$[rsp]
  00040	48 39 44 24 30	 cmp	 QWORD PTR _Next$3[rsp], rax
  00045	0f 84 d8 00 00
	00		 je	 $LN3@Insertion_

; 2630 : 			{	// order next element
; 2631 : 			_BidIt _Next1 = _Next;

  0004b	48 8b 44 24 30	 mov	 rax, QWORD PTR _Next$3[rsp]
  00050	48 89 44 24 28	 mov	 QWORD PTR _Next1$2[rsp], rax

; 2632 : 			_Iter_value_t<_BidIt> _Val = _STD move(*_Next);

  00055	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Next$3[rsp]
  0005a	e8 00 00 00 00	 call	 ??$move@AEAI@std@@YA$$QEAIAEAI@Z ; std::move<unsigned int & __ptr64>
  0005f	8b 00		 mov	 eax, DWORD PTR [rax]
  00061	89 44 24 20	 mov	 DWORD PTR _Val$1[rsp], eax

; 2633 : 
; 2634 : 			if (_DEBUG_LT_PRED(_Pred, _Val, *_First))

  00065	4c 8b 44 24 50	 mov	 r8, QWORD PTR _First$[rsp]
  0006a	48 8d 54 24 20	 lea	 rdx, QWORD PTR _Val$1[rsp]
  0006f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _Pred$[rsp]
  00074	e8 00 00 00 00	 call	 ??$?RAEAIAEAI@?$less@X@std@@QEBA_NAEAI0@Z ; std::less<void>::operator()<unsigned int & __ptr64,unsigned int & __ptr64>
  00079	0f b6 c0	 movzx	 eax, al
  0007c	85 c0		 test	 eax, eax
  0007e	74 37		 je	 SHORT $LN9@Insertion_

; 2635 : 				{	// found new earliest element, move to front
; 2636 : 				_Move_backward_unchecked(_First, _Next, ++_Next1);

  00080	48 8b 44 24 28	 mov	 rax, QWORD PTR _Next1$2[rsp]
  00085	48 83 c0 04	 add	 rax, 4
  00089	48 89 44 24 28	 mov	 QWORD PTR _Next1$2[rsp], rax
  0008e	4c 8b 44 24 28	 mov	 r8, QWORD PTR _Next1$2[rsp]
  00093	48 8b 54 24 30	 mov	 rdx, QWORD PTR _Next$3[rsp]
  00098	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _First$[rsp]
  0009d	e8 00 00 00 00	 call	 ??$_Move_backward_unchecked@PEAIPEAI@std@@YAPEAIPEAI00@Z ; std::_Move_backward_unchecked<unsigned int * __ptr64,unsigned int * __ptr64>

; 2637 : 				*_First = _STD move(_Val);

  000a2	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Val$1[rsp]
  000a7	e8 00 00 00 00	 call	 ??$move@AEAI@std@@YA$$QEAIAEAI@Z ; std::move<unsigned int & __ptr64>
  000ac	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _First$[rsp]
  000b1	8b 00		 mov	 eax, DWORD PTR [rax]
  000b3	89 01		 mov	 DWORD PTR [rcx], eax

; 2638 : 				}
; 2639 : 			else

  000b5	eb 67		 jmp	 SHORT $LN10@Insertion_
$LN9@Insertion_:

; 2640 : 				{	// look for insertion point after first
; 2641 : 				for (_BidIt _First1 = _Next1;

  000b7	48 8b 44 24 28	 mov	 rax, QWORD PTR _Next1$2[rsp]
  000bc	48 89 44 24 38	 mov	 QWORD PTR _First1$4[rsp], rax
  000c1	eb 0a		 jmp	 SHORT $LN7@Insertion_
$LN5@Insertion_:

; 2643 : 					_Next1 = _First1)

  000c3	48 8b 44 24 38	 mov	 rax, QWORD PTR _First1$4[rsp]
  000c8	48 89 44 24 28	 mov	 QWORD PTR _Next1$2[rsp], rax
$LN7@Insertion_:

; 2642 : 					_DEBUG_LT_PRED(_Pred, _Val, *--_First1);

  000cd	48 8b 44 24 38	 mov	 rax, QWORD PTR _First1$4[rsp]
  000d2	48 83 e8 04	 sub	 rax, 4
  000d6	48 89 44 24 38	 mov	 QWORD PTR _First1$4[rsp], rax
  000db	4c 8b 44 24 38	 mov	 r8, QWORD PTR _First1$4[rsp]
  000e0	48 8d 54 24 20	 lea	 rdx, QWORD PTR _Val$1[rsp]
  000e5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _Pred$[rsp]
  000ea	e8 00 00 00 00	 call	 ??$?RAEAIAEAI@?$less@X@std@@QEBA_NAEAI0@Z ; std::less<void>::operator()<unsigned int & __ptr64,unsigned int & __ptr64>
  000ef	0f b6 c0	 movzx	 eax, al
  000f2	85 c0		 test	 eax, eax
  000f4	74 15		 je	 SHORT $LN6@Insertion_

; 2644 : 					*_Next1 = _STD move(*_First1);	// move hole down

  000f6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _First1$4[rsp]
  000fb	e8 00 00 00 00	 call	 ??$move@AEAI@std@@YA$$QEAIAEAI@Z ; std::move<unsigned int & __ptr64>
  00100	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Next1$2[rsp]
  00105	8b 00		 mov	 eax, DWORD PTR [rax]
  00107	89 01		 mov	 DWORD PTR [rcx], eax
  00109	eb b8		 jmp	 SHORT $LN5@Insertion_
$LN6@Insertion_:

; 2645 : 				*_Next1 = _STD move(_Val);	// insert element in hole

  0010b	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Val$1[rsp]
  00110	e8 00 00 00 00	 call	 ??$move@AEAI@std@@YA$$QEAIAEAI@Z ; std::move<unsigned int & __ptr64>
  00115	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Next1$2[rsp]
  0011a	8b 00		 mov	 eax, DWORD PTR [rax]
  0011c	89 01		 mov	 DWORD PTR [rcx], eax
$LN10@Insertion_:

; 2646 : 				}
; 2647 : 			}

  0011e	e9 0a ff ff ff	 jmp	 $LN2@Insertion_
$LN3@Insertion_:
$LN8@Insertion_:

; 2648 : 	}

  00123	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00127	c3		 ret	 0
??$_Insertion_sort_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z ENDP ; std::_Insertion_sort_unchecked<unsigned int * __ptr64,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Sort_heap_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Pred$ = 64
??$_Sort_heap_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z PROC ; std::_Sort_heap_unchecked<unsigned int * __ptr64,std::less<void> >, COMDAT

; 2141 : 	{	// order heap by repeatedly popping, using _Pred

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2142 : 	for (; 2 <= _Last - _First; --_Last)

  00013	eb 0e		 jmp	 SHORT $LN4@Sort_heap_
$LN2@Sort_heap_:
  00015	48 8b 44 24 38	 mov	 rax, QWORD PTR _Last$[rsp]
  0001a	48 83 e8 04	 sub	 rax, 4
  0001e	48 89 44 24 38	 mov	 QWORD PTR _Last$[rsp], rax
$LN4@Sort_heap_:
  00023	48 8b 44 24 30	 mov	 rax, QWORD PTR _First$[rsp]
  00028	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Last$[rsp]
  0002d	48 2b c8	 sub	 rcx, rax
  00030	48 8b c1	 mov	 rax, rcx
  00033	48 c1 f8 02	 sar	 rax, 2
  00037	48 83 f8 02	 cmp	 rax, 2
  0003b	7c 16		 jl	 SHORT $LN3@Sort_heap_

; 2143 : 		_Pop_heap_unchecked(_First, _Last, _Pred);

  0003d	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Pred$[rsp]
  00042	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Last$[rsp]
  00047	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _First$[rsp]
  0004c	e8 00 00 00 00	 call	 ??$_Pop_heap_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z ; std::_Pop_heap_unchecked<unsigned int * __ptr64,std::less<void> >
  00051	eb c2		 jmp	 SHORT $LN2@Sort_heap_
$LN3@Sort_heap_:

; 2144 : 	}

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
??$_Sort_heap_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z ENDP ; std::_Sort_heap_unchecked<unsigned int * __ptr64,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Make_heap_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z
_TEXT	SEGMENT
_Val$1 = 48
_Hole$2 = 56
_Bottom$ = 64
_First$ = 96
_Last$ = 104
_Pred$ = 112
??$_Make_heap_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z PROC ; std::_Make_heap_unchecked<unsigned int * __ptr64,std::less<void> >, COMDAT

; 2108 : 	{	// make nontrivial [_First, _Last) into a heap, using _Pred

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2109 : 	_Iter_diff_t<_RanIt> _Bottom = _Last - _First;

  00013	48 8b 44 24 60	 mov	 rax, QWORD PTR _First$[rsp]
  00018	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Last$[rsp]
  0001d	48 2b c8	 sub	 rcx, rax
  00020	48 8b c1	 mov	 rax, rcx
  00023	48 c1 f8 02	 sar	 rax, 2
  00027	48 89 44 24 40	 mov	 QWORD PTR _Bottom$[rsp], rax

; 2110 : 	if (2 <= _Bottom)

  0002c	48 83 7c 24 40
	02		 cmp	 QWORD PTR _Bottom$[rsp], 2
  00032	7c 70		 jl	 SHORT $LN5@Make_heap_

; 2111 : 		{
; 2112 : 		for (_Iter_diff_t<_RanIt> _Hole = _Bottom / 2; 0 < _Hole; )

  00034	48 8b 44 24 40	 mov	 rax, QWORD PTR _Bottom$[rsp]
  00039	48 99		 cdq
  0003b	48 2b c2	 sub	 rax, rdx
  0003e	48 d1 f8	 sar	 rax, 1
  00041	48 89 44 24 38	 mov	 QWORD PTR _Hole$2[rsp], rax
$LN2@Make_heap_:
  00046	48 83 7c 24 38
	00		 cmp	 QWORD PTR _Hole$2[rsp], 0
  0004c	7e 56		 jle	 SHORT $LN3@Make_heap_

; 2113 : 			{	// reheap top half, bottom to top
; 2114 : 			--_Hole;

  0004e	48 8b 44 24 38	 mov	 rax, QWORD PTR _Hole$2[rsp]
  00053	48 ff c8	 dec	 rax
  00056	48 89 44 24 38	 mov	 QWORD PTR _Hole$2[rsp], rax

; 2115 : 			_Iter_value_t<_RanIt> _Val = _STD move(*(_First + _Hole));

  0005b	48 8b 44 24 60	 mov	 rax, QWORD PTR _First$[rsp]
  00060	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Hole$2[rsp]
  00065	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  00069	48 8b c8	 mov	 rcx, rax
  0006c	e8 00 00 00 00	 call	 ??$move@AEAI@std@@YA$$QEAIAEAI@Z ; std::move<unsigned int & __ptr64>
  00071	8b 00		 mov	 eax, DWORD PTR [rax]
  00073	89 44 24 30	 mov	 DWORD PTR _Val$1[rsp], eax

; 2116 : 			_Pop_heap_hole_by_index(_First, _Hole, _Bottom,

  00077	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Val$1[rsp]
  0007c	e8 00 00 00 00	 call	 ??$move@AEAI@std@@YA$$QEAIAEAI@Z ; std::move<unsigned int & __ptr64>
  00081	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Pred$[rsp]
  00086	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0008b	4c 8b c8	 mov	 r9, rax
  0008e	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Bottom$[rsp]
  00093	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Hole$2[rsp]
  00098	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _First$[rsp]
  0009d	e8 00 00 00 00	 call	 ??$_Pop_heap_hole_by_index@PEAI_JIU?$less@X@std@@@std@@YAXPEAI_J1$$QEAIAEAU?$less@X@0@@Z ; std::_Pop_heap_hole_by_index<unsigned int * __ptr64,__int64,unsigned int,std::less<void> >

; 2117 : 				_STD move(_Val), _Pred);
; 2118 : 			}

  000a2	eb a2		 jmp	 SHORT $LN2@Make_heap_
$LN3@Make_heap_:
$LN5@Make_heap_:

; 2119 : 		}
; 2120 : 	}

  000a4	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000a8	c3		 ret	 0
??$_Make_heap_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z ENDP ; std::_Make_heap_unchecked<unsigned int * __ptr64,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Partition_by_median_guess_unchecked@PEAIU?$less@X@std@@@std@@YA?AU?$pair@PEAIPEAI@0@PEAI0AEAU?$less@X@0@@Z
_TEXT	SEGMENT
_Pfirst$ = 32
_Plast$ = 40
_Glast$ = 48
_Gfirst$ = 56
_Mid$ = 64
tv154 = 72
tv153 = 80
tv191 = 88
tv194 = 96
tv208 = 104
__$ReturnUdt$ = 128
_First$ = 136
_Last$ = 144
_Pred$ = 152
??$_Partition_by_median_guess_unchecked@PEAIU?$less@X@std@@@std@@YA?AU?$pair@PEAIPEAI@0@PEAI0AEAU?$less@X@0@@Z PROC ; std::_Partition_by_median_guess_unchecked<unsigned int * __ptr64,std::less<void> >, COMDAT

; 2684 : 	{	// partition [_First, _Last), using _Pred

$LN33:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 2685 : 	_RanIt _Mid = _First + (_Last - _First) / 2;

  00018	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR _First$[rsp]
  00020	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR _Last$[rsp]
  00028	48 2b c8	 sub	 rcx, rax
  0002b	48 8b c1	 mov	 rax, rcx
  0002e	48 c1 f8 02	 sar	 rax, 2
  00032	48 99		 cdq
  00034	48 2b c2	 sub	 rax, rdx
  00037	48 d1 f8	 sar	 rax, 1
  0003a	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _First$[rsp]
  00042	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00046	48 89 44 24 40	 mov	 QWORD PTR _Mid$[rsp], rax

; 2686 : 	_Guess_median_unchecked(_First, _Mid, _Last - 1, _Pred);

  0004b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR _Last$[rsp]
  00053	48 83 e8 04	 sub	 rax, 4
  00057	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR _Pred$[rsp]
  0005f	4c 8b c0	 mov	 r8, rax
  00062	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Mid$[rsp]
  00067	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _First$[rsp]
  0006f	e8 00 00 00 00	 call	 ??$_Guess_median_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI00AEAU?$less@X@0@@Z ; std::_Guess_median_unchecked<unsigned int * __ptr64,std::less<void> >

; 2687 : 	_RanIt _Pfirst = _Mid;

  00074	48 8b 44 24 40	 mov	 rax, QWORD PTR _Mid$[rsp]
  00079	48 89 44 24 20	 mov	 QWORD PTR _Pfirst$[rsp], rax

; 2688 : 	_RanIt _Plast = _Pfirst + 1;

  0007e	48 8b 44 24 20	 mov	 rax, QWORD PTR _Pfirst$[rsp]
  00083	48 83 c0 04	 add	 rax, 4
  00087	48 89 44 24 28	 mov	 QWORD PTR _Plast$[rsp], rax
$LN2@Partition_:

; 2689 : 
; 2690 : 	while (_First < _Pfirst
; 2691 : 		&& !_DEBUG_LT_PRED(_Pred, *(_Pfirst - 1), *_Pfirst)
; 2692 : 		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))

  0008c	48 8b 44 24 20	 mov	 rax, QWORD PTR _Pfirst$[rsp]
  00091	48 39 84 24 88
	00 00 00	 cmp	 QWORD PTR _First$[rsp], rax
  00099	73 5a		 jae	 SHORT $LN3@Partition_
  0009b	48 8b 44 24 20	 mov	 rax, QWORD PTR _Pfirst$[rsp]
  000a0	48 83 e8 04	 sub	 rax, 4
  000a4	4c 8b 44 24 20	 mov	 r8, QWORD PTR _Pfirst$[rsp]
  000a9	48 8b d0	 mov	 rdx, rax
  000ac	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Pred$[rsp]
  000b4	e8 00 00 00 00	 call	 ??$?RAEAIAEAI@?$less@X@std@@QEBA_NAEAI0@Z ; std::less<void>::operator()<unsigned int & __ptr64,unsigned int & __ptr64>
  000b9	0f b6 c0	 movzx	 eax, al
  000bc	85 c0		 test	 eax, eax
  000be	75 35		 jne	 SHORT $LN3@Partition_
  000c0	48 8b 44 24 20	 mov	 rax, QWORD PTR _Pfirst$[rsp]
  000c5	48 83 e8 04	 sub	 rax, 4
  000c9	4c 8b c0	 mov	 r8, rax
  000cc	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Pfirst$[rsp]
  000d1	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Pred$[rsp]
  000d9	e8 00 00 00 00	 call	 ??$?RAEAIAEAI@?$less@X@std@@QEBA_NAEAI0@Z ; std::less<void>::operator()<unsigned int & __ptr64,unsigned int & __ptr64>
  000de	0f b6 c0	 movzx	 eax, al
  000e1	85 c0		 test	 eax, eax
  000e3	75 10		 jne	 SHORT $LN3@Partition_

; 2693 : 		--_Pfirst;

  000e5	48 8b 44 24 20	 mov	 rax, QWORD PTR _Pfirst$[rsp]
  000ea	48 83 e8 04	 sub	 rax, 4
  000ee	48 89 44 24 20	 mov	 QWORD PTR _Pfirst$[rsp], rax
  000f3	eb 97		 jmp	 SHORT $LN2@Partition_
$LN3@Partition_:
$LN4@Partition_:

; 2694 : 	while (_Plast < _Last
; 2695 : 		&& !_DEBUG_LT_PRED(_Pred, *_Plast, *_Pfirst)
; 2696 : 		&& !_Pred(*_Pfirst, *_Plast))

  000f5	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR _Last$[rsp]
  000fd	48 39 44 24 28	 cmp	 QWORD PTR _Plast$[rsp], rax
  00102	73 4c		 jae	 SHORT $LN5@Partition_
  00104	4c 8b 44 24 20	 mov	 r8, QWORD PTR _Pfirst$[rsp]
  00109	48 8b 54 24 28	 mov	 rdx, QWORD PTR _Plast$[rsp]
  0010e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Pred$[rsp]
  00116	e8 00 00 00 00	 call	 ??$?RAEAIAEAI@?$less@X@std@@QEBA_NAEAI0@Z ; std::less<void>::operator()<unsigned int & __ptr64,unsigned int & __ptr64>
  0011b	0f b6 c0	 movzx	 eax, al
  0011e	85 c0		 test	 eax, eax
  00120	75 2e		 jne	 SHORT $LN5@Partition_
  00122	4c 8b 44 24 28	 mov	 r8, QWORD PTR _Plast$[rsp]
  00127	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Pfirst$[rsp]
  0012c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Pred$[rsp]
  00134	e8 00 00 00 00	 call	 ??$?RAEAIAEAI@?$less@X@std@@QEBA_NAEAI0@Z ; std::less<void>::operator()<unsigned int & __ptr64,unsigned int & __ptr64>
  00139	0f b6 c0	 movzx	 eax, al
  0013c	85 c0		 test	 eax, eax
  0013e	75 10		 jne	 SHORT $LN5@Partition_

; 2697 : 		++_Plast;

  00140	48 8b 44 24 28	 mov	 rax, QWORD PTR _Plast$[rsp]
  00145	48 83 c0 04	 add	 rax, 4
  00149	48 89 44 24 28	 mov	 QWORD PTR _Plast$[rsp], rax
  0014e	eb a5		 jmp	 SHORT $LN4@Partition_
$LN5@Partition_:

; 2698 : 
; 2699 : 	_RanIt _Gfirst = _Plast;

  00150	48 8b 44 24 28	 mov	 rax, QWORD PTR _Plast$[rsp]
  00155	48 89 44 24 38	 mov	 QWORD PTR _Gfirst$[rsp], rax

; 2700 : 	_RanIt _Glast = _Pfirst;

  0015a	48 8b 44 24 20	 mov	 rax, QWORD PTR _Pfirst$[rsp]
  0015f	48 89 44 24 30	 mov	 QWORD PTR _Glast$[rsp], rax
$LN6@Partition_:

; 2701 : 
; 2702 : 	for (; ; )
; 2703 : 		{	// partition
; 2704 : 		for (; _Gfirst < _Last; ++_Gfirst)

  00164	eb 0e		 jmp	 SHORT $LN11@Partition_
$LN9@Partition_:
  00166	48 8b 44 24 38	 mov	 rax, QWORD PTR _Gfirst$[rsp]
  0016b	48 83 c0 04	 add	 rax, 4
  0016f	48 89 44 24 38	 mov	 QWORD PTR _Gfirst$[rsp], rax
$LN11@Partition_:
  00174	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR _Last$[rsp]
  0017c	48 39 44 24 38	 cmp	 QWORD PTR _Gfirst$[rsp], rax
  00181	0f 83 8b 00 00
	00		 jae	 $LN10@Partition_

; 2705 : 			if (_DEBUG_LT_PRED(_Pred, *_Pfirst, *_Gfirst))

  00187	4c 8b 44 24 38	 mov	 r8, QWORD PTR _Gfirst$[rsp]
  0018c	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Pfirst$[rsp]
  00191	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Pred$[rsp]
  00199	e8 00 00 00 00	 call	 ??$?RAEAIAEAI@?$less@X@std@@QEBA_NAEAI0@Z ; std::less<void>::operator()<unsigned int & __ptr64,unsigned int & __ptr64>
  0019e	0f b6 c0	 movzx	 eax, al
  001a1	85 c0		 test	 eax, eax
  001a3	74 02		 je	 SHORT $LN15@Partition_
  001a5	eb 66		 jmp	 SHORT $LN16@Partition_
$LN15@Partition_:

; 2706 : 				;
; 2707 : 			else if (_Pred(*_Gfirst, *_Pfirst))

  001a7	4c 8b 44 24 20	 mov	 r8, QWORD PTR _Pfirst$[rsp]
  001ac	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Gfirst$[rsp]
  001b1	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Pred$[rsp]
  001b9	e8 00 00 00 00	 call	 ??$?RAEAIAEAI@?$less@X@std@@QEBA_NAEAI0@Z ; std::less<void>::operator()<unsigned int & __ptr64,unsigned int & __ptr64>
  001be	0f b6 c0	 movzx	 eax, al
  001c1	85 c0		 test	 eax, eax
  001c3	74 04		 je	 SHORT $LN17@Partition_

; 2708 : 				break;

  001c5	eb 4b		 jmp	 SHORT $LN10@Partition_
  001c7	eb 44		 jmp	 SHORT $LN18@Partition_
$LN17@Partition_:

; 2709 : 			else if (_Plast++ != _Gfirst)

  001c9	48 8b 44 24 28	 mov	 rax, QWORD PTR _Plast$[rsp]
  001ce	48 89 44 24 50	 mov	 QWORD PTR tv153[rsp], rax
  001d3	48 8b 44 24 38	 mov	 rax, QWORD PTR _Gfirst$[rsp]
  001d8	48 89 44 24 48	 mov	 QWORD PTR tv154[rsp], rax
  001dd	48 8b 44 24 28	 mov	 rax, QWORD PTR _Plast$[rsp]
  001e2	48 83 c0 04	 add	 rax, 4
  001e6	48 89 44 24 28	 mov	 QWORD PTR _Plast$[rsp], rax
  001eb	48 8b 44 24 48	 mov	 rax, QWORD PTR tv154[rsp]
  001f0	48 39 44 24 50	 cmp	 QWORD PTR tv153[rsp], rax
  001f5	74 16		 je	 SHORT $LN19@Partition_

; 2710 : 				_STD iter_swap(_Plast - 1, _Gfirst);

  001f7	48 8b 44 24 28	 mov	 rax, QWORD PTR _Plast$[rsp]
  001fc	48 83 e8 04	 sub	 rax, 4
  00200	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Gfirst$[rsp]
  00205	48 8b c8	 mov	 rcx, rax
  00208	e8 00 00 00 00	 call	 ??$iter_swap@PEAIPEAI@std@@YAXPEAI0@Z ; std::iter_swap<unsigned int * __ptr64,unsigned int * __ptr64>
$LN19@Partition_:
$LN18@Partition_:
$LN16@Partition_:

; 2711 : 		for (; _First < _Glast; --_Glast)

  0020d	e9 54 ff ff ff	 jmp	 $LN9@Partition_
$LN10@Partition_:
  00212	eb 0e		 jmp	 SHORT $LN14@Partition_
$LN12@Partition_:
  00214	48 8b 44 24 30	 mov	 rax, QWORD PTR _Glast$[rsp]
  00219	48 83 e8 04	 sub	 rax, 4
  0021d	48 89 44 24 30	 mov	 QWORD PTR _Glast$[rsp], rax
$LN14@Partition_:
  00222	48 8b 44 24 30	 mov	 rax, QWORD PTR _Glast$[rsp]
  00227	48 39 84 24 88
	00 00 00	 cmp	 QWORD PTR _First$[rsp], rax
  0022f	0f 83 89 00 00
	00		 jae	 $LN13@Partition_

; 2712 : 			if (_DEBUG_LT_PRED(_Pred, *(_Glast - 1), *_Pfirst))

  00235	48 8b 44 24 30	 mov	 rax, QWORD PTR _Glast$[rsp]
  0023a	48 83 e8 04	 sub	 rax, 4
  0023e	4c 8b 44 24 20	 mov	 r8, QWORD PTR _Pfirst$[rsp]
  00243	48 8b d0	 mov	 rdx, rax
  00246	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Pred$[rsp]
  0024e	e8 00 00 00 00	 call	 ??$?RAEAIAEAI@?$less@X@std@@QEBA_NAEAI0@Z ; std::less<void>::operator()<unsigned int & __ptr64,unsigned int & __ptr64>
  00253	0f b6 c0	 movzx	 eax, al
  00256	85 c0		 test	 eax, eax
  00258	74 02		 je	 SHORT $LN20@Partition_
  0025a	eb 5d		 jmp	 SHORT $LN21@Partition_
$LN20@Partition_:

; 2713 : 				;
; 2714 : 			else if (_Pred(*_Pfirst, *(_Glast - 1)))

  0025c	48 8b 44 24 30	 mov	 rax, QWORD PTR _Glast$[rsp]
  00261	48 83 e8 04	 sub	 rax, 4
  00265	4c 8b c0	 mov	 r8, rax
  00268	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Pfirst$[rsp]
  0026d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Pred$[rsp]
  00275	e8 00 00 00 00	 call	 ??$?RAEAIAEAI@?$less@X@std@@QEBA_NAEAI0@Z ; std::less<void>::operator()<unsigned int & __ptr64,unsigned int & __ptr64>
  0027a	0f b6 c0	 movzx	 eax, al
  0027d	85 c0		 test	 eax, eax
  0027f	74 04		 je	 SHORT $LN22@Partition_

; 2715 : 				break;

  00281	eb 3b		 jmp	 SHORT $LN13@Partition_
  00283	eb 34		 jmp	 SHORT $LN23@Partition_
$LN22@Partition_:

; 2716 : 			else if (--_Pfirst != _Glast - 1)

  00285	48 8b 44 24 20	 mov	 rax, QWORD PTR _Pfirst$[rsp]
  0028a	48 83 e8 04	 sub	 rax, 4
  0028e	48 89 44 24 20	 mov	 QWORD PTR _Pfirst$[rsp], rax
  00293	48 8b 44 24 30	 mov	 rax, QWORD PTR _Glast$[rsp]
  00298	48 83 e8 04	 sub	 rax, 4
  0029c	48 39 44 24 20	 cmp	 QWORD PTR _Pfirst$[rsp], rax
  002a1	74 16		 je	 SHORT $LN24@Partition_

; 2717 : 				_STD iter_swap(_Pfirst, _Glast - 1);

  002a3	48 8b 44 24 30	 mov	 rax, QWORD PTR _Glast$[rsp]
  002a8	48 83 e8 04	 sub	 rax, 4
  002ac	48 8b d0	 mov	 rdx, rax
  002af	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Pfirst$[rsp]
  002b4	e8 00 00 00 00	 call	 ??$iter_swap@PEAIPEAI@std@@YAXPEAI0@Z ; std::iter_swap<unsigned int * __ptr64,unsigned int * __ptr64>
$LN24@Partition_:
$LN23@Partition_:
$LN21@Partition_:

; 2718 : 		if (_Glast == _First && _Gfirst == _Last)

  002b9	e9 56 ff ff ff	 jmp	 $LN12@Partition_
$LN13@Partition_:
  002be	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR _First$[rsp]
  002c6	48 39 44 24 30	 cmp	 QWORD PTR _Glast$[rsp], rax
  002cb	75 33		 jne	 SHORT $LN25@Partition_
  002cd	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR _Last$[rsp]
  002d5	48 39 44 24 38	 cmp	 QWORD PTR _Gfirst$[rsp], rax
  002da	75 24		 jne	 SHORT $LN25@Partition_

; 2719 : 			return (pair<_RanIt, _RanIt>(_Pfirst, _Plast));

  002dc	4c 8d 44 24 28	 lea	 r8, QWORD PTR _Plast$[rsp]
  002e1	48 8d 54 24 20	 lea	 rdx, QWORD PTR _Pfirst$[rsp]
  002e6	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  002ee	e8 00 00 00 00	 call	 ??$?0AEAPEAIAEAPEAIX$0A@@?$pair@PEAIPEAI@std@@QEAA@AEAPEAI0@Z ; std::pair<unsigned int * __ptr64,unsigned int * __ptr64>::pair<unsigned int * __ptr64,unsigned int * __ptr64><unsigned int * __ptr64 & __ptr64,unsigned int * __ptr64 & __ptr64,void,0>
  002f3	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
  002fb	e9 1b 01 00 00	 jmp	 $LN1@Partition_
$LN25@Partition_:

; 2720 : 
; 2721 : 		if (_Glast == _First)

  00300	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR _First$[rsp]
  00308	48 39 44 24 30	 cmp	 QWORD PTR _Glast$[rsp], rax
  0030d	75 6d		 jne	 SHORT $LN26@Partition_

; 2722 : 			{	// no room at bottom, rotate pivot upward
; 2723 : 			if (_Plast != _Gfirst)

  0030f	48 8b 44 24 38	 mov	 rax, QWORD PTR _Gfirst$[rsp]
  00314	48 39 44 24 28	 cmp	 QWORD PTR _Plast$[rsp], rax
  00319	74 0f		 je	 SHORT $LN28@Partition_

; 2724 : 				_STD iter_swap(_Pfirst, _Plast);

  0031b	48 8b 54 24 28	 mov	 rdx, QWORD PTR _Plast$[rsp]
  00320	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Pfirst$[rsp]
  00325	e8 00 00 00 00	 call	 ??$iter_swap@PEAIPEAI@std@@YAXPEAI0@Z ; std::iter_swap<unsigned int * __ptr64,unsigned int * __ptr64>
$LN28@Partition_:

; 2725 : 			++_Plast;

  0032a	48 8b 44 24 28	 mov	 rax, QWORD PTR _Plast$[rsp]
  0032f	48 83 c0 04	 add	 rax, 4
  00333	48 89 44 24 28	 mov	 QWORD PTR _Plast$[rsp], rax

; 2726 : 			_STD iter_swap(_Pfirst++, _Gfirst++);

  00338	48 8b 44 24 38	 mov	 rax, QWORD PTR _Gfirst$[rsp]
  0033d	48 89 44 24 58	 mov	 QWORD PTR tv191[rsp], rax
  00342	48 8b 44 24 20	 mov	 rax, QWORD PTR _Pfirst$[rsp]
  00347	48 89 44 24 60	 mov	 QWORD PTR tv194[rsp], rax
  0034c	48 8b 44 24 20	 mov	 rax, QWORD PTR _Pfirst$[rsp]
  00351	48 83 c0 04	 add	 rax, 4
  00355	48 89 44 24 20	 mov	 QWORD PTR _Pfirst$[rsp], rax
  0035a	48 8b 44 24 38	 mov	 rax, QWORD PTR _Gfirst$[rsp]
  0035f	48 83 c0 04	 add	 rax, 4
  00363	48 89 44 24 38	 mov	 QWORD PTR _Gfirst$[rsp], rax
  00368	48 8b 54 24 58	 mov	 rdx, QWORD PTR tv191[rsp]
  0036d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv194[rsp]
  00372	e8 00 00 00 00	 call	 ??$iter_swap@PEAIPEAI@std@@YAXPEAI0@Z ; std::iter_swap<unsigned int * __ptr64,unsigned int * __ptr64>
  00377	e9 9a 00 00 00	 jmp	 $LN27@Partition_
$LN26@Partition_:

; 2727 : 			}
; 2728 : 		else if (_Gfirst == _Last)

  0037c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR _Last$[rsp]
  00384	48 39 44 24 38	 cmp	 QWORD PTR _Gfirst$[rsp], rax
  00389	75 56		 jne	 SHORT $LN29@Partition_

; 2729 : 			{	// no room at top, rotate pivot downward
; 2730 : 			if (--_Glast != --_Pfirst)

  0038b	48 8b 44 24 30	 mov	 rax, QWORD PTR _Glast$[rsp]
  00390	48 83 e8 04	 sub	 rax, 4
  00394	48 89 44 24 30	 mov	 QWORD PTR _Glast$[rsp], rax
  00399	48 8b 44 24 20	 mov	 rax, QWORD PTR _Pfirst$[rsp]
  0039e	48 83 e8 04	 sub	 rax, 4
  003a2	48 89 44 24 20	 mov	 QWORD PTR _Pfirst$[rsp], rax
  003a7	48 8b 44 24 20	 mov	 rax, QWORD PTR _Pfirst$[rsp]
  003ac	48 39 44 24 30	 cmp	 QWORD PTR _Glast$[rsp], rax
  003b1	74 0f		 je	 SHORT $LN31@Partition_

; 2731 : 				_STD iter_swap(_Glast, _Pfirst);

  003b3	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Pfirst$[rsp]
  003b8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Glast$[rsp]
  003bd	e8 00 00 00 00	 call	 ??$iter_swap@PEAIPEAI@std@@YAXPEAI0@Z ; std::iter_swap<unsigned int * __ptr64,unsigned int * __ptr64>
$LN31@Partition_:

; 2732 : 			_STD iter_swap(_Pfirst, --_Plast);

  003c2	48 8b 44 24 28	 mov	 rax, QWORD PTR _Plast$[rsp]
  003c7	48 83 e8 04	 sub	 rax, 4
  003cb	48 89 44 24 28	 mov	 QWORD PTR _Plast$[rsp], rax
  003d0	48 8b 54 24 28	 mov	 rdx, QWORD PTR _Plast$[rsp]
  003d5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Pfirst$[rsp]
  003da	e8 00 00 00 00	 call	 ??$iter_swap@PEAIPEAI@std@@YAXPEAI0@Z ; std::iter_swap<unsigned int * __ptr64,unsigned int * __ptr64>

; 2733 : 			}
; 2734 : 		else

  003df	eb 35		 jmp	 SHORT $LN30@Partition_
$LN29@Partition_:

; 2735 : 			_STD iter_swap(_Gfirst++, --_Glast);

  003e1	48 8b 44 24 30	 mov	 rax, QWORD PTR _Glast$[rsp]
  003e6	48 83 e8 04	 sub	 rax, 4
  003ea	48 89 44 24 30	 mov	 QWORD PTR _Glast$[rsp], rax
  003ef	48 8b 44 24 38	 mov	 rax, QWORD PTR _Gfirst$[rsp]
  003f4	48 89 44 24 68	 mov	 QWORD PTR tv208[rsp], rax
  003f9	48 8b 54 24 30	 mov	 rdx, QWORD PTR _Glast$[rsp]
  003fe	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv208[rsp]
  00403	e8 00 00 00 00	 call	 ??$iter_swap@PEAIPEAI@std@@YAXPEAI0@Z ; std::iter_swap<unsigned int * __ptr64,unsigned int * __ptr64>
  00408	48 8b 44 24 38	 mov	 rax, QWORD PTR _Gfirst$[rsp]
  0040d	48 83 c0 04	 add	 rax, 4
  00411	48 89 44 24 38	 mov	 QWORD PTR _Gfirst$[rsp], rax
$LN30@Partition_:
$LN27@Partition_:

; 2736 : 		}

  00416	e9 49 fd ff ff	 jmp	 $LN6@Partition_
$LN1@Partition_:

; 2737 : 	}

  0041b	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0041f	c3		 ret	 0
??$_Partition_by_median_guess_unchecked@PEAIU?$less@X@std@@@std@@YA?AU?$pair@PEAIPEAI@0@PEAI0AEAU?$less@X@0@@Z ENDP ; std::_Partition_by_median_guess_unchecked<unsigned int * __ptr64,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked1@IIV?$allocator@I@std@@@std@@YAPEAIPEAI00AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
__formal$ = 72
__formal$ = 80
__formal$ = 88
??$_Uninitialized_move_al_unchecked1@IIV?$allocator@I@std@@@std@@YAPEAIPEAI00AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_move_al_unchecked1<unsigned int,unsigned int,std::allocator<unsigned int> >, COMDAT

; 292  : 	{	// move [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 293  : 	return (_Copy_memmove(_First, _Last, _Dest));

  00018	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Dest$[rsp]
  0001d	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Last$[rsp]
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _First$[rsp]
  00027	e8 00 00 00 00	 call	 ??$_Copy_memmove@PEAIPEAI@std@@YAPEAIPEAI00@Z ; std::_Copy_memmove<unsigned int * __ptr64,unsigned int * __ptr64>

; 294  : 	}

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
??$_Uninitialized_move_al_unchecked1@IIV?$allocator@I@std@@@std@@YAPEAIPEAI00AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked1<unsigned int,unsigned int,std::allocator<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_move_cat@II@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAI0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
__formal$ = 16
__formal$ = 24
??$_Ptr_move_cat@II@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAI0@Z PROC ; std::_Ptr_move_cat<unsigned int,unsigned int>, COMDAT

; 809  : 	{	// return pointer move optimization category for pointers

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 810  : 	return {};

  0000f	48 8b 44 24 08	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 811  : 	}

  00014	c3		 ret	 0
??$_Ptr_move_cat@II@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAI0@Z ENDP ; std::_Ptr_move_cat<unsigned int,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AEAI@std@@YA$$QEAIAEAI@Z
_TEXT	SEGMENT
_Arg$ = 8
??$move@AEAI@std@@YA$$QEAIAEAI@Z PROC			; std::move<unsigned int & __ptr64>, COMDAT

; 1291 : 	{	// forward _Arg as movable

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1293 : 	}

  0000a	c3		 ret	 0
??$move@AEAI@std@@YA$$QEAIAEAI@Z ENDP			; std::move<unsigned int & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked1@W4Api@RtAudio@@W412@V?$allocator@W4Api@RtAudio@@@std@@@std@@YAPEAW4Api@RtAudio@@PEAW412@00AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
__formal$ = 72
__formal$ = 80
__formal$ = 88
??$_Uninitialized_move_al_unchecked1@W4Api@RtAudio@@W412@V?$allocator@W4Api@RtAudio@@@std@@@std@@YAPEAW4Api@RtAudio@@PEAW412@00AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_move_al_unchecked1<enum RtAudio::Api,enum RtAudio::Api,std::allocator<enum RtAudio::Api> >, COMDAT

; 292  : 	{	// move [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 293  : 	return (_Copy_memmove(_First, _Last, _Dest));

  00018	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Dest$[rsp]
  0001d	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Last$[rsp]
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _First$[rsp]
  00027	e8 00 00 00 00	 call	 ??$_Copy_memmove@PEAW4Api@RtAudio@@PEAW412@@std@@YAPEAW4Api@RtAudio@@PEAW412@00@Z ; std::_Copy_memmove<enum RtAudio::Api * __ptr64,enum RtAudio::Api * __ptr64>

; 294  : 	}

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
??$_Uninitialized_move_al_unchecked1@W4Api@RtAudio@@W412@V?$allocator@W4Api@RtAudio@@@std@@@std@@YAPEAW4Api@RtAudio@@PEAW412@00AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked1<enum RtAudio::Api,enum RtAudio::Api,std::allocator<enum RtAudio::Api> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_move_cat@W4Api@RtAudio@@W412@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAW4Api@RtAudio@@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
__formal$ = 16
__formal$ = 24
??$_Ptr_move_cat@W4Api@RtAudio@@W412@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAW4Api@RtAudio@@0@Z PROC ; std::_Ptr_move_cat<enum RtAudio::Api,enum RtAudio::Api>, COMDAT

; 809  : 	{	// return pointer move optimization category for pointers

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 810  : 	return {};

  0000f	48 8b 44 24 08	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 811  : 	}

  00014	c3		 ret	 0
??$_Ptr_move_cat@W4Api@RtAudio@@W412@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAW4Api@RtAudio@@0@Z ENDP ; std::_Ptr_move_cat<enum RtAudio::Api,enum RtAudio::Api>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked1@HHV?$allocator@H@std@@@std@@YAPEAHPEAH00AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
__formal$ = 72
__formal$ = 80
__formal$ = 88
??$_Uninitialized_move_al_unchecked1@HHV?$allocator@H@std@@@std@@YAPEAHPEAH00AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_move_al_unchecked1<int,int,std::allocator<int> >, COMDAT

; 292  : 	{	// move [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 293  : 	return (_Copy_memmove(_First, _Last, _Dest));

  00018	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Dest$[rsp]
  0001d	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Last$[rsp]
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _First$[rsp]
  00027	e8 00 00 00 00	 call	 ??$_Copy_memmove@PEAHPEAH@std@@YAPEAHPEAH00@Z ; std::_Copy_memmove<int * __ptr64,int * __ptr64>

; 294  : 	}

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
??$_Uninitialized_move_al_unchecked1@HHV?$allocator@H@std@@@std@@YAPEAHPEAH00AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked1<int,int,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_move_cat@HH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAH0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
__formal$ = 16
__formal$ = 24
??$_Ptr_move_cat@HH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAH0@Z PROC ; std::_Ptr_move_cat<int,int>, COMDAT

; 809  : 	{	// return pointer move optimization category for pointers

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 810  : 	return {};

  0000f	48 8b 44 24 08	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 811  : 	}

  00014	c3		 ret	 0
??$_Ptr_move_cat@HH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAH0@Z ENDP ; std::_Ptr_move_cat<int,int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0U?$integral_constant@_N$00@std@@@_Any_tag@std@@QEAA@$$QEAU?$integral_constant@_N$00@1@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??$?0U?$integral_constant@_N$00@std@@@_Any_tag@std@@QEAA@$$QEAU?$integral_constant@_N$00@1@@Z PROC ; std::_Any_tag::_Any_tag<std::integral_constant<bool,1> >, COMDAT

; 554  : 		constexpr _Any_tag(_Ty&&) _NOEXCEPT {}

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000f	c3		 ret	 0
??$?0U?$integral_constant@_N$00@std@@@_Any_tag@std@@QEAA@$$QEAU?$integral_constant@_N$00@1@@Z ENDP ; std::_Any_tag::_Any_tag<std::integral_constant<bool,1> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
_TEXT	SEGMENT
tv80 = 32
_Next$ = 40
$T1 = 48
_First$ = 80
_Last$ = 88
_Dest$ = 96
_Al$ = 104
__formal$ = 112
__formal$ = 120
??$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z PROC ; std::_Uninitialized_move_al_unchecked1<DsDevice * __ptr64,DsDevice * __ptr64,std::allocator<DsDevice> >, COMDAT

; 273  : 	{	// move [_First, _Last) to raw _Dest, using _Al, no special optimization

$LN13:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00018	48 c7 44 24 30
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 274  : 	_FwdIt _Next = _Dest;

  00021	48 8b 44 24 60	 mov	 rax, QWORD PTR _Dest$[rsp]
  00026	48 89 44 24 28	 mov	 QWORD PTR _Next$[rsp], rax

; 275  : 
; 276  : 	_TRY_BEGIN
; 277  : 	for (; _First != _Last; ++_Dest, (void)++_First)

  0002b	eb 1c		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  0002d	48 8b 44 24 60	 mov	 rax, QWORD PTR _Dest$[rsp]
  00032	48 83 c0 38	 add	 rax, 56			; 00000038H
  00036	48 89 44 24 60	 mov	 QWORD PTR _Dest$[rsp], rax
  0003b	48 8b 44 24 50	 mov	 rax, QWORD PTR _First$[rsp]
  00040	48 83 c0 38	 add	 rax, 56			; 00000038H
  00044	48 89 44 24 50	 mov	 QWORD PTR _First$[rsp], rax
$LN4@Uninitiali:
  00049	48 8b 44 24 58	 mov	 rax, QWORD PTR _Last$[rsp]
  0004e	48 39 44 24 50	 cmp	 QWORD PTR _First$[rsp], rax
  00053	74 2d		 je	 SHORT $LN3@Uninitiali

; 278  : 		_Al.construct(_Unfancy(_Dest), _STD move(*_First));

  00055	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _Dest$[rsp]
  0005a	e8 00 00 00 00	 call	 ??$_Unfancy@UDsDevice@@@std@@YAPEAUDsDevice@@PEAU1@@Z ; std::_Unfancy<DsDevice>
  0005f	48 89 44 24 20	 mov	 QWORD PTR tv80[rsp], rax
  00064	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _First$[rsp]
  00069	e8 00 00 00 00	 call	 ??$move@AEAUDsDevice@@@std@@YA$$QEAUDsDevice@@AEAU1@@Z ; std::move<DsDevice & __ptr64>
  0006e	4c 8b c0	 mov	 r8, rax
  00071	48 8b 54 24 20	 mov	 rdx, QWORD PTR tv80[rsp]
  00076	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Al$[rsp]
  0007b	e8 00 00 00 00	 call	 ??$construct@UDsDevice@@U1@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@$$QEAU2@@Z ; std::_Wrap_alloc<std::allocator<DsDevice> >::construct<DsDevice,DsDevice>
  00080	eb ab		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:
  00082	eb 00		 jmp	 SHORT $LN9@Uninitiali
$LN10@Uninitiali:
$LN9@Uninitiali:

; 279  : 	_CATCH_ALL
; 280  : 	_Destroy_range(_Next, _Dest, _Al);
; 281  : 	_RERAISE;
; 282  : 	_CATCH_END
; 283  : 
; 284  : 	return (_Dest);

  00084	48 8b 44 24 60	 mov	 rax, QWORD PTR _Dest$[rsp]

; 285  : 	}

  00089	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0008d	c3		 ret	 0
$LN11@Uninitiali:
??$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked1<DsDevice * __ptr64,DsDevice * __ptr64,std::allocator<DsDevice> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
tv80 = 32
_Next$ = 40
$T1 = 48
_First$ = 80
_Last$ = 88
_Dest$ = 96
_Al$ = 104
__formal$ = 112
__formal$ = 120
?catch$0@?0???$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z@4HA PROC ; `std::_Uninitialized_move_al_unchecked1<DsDevice * __ptr64,DsDevice * __ptr64,std::allocator<DsDevice> >'::`1'::catch$0

; 279  : 	_CATCH_ALL

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$??$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z$0:

; 279  : 	_CATCH_ALL
; 280  : 	_Destroy_range(_Next, _Dest, _Al);

  0000d	4c 8b 45 68	 mov	 r8, QWORD PTR _Al$[rbp]
  00011	48 8b 55 60	 mov	 rdx, QWORD PTR _Dest$[rbp]
  00015	48 8b 4d 28	 mov	 rcx, QWORD PTR _Next$[rbp]
  00019	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UDsDevice@@@std@@PEAUDsDevice@@@std@@YAXPEAUDsDevice@@0AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<DsDevice>,DsDevice * __ptr64>

; 279  : 	_CATCH_ALL
; 280  : 	_Destroy_range(_Next, _Dest, _Al);
; 281  : 	_RERAISE;

  0001e	33 d2		 xor	 edx, edx
  00020	33 c9		 xor	 ecx, ecx
  00022	e8 00 00 00 00	 call	 _CxxThrowException
  00027	90		 npad	 1

; 279  : 	_CATCH_ALL
; 280  : 	_Destroy_range(_Next, _Dest, _Al);
; 281  : 	_RERAISE;
; 282  : 	_CATCH_END

  00028	48 8d 05 00 00
	00 00		 lea	 rax, $LN10@catch$0
  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
  00035	cc		 int	 3
?catch$0@?0???$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z@4HA ENDP ; `std::_Uninitialized_move_al_unchecked1<DsDevice * __ptr64,DsDevice * __ptr64,std::allocator<DsDevice> >'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
tv80 = 32
_Next$ = 40
$T1 = 48
_First$ = 80
_Last$ = 88
_Dest$ = 96
_Al$ = 104
__formal$ = 112
__formal$ = 120
?catch$0@?0???$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z@4HA PROC ; `std::_Uninitialized_move_al_unchecked1<DsDevice * __ptr64,DsDevice * __ptr64,std::allocator<DsDevice> >'::`1'::catch$0

; 279  : 	_CATCH_ALL

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$??$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z$0:

; 280  : 	_Destroy_range(_Next, _Dest, _Al);

  0000d	4c 8b 45 68	 mov	 r8, QWORD PTR _Al$[rbp]
  00011	48 8b 55 60	 mov	 rdx, QWORD PTR _Dest$[rbp]
  00015	48 8b 4d 28	 mov	 rcx, QWORD PTR _Next$[rbp]
  00019	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UDsDevice@@@std@@PEAUDsDevice@@@std@@YAXPEAUDsDevice@@0AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<DsDevice>,DsDevice * __ptr64>

; 281  : 	_RERAISE;

  0001e	33 d2		 xor	 edx, edx
  00020	33 c9		 xor	 ecx, ecx
  00022	e8 00 00 00 00	 call	 _CxxThrowException
  00027	90		 npad	 1

; 282  : 	_CATCH_END

  00028	48 8d 05 00 00
	00 00		 lea	 rax, $LN10@catch$0
  0002f	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
  00035	cc		 int	 3
?catch$0@?0???$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z@4HA ENDP ; `std::_Uninitialized_move_al_unchecked1<DsDevice * __ptr64,DsDevice * __ptr64,std::allocator<DsDevice> >'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UDsDevice@@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$destroy@UDsDevice@@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@@Z PROC ; std::allocator_traits<std::allocator<DsDevice> >::destroy<DsDevice>, COMDAT

; 863  : 		{	// destroy object at _Ptr

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 864  : 		_Al.destroy(_Ptr);

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  00018	e8 00 00 00 00	 call	 ??$destroy@UDsDevice@@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@@Z ; std::allocator<DsDevice>::destroy<DsDevice>

; 865  : 		}

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
??$destroy@UDsDevice@@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@@Z ENDP ; std::allocator_traits<std::allocator<DsDevice> >::destroy<DsDevice>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Sort_unchecked1@PEAI_JU?$less@X@std@@@std@@YAXPEAI0_JAEAU?$less@X@0@@Z
_TEXT	SEGMENT
_Count$ = 32
_Mid$1 = 40
_First$ = 80
_Last$ = 88
_Ideal$ = 96
_Pred$ = 104
??$_Sort_unchecked1@PEAI_JU?$less@X@std@@@std@@YAXPEAI0_JAEAU?$less@X@0@@Z PROC ; std::_Sort_unchecked1<unsigned int * __ptr64,__int64,std::less<void> >, COMDAT

; 2743 : 	{	// order [_First, _Last), using _Pred

$LN10:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN2@Sort_unche:

; 2744 : 	_Diff _Count;
; 2745 : 	while (_ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal)

  00018	48 8b 44 24 50	 mov	 rax, QWORD PTR _First$[rsp]
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Last$[rsp]
  00022	48 2b c8	 sub	 rcx, rax
  00025	48 8b c1	 mov	 rax, rcx
  00028	48 c1 f8 02	 sar	 rax, 2
  0002c	48 89 44 24 20	 mov	 QWORD PTR _Count$[rsp], rax
  00031	48 83 7c 24 20
	20		 cmp	 QWORD PTR _Count$[rsp], 32 ; 00000020H
  00037	0f 8e ce 00 00
	00		 jle	 $LN3@Sort_unche
  0003d	48 83 7c 24 60
	00		 cmp	 QWORD PTR _Ideal$[rsp], 0
  00043	0f 8e c2 00 00
	00		 jle	 $LN3@Sort_unche

; 2746 : 		{	// divide and conquer by quicksort
; 2747 : 		pair<_RanIt, _RanIt> _Mid =
; 2748 : 			_Partition_by_median_guess_unchecked(_First, _Last, _Pred);

  00049	4c 8b 4c 24 68	 mov	 r9, QWORD PTR _Pred$[rsp]
  0004e	4c 8b 44 24 58	 mov	 r8, QWORD PTR _Last$[rsp]
  00053	48 8b 54 24 50	 mov	 rdx, QWORD PTR _First$[rsp]
  00058	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Mid$1[rsp]
  0005d	e8 00 00 00 00	 call	 ??$_Partition_by_median_guess_unchecked@PEAIU?$less@X@std@@@std@@YA?AU?$pair@PEAIPEAI@0@PEAI0AEAU?$less@X@0@@Z ; std::_Partition_by_median_guess_unchecked<unsigned int * __ptr64,std::less<void> >

; 2749 : 		_Ideal /= 2, _Ideal += _Ideal / 2;	// allow 1.5 log2(N) divisions

  00062	48 8b 44 24 60	 mov	 rax, QWORD PTR _Ideal$[rsp]
  00067	48 99		 cdq
  00069	48 2b c2	 sub	 rax, rdx
  0006c	48 d1 f8	 sar	 rax, 1
  0006f	48 89 44 24 60	 mov	 QWORD PTR _Ideal$[rsp], rax
  00074	48 8b 44 24 60	 mov	 rax, QWORD PTR _Ideal$[rsp]
  00079	48 99		 cdq
  0007b	48 2b c2	 sub	 rax, rdx
  0007e	48 d1 f8	 sar	 rax, 1
  00081	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _Ideal$[rsp]
  00086	48 03 c8	 add	 rcx, rax
  00089	48 8b c1	 mov	 rax, rcx
  0008c	48 89 44 24 60	 mov	 QWORD PTR _Ideal$[rsp], rax

; 2750 : 
; 2751 : 		if (_Mid.first - _First < _Last - _Mid.second)

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR _First$[rsp]
  00096	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Mid$1[rsp]
  0009b	48 2b c8	 sub	 rcx, rax
  0009e	48 8b c1	 mov	 rax, rcx
  000a1	48 c1 f8 02	 sar	 rax, 2
  000a5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Mid$1[rsp+8]
  000aa	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Last$[rsp]
  000af	48 2b d1	 sub	 rdx, rcx
  000b2	48 8b ca	 mov	 rcx, rdx
  000b5	48 c1 f9 02	 sar	 rcx, 2
  000b9	48 3b c1	 cmp	 rax, rcx
  000bc	7d 25		 jge	 SHORT $LN4@Sort_unche

; 2752 : 			{	// loop on second half
; 2753 : 			_Sort_unchecked1(_First, _Mid.first, _Ideal, _Pred);

  000be	4c 8b 4c 24 68	 mov	 r9, QWORD PTR _Pred$[rsp]
  000c3	4c 8b 44 24 60	 mov	 r8, QWORD PTR _Ideal$[rsp]
  000c8	48 8b 54 24 28	 mov	 rdx, QWORD PTR _Mid$1[rsp]
  000cd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _First$[rsp]
  000d2	e8 00 00 00 00	 call	 ??$_Sort_unchecked1@PEAI_JU?$less@X@std@@@std@@YAXPEAI0_JAEAU?$less@X@0@@Z ; std::_Sort_unchecked1<unsigned int * __ptr64,__int64,std::less<void> >

; 2754 : 			_First = _Mid.second;

  000d7	48 8b 44 24 30	 mov	 rax, QWORD PTR _Mid$1[rsp+8]
  000dc	48 89 44 24 50	 mov	 QWORD PTR _First$[rsp], rax

; 2755 : 			}
; 2756 : 		else

  000e1	eb 23		 jmp	 SHORT $LN5@Sort_unche
$LN4@Sort_unche:

; 2757 : 			{	// loop on first half
; 2758 : 			_Sort_unchecked1(_Mid.second, _Last, _Ideal, _Pred);

  000e3	4c 8b 4c 24 68	 mov	 r9, QWORD PTR _Pred$[rsp]
  000e8	4c 8b 44 24 60	 mov	 r8, QWORD PTR _Ideal$[rsp]
  000ed	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Last$[rsp]
  000f2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Mid$1[rsp+8]
  000f7	e8 00 00 00 00	 call	 ??$_Sort_unchecked1@PEAI_JU?$less@X@std@@@std@@YAXPEAI0_JAEAU?$less@X@0@@Z ; std::_Sort_unchecked1<unsigned int * __ptr64,__int64,std::less<void> >

; 2759 : 			_Last = _Mid.first;

  000fc	48 8b 44 24 28	 mov	 rax, QWORD PTR _Mid$1[rsp]
  00101	48 89 44 24 58	 mov	 QWORD PTR _Last$[rsp], rax
$LN5@Sort_unche:

; 2760 : 			}
; 2761 : 		}

  00106	e9 0d ff ff ff	 jmp	 $LN2@Sort_unche
$LN3@Sort_unche:

; 2762 : 
; 2763 : 	if (_ISORT_MAX < _Count)

  0010b	48 83 7c 24 20
	20		 cmp	 QWORD PTR _Count$[rsp], 32 ; 00000020H
  00111	7e 2a		 jle	 SHORT $LN6@Sort_unche

; 2764 : 		{	// heap sort if too many divisions
; 2765 : 		_Make_heap_unchecked(_First, _Last, _Pred);

  00113	4c 8b 44 24 68	 mov	 r8, QWORD PTR _Pred$[rsp]
  00118	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Last$[rsp]
  0011d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _First$[rsp]
  00122	e8 00 00 00 00	 call	 ??$_Make_heap_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z ; std::_Make_heap_unchecked<unsigned int * __ptr64,std::less<void> >

; 2766 : 		_Sort_heap_unchecked(_First, _Last, _Pred);

  00127	4c 8b 44 24 68	 mov	 r8, QWORD PTR _Pred$[rsp]
  0012c	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Last$[rsp]
  00131	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _First$[rsp]
  00136	e8 00 00 00 00	 call	 ??$_Sort_heap_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z ; std::_Sort_heap_unchecked<unsigned int * __ptr64,std::less<void> >
  0013b	eb 1c		 jmp	 SHORT $LN7@Sort_unche
$LN6@Sort_unche:

; 2767 : 		}
; 2768 : 	else if (2 <= _Count)

  0013d	48 83 7c 24 20
	02		 cmp	 QWORD PTR _Count$[rsp], 2
  00143	7c 14		 jl	 SHORT $LN8@Sort_unche

; 2769 : 		_Insertion_sort_unchecked(_First, _Last, _Pred);	// small

  00145	4c 8b 44 24 68	 mov	 r8, QWORD PTR _Pred$[rsp]
  0014a	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Last$[rsp]
  0014f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _First$[rsp]
  00154	e8 00 00 00 00	 call	 ??$_Insertion_sort_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z ; std::_Insertion_sort_unchecked<unsigned int * __ptr64,std::less<void> >
$LN8@Sort_unche:
$LN7@Sort_unche:

; 2770 : 	}

  00159	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0015d	c3		 ret	 0
??$_Sort_unchecked1@PEAI_JU?$less@X@std@@@std@@YAXPEAI0_JAEAU?$less@X@0@@Z ENDP ; std::_Sort_unchecked1<unsigned int * __ptr64,__int64,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PEAIPEAI@std@@YAAEAPEAIAEAPEAIPEAI@Z
_TEXT	SEGMENT
_Dest$ = 8
_Src$ = 16
??$_Rechecked@PEAIPEAI@std@@YAAEAPEAIAEAPEAIPEAI@Z PROC	; std::_Rechecked<unsigned int * __ptr64,unsigned int * __ptr64>, COMDAT

; 457  : 	{	// reset checked from unchecked, generic

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 458  : 	_Dest = _Src;

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR _Dest$[rsp]
  0000f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR _Src$[rsp]
  00014	48 89 08	 mov	 QWORD PTR [rax], rcx

; 459  : 	return (_Dest);

  00017	48 8b 44 24 08	 mov	 rax, QWORD PTR _Dest$[rsp]

; 460  : 	}

  0001c	c3		 ret	 0
??$_Rechecked@PEAIPEAI@std@@YAAEAPEAIAEAPEAIPEAI@Z ENDP	; std::_Rechecked<unsigned int * __ptr64,unsigned int * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@PEAIPEAIV?$allocator@I@std@@@std@@YAPEAIPEAI00AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 49
_First$ = 80
_Last$ = 88
_Dest$ = 96
_Al$ = 104
??$_Uninitialized_move_al_unchecked@PEAIPEAIV?$allocator@I@std@@@std@@YAPEAIPEAI00AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<unsigned int * __ptr64,unsigned int * __ptr64,std::allocator<unsigned int> >, COMDAT

; 301  : 	{	// move [_First, _Last) to raw _Dest, using _Al, choose optimization

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 302  : 	typedef decltype(_STD move(*_First)) _Src_type; // TRANSITION MODULES VSO#222794
; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

  00018	4c 8d 44 24 60	 lea	 r8, QWORD PTR _Dest$[rsp]
  0001d	48 8d 54 24 50	 lea	 rdx, QWORD PTR _First$[rsp]
  00022	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T1[rsp]
  00027	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@II@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAI0@Z ; std::_Ptr_move_cat<unsigned int,unsigned int>
  0002c	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR $T2[rsp]
  00031	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00035	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00038	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  0003c	4c 8b 4c 24 68	 mov	 r9, QWORD PTR _Al$[rsp]
  00041	4c 8b 44 24 60	 mov	 r8, QWORD PTR _Dest$[rsp]
  00046	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Last$[rsp]
  0004b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _First$[rsp]
  00050	e8 00 00 00 00	 call	 ??$_Uninitialized_move_al_unchecked1@IIV?$allocator@I@std@@@std@@YAPEAIPEAI00AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked1<unsigned int,unsigned int,std::allocator<unsigned int> >

; 304  : 		_Ptr_move_cat(_First, _Dest),
; 305  : 		_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_Dest)), _Src_type>()));
; 306  : 	}

  00055	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00059	c3		 ret	 0
??$_Uninitialized_move_al_unchecked@PEAIPEAIV?$allocator@I@std@@@std@@YAPEAIPEAI00AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<unsigned int * __ptr64,unsigned int * __ptr64,std::allocator<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PEAI@std@@YAPEAIPEAI@Z
_TEXT	SEGMENT
_Src$ = 8
??$_Unchecked@PEAI@std@@YAPEAIPEAI@Z PROC		; std::_Unchecked<unsigned int * __ptr64>, COMDAT

; 427  : 	{	// construct unchecked from checked, generic

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 428  : 	return (_Src);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Src$[rsp]

; 429  : 	}

  0000a	c3		 ret	 0
??$_Unchecked@PEAI@std@@YAPEAIPEAI@Z ENDP		; std::_Unchecked<unsigned int * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PEAW4Api@RtAudio@@PEAW412@@std@@YAAEAPEAW4Api@RtAudio@@AEAPEAW412@PEAW412@@Z
_TEXT	SEGMENT
_Dest$ = 8
_Src$ = 16
??$_Rechecked@PEAW4Api@RtAudio@@PEAW412@@std@@YAAEAPEAW4Api@RtAudio@@AEAPEAW412@PEAW412@@Z PROC ; std::_Rechecked<enum RtAudio::Api * __ptr64,enum RtAudio::Api * __ptr64>, COMDAT

; 457  : 	{	// reset checked from unchecked, generic

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 458  : 	_Dest = _Src;

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR _Dest$[rsp]
  0000f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR _Src$[rsp]
  00014	48 89 08	 mov	 QWORD PTR [rax], rcx

; 459  : 	return (_Dest);

  00017	48 8b 44 24 08	 mov	 rax, QWORD PTR _Dest$[rsp]

; 460  : 	}

  0001c	c3		 ret	 0
??$_Rechecked@PEAW4Api@RtAudio@@PEAW412@@std@@YAAEAPEAW4Api@RtAudio@@AEAPEAW412@PEAW412@@Z ENDP ; std::_Rechecked<enum RtAudio::Api * __ptr64,enum RtAudio::Api * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@PEAW4Api@RtAudio@@PEAW412@V?$allocator@W4Api@RtAudio@@@std@@@std@@YAPEAW4Api@RtAudio@@PEAW412@00AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 49
_First$ = 80
_Last$ = 88
_Dest$ = 96
_Al$ = 104
??$_Uninitialized_move_al_unchecked@PEAW4Api@RtAudio@@PEAW412@V?$allocator@W4Api@RtAudio@@@std@@@std@@YAPEAW4Api@RtAudio@@PEAW412@00AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<enum RtAudio::Api * __ptr64,enum RtAudio::Api * __ptr64,std::allocator<enum RtAudio::Api> >, COMDAT

; 301  : 	{	// move [_First, _Last) to raw _Dest, using _Al, choose optimization

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 302  : 	typedef decltype(_STD move(*_First)) _Src_type; // TRANSITION MODULES VSO#222794
; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

  00018	4c 8d 44 24 60	 lea	 r8, QWORD PTR _Dest$[rsp]
  0001d	48 8d 54 24 50	 lea	 rdx, QWORD PTR _First$[rsp]
  00022	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T1[rsp]
  00027	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@W4Api@RtAudio@@W412@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAW4Api@RtAudio@@0@Z ; std::_Ptr_move_cat<enum RtAudio::Api,enum RtAudio::Api>
  0002c	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR $T2[rsp]
  00031	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00035	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00038	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  0003c	4c 8b 4c 24 68	 mov	 r9, QWORD PTR _Al$[rsp]
  00041	4c 8b 44 24 60	 mov	 r8, QWORD PTR _Dest$[rsp]
  00046	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Last$[rsp]
  0004b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _First$[rsp]
  00050	e8 00 00 00 00	 call	 ??$_Uninitialized_move_al_unchecked1@W4Api@RtAudio@@W412@V?$allocator@W4Api@RtAudio@@@std@@@std@@YAPEAW4Api@RtAudio@@PEAW412@00AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked1<enum RtAudio::Api,enum RtAudio::Api,std::allocator<enum RtAudio::Api> >

; 304  : 		_Ptr_move_cat(_First, _Dest),
; 305  : 		_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_Dest)), _Src_type>()));
; 306  : 	}

  00055	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00059	c3		 ret	 0
??$_Uninitialized_move_al_unchecked@PEAW4Api@RtAudio@@PEAW412@V?$allocator@W4Api@RtAudio@@@std@@@std@@YAPEAW4Api@RtAudio@@PEAW412@00AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<enum RtAudio::Api * __ptr64,enum RtAudio::Api * __ptr64,std::allocator<enum RtAudio::Api> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PEAW4Api@RtAudio@@@std@@YAPEAW4Api@RtAudio@@PEAW412@@Z
_TEXT	SEGMENT
_Src$ = 8
??$_Unchecked@PEAW4Api@RtAudio@@@std@@YAPEAW4Api@RtAudio@@PEAW412@@Z PROC ; std::_Unchecked<enum RtAudio::Api * __ptr64>, COMDAT

; 427  : 	{	// construct unchecked from checked, generic

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 428  : 	return (_Src);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Src$[rsp]

; 429  : 	}

  0000a	c3		 ret	 0
??$_Unchecked@PEAW4Api@RtAudio@@@std@@YAPEAW4Api@RtAudio@@PEAW412@@Z ENDP ; std::_Unchecked<enum RtAudio::Api * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PEAHPEAH@std@@YAAEAPEAHAEAPEAHPEAH@Z
_TEXT	SEGMENT
_Dest$ = 8
_Src$ = 16
??$_Rechecked@PEAHPEAH@std@@YAAEAPEAHAEAPEAHPEAH@Z PROC	; std::_Rechecked<int * __ptr64,int * __ptr64>, COMDAT

; 457  : 	{	// reset checked from unchecked, generic

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 458  : 	_Dest = _Src;

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR _Dest$[rsp]
  0000f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR _Src$[rsp]
  00014	48 89 08	 mov	 QWORD PTR [rax], rcx

; 459  : 	return (_Dest);

  00017	48 8b 44 24 08	 mov	 rax, QWORD PTR _Dest$[rsp]

; 460  : 	}

  0001c	c3		 ret	 0
??$_Rechecked@PEAHPEAH@std@@YAAEAPEAHAEAPEAHPEAH@Z ENDP	; std::_Rechecked<int * __ptr64,int * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@PEAHPEAHV?$allocator@H@std@@@std@@YAPEAHPEAH00AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 49
_First$ = 80
_Last$ = 88
_Dest$ = 96
_Al$ = 104
??$_Uninitialized_move_al_unchecked@PEAHPEAHV?$allocator@H@std@@@std@@YAPEAHPEAH00AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<int * __ptr64,int * __ptr64,std::allocator<int> >, COMDAT

; 301  : 	{	// move [_First, _Last) to raw _Dest, using _Al, choose optimization

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 302  : 	typedef decltype(_STD move(*_First)) _Src_type; // TRANSITION MODULES VSO#222794
; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

  00018	4c 8d 44 24 60	 lea	 r8, QWORD PTR _Dest$[rsp]
  0001d	48 8d 54 24 50	 lea	 rdx, QWORD PTR _First$[rsp]
  00022	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T1[rsp]
  00027	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@HH@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@AEBQEAH0@Z ; std::_Ptr_move_cat<int,int>
  0002c	0f b6 4c 24 31	 movzx	 ecx, BYTE PTR $T2[rsp]
  00031	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00035	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00038	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  0003c	4c 8b 4c 24 68	 mov	 r9, QWORD PTR _Al$[rsp]
  00041	4c 8b 44 24 60	 mov	 r8, QWORD PTR _Dest$[rsp]
  00046	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Last$[rsp]
  0004b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _First$[rsp]
  00050	e8 00 00 00 00	 call	 ??$_Uninitialized_move_al_unchecked1@HHV?$allocator@H@std@@@std@@YAPEAHPEAH00AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked1<int,int,std::allocator<int> >

; 304  : 		_Ptr_move_cat(_First, _Dest),
; 305  : 		_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_Dest)), _Src_type>()));
; 306  : 	}

  00055	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00059	c3		 ret	 0
??$_Uninitialized_move_al_unchecked@PEAHPEAHV?$allocator@H@std@@@std@@YAPEAHPEAH00AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<int * __ptr64,int * __ptr64,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PEAH@std@@YAPEAHPEAH@Z
_TEXT	SEGMENT
_Src$ = 8
??$_Unchecked@PEAH@std@@YAPEAHPEAH@Z PROC		; std::_Unchecked<int * __ptr64>, COMDAT

; 427  : 	{	// construct unchecked from checked, generic

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 428  : 	return (_Src);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Src$[rsp]

; 429  : 	}

  0000a	c3		 ret	 0
??$_Unchecked@PEAH@std@@YAPEAHPEAH@Z ENDP		; std::_Unchecked<int * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Rechecked@PEAUDsDevice@@PEAU1@@std@@YAAEAPEAUDsDevice@@AEAPEAU1@PEAU1@@Z
_TEXT	SEGMENT
_Dest$ = 8
_Src$ = 16
??$_Rechecked@PEAUDsDevice@@PEAU1@@std@@YAAEAPEAUDsDevice@@AEAPEAU1@PEAU1@@Z PROC ; std::_Rechecked<DsDevice * __ptr64,DsDevice * __ptr64>, COMDAT

; 457  : 	{	// reset checked from unchecked, generic

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 458  : 	_Dest = _Src;

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR _Dest$[rsp]
  0000f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR _Src$[rsp]
  00014	48 89 08	 mov	 QWORD PTR [rax], rcx

; 459  : 	return (_Dest);

  00017	48 8b 44 24 08	 mov	 rax, QWORD PTR _Dest$[rsp]

; 460  : 	}

  0001c	c3		 ret	 0
??$_Rechecked@PEAUDsDevice@@PEAU1@@std@@YAAEAPEAUDsDevice@@AEAPEAU1@PEAU1@@Z ENDP ; std::_Rechecked<DsDevice * __ptr64,DsDevice * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 49
$T3 = 50
$T4 = 56
_First$ = 80
_Last$ = 88
_Dest$ = 96
_Al$ = 104
??$_Uninitialized_move_al_unchecked@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<DsDevice * __ptr64,DsDevice * __ptr64,std::allocator<DsDevice> >, COMDAT

; 301  : 	{	// move [_First, _Last) to raw _Dest, using _Al, choose optimization

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 302  : 	typedef decltype(_STD move(*_First)) _Src_type; // TRANSITION MODULES VSO#222794
; 303  : 	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,

  00018	48 8d 44 24 31	 lea	 rax, QWORD PTR $T2[rsp]
  0001d	48 89 44 24 38	 mov	 QWORD PTR $T4[rsp], rax
  00022	48 8d 54 24 60	 lea	 rdx, QWORD PTR _Dest$[rsp]
  00027	48 8d 4c 24 50	 lea	 rcx, QWORD PTR _First$[rsp]
  0002c	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@UDsDevice@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@AEBQEAUDsDevice@@0@Z ; std::_Ptr_move_cat<DsDevice,DsDevice>
  00031	88 44 24 30	 mov	 BYTE PTR $T1[rsp], al
  00035	48 8d 54 24 32	 lea	 rdx, QWORD PTR $T3[rsp]
  0003a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR $T4[rsp]
  0003f	e8 00 00 00 00	 call	 ??$?0U?$integral_constant@_N$00@std@@@_Any_tag@std@@QEAA@$$QEAU?$integral_constant@_N$00@1@@Z ; std::_Any_tag::_Any_tag<std::integral_constant<bool,1> >
  00044	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00047	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0004b	0f b6 44 24 30	 movzx	 eax, BYTE PTR $T1[rsp]
  00050	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00054	4c 8b 4c 24 68	 mov	 r9, QWORD PTR _Al$[rsp]
  00059	4c 8b 44 24 60	 mov	 r8, QWORD PTR _Dest$[rsp]
  0005e	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Last$[rsp]
  00063	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _First$[rsp]
  00068	e8 00 00 00 00	 call	 ??$_Uninitialized_move_al_unchecked1@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked1<DsDevice * __ptr64,DsDevice * __ptr64,std::allocator<DsDevice> >

; 304  : 		_Ptr_move_cat(_First, _Dest),
; 305  : 		_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_Dest)), _Src_type>()));
; 306  : 	}

  0006d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00071	c3		 ret	 0
??$_Uninitialized_move_al_unchecked@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<DsDevice * __ptr64,DsDevice * __ptr64,std::allocator<DsDevice> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Unchecked@PEAUDsDevice@@@std@@YAPEAUDsDevice@@PEAU1@@Z
_TEXT	SEGMENT
_Src$ = 8
??$_Unchecked@PEAUDsDevice@@@std@@YAPEAUDsDevice@@PEAU1@@Z PROC ; std::_Unchecked<DsDevice * __ptr64>, COMDAT

; 427  : 	{	// construct unchecked from checked, generic

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 428  : 	return (_Src);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Src$[rsp]

; 429  : 	}

  0000a	c3		 ret	 0
??$_Unchecked@PEAUDsDevice@@@std@@YAPEAUDsDevice@@PEAU1@@Z ENDP ; std::_Unchecked<DsDevice * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PEADAEAPEAD@?$allocator@D@std@@QEAAXPEAPEADAEAPEAD@Z
_TEXT	SEGMENT
$T1 = 32
tv73 = 40
this$ = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@PEADAEAPEAD@?$allocator@D@std@@QEAAXPEAPEADAEAPEAD@Z PROC ; std::allocator<char>::construct<char * __ptr64,char * __ptr64 & __ptr64>, COMDAT

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00018	b9 08 00 00 00	 mov	 ecx, 8
  0001d	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  00022	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00027	48 83 7c 24 20
	00		 cmp	 QWORD PTR $T1[rsp], 0
  0002d	74 21		 je	 SHORT $LN3@construct
  0002f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00034	e8 00 00 00 00	 call	 ??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z ; std::forward<char * __ptr64 & __ptr64>
  00039	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  0003e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00041	48 89 01	 mov	 QWORD PTR [rcx], rax
  00044	48 8b 44 24 20	 mov	 rax, QWORD PTR $T1[rsp]
  00049	48 89 44 24 28	 mov	 QWORD PTR tv73[rsp], rax
  0004e	eb 09		 jmp	 SHORT $LN4@construct
$LN3@construct:
  00050	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv73[rsp], 0
$LN4@construct:

; 738  : 		}

  00059	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005d	c3		 ret	 0
??$construct@PEADAEAPEAD@?$allocator@D@std@@QEAAXPEAPEADAEAPEAD@Z ENDP ; std::allocator<char>::construct<char * __ptr64,char * __ptr64 & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PEAD@?$allocator@D@std@@QEAAXPEAPEAD@Z
_TEXT	SEGMENT
this$ = 8
_Ptr$ = 16
??$destroy@PEAD@?$allocator@D@std@@QEAAXPEAPEAD@Z PROC	; std::allocator<char>::destroy<char * __ptr64>, COMDAT

; 743  : 		{	// destroy object at _Ptr

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 744  : 		_Ptr->~_Uty();
; 745  : 		}

  0000a	c3		 ret	 0
??$destroy@PEAD@?$allocator@D@std@@QEAAXPEAPEAD@Z ENDP	; std::allocator<char>::destroy<char * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@UDsDevice@@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
??$destroy@UDsDevice@@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@@Z PROC ; std::_Wrap_alloc<std::allocator<DsDevice> >::destroy<DsDevice>, COMDAT

; 1002 : 		{	// destroy object at _Ptr

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1003 : 		_Mytraits::destroy(*this, _Ptr);

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ??$destroy@UDsDevice@@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@@Z ; std::allocator_traits<std::allocator<DsDevice> >::destroy<DsDevice>

; 1004 : 		}

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
??$destroy@UDsDevice@@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@@Z ENDP ; std::_Wrap_alloc<std::allocator<DsDevice> >::destroy<DsDevice>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@II@?$allocator@I@std@@QEAAXPEAI$$QEAI@Z
_TEXT	SEGMENT
$T1 = 32
tv73 = 40
this$ = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@II@?$allocator@I@std@@QEAAXPEAI$$QEAI@Z PROC ; std::allocator<unsigned int>::construct<unsigned int,unsigned int>, COMDAT

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00018	b9 04 00 00 00	 mov	 ecx, 4
  0001d	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  00022	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00027	48 83 7c 24 20
	00		 cmp	 QWORD PTR $T1[rsp], 0
  0002d	74 1f		 je	 SHORT $LN3@construct
  0002f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00034	e8 00 00 00 00	 call	 ??$forward@I@std@@YA$$QEAIAEAI@Z ; std::forward<unsigned int>
  00039	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	89 01		 mov	 DWORD PTR [rcx], eax
  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR $T1[rsp]
  00047	48 89 44 24 28	 mov	 QWORD PTR tv73[rsp], rax
  0004c	eb 09		 jmp	 SHORT $LN4@construct
$LN3@construct:
  0004e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv73[rsp], 0
$LN4@construct:

; 738  : 		}

  00057	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005b	c3		 ret	 0
??$construct@II@?$allocator@I@std@@QEAAXPEAI$$QEAI@Z ENDP ; std::allocator<unsigned int>::construct<unsigned int,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@IAEBI@?$allocator@I@std@@QEAAXPEAIAEBI@Z
_TEXT	SEGMENT
$T1 = 32
tv73 = 40
this$ = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@IAEBI@?$allocator@I@std@@QEAAXPEAIAEBI@Z PROC ; std::allocator<unsigned int>::construct<unsigned int,unsigned int const & __ptr64>, COMDAT

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00018	b9 04 00 00 00	 mov	 ecx, 4
  0001d	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  00022	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00027	48 83 7c 24 20
	00		 cmp	 QWORD PTR $T1[rsp], 0
  0002d	74 1f		 je	 SHORT $LN3@construct
  0002f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00034	e8 00 00 00 00	 call	 ??$forward@AEBI@std@@YAAEBIAEBI@Z ; std::forward<unsigned int const & __ptr64>
  00039	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	89 01		 mov	 DWORD PTR [rcx], eax
  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR $T1[rsp]
  00047	48 89 44 24 28	 mov	 QWORD PTR tv73[rsp], rax
  0004c	eb 09		 jmp	 SHORT $LN4@construct
$LN3@construct:
  0004e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv73[rsp], 0
$LN4@construct:

; 738  : 		}

  00057	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005b	c3		 ret	 0
??$construct@IAEBI@?$allocator@I@std@@QEAAXPEAIAEBI@Z ENDP ; std::allocator<unsigned int>::construct<unsigned int,unsigned int const & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@IAEAI@?$allocator@I@std@@QEAAXPEAIAEAI@Z
_TEXT	SEGMENT
$T1 = 32
tv73 = 40
this$ = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@IAEAI@?$allocator@I@std@@QEAAXPEAIAEAI@Z PROC ; std::allocator<unsigned int>::construct<unsigned int,unsigned int & __ptr64>, COMDAT

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00018	b9 04 00 00 00	 mov	 ecx, 4
  0001d	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  00022	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00027	48 83 7c 24 20
	00		 cmp	 QWORD PTR $T1[rsp], 0
  0002d	74 1f		 je	 SHORT $LN3@construct
  0002f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00034	e8 00 00 00 00	 call	 ??$forward@AEAI@std@@YAAEAIAEAI@Z ; std::forward<unsigned int & __ptr64>
  00039	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	89 01		 mov	 DWORD PTR [rcx], eax
  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR $T1[rsp]
  00047	48 89 44 24 28	 mov	 QWORD PTR tv73[rsp], rax
  0004c	eb 09		 jmp	 SHORT $LN4@construct
$LN3@construct:
  0004e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv73[rsp], 0
$LN4@construct:

; 738  : 		}

  00057	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005b	c3		 ret	 0
??$construct@IAEAI@?$allocator@I@std@@QEAAXPEAIAEAI@Z ENDP ; std::allocator<unsigned int>::construct<unsigned int,unsigned int & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@W4Api@RtAudio@@W412@@?$allocator@W4Api@RtAudio@@@std@@QEAAXPEAW4Api@RtAudio@@$$QEAW423@@Z
_TEXT	SEGMENT
$T1 = 32
tv73 = 40
this$ = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@W4Api@RtAudio@@W412@@?$allocator@W4Api@RtAudio@@@std@@QEAAXPEAW4Api@RtAudio@@$$QEAW423@@Z PROC ; std::allocator<enum RtAudio::Api>::construct<enum RtAudio::Api,enum RtAudio::Api>, COMDAT

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00018	b9 04 00 00 00	 mov	 ecx, 4
  0001d	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  00022	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00027	48 83 7c 24 20
	00		 cmp	 QWORD PTR $T1[rsp], 0
  0002d	74 1f		 je	 SHORT $LN3@construct
  0002f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00034	e8 00 00 00 00	 call	 ??$forward@W4Api@RtAudio@@@std@@YA$$QEAW4Api@RtAudio@@AEAW412@@Z ; std::forward<enum RtAudio::Api>
  00039	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	89 01		 mov	 DWORD PTR [rcx], eax
  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR $T1[rsp]
  00047	48 89 44 24 28	 mov	 QWORD PTR tv73[rsp], rax
  0004c	eb 09		 jmp	 SHORT $LN4@construct
$LN3@construct:
  0004e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv73[rsp], 0
$LN4@construct:

; 738  : 		}

  00057	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005b	c3		 ret	 0
??$construct@W4Api@RtAudio@@W412@@?$allocator@W4Api@RtAudio@@@std@@QEAAXPEAW4Api@RtAudio@@$$QEAW423@@Z ENDP ; std::allocator<enum RtAudio::Api>::construct<enum RtAudio::Api,enum RtAudio::Api>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@HH@?$allocator@H@std@@QEAAXPEAH$$QEAH@Z
_TEXT	SEGMENT
$T1 = 32
tv73 = 40
this$ = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@HH@?$allocator@H@std@@QEAAXPEAH$$QEAH@Z PROC ; std::allocator<int>::construct<int,int>, COMDAT

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00018	b9 04 00 00 00	 mov	 ecx, 4
  0001d	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  00022	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00027	48 83 7c 24 20
	00		 cmp	 QWORD PTR $T1[rsp], 0
  0002d	74 1f		 je	 SHORT $LN3@construct
  0002f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00034	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  00039	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	89 01		 mov	 DWORD PTR [rcx], eax
  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR $T1[rsp]
  00047	48 89 44 24 28	 mov	 QWORD PTR tv73[rsp], rax
  0004c	eb 09		 jmp	 SHORT $LN4@construct
$LN3@construct:
  0004e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv73[rsp], 0
$LN4@construct:

; 738  : 		}

  00057	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005b	c3		 ret	 0
??$construct@HH@?$allocator@H@std@@QEAAXPEAH$$QEAH@Z ENDP ; std::allocator<int>::construct<int,int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@HAEBH@?$allocator@H@std@@QEAAXPEAHAEBH@Z
_TEXT	SEGMENT
$T1 = 32
tv73 = 40
this$ = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@HAEBH@?$allocator@H@std@@QEAAXPEAHAEBH@Z PROC ; std::allocator<int>::construct<int,int const & __ptr64>, COMDAT

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00018	b9 04 00 00 00	 mov	 ecx, 4
  0001d	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  00022	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00027	48 83 7c 24 20
	00		 cmp	 QWORD PTR $T1[rsp], 0
  0002d	74 1f		 je	 SHORT $LN3@construct
  0002f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00034	e8 00 00 00 00	 call	 ??$forward@AEBH@std@@YAAEBHAEBH@Z ; std::forward<int const & __ptr64>
  00039	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	89 01		 mov	 DWORD PTR [rcx], eax
  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR $T1[rsp]
  00047	48 89 44 24 28	 mov	 QWORD PTR tv73[rsp], rax
  0004c	eb 09		 jmp	 SHORT $LN4@construct
$LN3@construct:
  0004e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv73[rsp], 0
$LN4@construct:

; 738  : 		}

  00057	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005b	c3		 ret	 0
??$construct@HAEBH@?$allocator@H@std@@QEAAXPEAHAEBH@Z ENDP ; std::allocator<int>::construct<int,int const & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@HAEAH@?$allocator@H@std@@QEAAXPEAHAEAH@Z
_TEXT	SEGMENT
$T1 = 32
tv73 = 40
this$ = 64
_Ptr$ = 72
<_Args_0>$ = 80
??$construct@HAEAH@?$allocator@H@std@@QEAAXPEAHAEAH@Z PROC ; std::allocator<int>::construct<int,int & __ptr64>, COMDAT

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00018	b9 04 00 00 00	 mov	 ecx, 4
  0001d	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  00022	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00027	48 83 7c 24 20
	00		 cmp	 QWORD PTR $T1[rsp], 0
  0002d	74 1f		 je	 SHORT $LN3@construct
  0002f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00034	e8 00 00 00 00	 call	 ??$forward@AEAH@std@@YAAEAHAEAH@Z ; std::forward<int & __ptr64>
  00039	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  0003e	8b 00		 mov	 eax, DWORD PTR [rax]
  00040	89 01		 mov	 DWORD PTR [rcx], eax
  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR $T1[rsp]
  00047	48 89 44 24 28	 mov	 QWORD PTR tv73[rsp], rax
  0004c	eb 09		 jmp	 SHORT $LN4@construct
$LN3@construct:
  0004e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv73[rsp], 0
$LN4@construct:

; 738  : 		}

  00057	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005b	c3		 ret	 0
??$construct@HAEAH@?$allocator@H@std@@QEAAXPEAHAEAH@Z ENDP ; std::allocator<int>::construct<int,int & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z
_TEXT	SEGMENT
$T1 = 32
tv79 = 40
$T2 = 48
$T3 = 56
this$ = 80
_Ptr$ = 88
<_Args_0>$ = 96
??$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z PROC ; std::allocator<DsDevice>::construct<DsDevice,DsDevice const & __ptr64>, COMDAT

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00013	48 c7 44 24 30
	fe ff ff ff	 mov	 QWORD PTR $T2[rsp], -2

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0001c	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00021	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00026	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  0002b	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00030	48 83 7c 24 20
	00		 cmp	 QWORD PTR $T1[rsp], 0
  00036	74 1e		 je	 SHORT $LN3@construct
  00038	48 8b 4c 24 60	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  0003d	e8 00 00 00 00	 call	 ??$forward@AEBUDsDevice@@@std@@YAAEBUDsDevice@@AEBU1@@Z ; std::forward<DsDevice const & __ptr64>
  00042	48 8b d0	 mov	 rdx, rax
  00045	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  0004a	e8 00 00 00 00	 call	 ??0DsDevice@@QEAA@AEBU0@@Z
  0004f	48 89 44 24 28	 mov	 QWORD PTR tv79[rsp], rax
  00054	eb 09		 jmp	 SHORT $LN4@construct
$LN3@construct:
  00056	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv79[rsp], 0
$LN4@construct:
  0005f	48 8b 44 24 28	 mov	 rax, QWORD PTR tv79[rsp]
  00064	48 89 44 24 38	 mov	 QWORD PTR $T3[rsp], rax

; 738  : 		}

  00069	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006d	c3		 ret	 0
??$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z ENDP ; std::allocator<DsDevice>::construct<DsDevice,DsDevice const & __ptr64>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
tv79 = 40
$T2 = 48
$T3 = 56
this$ = 80
_Ptr$ = 88
<_Args_0>$ = 96
?dtor$0@?0???$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z@4HA PROC ; `std::allocator<DsDevice>::construct<DsDevice,DsDevice const & __ptr64>'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 55 58	 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0000d	48 8b 4d 20	 mov	 rcx, QWORD PTR $T1[rbp]
  00011	e8 00 00 00 00	 call	 ??3@YAXPEAX0@Z		; operator delete
  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5d		 pop	 rbp
  0001b	c3		 ret	 0
?dtor$0@?0???$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z@4HA ENDP ; `std::allocator<DsDevice>::construct<DsDevice,DsDevice const & __ptr64>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
tv79 = 40
$T2 = 48
$T3 = 56
this$ = 80
_Ptr$ = 88
<_Args_0>$ = 96
?dtor$0@?0???$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z@4HA PROC ; `std::allocator<DsDevice>::construct<DsDevice,DsDevice const & __ptr64>'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 55 58	 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0000d	48 8b 4d 20	 mov	 rcx, QWORD PTR $T1[rbp]
  00011	e8 00 00 00 00	 call	 ??3@YAXPEAX0@Z		; operator delete
  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5d		 pop	 rbp
  0001b	c3		 ret	 0
?dtor$0@?0???$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z@4HA ENDP ; `std::allocator<DsDevice>::construct<DsDevice,DsDevice const & __ptr64>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z
_TEXT	SEGMENT
$T1 = 32
tv79 = 40
$T2 = 48
$T3 = 56
this$ = 80
_Ptr$ = 88
<_Args_0>$ = 96
??$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z PROC ; std::allocator<DsDevice>::construct<DsDevice,DsDevice & __ptr64>, COMDAT

; 736  : 		{	// construct _Objty(_Types...) at _Ptr

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00013	48 c7 44 24 30
	fe ff ff ff	 mov	 QWORD PTR $T2[rsp], -2

; 737  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

  0001c	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00021	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00026	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  0002b	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00030	48 83 7c 24 20
	00		 cmp	 QWORD PTR $T1[rsp], 0
  00036	74 1e		 je	 SHORT $LN3@construct
  00038	48 8b 4c 24 60	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  0003d	e8 00 00 00 00	 call	 ??$forward@AEAUDsDevice@@@std@@YAAEAUDsDevice@@AEAU1@@Z ; std::forward<DsDevice & __ptr64>
  00042	48 8b d0	 mov	 rdx, rax
  00045	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  0004a	e8 00 00 00 00	 call	 ??0DsDevice@@QEAA@AEBU0@@Z
  0004f	48 89 44 24 28	 mov	 QWORD PTR tv79[rsp], rax
  00054	eb 09		 jmp	 SHORT $LN4@construct
$LN3@construct:
  00056	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv79[rsp], 0
$LN4@construct:
  0005f	48 8b 44 24 28	 mov	 rax, QWORD PTR tv79[rsp]
  00064	48 89 44 24 38	 mov	 QWORD PTR $T3[rsp], rax

; 738  : 		}

  00069	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006d	c3		 ret	 0
??$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z ENDP ; std::allocator<DsDevice>::construct<DsDevice,DsDevice & __ptr64>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
tv79 = 40
$T2 = 48
$T3 = 56
this$ = 80
_Ptr$ = 88
<_Args_0>$ = 96
?dtor$0@?0???$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z@4HA PROC ; `std::allocator<DsDevice>::construct<DsDevice,DsDevice & __ptr64>'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 55 58	 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0000d	48 8b 4d 20	 mov	 rcx, QWORD PTR $T1[rbp]
  00011	e8 00 00 00 00	 call	 ??3@YAXPEAX0@Z		; operator delete
  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5d		 pop	 rbp
  0001b	c3		 ret	 0
?dtor$0@?0???$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z@4HA ENDP ; `std::allocator<DsDevice>::construct<DsDevice,DsDevice & __ptr64>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
tv79 = 40
$T2 = 48
$T3 = 56
this$ = 80
_Ptr$ = 88
<_Args_0>$ = 96
?dtor$0@?0???$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z@4HA PROC ; `std::allocator<DsDevice>::construct<DsDevice,DsDevice & __ptr64>'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 55 58	 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0000d	48 8b 4d 20	 mov	 rcx, QWORD PTR $T1[rbp]
  00011	e8 00 00 00 00	 call	 ??3@YAXPEAX0@Z		; operator delete
  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5d		 pop	 rbp
  0001b	c3		 ret	 0
?dtor$0@?0???$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z@4HA ENDP ; `std::allocator<DsDevice>::construct<DsDevice,DsDevice & __ptr64>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AEAUDsDevice@@@std@@YA$$QEAUDsDevice@@AEAU1@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$move@AEAUDsDevice@@@std@@YA$$QEAUDsDevice@@AEAU1@@Z PROC ; std::move<DsDevice & __ptr64>, COMDAT

; 1291 : 	{	// forward _Arg as movable

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1293 : 	}

  0000a	c3		 ret	 0
??$move@AEAUDsDevice@@@std@@YA$$QEAUDsDevice@@AEAU1@@Z ENDP ; std::move<DsDevice & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$_Sort_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Pred$ = 64
??$_Sort_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z PROC ; std::_Sort_unchecked<unsigned int * __ptr64,std::less<void> >, COMDAT

; 2775 : 	{	// order [_First, _Last), using _Pred

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2776 : 	_Sort_unchecked1(_First, _Last, _Last - _First, _Pred);

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR _First$[rsp]
  00018	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Last$[rsp]
  0001d	48 2b c8	 sub	 rcx, rax
  00020	48 8b c1	 mov	 rax, rcx
  00023	48 c1 f8 02	 sar	 rax, 2
  00027	4c 8b 4c 24 40	 mov	 r9, QWORD PTR _Pred$[rsp]
  0002c	4c 8b c0	 mov	 r8, rax
  0002f	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Last$[rsp]
  00034	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _First$[rsp]
  00039	e8 00 00 00 00	 call	 ??$_Sort_unchecked1@PEAI_JU?$less@X@std@@@std@@YAXPEAI0_JAEAU?$less@X@0@@Z ; std::_Sort_unchecked1<unsigned int * __ptr64,__int64,std::less<void> >

; 2777 : 	}

  0003e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00042	c3		 ret	 0
??$_Sort_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z ENDP ; std::_Sort_unchecked<unsigned int * __ptr64,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@YAPEAIV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@@Z
_TEXT	SEGMENT
_Iter$ = 48
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@YAPEAIV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_Vector_val<std::_Simple_types<unsigned int> > >, COMDAT

; 402  : 	{	// convert to unchecked

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 403  : 	return (_Iter._Unchecked());

  00009	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Iter$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@QEBAPEAIXZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Unchecked

; 404  : 	}

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@YAPEAIV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_Vector_val<std::_Simple_types<unsigned int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 294  : 	__PURE_APPDOMAIN_GLOBAL locale::id numpunct<_Elem>::id;

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	33 d2		 xor	 edx, edx
  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
  0000d	e8 00 00 00 00	 call	 ??0id@locale@std@@QEAA@_K@Z ; std::locale::id::id
  00012	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00016	c3		 ret	 0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$di	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC ; `dynamic initializer for 'std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id'', COMDAT

; 1593 : 	__PURE_APPDOMAIN_GLOBAL locale::id num_put<_Elem, _OutIt>::id;

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	33 d2		 xor	 edx, edx
  00006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  0000d	e8 00 00 00 00	 call	 ??0id@locale@std@@QEAA@_K@Z ; std::locale::id::id
  00012	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00016	c3		 ret	 0
??__E?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ENDP ; `dynamic initializer for 'std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id''
text$di	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ??$_Getvals@D@?$numpunct@D@std@@IEAAXDPEBUlconv@@U_Cvtvec@@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
_Ptr$ = 64
_Cvt$ = 72
??$_Getvals@D@?$numpunct@D@std@@IEAAXDPEBUlconv@@U_Cvtvec@@@Z PROC ; std::numpunct<char>::_Getvals<char>, COMDAT

; 189  : 		{	// get values

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 190  : 		_Dp = _MAKLOCCHR(_Elem2, _Ptr->decimal_point[0], _Cvt);

  00017	b8 01 00 00 00	 mov	 eax, 1
  0001c	48 6b c0 00	 imul	 rax, rax, 0
  00020	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00028	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Cvt$[rsp]
  0002d	33 d2		 xor	 edx, edx
  0002f	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  00033	e8 00 00 00 00	 call	 ??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z ; std::_Maklocchr<char>
  00038	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0003d	88 41 18	 mov	 BYTE PTR [rcx+24], al

; 191  : 		_Kseparator = _MAKLOCCHR(_Elem2, _Ptr->thousands_sep[0], _Cvt);

  00040	b8 01 00 00 00	 mov	 eax, 1
  00045	48 6b c0 00	 imul	 rax, rax, 0
  00049	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  0004e	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00052	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Cvt$[rsp]
  00057	33 d2		 xor	 edx, edx
  00059	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  0005d	e8 00 00 00 00	 call	 ??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z ; std::_Maklocchr<char>
  00062	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00067	88 41 19	 mov	 BYTE PTR [rcx+25], al

; 192  : 		}

  0006a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006e	c3		 ret	 0
??$_Getvals@D@?$numpunct@D@std@@IEAAXDPEBUlconv@@U_Cvtvec@@@Z ENDP ; std::numpunct<char>::_Getvals<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z
_TEXT	SEGMENT
_Byte$ = 8
__formal$ = 16
__formal$ = 24
??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z PROC	; std::_Maklocchr<char>, COMDAT

; 686  : 	{	// convert char to _Elem using _Cvtvec

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl

; 687  : 	return ((_Elem)(unsigned char)_Byte);

  0000e	0f b6 44 24 08	 movzx	 eax, BYTE PTR _Byte$[rsp]

; 688  : 	}

  00013	c3		 ret	 0
??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z ENDP	; std::_Maklocchr<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z
_TEXT	SEGMENT
_Count$ = 32
_Ptrnext$1 = 40
_Ptrdest$ = 48
_Ptr$ = 80
__formal$ = 88
__formal$ = 96
??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 719  : 	{	// convert C string to _Elem sequence using _Cvtvec

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 720  : 	size_t _Count = _CSTD strlen(_Ptr) + 1;

  00013	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00018	e8 00 00 00 00	 call	 strlen
  0001d	48 ff c0	 inc	 rax
  00020	48 89 44 24 20	 mov	 QWORD PTR _Count$[rsp], rax

; 721  : 
; 722  : 	_Elem *_Ptrdest = (_Elem *)_calloc_dbg(_Count, sizeof (_Elem),

  00025	ba 01 00 00 00	 mov	 edx, 1
  0002a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Count$[rsp]
  0002f	e8 00 00 00 00	 call	 calloc
  00034	48 89 44 24 30	 mov	 QWORD PTR _Ptrdest$[rsp], rax

; 723  : 		_CRT_BLOCK, __FILE__, __LINE__);
; 724  : 
; 725  : 	if (!_Ptrdest)

  00039	48 83 7c 24 30
	00		 cmp	 QWORD PTR _Ptrdest$[rsp], 0
  0003f	75 05		 jne	 SHORT $LN5@Maklocstr

; 726  : 		_Xbad_alloc();

  00041	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN5@Maklocstr:

; 727  : 
; 728  :  #pragma warning(push)
; 729  :  #pragma warning(disable: 6011)	/* quiet prefast noise */
; 730  : 	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)

  00046	48 8b 44 24 30	 mov	 rax, QWORD PTR _Ptrdest$[rsp]
  0004b	48 89 44 24 28	 mov	 QWORD PTR _Ptrnext$1[rsp], rax
  00050	eb 27		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  00052	48 8b 44 24 20	 mov	 rax, QWORD PTR _Count$[rsp]
  00057	48 ff c8	 dec	 rax
  0005a	48 89 44 24 20	 mov	 QWORD PTR _Count$[rsp], rax
  0005f	48 8b 44 24 28	 mov	 rax, QWORD PTR _Ptrnext$1[rsp]
  00064	48 ff c0	 inc	 rax
  00067	48 89 44 24 28	 mov	 QWORD PTR _Ptrnext$1[rsp], rax
  0006c	48 8b 44 24 50	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00071	48 ff c0	 inc	 rax
  00074	48 89 44 24 50	 mov	 QWORD PTR _Ptr$[rsp], rax
$LN4@Maklocstr:
  00079	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Count$[rsp], 0
  0007f	76 11		 jbe	 SHORT $LN3@Maklocstr

; 731  : 		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;

  00081	48 8b 44 24 28	 mov	 rax, QWORD PTR _Ptrnext$1[rsp]
  00086	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  0008b	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0008e	88 08		 mov	 BYTE PTR [rax], cl
  00090	eb c0		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 732  :  #pragma warning(pop)
; 733  : 
; 734  : 	return (_Ptrdest);

  00092	48 8b 44 24 30	 mov	 rax, QWORD PTR _Ptrdest$[rsp]
$LN6@Maklocstr:

; 735  : 	}

  00097	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009b	c3		 ret	 0
??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAIPEAIV?$allocator@I@std@@@std@@YAPEAIPEAI00AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@@Z
_TEXT	SEGMENT
tv67 = 32
tv70 = 40
_First$ = 64
_Last$ = 72
_Dest$ = 80
_Al$ = 88
??$_Uninitialized_move@PEAIPEAIV?$allocator@I@std@@@std@@YAPEAIPEAI00AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@@Z PROC ; std::_Uninitialized_move<unsigned int * __ptr64,unsigned int * __ptr64,std::allocator<unsigned int> >, COMDAT

; 313  : 	{	// move [_First, _Last) to raw _Dest, using _Al

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 314  : 		// note: only called internally from elsewhere in the STL, debug checks
; 315  : 		// and deprecation warnings omitted
; 316  : 	return (_Rechecked(_Dest,

  00018	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Dest$[rsp]
  0001d	e8 00 00 00 00	 call	 ??$_Unchecked@PEAI@std@@YAPEAIPEAI@Z ; std::_Unchecked<unsigned int * __ptr64>
  00022	48 89 44 24 20	 mov	 QWORD PTR tv67[rsp], rax
  00027	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Last$[rsp]
  0002c	e8 00 00 00 00	 call	 ??$_Unchecked@PEAI@std@@YAPEAIPEAI@Z ; std::_Unchecked<unsigned int * __ptr64>
  00031	48 89 44 24 28	 mov	 QWORD PTR tv70[rsp], rax
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First$[rsp]
  0003b	e8 00 00 00 00	 call	 ??$_Unchecked@PEAI@std@@YAPEAIPEAI@Z ; std::_Unchecked<unsigned int * __ptr64>
  00040	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Al$[rsp]
  00045	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv67[rsp]
  0004a	4c 8b c1	 mov	 r8, rcx
  0004d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv70[rsp]
  00052	48 8b d1	 mov	 rdx, rcx
  00055	48 8b c8	 mov	 rcx, rax
  00058	e8 00 00 00 00	 call	 ??$_Uninitialized_move_al_unchecked@PEAIPEAIV?$allocator@I@std@@@std@@YAPEAIPEAI00AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@@Z ; std::_Uninitialized_move_al_unchecked<unsigned int * __ptr64,unsigned int * __ptr64,std::allocator<unsigned int> >
  0005d	48 8b d0	 mov	 rdx, rax
  00060	48 8d 4c 24 50	 lea	 rcx, QWORD PTR _Dest$[rsp]
  00065	e8 00 00 00 00	 call	 ??$_Rechecked@PEAIPEAI@std@@YAAEAPEAIAEAPEAIPEAI@Z ; std::_Rechecked<unsigned int * __ptr64,unsigned int * __ptr64>
  0006a	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 317  : 		_Uninitialized_move_al_unchecked(_Unchecked(_First), _Unchecked(_Last),
; 318  : 			_Unchecked(_Dest), _Al)));
; 319  : 	}

  0006d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00071	c3		 ret	 0
??$_Uninitialized_move@PEAIPEAIV?$allocator@I@std@@@std@@YAPEAIPEAI00AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@@Z ENDP ; std::_Uninitialized_move<unsigned int * __ptr64,unsigned int * __ptr64,std::allocator<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAW4Api@RtAudio@@PEAW412@V?$allocator@W4Api@RtAudio@@@std@@@std@@YAPEAW4Api@RtAudio@@PEAW412@00AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@@Z
_TEXT	SEGMENT
tv67 = 32
tv70 = 40
_First$ = 64
_Last$ = 72
_Dest$ = 80
_Al$ = 88
??$_Uninitialized_move@PEAW4Api@RtAudio@@PEAW412@V?$allocator@W4Api@RtAudio@@@std@@@std@@YAPEAW4Api@RtAudio@@PEAW412@00AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@@Z PROC ; std::_Uninitialized_move<enum RtAudio::Api * __ptr64,enum RtAudio::Api * __ptr64,std::allocator<enum RtAudio::Api> >, COMDAT

; 313  : 	{	// move [_First, _Last) to raw _Dest, using _Al

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 314  : 		// note: only called internally from elsewhere in the STL, debug checks
; 315  : 		// and deprecation warnings omitted
; 316  : 	return (_Rechecked(_Dest,

  00018	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Dest$[rsp]
  0001d	e8 00 00 00 00	 call	 ??$_Unchecked@PEAW4Api@RtAudio@@@std@@YAPEAW4Api@RtAudio@@PEAW412@@Z ; std::_Unchecked<enum RtAudio::Api * __ptr64>
  00022	48 89 44 24 20	 mov	 QWORD PTR tv67[rsp], rax
  00027	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Last$[rsp]
  0002c	e8 00 00 00 00	 call	 ??$_Unchecked@PEAW4Api@RtAudio@@@std@@YAPEAW4Api@RtAudio@@PEAW412@@Z ; std::_Unchecked<enum RtAudio::Api * __ptr64>
  00031	48 89 44 24 28	 mov	 QWORD PTR tv70[rsp], rax
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First$[rsp]
  0003b	e8 00 00 00 00	 call	 ??$_Unchecked@PEAW4Api@RtAudio@@@std@@YAPEAW4Api@RtAudio@@PEAW412@@Z ; std::_Unchecked<enum RtAudio::Api * __ptr64>
  00040	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Al$[rsp]
  00045	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv67[rsp]
  0004a	4c 8b c1	 mov	 r8, rcx
  0004d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv70[rsp]
  00052	48 8b d1	 mov	 rdx, rcx
  00055	48 8b c8	 mov	 rcx, rax
  00058	e8 00 00 00 00	 call	 ??$_Uninitialized_move_al_unchecked@PEAW4Api@RtAudio@@PEAW412@V?$allocator@W4Api@RtAudio@@@std@@@std@@YAPEAW4Api@RtAudio@@PEAW412@00AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@@Z ; std::_Uninitialized_move_al_unchecked<enum RtAudio::Api * __ptr64,enum RtAudio::Api * __ptr64,std::allocator<enum RtAudio::Api> >
  0005d	48 8b d0	 mov	 rdx, rax
  00060	48 8d 4c 24 50	 lea	 rcx, QWORD PTR _Dest$[rsp]
  00065	e8 00 00 00 00	 call	 ??$_Rechecked@PEAW4Api@RtAudio@@PEAW412@@std@@YAAEAPEAW4Api@RtAudio@@AEAPEAW412@PEAW412@@Z ; std::_Rechecked<enum RtAudio::Api * __ptr64,enum RtAudio::Api * __ptr64>
  0006a	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 317  : 		_Uninitialized_move_al_unchecked(_Unchecked(_First), _Unchecked(_Last),
; 318  : 			_Unchecked(_Dest), _Al)));
; 319  : 	}

  0006d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00071	c3		 ret	 0
??$_Uninitialized_move@PEAW4Api@RtAudio@@PEAW412@V?$allocator@W4Api@RtAudio@@@std@@@std@@YAPEAW4Api@RtAudio@@PEAW412@00AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<enum RtAudio::Api * __ptr64,enum RtAudio::Api * __ptr64,std::allocator<enum RtAudio::Api> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAHPEAHV?$allocator@H@std@@@std@@YAPEAHPEAH00AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
tv67 = 32
tv70 = 40
_First$ = 64
_Last$ = 72
_Dest$ = 80
_Al$ = 88
??$_Uninitialized_move@PEAHPEAHV?$allocator@H@std@@@std@@YAPEAHPEAH00AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Uninitialized_move<int * __ptr64,int * __ptr64,std::allocator<int> >, COMDAT

; 313  : 	{	// move [_First, _Last) to raw _Dest, using _Al

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 314  : 		// note: only called internally from elsewhere in the STL, debug checks
; 315  : 		// and deprecation warnings omitted
; 316  : 	return (_Rechecked(_Dest,

  00018	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Dest$[rsp]
  0001d	e8 00 00 00 00	 call	 ??$_Unchecked@PEAH@std@@YAPEAHPEAH@Z ; std::_Unchecked<int * __ptr64>
  00022	48 89 44 24 20	 mov	 QWORD PTR tv67[rsp], rax
  00027	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Last$[rsp]
  0002c	e8 00 00 00 00	 call	 ??$_Unchecked@PEAH@std@@YAPEAHPEAH@Z ; std::_Unchecked<int * __ptr64>
  00031	48 89 44 24 28	 mov	 QWORD PTR tv70[rsp], rax
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First$[rsp]
  0003b	e8 00 00 00 00	 call	 ??$_Unchecked@PEAH@std@@YAPEAHPEAH@Z ; std::_Unchecked<int * __ptr64>
  00040	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Al$[rsp]
  00045	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv67[rsp]
  0004a	4c 8b c1	 mov	 r8, rcx
  0004d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv70[rsp]
  00052	48 8b d1	 mov	 rdx, rcx
  00055	48 8b c8	 mov	 rcx, rax
  00058	e8 00 00 00 00	 call	 ??$_Uninitialized_move_al_unchecked@PEAHPEAHV?$allocator@H@std@@@std@@YAPEAHPEAH00AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Uninitialized_move_al_unchecked<int * __ptr64,int * __ptr64,std::allocator<int> >
  0005d	48 8b d0	 mov	 rdx, rax
  00060	48 8d 4c 24 50	 lea	 rcx, QWORD PTR _Dest$[rsp]
  00065	e8 00 00 00 00	 call	 ??$_Rechecked@PEAHPEAH@std@@YAAEAPEAHAEAPEAHPEAH@Z ; std::_Rechecked<int * __ptr64,int * __ptr64>
  0006a	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 317  : 		_Uninitialized_move_al_unchecked(_Unchecked(_First), _Unchecked(_Last),
; 318  : 			_Unchecked(_Dest), _Al)));
; 319  : 	}

  0006d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00071	c3		 ret	 0
??$_Uninitialized_move@PEAHPEAHV?$allocator@H@std@@@std@@YAPEAHPEAH00AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Uninitialized_move<int * __ptr64,int * __ptr64,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory
;	COMDAT ??$_Uninitialized_move@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z
_TEXT	SEGMENT
tv67 = 32
tv70 = 40
_First$ = 64
_Last$ = 72
_Dest$ = 80
_Al$ = 88
??$_Uninitialized_move@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z PROC ; std::_Uninitialized_move<DsDevice * __ptr64,DsDevice * __ptr64,std::allocator<DsDevice> >, COMDAT

; 313  : 	{	// move [_First, _Last) to raw _Dest, using _Al

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 314  : 		// note: only called internally from elsewhere in the STL, debug checks
; 315  : 		// and deprecation warnings omitted
; 316  : 	return (_Rechecked(_Dest,

  00018	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Dest$[rsp]
  0001d	e8 00 00 00 00	 call	 ??$_Unchecked@PEAUDsDevice@@@std@@YAPEAUDsDevice@@PEAU1@@Z ; std::_Unchecked<DsDevice * __ptr64>
  00022	48 89 44 24 20	 mov	 QWORD PTR tv67[rsp], rax
  00027	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Last$[rsp]
  0002c	e8 00 00 00 00	 call	 ??$_Unchecked@PEAUDsDevice@@@std@@YAPEAUDsDevice@@PEAU1@@Z ; std::_Unchecked<DsDevice * __ptr64>
  00031	48 89 44 24 28	 mov	 QWORD PTR tv70[rsp], rax
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First$[rsp]
  0003b	e8 00 00 00 00	 call	 ??$_Unchecked@PEAUDsDevice@@@std@@YAPEAUDsDevice@@PEAU1@@Z ; std::_Unchecked<DsDevice * __ptr64>
  00040	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Al$[rsp]
  00045	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv67[rsp]
  0004a	4c 8b c1	 mov	 r8, rcx
  0004d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv70[rsp]
  00052	48 8b d1	 mov	 rdx, rcx
  00055	48 8b c8	 mov	 rcx, rax
  00058	e8 00 00 00 00	 call	 ??$_Uninitialized_move_al_unchecked@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z ; std::_Uninitialized_move_al_unchecked<DsDevice * __ptr64,DsDevice * __ptr64,std::allocator<DsDevice> >
  0005d	48 8b d0	 mov	 rdx, rax
  00060	48 8d 4c 24 50	 lea	 rcx, QWORD PTR _Dest$[rsp]
  00065	e8 00 00 00 00	 call	 ??$_Rechecked@PEAUDsDevice@@PEAU1@@std@@YAAEAPEAUDsDevice@@AEAPEAU1@PEAU1@@Z ; std::_Rechecked<DsDevice * __ptr64,DsDevice * __ptr64>
  0006a	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 317  : 		_Uninitialized_move_al_unchecked(_Unchecked(_First), _Unchecked(_Last),
; 318  : 			_Unchecked(_Dest), _Al)));
; 319  : 	}

  0006d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00071	c3		 ret	 0
??$_Uninitialized_move@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<DsDevice * __ptr64,DsDevice * __ptr64,std::allocator<DsDevice> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PEADAEAPEAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@PEAPEADAEAPEAD@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@PEADAEAPEAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@PEAPEADAEAPEAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 & __ptr64>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00018	e8 00 00 00 00	 call	 ??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z ; std::forward<char * __ptr64 & __ptr64>
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$construct@PEADAEAPEAD@?$allocator@D@std@@QEAAXPEAPEADAEAPEAD@Z ; std::allocator<char>::construct<char * __ptr64,char * __ptr64 & __ptr64>

; 858  : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
??$construct@PEADAEAPEAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@PEAPEADAEAPEAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z PROC		; std::forward<char * __ptr64 & __ptr64>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1277 : 	}

  0000a	c3		 ret	 0
??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z ENDP		; std::forward<char * __ptr64 & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PEAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@PEAPEAD@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
??$destroy@PEAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@PEAPEAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char * __ptr64>, COMDAT

; 863  : 		{	// destroy object at _Ptr

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 864  : 		_Al.destroy(_Ptr);

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  00018	e8 00 00 00 00	 call	 ??$destroy@PEAD@?$allocator@D@std@@QEAAXPEAPEAD@Z ; std::allocator<char>::destroy<char * __ptr64>

; 865  : 		}

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
??$destroy@PEAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@PEAPEAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocca@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEBU10@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__formal$ = 8
__formal$ = 16
__formal$ = 24
??$_Pocca@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEBU10@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Pocca<std::_Wrap_alloc<std::allocator<char> > >, COMDAT

; 1038 : 	{	// (don't) propagate on container copy assignment

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1039 : 	}

  0000f	c3		 ret	 0
??$_Pocca@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEBU10@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Pocca<std::_Wrap_alloc<std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
$T1 = 32
_Left$ = 64
_Right$ = 72
__formal$ = 80
??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0U?$integral_constant@_N$00@0@@Z PROC ; std::_Pocma<std::_Wrap_alloc<std::allocator<char> > >, COMDAT

; 1051 : 	{	// propagate on container move assignment

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00013	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 1052 : 	_Left = _STD move(_Right);

  0001c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  00021	e8 00 00 00 00	 call	 ??$move@AEAU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEAU10@@Z ; std::move<std::_Wrap_alloc<std::allocator<char> > & __ptr64>
  00026	90		 npad	 1
  00027	48 8b d0	 mov	 rdx, rax
  0002a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Left$[rsp]
  0002f	e8 00 00 00 00	 call	 ??4?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAAEAU01@$$QEAU01@@Z ; std::_Wrap_alloc<std::allocator<char> >::operator=
  00034	90		 npad	 1

; 1053 : 	}

  00035	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00039	c3		 ret	 0
??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0U?$integral_constant@_N$00@0@@Z ENDP ; std::_Pocma<std::_Wrap_alloc<std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1277 : 	}

  0000a	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@I@std@@PEAI@std@@YAXPEAI0AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__formal$ = 8
__formal$ = 16
__formal$ = 24
__formal$ = 32
??$_Destroy_range1@V?$allocator@I@std@@PEAI@std@@YAXPEAI0AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Destroy_range1<std::allocator<unsigned int>,unsigned int * __ptr64>, COMDAT

; 1107 : 	{	// destroy [_First, _Last), trivially destructible and default destroy

  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1108 : 		// nothing to do
; 1109 : 	}

  00014	c3		 ret	 0
??$_Destroy_range1@V?$allocator@I@std@@PEAI@std@@YAXPEAI0AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Destroy_range1<std::allocator<unsigned int>,unsigned int * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@W4Api@RtAudio@@@std@@PEAW4Api@RtAudio@@@std@@YAXPEAW4Api@RtAudio@@0AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__formal$ = 8
__formal$ = 16
__formal$ = 24
__formal$ = 32
??$_Destroy_range1@V?$allocator@W4Api@RtAudio@@@std@@PEAW4Api@RtAudio@@@std@@YAXPEAW4Api@RtAudio@@0AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Destroy_range1<std::allocator<enum RtAudio::Api>,enum RtAudio::Api * __ptr64>, COMDAT

; 1107 : 	{	// destroy [_First, _Last), trivially destructible and default destroy

  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1108 : 		// nothing to do
; 1109 : 	}

  00014	c3		 ret	 0
??$_Destroy_range1@V?$allocator@W4Api@RtAudio@@@std@@PEAW4Api@RtAudio@@@std@@YAXPEAW4Api@RtAudio@@0AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Destroy_range1<std::allocator<enum RtAudio::Api>,enum RtAudio::Api * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@H@std@@PEAH@std@@YAXPEAH0AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__formal$ = 8
__formal$ = 16
__formal$ = 24
__formal$ = 32
??$_Destroy_range1@V?$allocator@H@std@@PEAH@std@@YAXPEAH0AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Destroy_range1<std::allocator<int>,int * __ptr64>, COMDAT

; 1107 : 	{	// destroy [_First, _Last), trivially destructible and default destroy

  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1108 : 		// nothing to do
; 1109 : 	}

  00014	c3		 ret	 0
??$_Destroy_range1@V?$allocator@H@std@@PEAH@std@@YAXPEAH0AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Destroy_range1<std::allocator<int>,int * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@UDsDevice@@@std@@PEAUDsDevice@@@std@@YAXPEAUDsDevice@@0AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Al$ = 64
__formal$ = 72
??$_Destroy_range1@V?$allocator@UDsDevice@@@std@@PEAUDsDevice@@@std@@YAXPEAUDsDevice@@0AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Destroy_range1<std::allocator<DsDevice>,DsDevice * __ptr64>, COMDAT

; 1099 : 	{	// destroy [_First, _Last), no special optimization

$LN6:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1100 : 	for (; _First != _Last; ++_First)

  00018	eb 0e		 jmp	 SHORT $LN4@Destroy_ra
$LN2@Destroy_ra:
  0001a	48 8b 44 24 30	 mov	 rax, QWORD PTR _First$[rsp]
  0001f	48 83 c0 38	 add	 rax, 56			; 00000038H
  00023	48 89 44 24 30	 mov	 QWORD PTR _First$[rsp], rax
$LN4@Destroy_ra:
  00028	48 8b 44 24 38	 mov	 rax, QWORD PTR _Last$[rsp]
  0002d	48 39 44 24 30	 cmp	 QWORD PTR _First$[rsp], rax
  00032	74 19		 je	 SHORT $LN3@Destroy_ra

; 1101 : 		_Al.destroy(_Unfancy(_First));

  00034	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _First$[rsp]
  00039	e8 00 00 00 00	 call	 ??$_Unfancy@UDsDevice@@@std@@YAPEAUDsDevice@@PEAU1@@Z ; std::_Unfancy<DsDevice>
  0003e	48 8b d0	 mov	 rdx, rax
  00041	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Al$[rsp]
  00046	e8 00 00 00 00	 call	 ??$destroy@UDsDevice@@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@@Z ; std::_Wrap_alloc<std::allocator<DsDevice> >::destroy<DsDevice>
  0004b	eb cd		 jmp	 SHORT $LN2@Destroy_ra
$LN3@Destroy_ra:

; 1102 : 	}

  0004d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00051	c3		 ret	 0
??$_Destroy_range1@V?$allocator@UDsDevice@@@std@@PEAUDsDevice@@@std@@YAXPEAUDsDevice@@0AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Destroy_range1<std::allocator<DsDevice>,DsDevice * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
_Val1$ = 64
??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><std::_Wrap_alloc<std::allocator<char> > >, COMDAT

; 289  : 		{	// construct from forwarded values

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 287  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Val1$[rsp]
  00017	e8 00 00 00 00	 call	 ??$forward@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEAU10@@Z ; std::forward<std::_Wrap_alloc<std::allocator<char> > >
  0001c	48 8b d0	 mov	 rdx, rax
  0001f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00024	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@$$QEAU01@@Z ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >

; 288  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002e	48 8b c8	 mov	 rcx, rax
  00031	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 290  : 		}

  00036	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003f	c3		 ret	 0
??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><std::_Wrap_alloc<std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEAU10@@Z PROC ; std::forward<std::_Wrap_alloc<std::allocator<char> > >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1277 : 	}

  0000a	c3		 ret	 0
??$forward@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEAU10@@Z ENDP ; std::forward<std::_Wrap_alloc<std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?8DD@std@@YA_NAEBV?$allocator@D@0@0@Z
_TEXT	SEGMENT
__formal$ = 8
__formal$ = 16
??$?8DD@std@@YA_NAEBV?$allocator@D@0@0@Z PROC		; std::operator==<char,char>, COMDAT

; 795  : 	{	// test for allocator equality

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 796  : 	return (true);

  0000a	b0 01		 mov	 al, 1

; 797  : 	}

  0000c	c3		 ret	 0
??$?8DD@std@@YA_NAEBV?$allocator@D@0@0@Z ENDP		; std::operator==<char,char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?8V?$allocator@D@std@@V01@@std@@YA_NAEBU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z
_TEXT	SEGMENT
_Left$ = 48
_Right$ = 56
??$?8V?$allocator@D@std@@V01@@std@@YA_NAEBU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z PROC ; std::operator==<std::allocator<char>,std::allocator<char> >, COMDAT

; 1016 : 	{	// test for allocator equality

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1017 : 	return (static_cast<const _Ty&>(_Left)

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Right$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Left$[rsp]
  00018	e8 00 00 00 00	 call	 ??$?8DD@std@@YA_NAEBV?$allocator@D@0@0@Z ; std::operator==<char,char>

; 1018 : 		== static_cast<const _Other&>(_Right));
; 1019 : 	}

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
??$?8V?$allocator@D@std@@V01@@std@@YA_NAEBU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z ENDP ; std::operator==<std::allocator<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@I@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
_Val1$ = 64
??$?0U?$_Wrap_alloc@V?$allocator@I@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1><std::_Wrap_alloc<std::allocator<unsigned int> > >, COMDAT

; 289  : 		{	// construct from forwarded values

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 287  : 		: _Ty1(_STD forward<_Other1>(_Val1)),

  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Val1$[rsp]
  00017	e8 00 00 00 00	 call	 ??$forward@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@AEAU10@@Z ; std::forward<std::_Wrap_alloc<std::allocator<unsigned int> > >
  0001c	48 8b d0	 mov	 rdx, rax
  0001f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00024	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAA@$$QEAU01@@Z ; std::_Wrap_alloc<std::allocator<unsigned int> >::_Wrap_alloc<std::allocator<unsigned int> >

; 288  : 			_Myval2(_STD forward<_Other2>(_Val2)...)

  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002e	48 8b c8	 mov	 rcx, rax
  00031	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@I@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<unsigned int> >::_Vector_val<std::_Simple_types<unsigned int> >

; 290  : 		}

  00036	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003f	c3		 ret	 0
??$?0U?$_Wrap_alloc@V?$allocator@I@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1><std::_Wrap_alloc<std::allocator<unsigned int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@AEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@AEAU10@@Z PROC ; std::forward<std::_Wrap_alloc<std::allocator<unsigned int> > >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1277 : 	}

  0000a	c3		 ret	 0
??$forward@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@AEAU10@@Z ENDP ; std::forward<std::_Wrap_alloc<std::allocator<unsigned int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@II@?$allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@PEAI$$QEAI@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@II@?$allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@PEAI$$QEAI@Z PROC ; std::allocator_traits<std::allocator<unsigned int> >::construct<unsigned int,unsigned int>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00018	e8 00 00 00 00	 call	 ??$forward@I@std@@YA$$QEAIAEAI@Z ; std::forward<unsigned int>
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$construct@II@?$allocator@I@std@@QEAAXPEAI$$QEAI@Z ; std::allocator<unsigned int>::construct<unsigned int,unsigned int>

; 858  : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
??$construct@II@?$allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@PEAI$$QEAI@Z ENDP ; std::allocator_traits<std::allocator<unsigned int> >::construct<unsigned int,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@IAEBI@?$allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@PEAIAEBI@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@IAEBI@?$allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@PEAIAEBI@Z PROC ; std::allocator_traits<std::allocator<unsigned int> >::construct<unsigned int,unsigned int const & __ptr64>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00018	e8 00 00 00 00	 call	 ??$forward@AEBI@std@@YAAEBIAEBI@Z ; std::forward<unsigned int const & __ptr64>
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$construct@IAEBI@?$allocator@I@std@@QEAAXPEAIAEBI@Z ; std::allocator<unsigned int>::construct<unsigned int,unsigned int const & __ptr64>

; 858  : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
??$construct@IAEBI@?$allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@PEAIAEBI@Z ENDP ; std::allocator_traits<std::allocator<unsigned int> >::construct<unsigned int,unsigned int const & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AEBI@std@@YAAEBIAEBI@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEBI@std@@YAAEBIAEBI@Z PROC			; std::forward<unsigned int const & __ptr64>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1277 : 	}

  0000a	c3		 ret	 0
??$forward@AEBI@std@@YAAEBIAEBI@Z ENDP			; std::forward<unsigned int const & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@IAEAI@?$allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@PEAIAEAI@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@IAEAI@?$allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@PEAIAEAI@Z PROC ; std::allocator_traits<std::allocator<unsigned int> >::construct<unsigned int,unsigned int & __ptr64>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00018	e8 00 00 00 00	 call	 ??$forward@AEAI@std@@YAAEAIAEAI@Z ; std::forward<unsigned int & __ptr64>
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$construct@IAEAI@?$allocator@I@std@@QEAAXPEAIAEAI@Z ; std::allocator<unsigned int>::construct<unsigned int,unsigned int & __ptr64>

; 858  : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
??$construct@IAEAI@?$allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@PEAIAEAI@Z ENDP ; std::allocator_traits<std::allocator<unsigned int> >::construct<unsigned int,unsigned int & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AEAI@std@@YAAEAIAEAI@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEAI@std@@YAAEAIAEAI@Z PROC			; std::forward<unsigned int & __ptr64>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1277 : 	}

  0000a	c3		 ret	 0
??$forward@AEAI@std@@YAAEAIAEAI@Z ENDP			; std::forward<unsigned int & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@W4Api@RtAudio@@W412@@?$allocator_traits@V?$allocator@W4Api@RtAudio@@@std@@@std@@SAXAEAV?$allocator@W4Api@RtAudio@@@1@PEAW4Api@RtAudio@@$$QEAW434@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@W4Api@RtAudio@@W412@@?$allocator_traits@V?$allocator@W4Api@RtAudio@@@std@@@std@@SAXAEAV?$allocator@W4Api@RtAudio@@@1@PEAW4Api@RtAudio@@$$QEAW434@@Z PROC ; std::allocator_traits<std::allocator<enum RtAudio::Api> >::construct<enum RtAudio::Api,enum RtAudio::Api>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00018	e8 00 00 00 00	 call	 ??$forward@W4Api@RtAudio@@@std@@YA$$QEAW4Api@RtAudio@@AEAW412@@Z ; std::forward<enum RtAudio::Api>
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$construct@W4Api@RtAudio@@W412@@?$allocator@W4Api@RtAudio@@@std@@QEAAXPEAW4Api@RtAudio@@$$QEAW423@@Z ; std::allocator<enum RtAudio::Api>::construct<enum RtAudio::Api,enum RtAudio::Api>

; 858  : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
??$construct@W4Api@RtAudio@@W412@@?$allocator_traits@V?$allocator@W4Api@RtAudio@@@std@@@std@@SAXAEAV?$allocator@W4Api@RtAudio@@@1@PEAW4Api@RtAudio@@$$QEAW434@@Z ENDP ; std::allocator_traits<std::allocator<enum RtAudio::Api> >::construct<enum RtAudio::Api,enum RtAudio::Api>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@HH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@PEAH$$QEAH@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@HH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@PEAH$$QEAH@Z PROC ; std::allocator_traits<std::allocator<int> >::construct<int,int>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00018	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$construct@HH@?$allocator@H@std@@QEAAXPEAH$$QEAH@Z ; std::allocator<int>::construct<int,int>

; 858  : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
??$construct@HH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@PEAH$$QEAH@Z ENDP ; std::allocator_traits<std::allocator<int> >::construct<int,int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@HAEBH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@PEAHAEBH@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@HAEBH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@PEAHAEBH@Z PROC ; std::allocator_traits<std::allocator<int> >::construct<int,int const & __ptr64>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00018	e8 00 00 00 00	 call	 ??$forward@AEBH@std@@YAAEBHAEBH@Z ; std::forward<int const & __ptr64>
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$construct@HAEBH@?$allocator@H@std@@QEAAXPEAHAEBH@Z ; std::allocator<int>::construct<int,int const & __ptr64>

; 858  : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
??$construct@HAEBH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@PEAHAEBH@Z ENDP ; std::allocator_traits<std::allocator<int> >::construct<int,int const & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AEBH@std@@YAAEBHAEBH@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEBH@std@@YAAEBHAEBH@Z PROC			; std::forward<int const & __ptr64>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1277 : 	}

  0000a	c3		 ret	 0
??$forward@AEBH@std@@YAAEBHAEBH@Z ENDP			; std::forward<int const & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@HAEAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@PEAHAEAH@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@HAEAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@PEAHAEAH@Z PROC ; std::allocator_traits<std::allocator<int> >::construct<int,int & __ptr64>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00018	e8 00 00 00 00	 call	 ??$forward@AEAH@std@@YAAEAHAEAH@Z ; std::forward<int & __ptr64>
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$construct@HAEAH@?$allocator@H@std@@QEAAXPEAHAEAH@Z ; std::allocator<int>::construct<int,int & __ptr64>

; 858  : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
??$construct@HAEAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@PEAHAEAH@Z ENDP ; std::allocator_traits<std::allocator<int> >::construct<int,int & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AEAH@std@@YAAEAHAEAH@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEAH@std@@YAAEAHAEAH@Z PROC			; std::forward<int & __ptr64>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1277 : 	}

  0000a	c3		 ret	 0
??$forward@AEAH@std@@YAAEAHAEAH@Z ENDP			; std::forward<int & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UDsDevice@@AEBU1@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@AEBU3@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@UDsDevice@@AEBU1@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@AEBU3@@Z PROC ; std::allocator_traits<std::allocator<DsDevice> >::construct<DsDevice,DsDevice const & __ptr64>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00018	e8 00 00 00 00	 call	 ??$forward@AEBUDsDevice@@@std@@YAAEBUDsDevice@@AEBU1@@Z ; std::forward<DsDevice const & __ptr64>
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$construct@UDsDevice@@AEBU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z ; std::allocator<DsDevice>::construct<DsDevice,DsDevice const & __ptr64>

; 858  : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
??$construct@UDsDevice@@AEBU1@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@AEBU3@@Z ENDP ; std::allocator_traits<std::allocator<DsDevice> >::construct<DsDevice,DsDevice const & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AEBUDsDevice@@@std@@YAAEBUDsDevice@@AEBU1@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEBUDsDevice@@@std@@YAAEBUDsDevice@@AEBU1@@Z PROC ; std::forward<DsDevice const & __ptr64>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1277 : 	}

  0000a	c3		 ret	 0
??$forward@AEBUDsDevice@@@std@@YAAEBUDsDevice@@AEBU1@@Z ENDP ; std::forward<DsDevice const & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UDsDevice@@AEAU1@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@AEAU3@@Z
_TEXT	SEGMENT
_Al$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@UDsDevice@@AEAU1@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@AEAU3@@Z PROC ; std::allocator_traits<std::allocator<DsDevice> >::construct<DsDevice,DsDevice & __ptr64>, COMDAT

; 856  : 		{	// construct _Objty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 857  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00018	e8 00 00 00 00	 call	 ??$forward@AEAUDsDevice@@@std@@YAAEAUDsDevice@@AEAU1@@Z ; std::forward<DsDevice & __ptr64>
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$construct@UDsDevice@@AEAU1@@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z ; std::allocator<DsDevice>::construct<DsDevice,DsDevice & __ptr64>

; 858  : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
??$construct@UDsDevice@@AEAU1@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@AEAU3@@Z ENDP ; std::allocator_traits<std::allocator<DsDevice> >::construct<DsDevice,DsDevice & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@AEAUDsDevice@@@std@@YAAEAUDsDevice@@AEAU1@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@AEAUDsDevice@@@std@@YAAEAUDsDevice@@AEAU1@@Z PROC ; std::forward<DsDevice & __ptr64>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1277 : 	}

  0000a	c3		 ret	 0
??$forward@AEAUDsDevice@@@std@@YAAEAUDsDevice@@AEAU1@@Z ENDP ; std::forward<DsDevice & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Move_unchecked1@PEAUDsDevice@@PEAU1@@std@@YAPEAUDsDevice@@PEAU1@00U_General_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
_First$ = 48
_Last$ = 56
_Dest$ = 64
__formal$ = 72
??$_Move_unchecked1@PEAUDsDevice@@PEAU1@@std@@YAPEAUDsDevice@@PEAU1@00U_General_ptr_iterator_tag@0@@Z PROC ; std::_Move_unchecked1<DsDevice * __ptr64,DsDevice * __ptr64>, COMDAT

; 2579 : 	{	// move [_First, _Last) to [_Dest, ...), no special optimization

$LN6:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2580 : 	for (; _First != _Last; ++_Dest, (void)++_First)

  00018	eb 1c		 jmp	 SHORT $LN4@Move_unche
$LN2@Move_unche:
  0001a	48 8b 44 24 40	 mov	 rax, QWORD PTR _Dest$[rsp]
  0001f	48 83 c0 38	 add	 rax, 56			; 00000038H
  00023	48 89 44 24 40	 mov	 QWORD PTR _Dest$[rsp], rax
  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR _First$[rsp]
  0002d	48 83 c0 38	 add	 rax, 56			; 00000038H
  00031	48 89 44 24 30	 mov	 QWORD PTR _First$[rsp], rax
$LN4@Move_unche:
  00036	48 8b 44 24 38	 mov	 rax, QWORD PTR _Last$[rsp]
  0003b	48 39 44 24 30	 cmp	 QWORD PTR _First$[rsp], rax
  00040	74 19		 je	 SHORT $LN3@Move_unche

; 2581 : 		*_Dest = _STD move(*_First);

  00042	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _First$[rsp]
  00047	e8 00 00 00 00	 call	 ??$move@AEAUDsDevice@@@std@@YA$$QEAUDsDevice@@AEAU1@@Z ; std::move<DsDevice & __ptr64>
  0004c	48 8b d0	 mov	 rdx, rax
  0004f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Dest$[rsp]
  00054	e8 00 00 00 00	 call	 ??4DsDevice@@QEAAAEAU0@$$QEAU0@@Z
  00059	eb bf		 jmp	 SHORT $LN2@Move_unche
$LN3@Move_unche:

; 2582 : 	return (_Dest);

  0005b	48 8b 44 24 40	 mov	 rax, QWORD PTR _Dest$[rsp]

; 2583 : 	}

  00060	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00064	c3		 ret	 0
??$_Move_unchecked1@PEAUDsDevice@@PEAU1@@std@@YAPEAUDsDevice@@PEAU1@00U_General_ptr_iterator_tag@0@@Z ENDP ; std::_Move_unchecked1<DsDevice * __ptr64,DsDevice * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Ptr_move_cat@UDsDevice@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@AEBQEAUDsDevice@@0@Z
_TEXT	SEGMENT
$T1 = 0
__formal$ = 32
__formal$ = 40
??$_Ptr_move_cat@UDsDevice@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@AEBQEAUDsDevice@@0@Z PROC ; std::_Ptr_move_cat<DsDevice,DsDevice>, COMDAT

; 809  : 	{	// return pointer move optimization category for pointers

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 10	 sub	 rsp, 16

; 810  : 	return {};

  0000f	48 8d 04 24	 lea	 rax, QWORD PTR $T1[rsp]
  00013	48 8b f8	 mov	 rdi, rax
  00016	33 c0		 xor	 eax, eax
  00018	b9 01 00 00 00	 mov	 ecx, 1
  0001d	f3 aa		 rep stosb
  0001f	0f b6 04 24	 movzx	 eax, BYTE PTR $T1[rsp]

; 811  : 	}

  00023	48 83 c4 10	 add	 rsp, 16
  00027	5f		 pop	 rdi
  00028	c3		 ret	 0
??$_Ptr_move_cat@UDsDevice@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@AEBQEAUDsDevice@@0@Z ENDP ; std::_Ptr_move_cat<DsDevice,DsDevice>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@0U?$less@X@0@@Z
_TEXT	SEGMENT
tv65 = 32
_First$ = 64
_Last$ = 72
_Pred$ = 80
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@0U?$less@X@0@@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >,std::less<void> >, COMDAT

; 2782 : 	{	// order [_First, _Last), using _Pred

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2783 : 	_DEBUG_RANGE(_First, _Last);
; 2784 : 	_Sort_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred);

  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Last$[rsp]
  00018	e8 00 00 00 00	 call	 ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@YAPEAIV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<unsigned int> > >
  0001d	48 89 44 24 20	 mov	 QWORD PTR tv65[rsp], rax
  00022	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First$[rsp]
  00027	e8 00 00 00 00	 call	 ??$_Unchecked@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@YAPEAIV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@@Z ; std::_Unchecked<std::_Vector_val<std::_Simple_types<unsigned int> > >
  0002c	4c 8d 44 24 50	 lea	 r8, QWORD PTR _Pred$[rsp]
  00031	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv65[rsp]
  00036	48 8b d1	 mov	 rdx, rcx
  00039	48 8b c8	 mov	 rcx, rax
  0003c	e8 00 00 00 00	 call	 ??$_Sort_unchecked@PEAIU?$less@X@std@@@std@@YAXPEAI0AEAU?$less@X@0@@Z ; std::_Sort_unchecked<unsigned int * __ptr64,std::less<void> >

; 2785 : 	}

  00041	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00045	c3		 ret	 0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@0U?$less@X@0@@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >,std::less<void> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__F_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ@YAXXZ
text$yd	SEGMENT
??__F_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ@YAXXZ PROC ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::`dynamic atexit destructor for '_Static'', COMDAT
$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@1@XZ@4U?$_Immortalizer@V_Iostream_error_category@std@@@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Static
  0000b	e8 00 00 00 00	 call	 ??1?$_Immortalizer@V_Iostream_error_category@std@@@std@@QEAA@XZ ; std::_Immortalizer<std::_Iostream_error_category>::~_Immortalizer<std::_Iostream_error_category>
  00010	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00014	c3		 ret	 0
??__F_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ@YAXXZ ENDP ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::`dynamic atexit destructor for '_Static''
text$yd	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??1?$_Immortalizer@V_Iostream_error_category@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1?$_Immortalizer@V_Iostream_error_category@std@@@std@@QEAA@XZ PROC ; std::_Immortalizer<std::_Iostream_error_category>::~_Immortalizer<std::_Iostream_error_category>, COMDAT

; 686  : 		{	// intentionally do nothing

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 687  : 		}

  00005	c3		 ret	 0
??1?$_Immortalizer@V_Iostream_error_category@std@@@std@@QEAA@XZ ENDP ; std::_Immortalizer<std::_Iostream_error_category>::~_Immortalizer<std::_Iostream_error_category>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??0?$_Immortalizer@V_Iostream_error_category@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
tv74 = 40
this$ = 64
??0?$_Immortalizer@V_Iostream_error_category@std@@@std@@QEAA@XZ PROC ; std::_Immortalizer<std::_Iostream_error_category>::_Immortalizer<std::_Iostream_error_category>, COMDAT

; 680  : 	_Immortalizer()

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 681  : 		{	// construct _Ty inside _Storage
; 682  : 		::new (static_cast<void *>(&_Storage)) _Ty();

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b d0	 mov	 rdx, rax
  00011	b9 10 00 00 00	 mov	 ecx, 16
  00016	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  0001b	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00020	48 83 7c 24 20
	00		 cmp	 QWORD PTR $T1[rsp], 0
  00026	74 11		 je	 SHORT $LN3@Immortaliz
  00028	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  0002d	e8 00 00 00 00	 call	 ??0_Iostream_error_category@std@@QEAA@XZ ; std::_Iostream_error_category::_Iostream_error_category
  00032	48 89 44 24 28	 mov	 QWORD PTR tv74[rsp], rax
  00037	eb 09		 jmp	 SHORT $LN4@Immortaliz
$LN3@Immortaliz:
  00039	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv74[rsp], 0
$LN4@Immortaliz:

; 683  : 		}

  00042	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00047	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004b	c3		 ret	 0
??0?$_Immortalizer@V_Iostream_error_category@std@@@std@@QEAA@XZ ENDP ; std::_Immortalizer<std::_Iostream_error_category>::_Immortalizer<std::_Iostream_error_category>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPEADAEAD@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@D@std@@YAPEADAEAD@Z PROC			; std::addressof<char>, COMDAT

; 724  : 	{	// return address of _Val

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 725  : 	return (__builtin_addressof(_Val));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Val$[rsp]

; 726  : 	}

  0000a	c3		 ret	 0
??$addressof@D@std@@YAPEADAEAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z
_TEXT	SEGMENT
_Val$ = 48
?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z PROC ; std::pointer_traits<char * __ptr64>::pointer_to, COMDAT

; 279  : 		{	// convert raw reference to pointer

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 280  : 		return (_STD addressof(_Val));

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Val$[rsp]
  0000e	e8 00 00 00 00	 call	 ??$addressof@D@std@@YAPEADAEAD@Z ; std::addressof<char>

; 281  : 		}

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z ENDP ; std::pointer_traits<char * __ptr64>::pointer_to
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PEAI@?$vector@IV?$allocator@I@std@@@std@@IEAAPEAIPEAI00@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
_Ptr$ = 72
??$_Umove@PEAI@?$vector@IV?$allocator@I@std@@@std@@IEAAPEAIPEAI00@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Umove<unsigned int * __ptr64>, COMDAT

; 1658 : 		{	// move initializing [_First, _Last), using allocator

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1659 : 		return (_Uninitialized_move(_First, _Last,

  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Getal
  00022	4c 8b c8	 mov	 r9, rax
  00025	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Ptr$[rsp]
  0002a	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Last$[rsp]
  0002f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _First$[rsp]
  00034	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PEAIPEAIV?$allocator@I@std@@@std@@YAPEAIPEAI00AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@@Z ; std::_Uninitialized_move<unsigned int * __ptr64,unsigned int * __ptr64,std::allocator<unsigned int> >

; 1660 : 			_Ptr, this->_Getal()));
; 1661 : 		}

  00039	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003d	c3		 ret	 0
??$_Umove@PEAI@?$vector@IV?$allocator@I@std@@@std@@IEAAPEAIPEAI00@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Umove<unsigned int * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PEAW4Api@RtAudio@@@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAPEAW4Api@RtAudio@@PEAW423@00@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
_Ptr$ = 72
??$_Umove@PEAW4Api@RtAudio@@@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAPEAW4Api@RtAudio@@PEAW423@00@Z PROC ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Umove<enum RtAudio::Api * __ptr64>, COMDAT

; 1658 : 		{	// move initializing [_First, _Last), using allocator

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1659 : 		return (_Uninitialized_move(_First, _Last,

  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Getal
  00022	4c 8b c8	 mov	 r9, rax
  00025	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Ptr$[rsp]
  0002a	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Last$[rsp]
  0002f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _First$[rsp]
  00034	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PEAW4Api@RtAudio@@PEAW412@V?$allocator@W4Api@RtAudio@@@std@@@std@@YAPEAW4Api@RtAudio@@PEAW412@00AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@@Z ; std::_Uninitialized_move<enum RtAudio::Api * __ptr64,enum RtAudio::Api * __ptr64,std::allocator<enum RtAudio::Api> >

; 1660 : 			_Ptr, this->_Getal()));
; 1661 : 		}

  00039	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003d	c3		 ret	 0
??$_Umove@PEAW4Api@RtAudio@@@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAPEAW4Api@RtAudio@@PEAW423@00@Z ENDP ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Umove<enum RtAudio::Api * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PEAH@?$vector@HV?$allocator@H@std@@@std@@IEAAPEAHPEAH00@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
_Ptr$ = 72
??$_Umove@PEAH@?$vector@HV?$allocator@H@std@@@std@@IEAAPEAHPEAH00@Z PROC ; std::vector<int,std::allocator<int> >::_Umove<int * __ptr64>, COMDAT

; 1658 : 		{	// move initializing [_First, _Last), using allocator

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1659 : 		return (_Uninitialized_move(_First, _Last,

  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal
  00022	4c 8b c8	 mov	 r9, rax
  00025	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Ptr$[rsp]
  0002a	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Last$[rsp]
  0002f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _First$[rsp]
  00034	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PEAHPEAHV?$allocator@H@std@@@std@@YAPEAHPEAH00AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Uninitialized_move<int * __ptr64,int * __ptr64,std::allocator<int> >

; 1660 : 			_Ptr, this->_Getal()));
; 1661 : 		}

  00039	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003d	c3		 ret	 0
??$_Umove@PEAH@?$vector@HV?$allocator@H@std@@@std@@IEAAPEAHPEAH00@Z ENDP ; std::vector<int,std::allocator<int> >::_Umove<int * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$_Umove@PEAUDsDevice@@@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAPEAUDsDevice@@PEAU2@00@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
_Ptr$ = 72
??$_Umove@PEAUDsDevice@@@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAPEAUDsDevice@@PEAU2@00@Z PROC ; std::vector<DsDevice,std::allocator<DsDevice> >::_Umove<DsDevice * __ptr64>, COMDAT

; 1658 : 		{	// move initializing [_First, _Last), using allocator

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1659 : 		return (_Uninitialized_move(_First, _Last,

  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Getal
  00022	4c 8b c8	 mov	 r9, rax
  00025	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Ptr$[rsp]
  0002a	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Last$[rsp]
  0002f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _First$[rsp]
  00034	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PEAUDsDevice@@PEAU1@V?$allocator@UDsDevice@@@std@@@std@@YAPEAUDsDevice@@PEAU1@00AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z ; std::_Uninitialized_move<DsDevice * __ptr64,DsDevice * __ptr64,std::allocator<DsDevice> >

; 1660 : 			_Ptr, this->_Getal()));
; 1661 : 		}

  00039	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003d	c3		 ret	 0
??$_Umove@PEAUDsDevice@@@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAPEAUDsDevice@@PEAU2@00@Z ENDP ; std::vector<DsDevice,std::allocator<DsDevice> >::_Umove<DsDevice * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@PEADAEAPEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEADAEAPEAD@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@PEADAEAPEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEADAEAPEAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 & __ptr64>, COMDAT

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00018	e8 00 00 00 00	 call	 ??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z ; std::forward<char * __ptr64 & __ptr64>
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$construct@PEADAEAPEAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@PEAPEADAEAPEAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 & __ptr64>

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
??$construct@PEADAEAPEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEADAEAPEAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPEADPEAD@Z
_TEXT	SEGMENT
_Ptr$ = 8
??$_Unfancy@D@std@@YAPEADPEAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 739  : 	{	// do nothing for plain pointers

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 740  : 	return (_Ptr);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]

; 741  : 	}

  0000a	c3		 ret	 0
??$_Unfancy@D@std@@YAPEADPEAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$destroy@PEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEAD@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
??$destroy@PEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char * __ptr64>, COMDAT

; 1002 : 		{	// destroy object at _Ptr

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1003 : 		_Mytraits::destroy(*this, _Ptr);

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ??$destroy@PEAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAEAV?$allocator@D@1@PEAPEAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char * __ptr64>

; 1004 : 		}

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
??$destroy@PEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z PROC		; std::addressof<char * __ptr64>, COMDAT

; 724  : 	{	// return address of _Val

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 725  : 	return (__builtin_addressof(_Val));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Val$[rsp]

; 726  : 	}

  0000a	c3		 ret	 0
??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ENDP		; std::addressof<char * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT

; 280  : 		{	// construct from forwarded values

$LN4:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 279  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
  00017	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >

; 281  : 		}

  00024	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00029	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002d	c3		 ret	 0
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocca@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEBU10@@Z
_TEXT	SEGMENT
_Tag$ = 32
_Left$ = 64
_Right$ = 72
??$_Pocca@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEBU10@@Z PROC ; std::_Pocca<std::_Wrap_alloc<std::allocator<char> > >, COMDAT

; 1043 : 	{	// (maybe) propagate on container copy assignment

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1044 : 	typename _Alty::propagate_on_container_copy_assignment _Tag;
; 1045 : 	_Pocca(_Left, _Right, _Tag);

  0000e	44 0f b6 44 24
	20		 movzx	 r8d, BYTE PTR _Tag$[rsp]
  00014	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Right$[rsp]
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Left$[rsp]
  0001e	e8 00 00 00 00	 call	 ??$_Pocca@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEBU10@U?$integral_constant@_N$0A@@0@@Z ; std::_Pocca<std::_Wrap_alloc<std::allocator<char> > >

; 1046 : 	}

  00023	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00027	c3		 ret	 0
??$_Pocca@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEBU10@@Z ENDP ; std::_Pocca<std::_Wrap_alloc<std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z
_TEXT	SEGMENT
_Tag$ = 32
_Left$ = 64
_Right$ = 72
??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z PROC ; std::_Pocma<std::_Wrap_alloc<std::allocator<char> > >, COMDAT

; 1062 : 	{	// (maybe) propagate on container move assignment

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1063 : 	typename _Alty::propagate_on_container_move_assignment _Tag;
; 1064 : 	_Pocma(_Left, _Right, _Tag);

  0000e	44 0f b6 44 24
	20		 movzx	 r8d, BYTE PTR _Tag$[rsp]
  00014	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Right$[rsp]
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Left$[rsp]
  0001e	e8 00 00 00 00	 call	 ??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0U?$integral_constant@_N$00@0@@Z ; std::_Pocma<std::_Wrap_alloc<std::allocator<char> > >

; 1065 : 	}

  00023	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00027	c3		 ret	 0
??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z ENDP ; std::_Pocma<std::_Wrap_alloc<std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?0V?$allocator@D@std@@@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
??$?0V?$allocator@D@std@@@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> ><std::allocator<char> >, COMDAT

; 952  : 		{	// construct from a related allocator

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 951  : 		: _Mybase(_STD forward<_Other>(_Right))

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Right$[rsp]
  00013	e8 00 00 00 00	 call	 ??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ; std::forward<std::allocator<char> >
  00018	48 8b d0	 mov	 rdx, rax
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00020	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QEAA@AEBV01@@Z ; std::allocator<char>::allocator<char>

; 953  : 		}

  00025	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
??$?0V?$allocator@D@std@@@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> ><std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$numpunct@D@std@@MEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_G?$numpunct@D@std@@MEAAPEAXI@Z PROC			; std::numpunct<char>::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1?$numpunct@D@std@@MEAA@XZ ; std::numpunct<char>::~numpunct<char>
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_G?$numpunct@D@std@@MEAAPEAXI@Z ENDP			; std::numpunct<char>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?_Tidy@?$numpunct@D@std@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Tidy@?$numpunct@D@std@@AEAAXXZ PROC			; std::numpunct<char>::_Tidy, COMDAT

; 257  : 		{	// free all storage

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 258  : 		_CSTD free((void *)_Grouping);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00012	e8 00 00 00 00	 call	 free

; 259  : 		_CSTD free((void *)_Falsename);

  00017	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001c	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00020	e8 00 00 00 00	 call	 free

; 260  : 		_CSTD free((void *)_Truename);

  00025	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002a	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  0002e	e8 00 00 00 00	 call	 free

; 261  : 		}

  00033	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00037	c3		 ret	 0
?_Tidy@?$numpunct@D@std@@AEAAXXZ ENDP			; std::numpunct<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_truename, COMDAT

; 251  : 		{	// return name for true

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 252  : 		return (string_type(_Truename));

  00016	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0001b	48 8b 50 28	 mov	 rdx, QWORD PTR [rax+40]
  0001f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00024	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00029	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  0002d	83 c8 01	 or	 eax, 1
  00030	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  00034	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 253  : 		}

  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
?do_truename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_truename
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_falsename, COMDAT

; 246  : 		{	// return name for false

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 247  : 		return (string_type(_Falsename));

  00016	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0001b	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  0001f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00024	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00029	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  0002d	83 c8 01	 or	 eax, 1
  00030	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  00034	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 248  : 		}

  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
?do_falsename@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_falsename
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_grouping, COMDAT

; 241  : 		{	// return grouping string

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 242  : 		return (string(_Grouping));

  00016	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0001b	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  0001f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00024	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00029	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  0002d	83 c8 01	 or	 eax, 1
  00030	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  00034	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 243  : 		}

  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
?do_grouping@?$numpunct@D@std@@MEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_grouping
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_thousands_sep@?$numpunct@D@std@@MEBADXZ
_TEXT	SEGMENT
this$ = 8
?do_thousands_sep@?$numpunct@D@std@@MEBADXZ PROC	; std::numpunct<char>::do_thousands_sep, COMDAT

; 236  : 		{	// return thousands separator

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 237  : 		return (_Kseparator);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	0f b6 40 19	 movzx	 eax, BYTE PTR [rax+25]

; 238  : 		}

  0000e	c3		 ret	 0
?do_thousands_sep@?$numpunct@D@std@@MEBADXZ ENDP	; std::numpunct<char>::do_thousands_sep
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_decimal_point@?$numpunct@D@std@@MEBADXZ
_TEXT	SEGMENT
this$ = 8
?do_decimal_point@?$numpunct@D@std@@MEBADXZ PROC	; std::numpunct<char>::do_decimal_point, COMDAT

; 231  : 		{	// return decimal point

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 232  : 		return (_Dp);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	0f b6 40 18	 movzx	 eax, BYTE PTR [rax+24]

; 233  : 		}

  0000e	c3		 ret	 0
?do_decimal_point@?$numpunct@D@std@@MEBADXZ ENDP	; std::numpunct<char>::do_decimal_point
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z
_TEXT	SEGMENT
tv81 = 32
_Ptr$ = 40
tv149 = 48
tv150 = 56
tv151 = 64
tv152 = 72
tv153 = 80
tv154 = 88
$T1 = 96
$T2 = 112
_Cvt$ = 160
$T3 = 208
__$ArrayPad$ = 256
this$ = 304
_Lobj$ = 312
_Isdef$ = 320
?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z PROC	; std::numpunct<char>::_Init, COMDAT

; 202  : 		{	// initialize from _Lobj

$LN14:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  00018	48 c7 44 24 60
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00021	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00028	48 33 c4	 xor	 rax, rsp
  0002b	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 203  : 		const lconv *_Ptr = _Lobj._Getlconv();

  00033	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR _Lobj$[rsp]
  0003b	e8 00 00 00 00	 call	 ?_Getlconv@_Locinfo@std@@QEBAPEBUlconv@@XZ ; std::_Locinfo::_Getlconv
  00040	48 89 44 24 28	 mov	 QWORD PTR _Ptr$[rsp], rax

; 204  : 		_Locinfo::_Cvtvec _Cvt = _Lobj._Getcvt();	// conversion information

  00045	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR _Cvt$[rsp]
  0004d	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR _Lobj$[rsp]
  00055	e8 00 00 00 00	 call	 ?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ ; std::_Locinfo::_Getcvt

; 205  : 
; 206  : 		_Grouping = 0;

  0005a	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00062	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 207  : 		_Falsename = 0;

  0006a	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00072	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0

; 208  : 		_Truename = 0;

  0007a	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00082	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0

; 209  : 
; 210  : 		_TRY_BEGIN
; 211  : 		_Grouping = _MAKLOCSTR(char, _Isdef ? "" : _Ptr->grouping,

  0008a	0f b6 84 24 40
	01 00 00	 movzx	 eax, BYTE PTR _Isdef$[rsp]
  00092	85 c0		 test	 eax, eax
  00094	74 0e		 je	 SHORT $LN6@Init
  00096	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0009d	48 89 44 24 20	 mov	 QWORD PTR tv81[rsp], rax
  000a2	eb 0e		 jmp	 SHORT $LN7@Init
$LN6@Init:
  000a4	48 8b 44 24 28	 mov	 rax, QWORD PTR _Ptr$[rsp]
  000a9	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000ad	48 89 44 24 20	 mov	 QWORD PTR tv81[rsp], rax
$LN7@Init:
  000b2	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR $T3[rsp]
  000ba	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR _Lobj$[rsp]
  000c2	e8 00 00 00 00	 call	 ?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ ; std::_Locinfo::_Getcvt
  000c7	48 89 44 24 30	 mov	 QWORD PTR tv149[rsp], rax
  000cc	4c 8b 44 24 30	 mov	 r8, QWORD PTR tv149[rsp]
  000d1	33 d2		 xor	 edx, edx
  000d3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv81[rsp]
  000d8	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000dd	48 89 44 24 38	 mov	 QWORD PTR tv150[rsp], rax
  000e2	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000ea	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv150[rsp]
  000ef	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 212  : 			_Lobj._Getcvt());
; 213  : 		_Falsename = _MAKLOCSTR(_Elem, _Lobj._Getfalse(), _Cvt);

  000f3	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR _Lobj$[rsp]
  000fb	e8 00 00 00 00	 call	 ?_Getfalse@_Locinfo@std@@QEBAPEBDXZ ; std::_Locinfo::_Getfalse
  00100	48 89 44 24 40	 mov	 QWORD PTR tv151[rsp], rax
  00105	4c 8d 84 24 a0
	00 00 00	 lea	 r8, QWORD PTR _Cvt$[rsp]
  0010d	33 d2		 xor	 edx, edx
  0010f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv151[rsp]
  00114	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00119	48 89 44 24 48	 mov	 QWORD PTR tv152[rsp], rax
  0011e	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00126	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv152[rsp]
  0012b	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 214  : 		_Truename = _MAKLOCSTR(_Elem, _Lobj._Gettrue(), _Cvt);

  0012f	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR _Lobj$[rsp]
  00137	e8 00 00 00 00	 call	 ?_Gettrue@_Locinfo@std@@QEBAPEBDXZ ; std::_Locinfo::_Gettrue
  0013c	48 89 44 24 50	 mov	 QWORD PTR tv153[rsp], rax
  00141	4c 8d 84 24 a0
	00 00 00	 lea	 r8, QWORD PTR _Cvt$[rsp]
  00149	33 d2		 xor	 edx, edx
  0014b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv153[rsp]
  00150	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00155	48 89 44 24 58	 mov	 QWORD PTR tv154[rsp], rax
  0015a	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00162	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv154[rsp]
  00167	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx
  0016b	eb 00		 jmp	 SHORT $LN10@Init
$LN11@Init:
$LN10@Init:

; 215  : 		_CATCH_ALL
; 216  : 		_Tidy();
; 217  : 		_RERAISE;
; 218  : 		_CATCH_END
; 219  : 
; 220  : 		if (_Isdef)

  0016d	0f b6 84 24 40
	01 00 00	 movzx	 eax, BYTE PTR _Isdef$[rsp]
  00175	85 c0		 test	 eax, eax
  00177	74 3a		 je	 SHORT $LN3@Init

; 221  : 			{	// apply defaults for required facets
; 222  : //			_Grouping = _MAKLOCSTR(char, "", _Cvt);
; 223  : 			_Dp = _MAKLOCCHR(_Elem, '.', _Cvt);

  00179	4c 8d 84 24 a0
	00 00 00	 lea	 r8, QWORD PTR _Cvt$[rsp]
  00181	33 d2		 xor	 edx, edx
  00183	b1 2e		 mov	 cl, 46			; 0000002eH
  00185	e8 00 00 00 00	 call	 ??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z ; std::_Maklocchr<char>
  0018a	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00192	88 41 18	 mov	 BYTE PTR [rcx+24], al

; 224  : 			_Kseparator = _MAKLOCCHR(_Elem, ',', _Cvt);

  00195	4c 8d 84 24 a0
	00 00 00	 lea	 r8, QWORD PTR _Cvt$[rsp]
  0019d	33 d2		 xor	 edx, edx
  0019f	b1 2c		 mov	 cl, 44			; 0000002cH
  001a1	e8 00 00 00 00	 call	 ??$_Maklocchr@D@std@@YADDPEADAEBU_Cvtvec@@@Z ; std::_Maklocchr<char>
  001a6	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001ae	88 41 19	 mov	 BYTE PTR [rcx+25], al

; 225  : 			}
; 226  : 		else

  001b1	eb 33		 jmp	 SHORT $LN5@Init
$LN3@Init:

; 227  : 			_Getvals((_Elem)0, _Ptr, _Cvt);

  001b3	48 8d 44 24 70	 lea	 rax, QWORD PTR $T2[rsp]
  001b8	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR _Cvt$[rsp]
  001c0	48 8b f8	 mov	 rdi, rax
  001c3	48 8b f1	 mov	 rsi, rcx
  001c6	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  001cb	f3 a4		 rep movsb
  001cd	4c 8d 4c 24 70	 lea	 r9, QWORD PTR $T2[rsp]
  001d2	4c 8b 44 24 28	 mov	 r8, QWORD PTR _Ptr$[rsp]
  001d7	33 d2		 xor	 edx, edx
  001d9	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001e1	e8 00 00 00 00	 call	 ??$_Getvals@D@?$numpunct@D@std@@IEAAXDPEBUlconv@@U_Cvtvec@@@Z ; std::numpunct<char>::_Getvals<char>
$LN5@Init:

; 228  : 		}

  001e6	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001ee	48 33 cc	 xor	 rcx, rsp
  001f1	e8 00 00 00 00	 call	 __security_check_cookie
  001f6	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  001fd	5f		 pop	 rdi
  001fe	5e		 pop	 rsi
  001ff	c3		 ret	 0
$LN12@Init:
?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z ENDP	; std::numpunct<char>::_Init
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
tv81 = 32
_Ptr$ = 40
tv149 = 48
tv150 = 56
tv151 = 64
tv152 = 72
tv153 = 80
tv154 = 88
$T1 = 96
$T2 = 112
_Cvt$ = 160
$T3 = 208
__$ArrayPad$ = 256
this$ = 304
_Lobj$ = 312
_Isdef$ = 320
?catch$0@?0??_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z@4HA PROC ; `std::numpunct<char>::_Init'::`1'::catch$0

; 215  : 		_CATCH_ALL

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z$0:

; 215  : 		_CATCH_ALL
; 216  : 		_Tidy();

  0000d	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00014	e8 00 00 00 00	 call	 ?_Tidy@?$numpunct@D@std@@AEAAXXZ ; std::numpunct<char>::_Tidy

; 215  : 		_CATCH_ALL
; 216  : 		_Tidy();
; 217  : 		_RERAISE;

  00019	33 d2		 xor	 edx, edx
  0001b	33 c9		 xor	 ecx, ecx
  0001d	e8 00 00 00 00	 call	 _CxxThrowException
  00022	90		 npad	 1

; 215  : 		_CATCH_ALL
; 216  : 		_Tidy();
; 217  : 		_RERAISE;
; 218  : 		_CATCH_END

  00023	48 8d 05 00 00
	00 00		 lea	 rax, $LN11@catch$0
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
  00030	cc		 int	 3
?catch$0@?0??_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z@4HA ENDP ; `std::numpunct<char>::_Init'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
tv81 = 32
_Ptr$ = 40
tv149 = 48
tv150 = 56
tv151 = 64
tv152 = 72
tv153 = 80
tv154 = 88
$T1 = 96
$T2 = 112
_Cvt$ = 160
$T3 = 208
__$ArrayPad$ = 256
this$ = 304
_Lobj$ = 312
_Isdef$ = 320
?catch$0@?0??_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z@4HA PROC ; `std::numpunct<char>::_Init'::`1'::catch$0

; 215  : 		_CATCH_ALL

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z$0:

; 216  : 		_Tidy();

  0000d	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00014	e8 00 00 00 00	 call	 ?_Tidy@?$numpunct@D@std@@AEAAXXZ ; std::numpunct<char>::_Tidy

; 217  : 		_RERAISE;

  00019	33 d2		 xor	 edx, edx
  0001b	33 c9		 xor	 ecx, ecx
  0001d	e8 00 00 00 00	 call	 _CxxThrowException
  00022	90		 npad	 1

; 218  : 		_CATCH_END

  00023	48 8d 05 00 00
	00 00		 lea	 rax, $LN11@catch$0
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
  00030	cc		 int	 3
?catch$0@?0??_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z@4HA ENDP ; `std::numpunct<char>::_Init'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ??1?$numpunct@D@std@@MEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1?$numpunct@D@std@@MEAA@XZ PROC			; std::numpunct<char>::~numpunct<char>, COMDAT

; 175  : 		{	// destroy the object

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$numpunct@D@std@@6B@
  0001e	48 89 08	 mov	 QWORD PTR [rax], rcx

; 176  : 		_Tidy();

  00021	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00026	e8 00 00 00 00	 call	 ?_Tidy@?$numpunct@D@std@@AEAAXXZ ; std::numpunct<char>::_Tidy
  0002b	90		 npad	 1

; 177  : 		}

  0002c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00031	e8 00 00 00 00	 call	 ??1facet@locale@std@@MEAA@XZ ; std::locale::facet::~facet
  00036	90		 npad	 1
  00037	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003b	c3		 ret	 0
??1?$numpunct@D@std@@MEAA@XZ ENDP			; std::numpunct<char>::~numpunct<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
tv90 = 48
tv133 = 56
tv129 = 64
$T3 = 72
$T4 = 80
$T5 = 88
_Ppf$ = 208
_Ploc$ = 216
?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z PROC ; std::numpunct<char>::_Getcat, COMDAT

; 166  : 		{	// return locale category mask and construct standard facet

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00011	48 c7 44 24 50
	fe ff ff ff	 mov	 QWORD PTR $T4[rsp], -2
  0001a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 167  : 		if (_Ppf != 0 && *_Ppf == 0)

  00022	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR _Ppf$[rsp], 0
  0002b	0f 84 b6 00 00
	00		 je	 $LN2@Getcat
  00031	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR _Ppf$[rsp]
  00039	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0003d	0f 85 a4 00 00
	00		 jne	 $LN2@Getcat

; 168  : 			*_Ppf = new numpunct<_Elem>(

  00043	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00048	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0004d	48 89 44 24 28	 mov	 QWORD PTR $T2[rsp], rax
  00052	48 83 7c 24 28
	00		 cmp	 QWORD PTR $T2[rsp], 0
  00058	74 50		 je	 SHORT $LN4@Getcat
  0005a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR _Ploc$[rsp]
  00062	e8 00 00 00 00	 call	 ?c_str@locale@std@@QEBAPEBDXZ ; std::locale::c_str
  00067	48 8b d0	 mov	 rdx, rax
  0006a	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T5[rsp]
  0006f	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QEAA@PEBD@Z ; std::_Locinfo::_Locinfo
  00074	48 89 44 24 38	 mov	 QWORD PTR tv133[rsp], rax
  00079	48 8b 44 24 38	 mov	 rax, QWORD PTR tv133[rsp]
  0007e	48 89 44 24 40	 mov	 QWORD PTR tv129[rsp], rax
  00083	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  00087	83 c8 01	 or	 eax, 1
  0008a	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  0008e	41 b1 01	 mov	 r9b, 1
  00091	45 33 c0	 xor	 r8d, r8d
  00094	48 8b 54 24 40	 mov	 rdx, QWORD PTR tv129[rsp]
  00099	48 8b 4c 24 28	 mov	 rcx, QWORD PTR $T2[rsp]
  0009e	e8 00 00 00 00	 call	 ??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z ; std::numpunct<char>::numpunct<char>
  000a3	48 89 44 24 30	 mov	 QWORD PTR tv90[rsp], rax
  000a8	eb 09		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  000aa	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv90[rsp], 0
$LN5@Getcat:
  000b3	48 8b 44 24 30	 mov	 rax, QWORD PTR tv90[rsp]
  000b8	48 89 44 24 48	 mov	 QWORD PTR $T3[rsp], rax
  000bd	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR _Ppf$[rsp]
  000c5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR $T3[rsp]
  000ca	48 89 08	 mov	 QWORD PTR [rax], rcx
  000cd	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  000d1	83 e0 01	 and	 eax, 1
  000d4	85 c0		 test	 eax, eax
  000d6	74 0f		 je	 SHORT $LN2@Getcat
  000d8	83 64 24 20 fe	 and	 DWORD PTR $T1[rsp], -2
  000dd	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T5[rsp]
  000e2	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QEAA@XZ ; std::_Locinfo::~_Locinfo
$LN2@Getcat:

; 169  : 				_Locinfo(_Ploc->c_str()), 0, true);
; 170  : 		return (_X_NUMERIC);

  000e7	b8 04 00 00 00	 mov	 eax, 4

; 171  : 		}

  000ec	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000f3	c3		 ret	 0
?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z ENDP ; std::numpunct<char>::_Getcat
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
tv90 = 48
tv133 = 56
tv129 = 64
$T3 = 72
$T4 = 80
$T5 = 88
_Ppf$ = 208
_Ploc$ = 216
?dtor$0@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA PROC ; `std::numpunct<char>::_Getcat'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0000e	48 8b 4d 28	 mov	 rcx, QWORD PTR $T2[rbp]
  00012	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5d		 pop	 rbp
  0001c	c3		 ret	 0
?dtor$0@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA ENDP ; `std::numpunct<char>::_Getcat'::`1'::dtor$0
$T1 = 32
$T2 = 40
tv90 = 48
tv133 = 56
tv129 = 64
$T3 = 72
$T4 = 80
$T5 = 88
_Ppf$ = 208
_Ploc$ = 216
?dtor$1@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA PROC ; `std::numpunct<char>::_Getcat'::`1'::dtor$1
  0001d	40 55		 push	 rbp
  0001f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00023	48 8b ea	 mov	 rbp, rdx
  00026	8b 45 20	 mov	 eax, DWORD PTR $T1[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 0d		 je	 SHORT $LN8@dtor$1
  00030	83 65 20 fe	 and	 DWORD PTR $T1[rbp], -2
  00034	48 8d 4d 58	 lea	 rcx, QWORD PTR $T5[rbp]
  00038	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QEAA@XZ ; std::_Locinfo::~_Locinfo
$LN8@dtor$1:
  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?dtor$1@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA ENDP ; `std::numpunct<char>::_Getcat'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
tv90 = 48
tv133 = 56
tv129 = 64
$T3 = 72
$T4 = 80
$T5 = 88
_Ppf$ = 208
_Ploc$ = 216
?dtor$0@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA PROC ; `std::numpunct<char>::_Getcat'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0000e	48 8b 4d 28	 mov	 rcx, QWORD PTR $T2[rbp]
  00012	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5d		 pop	 rbp
  0001c	c3		 ret	 0
?dtor$0@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA ENDP ; `std::numpunct<char>::_Getcat'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
tv90 = 48
tv133 = 56
tv129 = 64
$T3 = 72
$T4 = 80
$T5 = 88
_Ppf$ = 208
_Ploc$ = 216
?dtor$1@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA PROC ; `std::numpunct<char>::_Getcat'::`1'::dtor$1
  0001d	40 55		 push	 rbp
  0001f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00023	48 8b ea	 mov	 rbp, rdx
  00026	8b 45 20	 mov	 eax, DWORD PTR $T1[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 0d		 je	 SHORT $LN8@dtor$1
  00030	83 65 20 fe	 and	 DWORD PTR $T1[rbp], -2
  00034	48 8d 4d 58	 lea	 rcx, QWORD PTR $T5[rbp]
  00038	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QEAA@XZ ; std::_Locinfo::~_Locinfo
$LN8@dtor$1:
  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?dtor$1@?0??_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA ENDP ; `std::numpunct<char>::_Getcat'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Lobj$ = 72
_Refs$ = 80
_Isdef$ = 88
??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z PROC	; std::numpunct<char>::numpunct<char>, COMDAT

; 160  : 		{	// construct from specified locale

$LN4:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00018	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 159  : 		: locale::facet(_Refs)

  00021	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Refs$[rsp]
  00026	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0002b	e8 00 00 00 00	 call	 ??0facet@locale@std@@IEAA@_K@Z ; std::locale::facet::facet
  00030	90		 npad	 1

; 160  : 		{	// construct from specified locale

  00031	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$numpunct@D@std@@6B@
  0003d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 161  : 		_Init(_Lobj, _Isdef);

  00040	44 0f b6 44 24
	58		 movzx	 r8d, BYTE PTR _Isdef$[rsp]
  00046	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Lobj$[rsp]
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00050	e8 00 00 00 00	 call	 ?_Init@?$numpunct@D@std@@IEAAXAEBV_Locinfo@2@_N@Z ; std::numpunct<char>::_Init
  00055	90		 npad	 1

; 162  : 		}

  00056	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0005b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005f	c3		 ret	 0
??0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z ENDP	; std::numpunct<char>::numpunct<char>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
_Lobj$ = 72
_Refs$ = 80
_Isdef$ = 88
?dtor$0@?0???0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z@4HA PROC ; `std::numpunct<char>::numpunct<char>'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1facet@locale@std@@MEAA@XZ ; std::locale::facet::~facet
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z@4HA ENDP ; `std::numpunct<char>::numpunct<char>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
_Lobj$ = 72
_Refs$ = 80
_Isdef$ = 88
?dtor$0@?0???0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z@4HA PROC ; `std::numpunct<char>::numpunct<char>'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1facet@locale@std@@MEAA@XZ ; std::locale::facet::~facet
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0?$numpunct@D@std@@QEAA@AEBV_Locinfo@1@_K_N@Z@4HA ENDP ; `std::numpunct<char>::numpunct<char>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::truename, COMDAT

; 143  : 		{	// return name for true

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 144  : 		return (do_truename());

  00016	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 8b 54 24 48	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00028	ff 50 38	 call	 QWORD PTR [rax+56]
  0002b	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  0002f	83 c8 01	 or	 eax, 1
  00032	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  00036	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 145  : 		}

  0003b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003f	c3		 ret	 0
?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::truename
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::falsename, COMDAT

; 138  : 		{	// return name for false

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 139  : 		return (do_falsename());

  00016	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 8b 54 24 48	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00028	ff 50 30	 call	 QWORD PTR [rax+48]
  0002b	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  0002f	83 c8 01	 or	 eax, 1
  00032	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  00036	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 140  : 		}

  0003b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003f	c3		 ret	 0
?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::falsename
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::grouping, COMDAT

; 133  : 		{	// return grouping string

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 134  : 		return (do_grouping());

  00016	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 8b 54 24 48	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00028	ff 50 28	 call	 QWORD PTR [rax+40]
  0002b	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  0002f	83 c8 01	 or	 eax, 1
  00032	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  00036	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 135  : 		}

  0003b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003f	c3		 ret	 0
?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::grouping
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?thousands_sep@?$numpunct@D@std@@QEBADXZ
_TEXT	SEGMENT
this$ = 48
?thousands_sep@?$numpunct@D@std@@QEBADXZ PROC		; std::numpunct<char>::thousands_sep, COMDAT

; 128  : 		{	// return thousands separator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 129  : 		return (do_thousands_sep());

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00016	ff 50 20	 call	 QWORD PTR [rax+32]

; 130  : 		}

  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	c3		 ret	 0
?thousands_sep@?$numpunct@D@std@@QEBADXZ ENDP		; std::numpunct<char>::thousands_sep
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?decimal_point@?$numpunct@D@std@@QEBADXZ
_TEXT	SEGMENT
this$ = 48
?decimal_point@?$numpunct@D@std@@QEBADXZ PROC		; std::numpunct<char>::decimal_point, COMDAT

; 123  : 		{	// return decimal point

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 124  : 		return (do_decimal_point());

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00016	ff 50 18	 call	 QWORD PTR [rax+24]

; 125  : 		}

  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	c3		 ret	 0
?decimal_point@?$numpunct@D@std@@QEBADXZ ENDP		; std::numpunct<char>::decimal_point
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z
_TEXT	SEGMENT
_Psave$1 = 32
_Pf$2 = 40
_Lock$3 = 48
_Pfmod$4 = 56
_Id$5 = 64
$T6 = 72
$T7 = 80
$T8 = 88
_Loc$ = 128
??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z PROC ; std::use_facet<std::numpunct<char> >, COMDAT

; 553  : 	{	// get facet reference from locale

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  00009	48 c7 44 24 50
	fe ff ff ff	 mov	 QWORD PTR $T7[rsp], -2

; 554  :  #if _NO_LOCALES
; 555  : 	static _Wrap_facet<_Facet> _Wfac;
; 556  : 	return (*(_Facet *)&_Wfac);
; 557  : 
; 558  :  #else /* _NO_LOCALES */
; 559  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00012	33 d2		 xor	 edx, edx
  00014	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Lock$3[rsp]
  00019	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit
  0001e	90		 npad	 1

; 560  : 		const locale::facet *_Psave =
; 561  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  0001f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PEBVfacet@locale@2@EB ; std::_Facetptr<std::numpunct<char> >::_Psave
  00026	48 89 44 24 20	 mov	 QWORD PTR _Psave$1[rsp], rax

; 562  : 
; 563  : 		size_t _Id = _Facet::id;

  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
  00032	e8 00 00 00 00	 call	 ??Bid@locale@std@@QEAA_KXZ ; std::locale::id::operator unsigned __int64
  00037	48 89 44 24 40	 mov	 QWORD PTR _Id$5[rsp], rax

; 564  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  0003c	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Id$5[rsp]
  00041	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Loc$[rsp]
  00049	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z ; std::locale::_Getfacet
  0004e	48 89 44 24 28	 mov	 QWORD PTR _Pf$2[rsp], rax

; 565  : 
; 566  : 		if (_Pf != 0)

  00053	48 83 7c 24 28
	00		 cmp	 QWORD PTR _Pf$2[rsp], 0
  00059	74 05		 je	 SHORT $LN2@use_facet
  0005b	e9 84 00 00 00	 jmp	 $LN3@use_facet
$LN2@use_facet:

; 567  : 			;	// got facet from locale
; 568  : 		else if (_Psave != 0)

  00060	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Psave$1[rsp], 0
  00066	74 0c		 je	 SHORT $LN4@use_facet

; 569  : 			_Pf = _Psave;	// lazy facet already allocated

  00068	48 8b 44 24 20	 mov	 rax, QWORD PTR _Psave$1[rsp]
  0006d	48 89 44 24 28	 mov	 QWORD PTR _Pf$2[rsp], rax
  00072	eb 70		 jmp	 SHORT $LN3@use_facet
$LN4@use_facet:

; 570  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  00074	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR _Loc$[rsp]
  0007c	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Psave$1[rsp]
  00081	e8 00 00 00 00	 call	 ?_Getcat@?$numpunct@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z ; std::numpunct<char>::_Getcat
  00086	48 83 f8 ff	 cmp	 rax, -1
  0008a	75 1e		 jne	 SHORT $LN6@use_facet

; 571  : 
; 572  :  #if _HAS_EXCEPTIONS
; 573  : 
; 574  : 			_THROW_NCEE(_XSTD bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  0008c	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T8[rsp]
  00091	e8 00 00 00 00	 call	 ??0bad_cast@std@@QEAA@XZ ; std::bad_cast::bad_cast
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVbad_cast@std@@
  0009d	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T8[rsp]
  000a2	e8 00 00 00 00	 call	 _CxxThrowException
  000a7	90		 npad	 1

; 575  : 
; 576  :  #else /* _HAS_EXCEPTIONS */
; 577  : 			abort();	// lazy disallowed
; 578  :  #endif /* _HAS_EXCEPTIONS */
; 579  : 
; 580  : 		else

  000a8	eb 3a		 jmp	 SHORT $LN3@use_facet
$LN6@use_facet:

; 581  : 			{	// queue up lazy facet for destruction
; 582  : 			_Pf = _Psave;

  000aa	48 8b 44 24 20	 mov	 rax, QWORD PTR _Psave$1[rsp]
  000af	48 89 44 24 28	 mov	 QWORD PTR _Pf$2[rsp], rax

; 583  : 			_Facetptr<_Facet>::_Psave = _Psave;

  000b4	48 8b 44 24 20	 mov	 rax, QWORD PTR _Psave$1[rsp]
  000b9	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PEBVfacet@locale@2@EB, rax ; std::_Facetptr<std::numpunct<char> >::_Psave

; 584  : 
; 585  : 			locale::facet *_Pfmod = (_Facet *)_Psave;

  000c0	48 8b 44 24 20	 mov	 rax, QWORD PTR _Psave$1[rsp]
  000c5	48 89 44 24 38	 mov	 QWORD PTR _Pfmod$4[rsp], rax

; 586  : 			_Pfmod->_Incref();

  000ca	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pfmod$4[rsp]
  000cf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Pfmod$4[rsp]
  000d7	ff 50 08	 call	 QWORD PTR [rax+8]

; 587  : 
; 588  :  #if defined(_M_CEE)
; 589  : 			_Facet_Register_m(_Pfmod);
; 590  : 
; 591  :  #else /* defined(_M_CEE) */
; 592  : 			_Facet_Register(_Pfmod);

  000da	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Pfmod$4[rsp]
  000df	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z ; std::_Facet_Register
$LN3@use_facet:

; 593  :  #endif /* defined(_M_CEE) */
; 594  : 			}
; 595  : 
; 596  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  000e4	48 8b 44 24 28	 mov	 rax, QWORD PTR _Pf$2[rsp]
  000e9	48 89 44 24 48	 mov	 QWORD PTR $T6[rsp], rax
  000ee	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Lock$3[rsp]
  000f3	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit
  000f8	48 8b 44 24 48	 mov	 rax, QWORD PTR $T6[rsp]

; 597  : 	_END_LOCK()
; 598  :  #endif /* _NO_LOCALES */
; 599  : 	}	// end of use_facet body

  000fd	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00101	c3		 ret	 0
$LN10@use_facet:
??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z ENDP ; std::use_facet<std::numpunct<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Psave$1 = 32
_Pf$2 = 40
_Lock$3 = 48
_Pfmod$4 = 56
_Id$5 = 64
$T6 = 72
$T7 = 80
$T8 = 88
_Loc$ = 128
?dtor$0@?0???$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z@4HA PROC ; `std::use_facet<std::numpunct<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 4d 30	 lea	 rcx, QWORD PTR _Lock$3[rbp]
  0000d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z@4HA ENDP ; `std::use_facet<std::numpunct<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_Psave$1 = 32
_Pf$2 = 40
_Lock$3 = 48
_Pfmod$4 = 56
_Id$5 = 64
$T6 = 72
$T7 = 80
$T8 = 88
_Loc$ = 128
?dtor$0@?0???$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z@4HA PROC ; `std::use_facet<std::numpunct<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 4d 30	 lea	 rcx, QWORD PTR _Lock$3[rbp]
  0000d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z@4HA ENDP ; `std::use_facet<std::numpunct<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@I@std@@PEAI@std@@YAXPEAI0AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@@Z
_TEXT	SEGMENT
$T1 = 32
_First$ = 64
_Last$ = 72
_Al$ = 80
??$_Destroy_range@V?$allocator@I@std@@PEAI@std@@YAXPEAI0AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned int>,unsigned int * __ptr64>, COMDAT

; 1114 : 	{	// destroy [_First, _Last), choose optimization

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1115 : 		// note that this is an optimization for debug mode codegen;
; 1116 : 		// in release mode the BE removes all of this
; 1117 : 	typedef typename _Alloc::value_type _Val;
; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

  00013	44 0f b6 4c 24
	20		 movzx	 r9d, BYTE PTR $T1[rsp]
  00019	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Al$[rsp]
  0001e	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Last$[rsp]
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First$[rsp]
  00028	e8 00 00 00 00	 call	 ??$_Destroy_range1@V?$allocator@I@std@@PEAI@std@@YAXPEAI0AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<unsigned int>,unsigned int * __ptr64>

; 1119 : 		is_trivially_destructible<_Val>,
; 1120 : 		_Uses_default_destroy<_Alloc, _Val *>>::type());
; 1121 : 	}

  0002d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00031	c3		 ret	 0
??$_Destroy_range@V?$allocator@I@std@@PEAI@std@@YAXPEAI0AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned int>,unsigned int * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1><>, COMDAT

; 280  : 		{	// construct from forwarded values

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 279  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAA@XZ ; std::_Wrap_alloc<std::allocator<unsigned int> >::_Wrap_alloc<std::allocator<unsigned int> >
  00017	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@I@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<unsigned int> >::_Vector_val<std::_Simple_types<unsigned int> >

; 281  : 		}

  00024	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00029	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002d	c3		 ret	 0
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@W4Api@RtAudio@@@std@@PEAW4Api@RtAudio@@@std@@YAXPEAW4Api@RtAudio@@0AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = 32
_First$ = 64
_Last$ = 72
_Al$ = 80
??$_Destroy_range@V?$allocator@W4Api@RtAudio@@@std@@PEAW4Api@RtAudio@@@std@@YAXPEAW4Api@RtAudio@@0AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<enum RtAudio::Api>,enum RtAudio::Api * __ptr64>, COMDAT

; 1114 : 	{	// destroy [_First, _Last), choose optimization

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1115 : 		// note that this is an optimization for debug mode codegen;
; 1116 : 		// in release mode the BE removes all of this
; 1117 : 	typedef typename _Alloc::value_type _Val;
; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

  00013	44 0f b6 4c 24
	20		 movzx	 r9d, BYTE PTR $T1[rsp]
  00019	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Al$[rsp]
  0001e	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Last$[rsp]
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First$[rsp]
  00028	e8 00 00 00 00	 call	 ??$_Destroy_range1@V?$allocator@W4Api@RtAudio@@@std@@PEAW4Api@RtAudio@@@std@@YAXPEAW4Api@RtAudio@@0AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<enum RtAudio::Api>,enum RtAudio::Api * __ptr64>

; 1119 : 		is_trivially_destructible<_Val>,
; 1120 : 		_Uses_default_destroy<_Alloc, _Val *>>::type());
; 1121 : 	}

  0002d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00031	c3		 ret	 0
??$_Destroy_range@V?$allocator@W4Api@RtAudio@@@std@@PEAW4Api@RtAudio@@@std@@YAXPEAW4Api@RtAudio@@0AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<enum RtAudio::Api>,enum RtAudio::Api * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@H@std@@PEAH@std@@YAXPEAH0AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z
_TEXT	SEGMENT
$T1 = 32
_First$ = 64
_Last$ = 72
_Al$ = 80
??$_Destroy_range@V?$allocator@H@std@@PEAH@std@@YAXPEAH0AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<int>,int * __ptr64>, COMDAT

; 1114 : 	{	// destroy [_First, _Last), choose optimization

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1115 : 		// note that this is an optimization for debug mode codegen;
; 1116 : 		// in release mode the BE removes all of this
; 1117 : 	typedef typename _Alloc::value_type _Val;
; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

  00013	44 0f b6 4c 24
	20		 movzx	 r9d, BYTE PTR $T1[rsp]
  00019	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Al$[rsp]
  0001e	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Last$[rsp]
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First$[rsp]
  00028	e8 00 00 00 00	 call	 ??$_Destroy_range1@V?$allocator@H@std@@PEAH@std@@YAXPEAH0AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<int>,int * __ptr64>

; 1119 : 		is_trivially_destructible<_Val>,
; 1120 : 		_Uses_default_destroy<_Alloc, _Val *>>::type());
; 1121 : 	}

  0002d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00031	c3		 ret	 0
??$_Destroy_range@V?$allocator@H@std@@PEAH@std@@YAXPEAH0AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<int>,int * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1><>, COMDAT

; 280  : 		{	// construct from forwarded values

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 279  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAA@XZ ; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >
  00017	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >

; 281  : 		}

  00024	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00029	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002d	c3		 ret	 0
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@UDsDevice@@@std@@PEAUDsDevice@@@std@@YAXPEAUDsDevice@@0AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = 32
_First$ = 64
_Last$ = 72
_Al$ = 80
??$_Destroy_range@V?$allocator@UDsDevice@@@std@@PEAUDsDevice@@@std@@YAXPEAUDsDevice@@0AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<DsDevice>,DsDevice * __ptr64>, COMDAT

; 1114 : 	{	// destroy [_First, _Last), choose optimization

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1115 : 		// note that this is an optimization for debug mode codegen;
; 1116 : 		// in release mode the BE removes all of this
; 1117 : 	typedef typename _Alloc::value_type _Val;
; 1118 : 	_Destroy_range1(_First, _Last, _Al, typename conjunction<

  00013	44 0f b6 4c 24
	20		 movzx	 r9d, BYTE PTR $T1[rsp]
  00019	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Al$[rsp]
  0001e	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Last$[rsp]
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First$[rsp]
  00028	e8 00 00 00 00	 call	 ??$_Destroy_range1@V?$allocator@UDsDevice@@@std@@PEAUDsDevice@@@std@@YAXPEAUDsDevice@@0AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<DsDevice>,DsDevice * __ptr64>

; 1119 : 		is_trivially_destructible<_Val>,
; 1120 : 		_Uses_default_destroy<_Alloc, _Val *>>::type());
; 1121 : 	}

  0002d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00031	c3		 ret	 0
??$_Destroy_range@V?$allocator@UDsDevice@@@std@@PEAUDsDevice@@@std@@YAXPEAUDsDevice@@0AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<DsDevice>,DsDevice * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<DsDevice> >,std::_Vector_val<std::_Simple_types<DsDevice> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<DsDevice> >,std::_Vector_val<std::_Simple_types<DsDevice> >,1><>, COMDAT

; 280  : 		{	// construct from forwarded values

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 279  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ ; std::_Wrap_alloc<std::allocator<DsDevice> >::_Wrap_alloc<std::allocator<DsDevice> >
  00017	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<DsDevice> >::_Vector_val<std::_Simple_types<DsDevice> >

; 281  : 		}

  00024	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00029	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002d	c3		 ret	 0
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<DsDevice> >,std::_Vector_val<std::_Simple_types<DsDevice> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<DsDevice> >,std::_Vector_val<std::_Simple_types<DsDevice> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >,std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >,std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >,1><>, COMDAT

; 280  : 		{	// construct from forwarded values

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 279  : 		: _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...)

  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??0?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ ; std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >::_Wrap_alloc<std::allocator<enum RtAudio::Api> >
  00017	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ??0?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@std@@QEAA@XZ ; std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >::_Vector_val<std::_Simple_types<enum RtAudio::Api> >

; 281  : 		}

  00024	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00029	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002d	c3		 ret	 0
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >,std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >,std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed, COMDAT

; 661  : 		{	// return true if any stores failed

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 662  : 		return (_Failed);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 663  : 		}

  0000d	c3		 ret	 0
?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 8
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++, COMDAT

; 651  : 		{	// pretend to preincrement

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 652  : 		return (*this);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 653  : 		}

  0000a	c3		 ret	 0
??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ
_TEXT	SEGMENT
this$ = 8
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*, COMDAT

; 646  : 		{	// pretend to get designated element

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 647  : 		return (*this);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 648  : 		}

  0000a	c3		 ret	 0
??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
this$ = 64
_Right$ = 72
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=, COMDAT

; 637  : 		{	// store element and increment

$LN5:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 638  : 		if (_Strbuf == 0
; 639  : 			|| traits_type::eq_int_type(_Traits::eof(),

  0000d	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00012	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00017	74 36		 je	 SHORT $LN3@operator
  00019	0f b6 54 24 48	 movzx	 edx, BYTE PTR _Right$[rsp]
  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00027	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  0002c	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  00030	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00035	89 44 24 24	 mov	 DWORD PTR $T2[rsp], eax
  00039	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  0003e	48 8d 4c 24 24	 lea	 rcx, QWORD PTR $T2[rsp]
  00043	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  00048	0f b6 c0	 movzx	 eax, al
  0004b	85 c0		 test	 eax, eax
  0004d	74 08		 je	 SHORT $LN2@operator
$LN3@operator:

; 640  : 				_Strbuf->sputc(_Right)))
; 641  : 			_Failed = true;

  0004f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00054	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN2@operator:

; 642  : 		return (*this);

  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]

; 643  : 		}

  0005c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00060	c3		 ret	 0
??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
_TEXT	SEGMENT
this$ = 8
_Sb$ = 16
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z PROC ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >, COMDAT

; 628  : 		{	// construct from stream buffer _Sb

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 627  : 		: _Failed(false), _Strbuf(_Sb)

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000f	c6 00 00	 mov	 BYTE PTR [rax], 0
  00012	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 8b 4c 24 10	 mov	 rcx, QWORD PTR _Sb$[rsp]
  0001c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 629  : 		}

  00020	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00025	c3		 ret	 0
??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ENDP ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 10 00 00 00	 mov	 edx, 16
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAAPEAXI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z
_TEXT	SEGMENT
this$ = 64
__$ReturnUdt$ = 72
_Dest$ = 80
_Ch$ = 88
_Count$ = 96
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep, COMDAT

; 1583 : 		{	// put _Count * _Ch to _Dest

$LN6:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1584 : 		for (; 0 < _Count; --_Count, (void)++_Dest)

  0001a	eb 17		 jmp	 SHORT $LN4@Rep
$LN2@Rep:
  0001c	48 8b 44 24 60	 mov	 rax, QWORD PTR _Count$[rsp]
  00021	48 ff c8	 dec	 rax
  00024	48 89 44 24 60	 mov	 QWORD PTR _Count$[rsp], rax
  00029	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Dest$[rsp]
  0002e	e8 00 00 00 00	 call	 ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
$LN4@Rep:
  00033	48 83 7c 24 60
	00		 cmp	 QWORD PTR _Count$[rsp], 0
  00039	76 19		 jbe	 SHORT $LN3@Rep

; 1585 : 			*_Dest = _Ch;

  0003b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Dest$[rsp]
  00040	e8 00 00 00 00	 call	 ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
  00045	0f b6 54 24 58	 movzx	 edx, BYTE PTR _Ch$[rsp]
  0004a	48 8b c8	 mov	 rcx, rax
  0004d	e8 00 00 00 00	 call	 ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
  00052	eb c8		 jmp	 SHORT $LN2@Rep
$LN3@Rep:

; 1586 : 		return (_Dest);

  00054	48 8b 7c 24 48	 mov	 rdi, QWORD PTR __$ReturnUdt$[rsp]
  00059	48 8b 74 24 50	 mov	 rsi, QWORD PTR _Dest$[rsp]
  0005e	b9 10 00 00 00	 mov	 ecx, 16
  00063	f3 a4		 rep movsb
  00065	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1587 : 		}

  0006a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006e	5f		 pop	 rdi
  0006f	5e		 pop	 rsi
  00070	c3		 ret	 0
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z
_TEXT	SEGMENT
this$ = 64
__$ReturnUdt$ = 72
_Dest$ = 80
_Ptr$ = 88
_Count$ = 96
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put, COMDAT

; 1575 : 		{	// put [_Ptr, _Ptr + _Count) to _Dest

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1576 : 		for (; 0 < _Count; --_Count, (void)++_Dest, ++_Ptr)

  0001a	eb 24		 jmp	 SHORT $LN4@Put
$LN2@Put:
  0001c	48 8b 44 24 60	 mov	 rax, QWORD PTR _Count$[rsp]
  00021	48 ff c8	 dec	 rax
  00024	48 89 44 24 60	 mov	 QWORD PTR _Count$[rsp], rax
  00029	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Dest$[rsp]
  0002e	e8 00 00 00 00	 call	 ??E?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator++
  00033	48 8b 44 24 58	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00038	48 ff c0	 inc	 rax
  0003b	48 89 44 24 58	 mov	 QWORD PTR _Ptr$[rsp], rax
$LN4@Put:
  00040	48 83 7c 24 60
	00		 cmp	 QWORD PTR _Count$[rsp], 0
  00046	76 1c		 jbe	 SHORT $LN3@Put

; 1577 : 			*_Dest = *_Ptr;

  00048	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Dest$[rsp]
  0004d	e8 00 00 00 00	 call	 ??D?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@XZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator*
  00052	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00057	0f b6 11	 movzx	 edx, BYTE PTR [rcx]
  0005a	48 8b c8	 mov	 rcx, rax
  0005d	e8 00 00 00 00	 call	 ??4?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAAAEAV01@D@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::operator=
  00062	eb b8		 jmp	 SHORT $LN2@Put
$LN3@Put:

; 1578 : 		return (_Dest);

  00064	48 8b 7c 24 48	 mov	 rdi, QWORD PTR __$ReturnUdt$[rsp]
  00069	48 8b 74 24 50	 mov	 rsi, QWORD PTR _Dest$[rsp]
  0006e	b9 10 00 00 00	 mov	 ecx, 16
  00073	f3 a4		 rep movsb
  00075	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1579 : 		}

  0007a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007e	5f		 pop	 rdi
  0007f	5e		 pop	 rsi
  00080	c3		 ret	 0
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z
_TEXT	SEGMENT
_Kseparator$1 = 48
_Prefix$ = 56
_Pg$ = 64
_Adjustfield$ = 72
tv69 = 76
_Fillcount$ = 80
_Punct_fac$ = 88
tv196 = 96
tv273 = 104
tv266 = 112
_Ctype_fac$ = 120
tv132 = 128
tv269 = 136
tv249 = 144
$T2 = 152
$T3 = 160
$T4 = 176
$T5 = 192
$T6 = 208
$T7 = 224
$T8 = 240
$T9 = 256
$T10 = 272
$T11 = 288
$T12 = 304
$T13 = 320
$T14 = 336
$T15 = 352
$T16 = 368
$T17 = 384
_Groupstring$ = 400
_Grouping$ = 432
__$ArrayPad$ = 464
this$ = 512
__$ReturnUdt$ = 520
_Dest$ = 528
_Iosbase$ = 536
_Fill$ = 544
_Buf$ = 552
_Count$ = 560
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput, COMDAT

; 1515 : 		{	// put formatted integer to _Dest

$LN22:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec e8 01
	00 00		 sub	 rsp, 488		; 000001e8H
  0001d	48 c7 84 24 98
	00 00 00 fe ff
	ff ff		 mov	 QWORD PTR $T2[rsp], -2
  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00030	48 33 c4	 xor	 rax, rsp
  00033	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1516 : 		_DEBUG_POINTER(_Dest);
; 1517 : 		size_t _Prefix = 0 < _Count && (*_Buf == '+' || *_Buf == '-')

  0003b	48 83 bc 24 30
	02 00 00 00	 cmp	 QWORD PTR _Count$[rsp], 0
  00044	76 2a		 jbe	 SHORT $LN14@Iput
  00046	48 8b 84 24 28
	02 00 00	 mov	 rax, QWORD PTR _Buf$[rsp]
  0004e	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00051	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  00054	74 10		 je	 SHORT $LN13@Iput
  00056	48 8b 84 24 28
	02 00 00	 mov	 rax, QWORD PTR _Buf$[rsp]
  0005e	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00061	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  00064	75 0a		 jne	 SHORT $LN14@Iput
$LN13@Iput:
  00066	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv69[rsp], 1
  0006e	eb 08		 jmp	 SHORT $LN15@Iput
$LN14@Iput:
  00070	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv69[rsp], 0
$LN15@Iput:
  00078	48 63 44 24 4c	 movsxd	 rax, DWORD PTR tv69[rsp]
  0007d	48 89 44 24 38	 mov	 QWORD PTR _Prefix$[rsp], rax

; 1518 : 			? 1 : 0;
; 1519 : 		if ((_Iosbase.flags() & ios_base::basefield) == ios_base::hex
; 1520 : 			&& _Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
; 1521 : 			&& (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))

  00082	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  0008a	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  0008f	25 00 0e 00 00	 and	 eax, 3584		; 00000e00H
  00094	3d 00 08 00 00	 cmp	 eax, 2048		; 00000800H
  00099	75 74		 jne	 SHORT $LN4@Iput
  0009b	48 8b 44 24 38	 mov	 rax, QWORD PTR _Prefix$[rsp]
  000a0	48 83 c0 02	 add	 rax, 2
  000a4	48 3b 84 24 30
	02 00 00	 cmp	 rax, QWORD PTR _Count$[rsp]
  000ac	77 61		 ja	 SHORT $LN4@Iput
  000ae	48 8b 44 24 38	 mov	 rax, QWORD PTR _Prefix$[rsp]
  000b3	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR _Buf$[rsp]
  000bb	48 03 c8	 add	 rcx, rax
  000be	48 8b c1	 mov	 rax, rcx
  000c1	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000c4	83 f8 30	 cmp	 eax, 48			; 00000030H
  000c7	75 46		 jne	 SHORT $LN4@Iput
  000c9	48 8b 44 24 38	 mov	 rax, QWORD PTR _Prefix$[rsp]
  000ce	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR _Buf$[rsp]
  000d6	48 03 c8	 add	 rcx, rax
  000d9	48 8b c1	 mov	 rax, rcx
  000dc	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  000e0	83 f8 78	 cmp	 eax, 120		; 00000078H
  000e3	74 1c		 je	 SHORT $LN5@Iput
  000e5	48 8b 44 24 38	 mov	 rax, QWORD PTR _Prefix$[rsp]
  000ea	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR _Buf$[rsp]
  000f2	48 03 c8	 add	 rcx, rax
  000f5	48 8b c1	 mov	 rax, rcx
  000f8	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  000fc	83 f8 58	 cmp	 eax, 88			; 00000058H
  000ff	75 0e		 jne	 SHORT $LN4@Iput
$LN5@Iput:

; 1522 : 			_Prefix += 2;

  00101	48 8b 44 24 38	 mov	 rax, QWORD PTR _Prefix$[rsp]
  00106	48 83 c0 02	 add	 rax, 2
  0010a	48 89 44 24 38	 mov	 QWORD PTR _Prefix$[rsp], rax
$LN4@Iput:

; 1523 : 
; 1524 : 		const ctype<_Elem>& _Ctype_fac =

  0010f	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR $T3[rsp]
  00117	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  0011f	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QEBA?AVlocale@2@XZ ; std::ios_base::getloc
  00124	48 89 44 24 68	 mov	 QWORD PTR tv273[rsp], rax
  00129	48 8b 44 24 68	 mov	 rax, QWORD PTR tv273[rsp]
  0012e	48 89 44 24 70	 mov	 QWORD PTR tv266[rsp], rax
  00133	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv266[rsp]
  00138	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  0013d	48 89 44 24 78	 mov	 QWORD PTR _Ctype_fac$[rsp], rax
  00142	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR $T3[rsp]
  0014a	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale

; 1525 : 			_USE(_Iosbase.getloc(), ctype<_Elem>);
; 1526 : 		_Mystr _Groupstring(_Count, _Elem(0));	// reserve space

  0014f	45 33 c0	 xor	 r8d, r8d
  00152	48 8b 94 24 30
	02 00 00	 mov	 rdx, QWORD PTR _Count$[rsp]
  0015a	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  00162	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00167	90		 npad	 1

; 1527 : 		_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

  00168	33 d2		 xor	 edx, edx
  0016a	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  00172	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00177	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR _Count$[rsp]
  0017f	48 8b 94 24 28
	02 00 00	 mov	 rdx, QWORD PTR _Buf$[rsp]
  00187	48 03 d1	 add	 rdx, rcx
  0018a	48 8b ca	 mov	 rcx, rdx
  0018d	ba 01 00 00 00	 mov	 edx, 1
  00192	48 6b d2 00	 imul	 rdx, rdx, 0
  00196	4c 8b 84 24 28
	02 00 00	 mov	 r8, QWORD PTR _Buf$[rsp]
  0019e	4c 03 c2	 add	 r8, rdx
  001a1	49 8b d0	 mov	 rdx, r8
  001a4	4c 8b c8	 mov	 r9, rax
  001a7	4c 8b c1	 mov	 r8, rcx
  001aa	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Ctype_fac$[rsp]
  001af	e8 00 00 00 00	 call	 ?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z ; std::ctype<char>::widen

; 1528 : 
; 1529 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  001b4	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR $T4[rsp]
  001bc	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  001c4	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QEBA?AVlocale@2@XZ ; std::ios_base::getloc
  001c9	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv132[rsp], rax
  001d1	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv132[rsp]
  001d9	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv269[rsp], rax
  001e1	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv269[rsp]
  001e9	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  001ee	48 89 44 24 58	 mov	 QWORD PTR _Punct_fac$[rsp], rax
  001f3	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR $T4[rsp]
  001fb	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale

; 1530 : 		const string _Grouping = _Punct_fac.grouping();

  00200	48 8d 94 24 b0
	01 00 00	 lea	 rdx, QWORD PTR _Grouping$[rsp]
  00208	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Punct_fac$[rsp]
  0020d	e8 00 00 00 00	 call	 ?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
  00212	90		 npad	 1

; 1531 : 		const char *_Pg = &_Grouping[0];

  00213	33 d2		 xor	 edx, edx
  00215	48 8d 8c 24 b0
	01 00 00	 lea	 rcx, QWORD PTR _Grouping$[rsp]
  0021d	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00222	48 89 44 24 40	 mov	 QWORD PTR _Pg$[rsp], rax

; 1532 : 		if (*_Pg != CHAR_MAX && '\0' < *_Pg)

  00227	48 8b 44 24 40	 mov	 rax, QWORD PTR _Pg$[rsp]
  0022c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0022f	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00232	0f 84 c8 00 00
	00		 je	 $LN6@Iput
  00238	48 8b 44 24 40	 mov	 rax, QWORD PTR _Pg$[rsp]
  0023d	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00240	85 c0		 test	 eax, eax
  00242	0f 8e b8 00 00
	00		 jle	 $LN6@Iput

; 1533 : 			{	// grouping specified, add thousands separators
; 1534 : 			const _Elem _Kseparator = _Punct_fac.thousands_sep();

  00248	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Punct_fac$[rsp]
  0024d	e8 00 00 00 00	 call	 ?thousands_sep@?$numpunct@D@std@@QEBADXZ ; std::numpunct<char>::thousands_sep
  00252	88 44 24 30	 mov	 BYTE PTR _Kseparator$1[rsp], al
$LN2@Iput:

; 1535 : 			while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1536 : 				&& (size_t)*_Pg < _Count - _Prefix)

  00256	48 8b 44 24 40	 mov	 rax, QWORD PTR _Pg$[rsp]
  0025b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0025e	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  00261	0f 84 99 00 00
	00		 je	 $LN6@Iput
  00267	48 8b 44 24 40	 mov	 rax, QWORD PTR _Pg$[rsp]
  0026c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0026f	85 c0		 test	 eax, eax
  00271	0f 8e 89 00 00
	00		 jle	 $LN6@Iput
  00277	48 8b 44 24 40	 mov	 rax, QWORD PTR _Pg$[rsp]
  0027c	48 0f be 00	 movsx	 rax, BYTE PTR [rax]
  00280	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Prefix$[rsp]
  00285	48 8b 94 24 30
	02 00 00	 mov	 rdx, QWORD PTR _Count$[rsp]
  0028d	48 2b d1	 sub	 rdx, rcx
  00290	48 8b ca	 mov	 rcx, rdx
  00293	48 3b c1	 cmp	 rax, rcx
  00296	73 68		 jae	 SHORT $LN6@Iput

; 1537 : 				{	// insert thousands separator
; 1538 : 				_Count -= *_Pg;

  00298	48 8b 44 24 40	 mov	 rax, QWORD PTR _Pg$[rsp]
  0029d	48 0f be 00	 movsx	 rax, BYTE PTR [rax]
  002a1	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR _Count$[rsp]
  002a9	48 2b c8	 sub	 rcx, rax
  002ac	48 8b c1	 mov	 rax, rcx
  002af	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR _Count$[rsp], rax

; 1539 : 				_Groupstring.insert(_Count, 1, _Kseparator);

  002b7	44 0f b6 4c 24
	30		 movzx	 r9d, BYTE PTR _Kseparator$1[rsp]
  002bd	41 b8 01 00 00
	00		 mov	 r8d, 1
  002c3	48 8b 94 24 30
	02 00 00	 mov	 rdx, QWORD PTR _Count$[rsp]
  002cb	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  002d3	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1540 : 				if ('\0' < _Pg[1])

  002d8	b8 01 00 00 00	 mov	 eax, 1
  002dd	48 6b c0 01	 imul	 rax, rax, 1
  002e1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Pg$[rsp]
  002e6	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  002ea	85 c0		 test	 eax, eax
  002ec	7e 0d		 jle	 SHORT $LN7@Iput

; 1541 : 					++_Pg;	// not last group, advance

  002ee	48 8b 44 24 40	 mov	 rax, QWORD PTR _Pg$[rsp]
  002f3	48 ff c0	 inc	 rax
  002f6	48 89 44 24 40	 mov	 QWORD PTR _Pg$[rsp], rax
$LN7@Iput:

; 1542 : 				}

  002fb	e9 56 ff ff ff	 jmp	 $LN2@Iput
$LN6@Iput:

; 1543 : 			}
; 1544 : 
; 1545 : 		_Count = _Groupstring.size();

  00300	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  00308	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0030d	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR _Count$[rsp], rax

; 1546 : 		size_t _Fillcount = _Iosbase.width() <= 0
; 1547 : 			|| (size_t)_Iosbase.width() <= _Count

  00315	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  0031d	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  00322	48 85 c0	 test	 rax, rax
  00325	7e 33		 jle	 SHORT $LN16@Iput
  00327	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  0032f	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  00334	48 3b 84 24 30
	02 00 00	 cmp	 rax, QWORD PTR _Count$[rsp]
  0033c	76 1c		 jbe	 SHORT $LN16@Iput
  0033e	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00346	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  0034b	48 2b 84 24 30
	02 00 00	 sub	 rax, QWORD PTR _Count$[rsp]
  00353	48 89 44 24 60	 mov	 QWORD PTR tv196[rsp], rax
  00358	eb 09		 jmp	 SHORT $LN17@Iput
$LN16@Iput:
  0035a	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR tv196[rsp], 0
$LN17@Iput:
  00363	48 8b 44 24 60	 mov	 rax, QWORD PTR tv196[rsp]
  00368	48 89 44 24 50	 mov	 QWORD PTR _Fillcount$[rsp], rax

; 1548 : 				? 0 : (size_t)_Iosbase.width() - _Count;
; 1549 : 
; 1550 : 		ios_base::fmtflags _Adjustfield =
; 1551 : 			_Iosbase.flags() & ios_base::adjustfield;

  0036d	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00375	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  0037a	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0037f	89 44 24 48	 mov	 DWORD PTR _Adjustfield$[rsp], eax

; 1552 : 		if (_Adjustfield != ios_base::left
; 1553 : 			&& _Adjustfield != ios_base::internal)

  00383	83 7c 24 48 40	 cmp	 DWORD PTR _Adjustfield$[rsp], 64 ; 00000040H
  00388	0f 84 dd 00 00
	00		 je	 $LN8@Iput
  0038e	81 7c 24 48 00
	01 00 00	 cmp	 DWORD PTR _Adjustfield$[rsp], 256 ; 00000100H
  00396	0f 84 cf 00 00
	00		 je	 $LN8@Iput

; 1554 : 			{	// put leading fill
; 1555 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  0039c	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR $T5[rsp]
  003a4	48 8b f8	 mov	 rdi, rax
  003a7	48 8b b4 24 10
	02 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  003af	b9 10 00 00 00	 mov	 ecx, 16
  003b4	f3 a4		 rep movsb
  003b6	48 8b 44 24 50	 mov	 rax, QWORD PTR _Fillcount$[rsp]
  003bb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003c0	44 0f b6 8c 24
	20 02 00 00	 movzx	 r9d, BYTE PTR _Fill$[rsp]
  003c9	4c 8d 84 24 c0
	00 00 00	 lea	 r8, QWORD PTR $T5[rsp]
  003d1	48 8d 94 24 30
	01 00 00	 lea	 rdx, QWORD PTR $T12[rsp]
  003d9	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  003e1	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  003e6	48 8b bc 24 10
	02 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  003ee	48 8b f0	 mov	 rsi, rax
  003f1	b9 10 00 00 00	 mov	 ecx, 16
  003f6	f3 a4		 rep movsb

; 1556 : 			_Fillcount = 0;

  003f8	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR _Fillcount$[rsp], 0

; 1557 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  00401	33 d2		 xor	 edx, edx
  00403	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  0040b	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00410	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR $T6[rsp]
  00418	48 8b f9	 mov	 rdi, rcx
  0041b	48 8b b4 24 10
	02 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  00423	b9 10 00 00 00	 mov	 ecx, 16
  00428	f3 a4		 rep movsb
  0042a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Prefix$[rsp]
  0042f	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00434	4c 8b c8	 mov	 r9, rax
  00437	4c 8d 84 24 d0
	00 00 00	 lea	 r8, QWORD PTR $T6[rsp]
  0043f	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR $T13[rsp]
  00447	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0044f	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  00454	48 8b bc 24 10
	02 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  0045c	48 8b f0	 mov	 rsi, rax
  0045f	b9 10 00 00 00	 mov	 ecx, 16
  00464	f3 a4		 rep movsb
  00466	e9 3f 01 00 00	 jmp	 $LN9@Iput
$LN8@Iput:

; 1558 : 			}
; 1559 : 		else if (_Adjustfield == ios_base::internal)

  0046b	81 7c 24 48 00
	01 00 00	 cmp	 DWORD PTR _Adjustfield$[rsp], 256 ; 00000100H
  00473	0f 85 cc 00 00
	00		 jne	 $LN10@Iput

; 1560 : 			{	// put internal fill
; 1561 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  00479	33 d2		 xor	 edx, edx
  0047b	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  00483	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00488	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR $T7[rsp]
  00490	48 8b f9	 mov	 rdi, rcx
  00493	48 8b b4 24 10
	02 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  0049b	b9 10 00 00 00	 mov	 ecx, 16
  004a0	f3 a4		 rep movsb
  004a2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Prefix$[rsp]
  004a7	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  004ac	4c 8b c8	 mov	 r9, rax
  004af	4c 8d 84 24 e0
	00 00 00	 lea	 r8, QWORD PTR $T7[rsp]
  004b7	48 8d 94 24 50
	01 00 00	 lea	 rdx, QWORD PTR $T14[rsp]
  004bf	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  004c7	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  004cc	48 8b bc 24 10
	02 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  004d4	48 8b f0	 mov	 rsi, rax
  004d7	b9 10 00 00 00	 mov	 ecx, 16
  004dc	f3 a4		 rep movsb

; 1562 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  004de	48 8d 84 24 f0
	00 00 00	 lea	 rax, QWORD PTR $T8[rsp]
  004e6	48 8b f8	 mov	 rdi, rax
  004e9	48 8b b4 24 10
	02 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  004f1	b9 10 00 00 00	 mov	 ecx, 16
  004f6	f3 a4		 rep movsb
  004f8	48 8b 44 24 50	 mov	 rax, QWORD PTR _Fillcount$[rsp]
  004fd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00502	44 0f b6 8c 24
	20 02 00 00	 movzx	 r9d, BYTE PTR _Fill$[rsp]
  0050b	4c 8d 84 24 f0
	00 00 00	 lea	 r8, QWORD PTR $T8[rsp]
  00513	48 8d 94 24 60
	01 00 00	 lea	 rdx, QWORD PTR $T15[rsp]
  0051b	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00523	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00528	48 8b bc 24 10
	02 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  00530	48 8b f0	 mov	 rsi, rax
  00533	b9 10 00 00 00	 mov	 ecx, 16
  00538	f3 a4		 rep movsb

; 1563 : 			_Fillcount = 0;

  0053a	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR _Fillcount$[rsp], 0

; 1564 : 			}
; 1565 : 		else

  00543	eb 65		 jmp	 SHORT $LN9@Iput
$LN10@Iput:

; 1566 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  00545	33 d2		 xor	 edx, edx
  00547	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  0054f	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00554	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR $T9[rsp]
  0055c	48 8b f9	 mov	 rdi, rcx
  0055f	48 8b b4 24 10
	02 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  00567	b9 10 00 00 00	 mov	 ecx, 16
  0056c	f3 a4		 rep movsb
  0056e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Prefix$[rsp]
  00573	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00578	4c 8b c8	 mov	 r9, rax
  0057b	4c 8d 84 24 00
	01 00 00	 lea	 r8, QWORD PTR $T9[rsp]
  00583	48 8d 94 24 70
	01 00 00	 lea	 rdx, QWORD PTR $T16[rsp]
  0058b	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00593	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  00598	48 8b bc 24 10
	02 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  005a0	48 8b f0	 mov	 rsi, rax
  005a3	b9 10 00 00 00	 mov	 ecx, 16
  005a8	f3 a4		 rep movsb
$LN9@Iput:

; 1567 : 
; 1568 : 		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  005aa	48 8b 44 24 38	 mov	 rax, QWORD PTR _Prefix$[rsp]
  005af	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR _Count$[rsp]
  005b7	48 2b c8	 sub	 rcx, rax
  005ba	48 8b c1	 mov	 rax, rcx
  005bd	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv249[rsp], rax
  005c5	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Prefix$[rsp]
  005ca	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  005d2	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  005d7	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR $T10[rsp]
  005df	48 8b f9	 mov	 rdi, rcx
  005e2	48 8b b4 24 10
	02 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  005ea	b9 10 00 00 00	 mov	 ecx, 16
  005ef	f3 a4		 rep movsb
  005f1	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv249[rsp]
  005f9	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  005fe	4c 8b c8	 mov	 r9, rax
  00601	4c 8d 84 24 10
	01 00 00	 lea	 r8, QWORD PTR $T10[rsp]
  00609	48 8d 94 24 80
	01 00 00	 lea	 rdx, QWORD PTR $T17[rsp]
  00611	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00619	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  0061e	48 8b bc 24 10
	02 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  00626	48 8b f0	 mov	 rsi, rax
  00629	b9 10 00 00 00	 mov	 ecx, 16
  0062e	f3 a4		 rep movsb

; 1569 : 		_Iosbase.width(0);

  00630	33 d2		 xor	 edx, edx
  00632	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  0063a	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEAA_J_J@Z ; std::ios_base::width

; 1570 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  0063f	48 8d 84 24 20
	01 00 00	 lea	 rax, QWORD PTR $T11[rsp]
  00647	48 8b f8	 mov	 rdi, rax
  0064a	48 8b b4 24 10
	02 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  00652	b9 10 00 00 00	 mov	 ecx, 16
  00657	f3 a4		 rep movsb
  00659	48 8b 44 24 50	 mov	 rax, QWORD PTR _Fillcount$[rsp]
  0065e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00663	44 0f b6 8c 24
	20 02 00 00	 movzx	 r9d, BYTE PTR _Fill$[rsp]
  0066c	4c 8d 84 24 20
	01 00 00	 lea	 r8, QWORD PTR $T11[rsp]
  00674	48 8b 94 24 08
	02 00 00	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  0067c	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00684	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00689	90		 npad	 1
  0068a	48 8d 8c 24 b0
	01 00 00	 lea	 rcx, QWORD PTR _Grouping$[rsp]
  00692	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00697	90		 npad	 1
  00698	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  006a0	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  006a5	48 8b 84 24 08
	02 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1571 : 		}

  006ad	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  006b5	48 33 cc	 xor	 rcx, rsp
  006b8	e8 00 00 00 00	 call	 __security_check_cookie
  006bd	48 81 c4 e8 01
	00 00		 add	 rsp, 488		; 000001e8H
  006c4	5f		 pop	 rdi
  006c5	5e		 pop	 rsi
  006c6	c3		 ret	 0
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Kseparator$1 = 48
_Prefix$ = 56
_Pg$ = 64
_Adjustfield$ = 72
tv69 = 76
_Fillcount$ = 80
_Punct_fac$ = 88
tv196 = 96
tv273 = 104
tv266 = 112
_Ctype_fac$ = 120
tv132 = 128
tv269 = 136
tv249 = 144
$T2 = 152
$T3 = 160
$T4 = 176
$T5 = 192
$T6 = 208
$T7 = 224
$T8 = 240
$T9 = 256
$T10 = 272
$T11 = 288
$T12 = 304
$T13 = 320
$T14 = 336
$T15 = 352
$T16 = 368
$T17 = 384
_Groupstring$ = 400
_Grouping$ = 432
__$ArrayPad$ = 464
this$ = 512
__$ReturnUdt$ = 520
_Dest$ = 528
_Iosbase$ = 536
_Fill$ = 544
_Buf$ = 552
_Count$ = 560
?dtor$0@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 8d a0 00
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  00010	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$0@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput'::`1'::dtor$0
_Kseparator$1 = 48
_Prefix$ = 56
_Pg$ = 64
_Adjustfield$ = 72
tv69 = 76
_Fillcount$ = 80
_Punct_fac$ = 88
tv196 = 96
tv273 = 104
tv266 = 112
_Ctype_fac$ = 120
tv132 = 128
tv269 = 136
tv249 = 144
$T2 = 152
$T3 = 160
$T4 = 176
$T5 = 192
$T6 = 208
$T7 = 224
$T8 = 240
$T9 = 256
$T10 = 272
$T11 = 288
$T12 = 304
$T13 = 320
$T14 = 336
$T15 = 352
$T16 = 368
$T17 = 384
_Groupstring$ = 400
_Grouping$ = 432
__$ArrayPad$ = 464
this$ = 512
__$ReturnUdt$ = 520
_Dest$ = 528
_Iosbase$ = 536
_Fill$ = 544
_Buf$ = 552
_Count$ = 560
?dtor$1@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput'::`1'::dtor$1
  0001b	40 55		 push	 rbp
  0001d	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00021	48 8b ea	 mov	 rbp, rdx
  00024	48 8d 8d 90 01
	00 00		 lea	 rcx, QWORD PTR _Groupstring$[rbp]
  0002b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5d		 pop	 rbp
  00035	c3		 ret	 0
?dtor$1@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput'::`1'::dtor$1
_Kseparator$1 = 48
_Prefix$ = 56
_Pg$ = 64
_Adjustfield$ = 72
tv69 = 76
_Fillcount$ = 80
_Punct_fac$ = 88
tv196 = 96
tv273 = 104
tv266 = 112
_Ctype_fac$ = 120
tv132 = 128
tv269 = 136
tv249 = 144
$T2 = 152
$T3 = 160
$T4 = 176
$T5 = 192
$T6 = 208
$T7 = 224
$T8 = 240
$T9 = 256
$T10 = 272
$T11 = 288
$T12 = 304
$T13 = 320
$T14 = 336
$T15 = 352
$T16 = 368
$T17 = 384
_Groupstring$ = 400
_Grouping$ = 432
__$ArrayPad$ = 464
this$ = 512
__$ReturnUdt$ = 520
_Dest$ = 528
_Iosbase$ = 536
_Fill$ = 544
_Buf$ = 552
_Count$ = 560
?dtor$2@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput'::`1'::dtor$2
  00036	40 55		 push	 rbp
  00038	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0003c	48 8b ea	 mov	 rbp, rdx
  0003f	48 8d 8d b0 00
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00046	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5d		 pop	 rbp
  00050	c3		 ret	 0
?dtor$2@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput'::`1'::dtor$2
_Kseparator$1 = 48
_Prefix$ = 56
_Pg$ = 64
_Adjustfield$ = 72
tv69 = 76
_Fillcount$ = 80
_Punct_fac$ = 88
tv196 = 96
tv273 = 104
tv266 = 112
_Ctype_fac$ = 120
tv132 = 128
tv269 = 136
tv249 = 144
$T2 = 152
$T3 = 160
$T4 = 176
$T5 = 192
$T6 = 208
$T7 = 224
$T8 = 240
$T9 = 256
$T10 = 272
$T11 = 288
$T12 = 304
$T13 = 320
$T14 = 336
$T15 = 352
$T16 = 368
$T17 = 384
_Groupstring$ = 400
_Grouping$ = 432
__$ArrayPad$ = 464
this$ = 512
__$ReturnUdt$ = 520
_Dest$ = 528
_Iosbase$ = 536
_Fill$ = 544
_Buf$ = 552
_Count$ = 560
?dtor$3@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput'::`1'::dtor$3
  00051	40 55		 push	 rbp
  00053	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00057	48 8b ea	 mov	 rbp, rdx
  0005a	48 8d 8d b0 01
	00 00		 lea	 rcx, QWORD PTR _Grouping$[rbp]
  00061	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00066	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006a	5d		 pop	 rbp
  0006b	c3		 ret	 0
?dtor$3@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_Kseparator$1 = 48
_Prefix$ = 56
_Pg$ = 64
_Adjustfield$ = 72
tv69 = 76
_Fillcount$ = 80
_Punct_fac$ = 88
tv196 = 96
tv273 = 104
tv266 = 112
_Ctype_fac$ = 120
tv132 = 128
tv269 = 136
tv249 = 144
$T2 = 152
$T3 = 160
$T4 = 176
$T5 = 192
$T6 = 208
$T7 = 224
$T8 = 240
$T9 = 256
$T10 = 272
$T11 = 288
$T12 = 304
$T13 = 320
$T14 = 336
$T15 = 352
$T16 = 368
$T17 = 384
_Groupstring$ = 400
_Grouping$ = 432
__$ArrayPad$ = 464
this$ = 512
__$ReturnUdt$ = 520
_Dest$ = 528
_Iosbase$ = 536
_Fill$ = 544
_Buf$ = 552
_Count$ = 560
?dtor$0@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 8d a0 00
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  00010	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$0@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_Kseparator$1 = 48
_Prefix$ = 56
_Pg$ = 64
_Adjustfield$ = 72
tv69 = 76
_Fillcount$ = 80
_Punct_fac$ = 88
tv196 = 96
tv273 = 104
tv266 = 112
_Ctype_fac$ = 120
tv132 = 128
tv269 = 136
tv249 = 144
$T2 = 152
$T3 = 160
$T4 = 176
$T5 = 192
$T6 = 208
$T7 = 224
$T8 = 240
$T9 = 256
$T10 = 272
$T11 = 288
$T12 = 304
$T13 = 320
$T14 = 336
$T15 = 352
$T16 = 368
$T17 = 384
_Groupstring$ = 400
_Grouping$ = 432
__$ArrayPad$ = 464
this$ = 512
__$ReturnUdt$ = 520
_Dest$ = 528
_Iosbase$ = 536
_Fill$ = 544
_Buf$ = 552
_Count$ = 560
?dtor$1@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput'::`1'::dtor$1
  0001b	40 55		 push	 rbp
  0001d	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00021	48 8b ea	 mov	 rbp, rdx
  00024	48 8d 8d 90 01
	00 00		 lea	 rcx, QWORD PTR _Groupstring$[rbp]
  0002b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5d		 pop	 rbp
  00035	c3		 ret	 0
?dtor$1@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_Kseparator$1 = 48
_Prefix$ = 56
_Pg$ = 64
_Adjustfield$ = 72
tv69 = 76
_Fillcount$ = 80
_Punct_fac$ = 88
tv196 = 96
tv273 = 104
tv266 = 112
_Ctype_fac$ = 120
tv132 = 128
tv269 = 136
tv249 = 144
$T2 = 152
$T3 = 160
$T4 = 176
$T5 = 192
$T6 = 208
$T7 = 224
$T8 = 240
$T9 = 256
$T10 = 272
$T11 = 288
$T12 = 304
$T13 = 320
$T14 = 336
$T15 = 352
$T16 = 368
$T17 = 384
_Groupstring$ = 400
_Grouping$ = 432
__$ArrayPad$ = 464
this$ = 512
__$ReturnUdt$ = 520
_Dest$ = 528
_Iosbase$ = 536
_Fill$ = 544
_Buf$ = 552
_Count$ = 560
?dtor$2@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput'::`1'::dtor$2
  00036	40 55		 push	 rbp
  00038	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0003c	48 8b ea	 mov	 rbp, rdx
  0003f	48 8d 8d b0 00
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00046	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5d		 pop	 rbp
  00050	c3		 ret	 0
?dtor$2@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_Kseparator$1 = 48
_Prefix$ = 56
_Pg$ = 64
_Adjustfield$ = 72
tv69 = 76
_Fillcount$ = 80
_Punct_fac$ = 88
tv196 = 96
tv273 = 104
tv266 = 112
_Ctype_fac$ = 120
tv132 = 128
tv269 = 136
tv249 = 144
$T2 = 152
$T3 = 160
$T4 = 176
$T5 = 192
$T6 = 208
$T7 = 224
$T8 = 240
$T9 = 256
$T10 = 272
$T11 = 288
$T12 = 304
$T13 = 320
$T14 = 336
$T15 = 352
$T16 = 368
$T17 = 384
_Groupstring$ = 400
_Grouping$ = 432
__$ArrayPad$ = 464
this$ = 512
__$ReturnUdt$ = 520
_Dest$ = 528
_Iosbase$ = 536
_Fill$ = 544
_Buf$ = 552
_Count$ = 560
?dtor$3@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput'::`1'::dtor$3
  00051	40 55		 push	 rbp
  00053	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00057	48 8b ea	 mov	 rbp, rdx
  0005a	48 8d 8d b0 01
	00 00		 lea	 rcx, QWORD PTR _Grouping$[rbp]
  00061	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00066	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006a	5d		 pop	 rbp
  0006b	c3		 ret	 0
?dtor$3@?0??_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z
_TEXT	SEGMENT
tv89 = 0
tv90 = 1
tv91 = 2
_Basefield$ = 4
_Ptr$ = 8
this$ = 32
_Fmt$ = 40
_Spec$ = 48
_Flags$ = 56
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt, COMDAT

; 1487 : 		{	// generate sprintf format for integer

$LN13:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 18	 sub	 rsp, 24

; 1488 : 		char *_Ptr = _Fmt;

  00018	48 8b 44 24 28	 mov	 rax, QWORD PTR _Fmt$[rsp]
  0001d	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1489 : 		*_Ptr++ = '%';

  00022	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00027	c6 00 25	 mov	 BYTE PTR [rax], 37	; 00000025H
  0002a	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  0002f	48 ff c0	 inc	 rax
  00032	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1490 : 
; 1491 : 		if (_Flags & ios_base::showpos)

  00037	8b 44 24 38	 mov	 eax, DWORD PTR _Flags$[rsp]
  0003b	83 e0 20	 and	 eax, 32			; 00000020H
  0003e	85 c0		 test	 eax, eax
  00040	74 15		 je	 SHORT $LN2@Ifmt

; 1492 : 			*_Ptr++ = '+';

  00042	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00047	c6 00 2b	 mov	 BYTE PTR [rax], 43	; 0000002bH
  0004a	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  0004f	48 ff c0	 inc	 rax
  00052	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax
$LN2@Ifmt:

; 1493 : 		if (_Flags & ios_base::showbase)

  00057	8b 44 24 38	 mov	 eax, DWORD PTR _Flags$[rsp]
  0005b	83 e0 08	 and	 eax, 8
  0005e	85 c0		 test	 eax, eax
  00060	74 15		 je	 SHORT $LN3@Ifmt

; 1494 : 			*_Ptr++ = '#';

  00062	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00067	c6 00 23	 mov	 BYTE PTR [rax], 35	; 00000023H
  0006a	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  0006f	48 ff c0	 inc	 rax
  00072	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax
$LN3@Ifmt:

; 1495 : 		if (_Spec[0] != 'L')

  00077	b8 01 00 00 00	 mov	 eax, 1
  0007c	48 6b c0 00	 imul	 rax, rax, 0
  00080	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Spec$[rsp]
  00085	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00089	83 f8 4c	 cmp	 eax, 76			; 0000004cH
  0008c	74 28		 je	 SHORT $LN4@Ifmt

; 1496 : 			*_Ptr++ = _Spec[0];	// qualifier

  0008e	b8 01 00 00 00	 mov	 eax, 1
  00093	48 6b c0 00	 imul	 rax, rax, 0
  00097	48 8b 4c 24 08	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  0009c	48 8b 54 24 30	 mov	 rdx, QWORD PTR _Spec$[rsp]
  000a1	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  000a5	88 01		 mov	 BYTE PTR [rcx], al
  000a7	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  000ac	48 ff c0	 inc	 rax
  000af	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1497 : 		else

  000b4	eb 3f		 jmp	 SHORT $LN5@Ifmt
$LN4@Ifmt:

; 1498 : 
; 1499 : 			{	/* change L to I64 */
; 1500 : 			*_Ptr++ = 'I';

  000b6	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  000bb	c6 00 49	 mov	 BYTE PTR [rax], 73	; 00000049H
  000be	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  000c3	48 ff c0	 inc	 rax
  000c6	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1501 : 			*_Ptr++ = '6';

  000cb	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  000d0	c6 00 36	 mov	 BYTE PTR [rax], 54	; 00000036H
  000d3	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  000d8	48 ff c0	 inc	 rax
  000db	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1502 : 			*_Ptr++ = '4';

  000e0	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  000e5	c6 00 34	 mov	 BYTE PTR [rax], 52	; 00000034H
  000e8	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  000ed	48 ff c0	 inc	 rax
  000f0	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax
$LN5@Ifmt:

; 1503 : 			}
; 1504 : 
; 1505 : 		ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

  000f5	8b 44 24 38	 mov	 eax, DWORD PTR _Flags$[rsp]
  000f9	25 00 0e 00 00	 and	 eax, 3584		; 00000e00H
  000fe	89 44 24 04	 mov	 DWORD PTR _Basefield$[rsp], eax

; 1506 : 		*_Ptr++ = _Basefield == ios_base::oct ? 'o'

  00102	81 7c 24 04 00
	04 00 00	 cmp	 DWORD PTR _Basefield$[rsp], 1024 ; 00000400H
  0010a	75 07		 jne	 SHORT $LN11@Ifmt
  0010c	c6 44 24 02 6f	 mov	 BYTE PTR tv91[rsp], 111	; 0000006fH
  00111	eb 48		 jmp	 SHORT $LN12@Ifmt
$LN11@Ifmt:
  00113	81 7c 24 04 00
	08 00 00	 cmp	 DWORD PTR _Basefield$[rsp], 2048 ; 00000800H
  0011b	74 18		 je	 SHORT $LN9@Ifmt
  0011d	b8 01 00 00 00	 mov	 eax, 1
  00122	48 6b c0 01	 imul	 rax, rax, 1
  00126	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Spec$[rsp]
  0012b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0012f	88 44 24 01	 mov	 BYTE PTR tv90[rsp], al
  00133	eb 1d		 jmp	 SHORT $LN10@Ifmt
$LN9@Ifmt:
  00135	8b 44 24 38	 mov	 eax, DWORD PTR _Flags$[rsp]
  00139	83 e0 04	 and	 eax, 4
  0013c	85 c0		 test	 eax, eax
  0013e	74 06		 je	 SHORT $LN7@Ifmt
  00140	c6 04 24 58	 mov	 BYTE PTR tv89[rsp], 88	; 00000058H
  00144	eb 04		 jmp	 SHORT $LN8@Ifmt
$LN7@Ifmt:
  00146	c6 04 24 78	 mov	 BYTE PTR tv89[rsp], 120	; 00000078H
$LN8@Ifmt:
  0014a	0f b6 04 24	 movzx	 eax, BYTE PTR tv89[rsp]
  0014e	88 44 24 01	 mov	 BYTE PTR tv90[rsp], al
$LN10@Ifmt:
  00152	0f b6 44 24 01	 movzx	 eax, BYTE PTR tv90[rsp]
  00157	88 44 24 02	 mov	 BYTE PTR tv91[rsp], al
$LN12@Ifmt:
  0015b	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00160	0f b6 4c 24 02	 movzx	 ecx, BYTE PTR tv91[rsp]
  00165	88 08		 mov	 BYTE PTR [rax], cl
  00167	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  0016c	48 ff c0	 inc	 rax
  0016f	48 89 44 24 08	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1507 : 			: _Basefield != ios_base::hex ? _Spec[1]	// 'd' or 'u'
; 1508 : 			: _Flags & ios_base::uppercase ? 'X' : 'x';
; 1509 : 		*_Ptr = '\0';

  00174	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00179	c6 00 00	 mov	 BYTE PTR [rax], 0

; 1510 : 		return (_Fmt);

  0017c	48 8b 44 24 28	 mov	 rax, QWORD PTR _Fmt$[rsp]

; 1511 : 		}

  00181	48 83 c4 18	 add	 rsp, 24
  00185	c3		 ret	 0
?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z
_TEXT	SEGMENT
tv240 = 48
_Kseparator$ = 49
_Prefix$ = 56
_Dp$ = 64
_Adjustfield$ = 68
_Pg$ = 72
tv69 = 80
_Fillcount$ = 88
_Poff$ = 96
_Off$ = 104
_Punct_fac$ = 112
_Exps$ = 120
tv192 = 128
tv225 = 136
tv302 = 144
tv295 = 152
_Ctype_fac$ = 160
tv157 = 168
tv298 = 176
_Eoff$ = 184
tv278 = 192
$T1 = 200
$T2 = 208
$T3 = 224
$T4 = 240
$T5 = 256
$T6 = 272
$T7 = 288
$T8 = 304
$T9 = 320
$T10 = 336
$T11 = 352
$T12 = 368
$T13 = 384
$T14 = 400
$T15 = 416
$T16 = 432
_Groupstring$ = 448
_Grouping$ = 480
__$ArrayPad$ = 512
this$ = 560
__$ReturnUdt$ = 568
_Dest$ = 576
_Iosbase$ = 584
_Fill$ = 592
_Buf$ = 600
_Count$ = 608
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput, COMDAT

; 1413 : 		{	// put formatted floating-point to _Dest

$LN26:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 18 02
	00 00		 sub	 rsp, 536		; 00000218H
  0001d	48 c7 84 24 c8
	00 00 00 fe ff
	ff ff		 mov	 QWORD PTR $T1[rsp], -2
  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00030	48 33 c4	 xor	 rax, rsp
  00033	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1414 : 		_DEBUG_POINTER(_Dest);
; 1415 : 		size_t _Prefix = 0 < _Count && (*_Buf == '+' || *_Buf == '-')

  0003b	48 83 bc 24 60
	02 00 00 00	 cmp	 QWORD PTR _Count$[rsp], 0
  00044	76 2a		 jbe	 SHORT $LN16@Fput
  00046	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR _Buf$[rsp]
  0004e	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00051	83 f8 2b	 cmp	 eax, 43			; 0000002bH
  00054	74 10		 je	 SHORT $LN15@Fput
  00056	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR _Buf$[rsp]
  0005e	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00061	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  00064	75 0a		 jne	 SHORT $LN16@Fput
$LN15@Fput:
  00066	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv69[rsp], 1
  0006e	eb 08		 jmp	 SHORT $LN17@Fput
$LN16@Fput:
  00070	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv69[rsp], 0
$LN17@Fput:
  00078	48 63 44 24 50	 movsxd	 rax, DWORD PTR tv69[rsp]
  0007d	48 89 44 24 38	 mov	 QWORD PTR _Prefix$[rsp], rax

; 1416 : 			? 1 : 0;
; 1417 : 
; 1418 : 		const char *_Exps;
; 1419 : 		if ((_Iosbase.flags() & ios_base::floatfield) != ios_base::hexfloat)

  00082	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  0008a	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  0008f	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  00094	3d 00 30 00 00	 cmp	 eax, 12288		; 00003000H
  00099	74 11		 je	 SHORT $LN4@Fput

; 1420 : 			_Exps = "eE";

  0009b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02MDKMJEGG@eE?$AA@
  000a2	48 89 44 24 78	 mov	 QWORD PTR _Exps$[rsp], rax

; 1421 : 		else

  000a7	e9 80 00 00 00	 jmp	 $LN5@Fput
$LN4@Fput:

; 1422 : 			{	// correct for hexadecimal floating-point
; 1423 : 			_Exps = "pP";

  000ac	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02OOPEBDOJ@pP?$AA@
  000b3	48 89 44 24 78	 mov	 QWORD PTR _Exps$[rsp], rax

; 1424 : 			if (_Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
; 1425 : 				&& (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X'))

  000b8	48 8b 44 24 38	 mov	 rax, QWORD PTR _Prefix$[rsp]
  000bd	48 83 c0 02	 add	 rax, 2
  000c1	48 3b 84 24 60
	02 00 00	 cmp	 rax, QWORD PTR _Count$[rsp]
  000c9	77 61		 ja	 SHORT $LN5@Fput
  000cb	48 8b 44 24 38	 mov	 rax, QWORD PTR _Prefix$[rsp]
  000d0	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR _Buf$[rsp]
  000d8	48 03 c8	 add	 rcx, rax
  000db	48 8b c1	 mov	 rax, rcx
  000de	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000e1	83 f8 30	 cmp	 eax, 48			; 00000030H
  000e4	75 46		 jne	 SHORT $LN5@Fput
  000e6	48 8b 44 24 38	 mov	 rax, QWORD PTR _Prefix$[rsp]
  000eb	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR _Buf$[rsp]
  000f3	48 03 c8	 add	 rcx, rax
  000f6	48 8b c1	 mov	 rax, rcx
  000f9	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  000fd	83 f8 78	 cmp	 eax, 120		; 00000078H
  00100	74 1c		 je	 SHORT $LN7@Fput
  00102	48 8b 44 24 38	 mov	 rax, QWORD PTR _Prefix$[rsp]
  00107	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR _Buf$[rsp]
  0010f	48 03 c8	 add	 rcx, rax
  00112	48 8b c1	 mov	 rax, rcx
  00115	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  00119	83 f8 58	 cmp	 eax, 88			; 00000058H
  0011c	75 0e		 jne	 SHORT $LN5@Fput
$LN7@Fput:

; 1426 : 				_Prefix += 2;

  0011e	48 8b 44 24 38	 mov	 rax, QWORD PTR _Prefix$[rsp]
  00123	48 83 c0 02	 add	 rax, 2
  00127	48 89 44 24 38	 mov	 QWORD PTR _Prefix$[rsp], rax
$LN5@Fput:

; 1427 : 			}
; 1428 : 		const size_t _Eoff =
; 1429 : 			_CSTD strcspn(&_Buf[0], _Exps);	// find exponent

  0012c	b8 01 00 00 00	 mov	 eax, 1
  00131	48 6b c0 00	 imul	 rax, rax, 0
  00135	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR _Buf$[rsp]
  0013d	48 03 c8	 add	 rcx, rax
  00140	48 8b c1	 mov	 rax, rcx
  00143	48 8b 54 24 78	 mov	 rdx, QWORD PTR _Exps$[rsp]
  00148	48 8b c8	 mov	 rcx, rax
  0014b	e8 00 00 00 00	 call	 strcspn
  00150	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR _Eoff$[rsp], rax

; 1430 : 		char _Dp[2] = {"."};

  00158	0f b7 05 00 00
	00 00		 movzx	 eax, WORD PTR ??_C@_01LFCBOECM@?4?$AA@
  0015f	66 89 44 24 40	 mov	 WORD PTR _Dp$[rsp], ax

; 1431 : 		_Dp[0] = _CSTD localeconv()->decimal_point[0];

  00164	e8 00 00 00 00	 call	 localeconv
  00169	b9 01 00 00 00	 mov	 ecx, 1
  0016e	48 6b c9 00	 imul	 rcx, rcx, 0
  00172	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00175	ba 01 00 00 00	 mov	 edx, 1
  0017a	48 6b d2 00	 imul	 rdx, rdx, 0
  0017e	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00182	88 44 14 40	 mov	 BYTE PTR _Dp$[rsp+rdx], al

; 1432 : 		const size_t _Poff =
; 1433 : 			_CSTD strcspn(&_Buf[0], &_Dp[0]);	// find decimal point

  00186	b8 01 00 00 00	 mov	 eax, 1
  0018b	48 6b c0 00	 imul	 rax, rax, 0
  0018f	48 8d 44 04 40	 lea	 rax, QWORD PTR _Dp$[rsp+rax]
  00194	b9 01 00 00 00	 mov	 ecx, 1
  00199	48 6b c9 00	 imul	 rcx, rcx, 0
  0019d	48 8b 94 24 58
	02 00 00	 mov	 rdx, QWORD PTR _Buf$[rsp]
  001a5	48 03 d1	 add	 rdx, rcx
  001a8	48 8b ca	 mov	 rcx, rdx
  001ab	48 8b d0	 mov	 rdx, rax
  001ae	e8 00 00 00 00	 call	 strcspn
  001b3	48 89 44 24 60	 mov	 QWORD PTR _Poff$[rsp], rax

; 1434 : 
; 1435 : 		const ctype<_Elem>& _Ctype_fac =

  001b8	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR $T2[rsp]
  001c0	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  001c8	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QEBA?AVlocale@2@XZ ; std::ios_base::getloc
  001cd	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv302[rsp], rax
  001d5	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv302[rsp]
  001dd	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv295[rsp], rax
  001e5	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv295[rsp]
  001ed	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  001f2	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR _Ctype_fac$[rsp], rax
  001fa	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR $T2[rsp]
  00202	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale

; 1436 : 			_USE(_Iosbase.getloc(), ctype<_Elem>);
; 1437 : 		_Mystr _Groupstring(_Count, _Elem(0));	// reserve space

  00207	45 33 c0	 xor	 r8d, r8d
  0020a	48 8b 94 24 60
	02 00 00	 mov	 rdx, QWORD PTR _Count$[rsp]
  00212	48 8d 8c 24 c0
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  0021a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0021f	90		 npad	 1

; 1438 : 		_Ctype_fac.widen(&_Buf[0], &_Buf[_Count], &_Groupstring[0]);

  00220	33 d2		 xor	 edx, edx
  00222	48 8d 8c 24 c0
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  0022a	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0022f	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR _Count$[rsp]
  00237	48 8b 94 24 58
	02 00 00	 mov	 rdx, QWORD PTR _Buf$[rsp]
  0023f	48 03 d1	 add	 rdx, rcx
  00242	48 8b ca	 mov	 rcx, rdx
  00245	ba 01 00 00 00	 mov	 edx, 1
  0024a	48 6b d2 00	 imul	 rdx, rdx, 0
  0024e	4c 8b 84 24 58
	02 00 00	 mov	 r8, QWORD PTR _Buf$[rsp]
  00256	4c 03 c2	 add	 r8, rdx
  00259	49 8b d0	 mov	 rdx, r8
  0025c	4c 8b c8	 mov	 r9, rax
  0025f	4c 8b c1	 mov	 r8, rcx
  00262	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR _Ctype_fac$[rsp]
  0026a	e8 00 00 00 00	 call	 ?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z ; std::ctype<char>::widen

; 1439 : 
; 1440 : 		const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  0026f	48 8d 94 24 e0
	00 00 00	 lea	 rdx, QWORD PTR $T3[rsp]
  00277	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  0027f	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QEBA?AVlocale@2@XZ ; std::ios_base::getloc
  00284	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv157[rsp], rax
  0028c	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR tv157[rsp]
  00294	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv298[rsp], rax
  0029c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv298[rsp]
  002a4	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  002a9	48 89 44 24 70	 mov	 QWORD PTR _Punct_fac$[rsp], rax
  002ae	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR $T3[rsp]
  002b6	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale

; 1441 : 		const string _Grouping = _Punct_fac.grouping();

  002bb	48 8d 94 24 e0
	01 00 00	 lea	 rdx, QWORD PTR _Grouping$[rsp]
  002c3	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Punct_fac$[rsp]
  002c8	e8 00 00 00 00	 call	 ?grouping@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::grouping
  002cd	90		 npad	 1

; 1442 : 		const _Elem _Kseparator = _Punct_fac.thousands_sep();

  002ce	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Punct_fac$[rsp]
  002d3	e8 00 00 00 00	 call	 ?thousands_sep@?$numpunct@D@std@@QEBADXZ ; std::numpunct<char>::thousands_sep
  002d8	88 44 24 31	 mov	 BYTE PTR _Kseparator$[rsp], al

; 1443 : 
; 1444 : 		if (_Poff != _Count)

  002dc	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR _Count$[rsp]
  002e4	48 39 44 24 60	 cmp	 QWORD PTR _Poff$[rsp], rax
  002e9	74 27		 je	 SHORT $LN8@Fput

; 1445 : 			_Groupstring[_Poff] = _Punct_fac.decimal_point();

  002eb	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Punct_fac$[rsp]
  002f0	e8 00 00 00 00	 call	 ?decimal_point@?$numpunct@D@std@@QEBADXZ ; std::numpunct<char>::decimal_point
  002f5	88 44 24 30	 mov	 BYTE PTR tv240[rsp], al
  002f9	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Poff$[rsp]
  002fe	48 8d 8c 24 c0
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  00306	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0030b	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR tv240[rsp]
  00310	88 08		 mov	 BYTE PTR [rax], cl
$LN8@Fput:

; 1446 : 
; 1447 : 		size_t _Off = _Poff == _Count ? _Eoff : _Poff;

  00312	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR _Count$[rsp]
  0031a	48 39 44 24 60	 cmp	 QWORD PTR _Poff$[rsp], rax
  0031f	75 12		 jne	 SHORT $LN18@Fput
  00321	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR _Eoff$[rsp]
  00329	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv192[rsp], rax
  00331	eb 0d		 jmp	 SHORT $LN19@Fput
$LN18@Fput:
  00333	48 8b 44 24 60	 mov	 rax, QWORD PTR _Poff$[rsp]
  00338	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv192[rsp], rax
$LN19@Fput:
  00340	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv192[rsp]
  00348	48 89 44 24 68	 mov	 QWORD PTR _Off$[rsp], rax

; 1448 : 		const char *_Pg = &_Grouping[0];

  0034d	33 d2		 xor	 edx, edx
  0034f	48 8d 8c 24 e0
	01 00 00	 lea	 rcx, QWORD PTR _Grouping$[rsp]
  00357	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0035c	48 89 44 24 48	 mov	 QWORD PTR _Pg$[rsp], rax
$LN2@Fput:

; 1449 : 		while (*_Pg != CHAR_MAX && '\0' < *_Pg
; 1450 : 			&& (size_t)*_Pg < _Off - _Prefix)

  00361	48 8b 44 24 48	 mov	 rax, QWORD PTR _Pg$[rsp]
  00366	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00369	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  0036c	0f 84 89 00 00
	00		 je	 $LN3@Fput
  00372	48 8b 44 24 48	 mov	 rax, QWORD PTR _Pg$[rsp]
  00377	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0037a	85 c0		 test	 eax, eax
  0037c	7e 7d		 jle	 SHORT $LN3@Fput
  0037e	48 8b 44 24 48	 mov	 rax, QWORD PTR _Pg$[rsp]
  00383	48 0f be 00	 movsx	 rax, BYTE PTR [rax]
  00387	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Prefix$[rsp]
  0038c	48 8b 54 24 68	 mov	 rdx, QWORD PTR _Off$[rsp]
  00391	48 2b d1	 sub	 rdx, rcx
  00394	48 8b ca	 mov	 rcx, rdx
  00397	48 3b c1	 cmp	 rax, rcx
  0039a	73 5f		 jae	 SHORT $LN3@Fput

; 1451 : 			{	// add thousands separator
; 1452 : 			_Groupstring.insert(_Off -= *_Pg, (size_t)1, _Kseparator);

  0039c	48 8b 44 24 48	 mov	 rax, QWORD PTR _Pg$[rsp]
  003a1	48 0f be 00	 movsx	 rax, BYTE PTR [rax]
  003a5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Off$[rsp]
  003aa	48 2b c8	 sub	 rcx, rax
  003ad	48 8b c1	 mov	 rax, rcx
  003b0	48 89 44 24 68	 mov	 QWORD PTR _Off$[rsp], rax
  003b5	44 0f b6 4c 24
	31		 movzx	 r9d, BYTE PTR _Kseparator$[rsp]
  003bb	41 b8 01 00 00
	00		 mov	 r8d, 1
  003c1	48 8b 54 24 68	 mov	 rdx, QWORD PTR _Off$[rsp]
  003c6	48 8d 8c 24 c0
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  003ce	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1453 : 			if ('\0' < _Pg[1])

  003d3	b8 01 00 00 00	 mov	 eax, 1
  003d8	48 6b c0 01	 imul	 rax, rax, 1
  003dc	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Pg$[rsp]
  003e1	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  003e5	85 c0		 test	 eax, eax
  003e7	7e 0d		 jle	 SHORT $LN9@Fput

; 1454 : 				++_Pg;	// not last group, advance

  003e9	48 8b 44 24 48	 mov	 rax, QWORD PTR _Pg$[rsp]
  003ee	48 ff c0	 inc	 rax
  003f1	48 89 44 24 48	 mov	 QWORD PTR _Pg$[rsp], rax
$LN9@Fput:

; 1455 : 			}

  003f6	e9 66 ff ff ff	 jmp	 $LN2@Fput
$LN3@Fput:

; 1456 : 
; 1457 : 		_Count = _Groupstring.size();

  003fb	48 8d 8c 24 c0
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  00403	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00408	48 89 84 24 60
	02 00 00	 mov	 QWORD PTR _Count$[rsp], rax

; 1458 : 		size_t _Fillcount = _Iosbase.width() <= 0
; 1459 : 			|| (size_t)_Iosbase.width() <= _Count

  00410	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00418	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  0041d	48 85 c0	 test	 rax, rax
  00420	7e 36		 jle	 SHORT $LN20@Fput
  00422	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  0042a	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  0042f	48 3b 84 24 60
	02 00 00	 cmp	 rax, QWORD PTR _Count$[rsp]
  00437	76 1f		 jbe	 SHORT $LN20@Fput
  00439	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00441	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  00446	48 2b 84 24 60
	02 00 00	 sub	 rax, QWORD PTR _Count$[rsp]
  0044e	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv225[rsp], rax
  00456	eb 0c		 jmp	 SHORT $LN21@Fput
$LN20@Fput:
  00458	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv225[rsp], 0
$LN21@Fput:
  00464	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv225[rsp]
  0046c	48 89 44 24 58	 mov	 QWORD PTR _Fillcount$[rsp], rax

; 1460 : 				? 0 : (size_t)_Iosbase.width() - _Count;
; 1461 : 
; 1462 : 		ios_base::fmtflags _Adjustfield =
; 1463 : 			_Iosbase.flags() & ios_base::adjustfield;

  00471	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00479	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  0047e	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00483	89 44 24 44	 mov	 DWORD PTR _Adjustfield$[rsp], eax

; 1464 : 		if (_Adjustfield != ios_base::left
; 1465 : 			&& _Adjustfield != ios_base::internal)

  00487	83 7c 24 44 40	 cmp	 DWORD PTR _Adjustfield$[rsp], 64 ; 00000040H
  0048c	0f 84 dd 00 00
	00		 je	 $LN10@Fput
  00492	81 7c 24 44 00
	01 00 00	 cmp	 DWORD PTR _Adjustfield$[rsp], 256 ; 00000100H
  0049a	0f 84 cf 00 00
	00		 je	 $LN10@Fput

; 1466 : 			{	// put leading fill
; 1467 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  004a0	48 8d 84 24 f0
	00 00 00	 lea	 rax, QWORD PTR $T4[rsp]
  004a8	48 8b f8	 mov	 rdi, rax
  004ab	48 8b b4 24 40
	02 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  004b3	b9 10 00 00 00	 mov	 ecx, 16
  004b8	f3 a4		 rep movsb
  004ba	48 8b 44 24 58	 mov	 rax, QWORD PTR _Fillcount$[rsp]
  004bf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004c4	44 0f b6 8c 24
	50 02 00 00	 movzx	 r9d, BYTE PTR _Fill$[rsp]
  004cd	4c 8d 84 24 f0
	00 00 00	 lea	 r8, QWORD PTR $T4[rsp]
  004d5	48 8d 94 24 60
	01 00 00	 lea	 rdx, QWORD PTR $T11[rsp]
  004dd	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  004e5	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  004ea	48 8b bc 24 40
	02 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  004f2	48 8b f0	 mov	 rsi, rax
  004f5	b9 10 00 00 00	 mov	 ecx, 16
  004fa	f3 a4		 rep movsb

; 1468 : 			_Fillcount = 0;

  004fc	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR _Fillcount$[rsp], 0

; 1469 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  00505	33 d2		 xor	 edx, edx
  00507	48 8d 8c 24 c0
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  0050f	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00514	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR $T5[rsp]
  0051c	48 8b f9	 mov	 rdi, rcx
  0051f	48 8b b4 24 40
	02 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  00527	b9 10 00 00 00	 mov	 ecx, 16
  0052c	f3 a4		 rep movsb
  0052e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Prefix$[rsp]
  00533	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00538	4c 8b c8	 mov	 r9, rax
  0053b	4c 8d 84 24 00
	01 00 00	 lea	 r8, QWORD PTR $T5[rsp]
  00543	48 8d 94 24 70
	01 00 00	 lea	 rdx, QWORD PTR $T12[rsp]
  0054b	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00553	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  00558	48 8b bc 24 40
	02 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  00560	48 8b f0	 mov	 rsi, rax
  00563	b9 10 00 00 00	 mov	 ecx, 16
  00568	f3 a4		 rep movsb
  0056a	e9 3f 01 00 00	 jmp	 $LN11@Fput
$LN10@Fput:

; 1470 : 			}
; 1471 : 		else if (_Adjustfield == ios_base::internal)

  0056f	81 7c 24 44 00
	01 00 00	 cmp	 DWORD PTR _Adjustfield$[rsp], 256 ; 00000100H
  00577	0f 85 cc 00 00
	00		 jne	 $LN12@Fput

; 1472 : 			{	// put internal fill
; 1473 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  0057d	33 d2		 xor	 edx, edx
  0057f	48 8d 8c 24 c0
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  00587	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  0058c	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR $T6[rsp]
  00594	48 8b f9	 mov	 rdi, rcx
  00597	48 8b b4 24 40
	02 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  0059f	b9 10 00 00 00	 mov	 ecx, 16
  005a4	f3 a4		 rep movsb
  005a6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Prefix$[rsp]
  005ab	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  005b0	4c 8b c8	 mov	 r9, rax
  005b3	4c 8d 84 24 10
	01 00 00	 lea	 r8, QWORD PTR $T6[rsp]
  005bb	48 8d 94 24 80
	01 00 00	 lea	 rdx, QWORD PTR $T13[rsp]
  005c3	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  005cb	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  005d0	48 8b bc 24 40
	02 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  005d8	48 8b f0	 mov	 rsi, rax
  005db	b9 10 00 00 00	 mov	 ecx, 16
  005e0	f3 a4		 rep movsb

; 1474 : 			_Dest = _Rep(_Dest, _Fill, _Fillcount);

  005e2	48 8d 84 24 20
	01 00 00	 lea	 rax, QWORD PTR $T7[rsp]
  005ea	48 8b f8	 mov	 rdi, rax
  005ed	48 8b b4 24 40
	02 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  005f5	b9 10 00 00 00	 mov	 ecx, 16
  005fa	f3 a4		 rep movsb
  005fc	48 8b 44 24 58	 mov	 rax, QWORD PTR _Fillcount$[rsp]
  00601	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00606	44 0f b6 8c 24
	50 02 00 00	 movzx	 r9d, BYTE PTR _Fill$[rsp]
  0060f	4c 8d 84 24 20
	01 00 00	 lea	 r8, QWORD PTR $T7[rsp]
  00617	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR $T14[rsp]
  0061f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00627	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0062c	48 8b bc 24 40
	02 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  00634	48 8b f0	 mov	 rsi, rax
  00637	b9 10 00 00 00	 mov	 ecx, 16
  0063c	f3 a4		 rep movsb

; 1475 : 			_Fillcount = 0;

  0063e	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR _Fillcount$[rsp], 0

; 1476 : 			}
; 1477 : 		else

  00647	eb 65		 jmp	 SHORT $LN11@Fput
$LN12@Fput:

; 1478 : 			_Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  00649	33 d2		 xor	 edx, edx
  0064b	48 8d 8c 24 c0
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  00653	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  00658	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR $T8[rsp]
  00660	48 8b f9	 mov	 rdi, rcx
  00663	48 8b b4 24 40
	02 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  0066b	b9 10 00 00 00	 mov	 ecx, 16
  00670	f3 a4		 rep movsb
  00672	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Prefix$[rsp]
  00677	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0067c	4c 8b c8	 mov	 r9, rax
  0067f	4c 8d 84 24 30
	01 00 00	 lea	 r8, QWORD PTR $T8[rsp]
  00687	48 8d 94 24 a0
	01 00 00	 lea	 rdx, QWORD PTR $T15[rsp]
  0068f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00697	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  0069c	48 8b bc 24 40
	02 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  006a4	48 8b f0	 mov	 rsi, rax
  006a7	b9 10 00 00 00	 mov	 ecx, 16
  006ac	f3 a4		 rep movsb
$LN11@Fput:

; 1479 : 
; 1480 : 		_Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  006ae	48 8b 44 24 38	 mov	 rax, QWORD PTR _Prefix$[rsp]
  006b3	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR _Count$[rsp]
  006bb	48 2b c8	 sub	 rcx, rax
  006be	48 8b c1	 mov	 rax, rcx
  006c1	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv278[rsp], rax
  006c9	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Prefix$[rsp]
  006ce	48 8d 8c 24 c0
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  006d6	e8 00 00 00 00	 call	 ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
  006db	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR $T9[rsp]
  006e3	48 8b f9	 mov	 rdi, rcx
  006e6	48 8b b4 24 40
	02 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  006ee	b9 10 00 00 00	 mov	 ecx, 16
  006f3	f3 a4		 rep movsb
  006f5	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tv278[rsp]
  006fd	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00702	4c 8b c8	 mov	 r9, rax
  00705	4c 8d 84 24 40
	01 00 00	 lea	 r8, QWORD PTR $T9[rsp]
  0070d	48 8d 94 24 b0
	01 00 00	 lea	 rdx, QWORD PTR $T16[rsp]
  00715	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0071d	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  00722	48 8b bc 24 40
	02 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  0072a	48 8b f0	 mov	 rsi, rax
  0072d	b9 10 00 00 00	 mov	 ecx, 16
  00732	f3 a4		 rep movsb

; 1481 : 		_Iosbase.width(0);

  00734	33 d2		 xor	 edx, edx
  00736	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  0073e	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEAA_J_J@Z ; std::ios_base::width

; 1482 : 		return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  00743	48 8d 84 24 50
	01 00 00	 lea	 rax, QWORD PTR $T10[rsp]
  0074b	48 8b f8	 mov	 rdi, rax
  0074e	48 8b b4 24 40
	02 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  00756	b9 10 00 00 00	 mov	 ecx, 16
  0075b	f3 a4		 rep movsb
  0075d	48 8b 44 24 58	 mov	 rax, QWORD PTR _Fillcount$[rsp]
  00762	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00767	44 0f b6 8c 24
	50 02 00 00	 movzx	 r9d, BYTE PTR _Fill$[rsp]
  00770	4c 8d 84 24 50
	01 00 00	 lea	 r8, QWORD PTR $T10[rsp]
  00778	48 8b 94 24 38
	02 00 00	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  00780	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00788	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0078d	90		 npad	 1
  0078e	48 8d 8c 24 e0
	01 00 00	 lea	 rcx, QWORD PTR _Grouping$[rsp]
  00796	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0079b	90		 npad	 1
  0079c	48 8d 8c 24 c0
	01 00 00	 lea	 rcx, QWORD PTR _Groupstring$[rsp]
  007a4	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  007a9	48 8b 84 24 38
	02 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1483 : 		}

  007b1	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  007b9	48 33 cc	 xor	 rcx, rsp
  007bc	e8 00 00 00 00	 call	 __security_check_cookie
  007c1	48 81 c4 18 02
	00 00		 add	 rsp, 536		; 00000218H
  007c8	5f		 pop	 rdi
  007c9	5e		 pop	 rsi
  007ca	c3		 ret	 0
?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
tv240 = 48
_Kseparator$ = 49
_Prefix$ = 56
_Dp$ = 64
_Adjustfield$ = 68
_Pg$ = 72
tv69 = 80
_Fillcount$ = 88
_Poff$ = 96
_Off$ = 104
_Punct_fac$ = 112
_Exps$ = 120
tv192 = 128
tv225 = 136
tv302 = 144
tv295 = 152
_Ctype_fac$ = 160
tv157 = 168
tv298 = 176
_Eoff$ = 184
tv278 = 192
$T1 = 200
$T2 = 208
$T3 = 224
$T4 = 240
$T5 = 256
$T6 = 272
$T7 = 288
$T8 = 304
$T9 = 320
$T10 = 336
$T11 = 352
$T12 = 368
$T13 = 384
$T14 = 400
$T15 = 416
$T16 = 432
_Groupstring$ = 448
_Grouping$ = 480
__$ArrayPad$ = 512
this$ = 560
__$ReturnUdt$ = 568
_Dest$ = 576
_Iosbase$ = 584
_Fill$ = 592
_Buf$ = 600
_Count$ = 608
?dtor$0@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 8d d0 00
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  00010	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$0@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput'::`1'::dtor$0
tv240 = 48
_Kseparator$ = 49
_Prefix$ = 56
_Dp$ = 64
_Adjustfield$ = 68
_Pg$ = 72
tv69 = 80
_Fillcount$ = 88
_Poff$ = 96
_Off$ = 104
_Punct_fac$ = 112
_Exps$ = 120
tv192 = 128
tv225 = 136
tv302 = 144
tv295 = 152
_Ctype_fac$ = 160
tv157 = 168
tv298 = 176
_Eoff$ = 184
tv278 = 192
$T1 = 200
$T2 = 208
$T3 = 224
$T4 = 240
$T5 = 256
$T6 = 272
$T7 = 288
$T8 = 304
$T9 = 320
$T10 = 336
$T11 = 352
$T12 = 368
$T13 = 384
$T14 = 400
$T15 = 416
$T16 = 432
_Groupstring$ = 448
_Grouping$ = 480
__$ArrayPad$ = 512
this$ = 560
__$ReturnUdt$ = 568
_Dest$ = 576
_Iosbase$ = 584
_Fill$ = 592
_Buf$ = 600
_Count$ = 608
?dtor$1@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput'::`1'::dtor$1
  0001b	40 55		 push	 rbp
  0001d	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00021	48 8b ea	 mov	 rbp, rdx
  00024	48 8d 8d c0 01
	00 00		 lea	 rcx, QWORD PTR _Groupstring$[rbp]
  0002b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5d		 pop	 rbp
  00035	c3		 ret	 0
?dtor$1@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput'::`1'::dtor$1
tv240 = 48
_Kseparator$ = 49
_Prefix$ = 56
_Dp$ = 64
_Adjustfield$ = 68
_Pg$ = 72
tv69 = 80
_Fillcount$ = 88
_Poff$ = 96
_Off$ = 104
_Punct_fac$ = 112
_Exps$ = 120
tv192 = 128
tv225 = 136
tv302 = 144
tv295 = 152
_Ctype_fac$ = 160
tv157 = 168
tv298 = 176
_Eoff$ = 184
tv278 = 192
$T1 = 200
$T2 = 208
$T3 = 224
$T4 = 240
$T5 = 256
$T6 = 272
$T7 = 288
$T8 = 304
$T9 = 320
$T10 = 336
$T11 = 352
$T12 = 368
$T13 = 384
$T14 = 400
$T15 = 416
$T16 = 432
_Groupstring$ = 448
_Grouping$ = 480
__$ArrayPad$ = 512
this$ = 560
__$ReturnUdt$ = 568
_Dest$ = 576
_Iosbase$ = 584
_Fill$ = 592
_Buf$ = 600
_Count$ = 608
?dtor$2@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput'::`1'::dtor$2
  00036	40 55		 push	 rbp
  00038	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0003c	48 8b ea	 mov	 rbp, rdx
  0003f	48 8d 8d e0 00
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  00046	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5d		 pop	 rbp
  00050	c3		 ret	 0
?dtor$2@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput'::`1'::dtor$2
tv240 = 48
_Kseparator$ = 49
_Prefix$ = 56
_Dp$ = 64
_Adjustfield$ = 68
_Pg$ = 72
tv69 = 80
_Fillcount$ = 88
_Poff$ = 96
_Off$ = 104
_Punct_fac$ = 112
_Exps$ = 120
tv192 = 128
tv225 = 136
tv302 = 144
tv295 = 152
_Ctype_fac$ = 160
tv157 = 168
tv298 = 176
_Eoff$ = 184
tv278 = 192
$T1 = 200
$T2 = 208
$T3 = 224
$T4 = 240
$T5 = 256
$T6 = 272
$T7 = 288
$T8 = 304
$T9 = 320
$T10 = 336
$T11 = 352
$T12 = 368
$T13 = 384
$T14 = 400
$T15 = 416
$T16 = 432
_Groupstring$ = 448
_Grouping$ = 480
__$ArrayPad$ = 512
this$ = 560
__$ReturnUdt$ = 568
_Dest$ = 576
_Iosbase$ = 584
_Fill$ = 592
_Buf$ = 600
_Count$ = 608
?dtor$3@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput'::`1'::dtor$3
  00051	40 55		 push	 rbp
  00053	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00057	48 8b ea	 mov	 rbp, rdx
  0005a	48 8d 8d e0 01
	00 00		 lea	 rcx, QWORD PTR _Grouping$[rbp]
  00061	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00066	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006a	5d		 pop	 rbp
  0006b	c3		 ret	 0
?dtor$3@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
tv240 = 48
_Kseparator$ = 49
_Prefix$ = 56
_Dp$ = 64
_Adjustfield$ = 68
_Pg$ = 72
tv69 = 80
_Fillcount$ = 88
_Poff$ = 96
_Off$ = 104
_Punct_fac$ = 112
_Exps$ = 120
tv192 = 128
tv225 = 136
tv302 = 144
tv295 = 152
_Ctype_fac$ = 160
tv157 = 168
tv298 = 176
_Eoff$ = 184
tv278 = 192
$T1 = 200
$T2 = 208
$T3 = 224
$T4 = 240
$T5 = 256
$T6 = 272
$T7 = 288
$T8 = 304
$T9 = 320
$T10 = 336
$T11 = 352
$T12 = 368
$T13 = 384
$T14 = 400
$T15 = 416
$T16 = 432
_Groupstring$ = 448
_Grouping$ = 480
__$ArrayPad$ = 512
this$ = 560
__$ReturnUdt$ = 568
_Dest$ = 576
_Iosbase$ = 584
_Fill$ = 592
_Buf$ = 600
_Count$ = 608
?dtor$0@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 8d d0 00
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  00010	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$0@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
tv240 = 48
_Kseparator$ = 49
_Prefix$ = 56
_Dp$ = 64
_Adjustfield$ = 68
_Pg$ = 72
tv69 = 80
_Fillcount$ = 88
_Poff$ = 96
_Off$ = 104
_Punct_fac$ = 112
_Exps$ = 120
tv192 = 128
tv225 = 136
tv302 = 144
tv295 = 152
_Ctype_fac$ = 160
tv157 = 168
tv298 = 176
_Eoff$ = 184
tv278 = 192
$T1 = 200
$T2 = 208
$T3 = 224
$T4 = 240
$T5 = 256
$T6 = 272
$T7 = 288
$T8 = 304
$T9 = 320
$T10 = 336
$T11 = 352
$T12 = 368
$T13 = 384
$T14 = 400
$T15 = 416
$T16 = 432
_Groupstring$ = 448
_Grouping$ = 480
__$ArrayPad$ = 512
this$ = 560
__$ReturnUdt$ = 568
_Dest$ = 576
_Iosbase$ = 584
_Fill$ = 592
_Buf$ = 600
_Count$ = 608
?dtor$1@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput'::`1'::dtor$1
  0001b	40 55		 push	 rbp
  0001d	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00021	48 8b ea	 mov	 rbp, rdx
  00024	48 8d 8d c0 01
	00 00		 lea	 rcx, QWORD PTR _Groupstring$[rbp]
  0002b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5d		 pop	 rbp
  00035	c3		 ret	 0
?dtor$1@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
tv240 = 48
_Kseparator$ = 49
_Prefix$ = 56
_Dp$ = 64
_Adjustfield$ = 68
_Pg$ = 72
tv69 = 80
_Fillcount$ = 88
_Poff$ = 96
_Off$ = 104
_Punct_fac$ = 112
_Exps$ = 120
tv192 = 128
tv225 = 136
tv302 = 144
tv295 = 152
_Ctype_fac$ = 160
tv157 = 168
tv298 = 176
_Eoff$ = 184
tv278 = 192
$T1 = 200
$T2 = 208
$T3 = 224
$T4 = 240
$T5 = 256
$T6 = 272
$T7 = 288
$T8 = 304
$T9 = 320
$T10 = 336
$T11 = 352
$T12 = 368
$T13 = 384
$T14 = 400
$T15 = 416
$T16 = 432
_Groupstring$ = 448
_Grouping$ = 480
__$ArrayPad$ = 512
this$ = 560
__$ReturnUdt$ = 568
_Dest$ = 576
_Iosbase$ = 584
_Fill$ = 592
_Buf$ = 600
_Count$ = 608
?dtor$2@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput'::`1'::dtor$2
  00036	40 55		 push	 rbp
  00038	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0003c	48 8b ea	 mov	 rbp, rdx
  0003f	48 8d 8d e0 00
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  00046	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  0004b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004f	5d		 pop	 rbp
  00050	c3		 ret	 0
?dtor$2@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
tv240 = 48
_Kseparator$ = 49
_Prefix$ = 56
_Dp$ = 64
_Adjustfield$ = 68
_Pg$ = 72
tv69 = 80
_Fillcount$ = 88
_Poff$ = 96
_Off$ = 104
_Punct_fac$ = 112
_Exps$ = 120
tv192 = 128
tv225 = 136
tv302 = 144
tv295 = 152
_Ctype_fac$ = 160
tv157 = 168
tv298 = 176
_Eoff$ = 184
tv278 = 192
$T1 = 200
$T2 = 208
$T3 = 224
$T4 = 240
$T5 = 256
$T6 = 272
$T7 = 288
$T8 = 304
$T9 = 320
$T10 = 336
$T11 = 352
$T12 = 368
$T13 = 384
$T14 = 400
$T15 = 416
$T16 = 432
_Groupstring$ = 448
_Grouping$ = 480
__$ArrayPad$ = 512
this$ = 560
__$ReturnUdt$ = 568
_Dest$ = 576
_Iosbase$ = 584
_Fill$ = 592
_Buf$ = 600
_Count$ = 608
?dtor$3@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput'::`1'::dtor$3
  00051	40 55		 push	 rbp
  00053	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00057	48 8b ea	 mov	 rbp, rdx
  0005a	48 8d 8d e0 01
	00 00		 lea	 rcx, QWORD PTR _Grouping$[rbp]
  00061	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00066	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006a	5d		 pop	 rbp
  0006b	c3		 ret	 0
?dtor$3@?0??_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z
_TEXT	SEGMENT
tv83 = 0
tv84 = 1
tv85 = 2
tv90 = 3
tv91 = 4
tv92 = 5
_Ffl$ = 8
_Ptr$ = 16
this$ = 48
_Fmt$ = 56
_Spec$ = 64
_Flags$ = 72
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt, COMDAT

; 1383 : 		{	// generate sprintf format for floating-point

$LN20:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1384 : 		char *_Ptr = _Fmt;

  00018	48 8b 44 24 38	 mov	 rax, QWORD PTR _Fmt$[rsp]
  0001d	48 89 44 24 10	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1385 : 		*_Ptr++ = '%';

  00022	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00027	c6 00 25	 mov	 BYTE PTR [rax], 37	; 00000025H
  0002a	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]
  0002f	48 ff c0	 inc	 rax
  00032	48 89 44 24 10	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1386 : 
; 1387 : 		if (_Flags & ios_base::showpos)

  00037	8b 44 24 48	 mov	 eax, DWORD PTR _Flags$[rsp]
  0003b	83 e0 20	 and	 eax, 32			; 00000020H
  0003e	85 c0		 test	 eax, eax
  00040	74 15		 je	 SHORT $LN2@Ffmt

; 1388 : 			*_Ptr++ = '+';

  00042	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00047	c6 00 2b	 mov	 BYTE PTR [rax], 43	; 0000002bH
  0004a	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]
  0004f	48 ff c0	 inc	 rax
  00052	48 89 44 24 10	 mov	 QWORD PTR _Ptr$[rsp], rax
$LN2@Ffmt:

; 1389 : 		if (_Flags & ios_base::showpoint)

  00057	8b 44 24 48	 mov	 eax, DWORD PTR _Flags$[rsp]
  0005b	83 e0 10	 and	 eax, 16
  0005e	85 c0		 test	 eax, eax
  00060	74 15		 je	 SHORT $LN3@Ffmt

; 1390 : 			*_Ptr++ = '#';

  00062	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00067	c6 00 23	 mov	 BYTE PTR [rax], 35	; 00000023H
  0006a	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]
  0006f	48 ff c0	 inc	 rax
  00072	48 89 44 24 10	 mov	 QWORD PTR _Ptr$[rsp], rax
$LN3@Ffmt:

; 1391 : 		*_Ptr++ = '.';

  00077	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]
  0007c	c6 00 2e	 mov	 BYTE PTR [rax], 46	; 0000002eH
  0007f	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00084	48 ff c0	 inc	 rax
  00087	48 89 44 24 10	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1392 : 		*_Ptr++ = '*';	// for precision argument

  0008c	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00091	c6 00 2a	 mov	 BYTE PTR [rax], 42	; 0000002aH
  00094	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00099	48 ff c0	 inc	 rax
  0009c	48 89 44 24 10	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1393 : 		if (_Spec != '\0')

  000a1	0f be 44 24 40	 movsx	 eax, BYTE PTR _Spec$[rsp]
  000a6	85 c0		 test	 eax, eax
  000a8	74 19		 je	 SHORT $LN4@Ffmt

; 1394 : 			*_Ptr++ = _Spec;	// 'L' qualifier for long double only

  000aa	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]
  000af	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR _Spec$[rsp]
  000b4	88 08		 mov	 BYTE PTR [rax], cl
  000b6	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]
  000bb	48 ff c0	 inc	 rax
  000be	48 89 44 24 10	 mov	 QWORD PTR _Ptr$[rsp], rax
$LN4@Ffmt:

; 1395 : 
; 1396 : 		ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;

  000c3	8b 44 24 48	 mov	 eax, DWORD PTR _Flags$[rsp]
  000c7	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  000cc	89 44 24 08	 mov	 DWORD PTR _Ffl$[rsp], eax

; 1397 : 		if (_Flags & ios_base::uppercase)

  000d0	8b 44 24 48	 mov	 eax, DWORD PTR _Flags$[rsp]
  000d4	83 e0 04	 and	 eax, 4
  000d7	85 c0		 test	 eax, eax
  000d9	74 62		 je	 SHORT $LN5@Ffmt

; 1398 : 			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'

  000db	81 7c 24 08 00
	20 00 00	 cmp	 DWORD PTR _Ffl$[rsp], 8192 ; 00002000H
  000e3	75 07		 jne	 SHORT $LN12@Ffmt
  000e5	c6 44 24 02 66	 mov	 BYTE PTR tv85[rsp], 102	; 00000066H
  000ea	eb 36		 jmp	 SHORT $LN13@Ffmt
$LN12@Ffmt:
  000ec	81 7c 24 08 00
	30 00 00	 cmp	 DWORD PTR _Ffl$[rsp], 12288 ; 00003000H
  000f4	75 07		 jne	 SHORT $LN10@Ffmt
  000f6	c6 44 24 01 41	 mov	 BYTE PTR tv84[rsp], 65	; 00000041H
  000fb	eb 1c		 jmp	 SHORT $LN11@Ffmt
$LN10@Ffmt:
  000fd	81 7c 24 08 00
	10 00 00	 cmp	 DWORD PTR _Ffl$[rsp], 4096 ; 00001000H
  00105	75 06		 jne	 SHORT $LN8@Ffmt
  00107	c6 04 24 45	 mov	 BYTE PTR tv83[rsp], 69	; 00000045H
  0010b	eb 04		 jmp	 SHORT $LN9@Ffmt
$LN8@Ffmt:
  0010d	c6 04 24 47	 mov	 BYTE PTR tv83[rsp], 71	; 00000047H
$LN9@Ffmt:
  00111	0f b6 04 24	 movzx	 eax, BYTE PTR tv83[rsp]
  00115	88 44 24 01	 mov	 BYTE PTR tv84[rsp], al
$LN11@Ffmt:
  00119	0f b6 44 24 01	 movzx	 eax, BYTE PTR tv84[rsp]
  0011e	88 44 24 02	 mov	 BYTE PTR tv85[rsp], al
$LN13@Ffmt:
  00122	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00127	0f b6 4c 24 02	 movzx	 ecx, BYTE PTR tv85[rsp]
  0012c	88 08		 mov	 BYTE PTR [rax], cl
  0012e	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00133	48 ff c0	 inc	 rax
  00136	48 89 44 24 10	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1399 : 				: _Ffl == ios_base::hexfloat ? 'A'	// added with TR1
; 1400 : 				: _Ffl == ios_base::scientific ? 'E' : 'G';	// specifier
; 1401 : 		else

  0013b	eb 63		 jmp	 SHORT $LN6@Ffmt
$LN5@Ffmt:

; 1402 : 			*_Ptr++ = _Ffl == ios_base::fixed ? 'f'

  0013d	81 7c 24 08 00
	20 00 00	 cmp	 DWORD PTR _Ffl$[rsp], 8192 ; 00002000H
  00145	75 07		 jne	 SHORT $LN18@Ffmt
  00147	c6 44 24 05 66	 mov	 BYTE PTR tv92[rsp], 102	; 00000066H
  0014c	eb 39		 jmp	 SHORT $LN19@Ffmt
$LN18@Ffmt:
  0014e	81 7c 24 08 00
	30 00 00	 cmp	 DWORD PTR _Ffl$[rsp], 12288 ; 00003000H
  00156	75 07		 jne	 SHORT $LN16@Ffmt
  00158	c6 44 24 04 61	 mov	 BYTE PTR tv91[rsp], 97	; 00000061H
  0015d	eb 1f		 jmp	 SHORT $LN17@Ffmt
$LN16@Ffmt:
  0015f	81 7c 24 08 00
	10 00 00	 cmp	 DWORD PTR _Ffl$[rsp], 4096 ; 00001000H
  00167	75 07		 jne	 SHORT $LN14@Ffmt
  00169	c6 44 24 03 65	 mov	 BYTE PTR tv90[rsp], 101	; 00000065H
  0016e	eb 05		 jmp	 SHORT $LN15@Ffmt
$LN14@Ffmt:
  00170	c6 44 24 03 67	 mov	 BYTE PTR tv90[rsp], 103	; 00000067H
$LN15@Ffmt:
  00175	0f b6 44 24 03	 movzx	 eax, BYTE PTR tv90[rsp]
  0017a	88 44 24 04	 mov	 BYTE PTR tv91[rsp], al
$LN17@Ffmt:
  0017e	0f b6 44 24 04	 movzx	 eax, BYTE PTR tv91[rsp]
  00183	88 44 24 05	 mov	 BYTE PTR tv92[rsp], al
$LN19@Ffmt:
  00187	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]
  0018c	0f b6 4c 24 05	 movzx	 ecx, BYTE PTR tv92[rsp]
  00191	88 08		 mov	 BYTE PTR [rax], cl
  00193	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00198	48 ff c0	 inc	 rax
  0019b	48 89 44 24 10	 mov	 QWORD PTR _Ptr$[rsp], rax
$LN6@Ffmt:

; 1403 : 				: _Ffl == ios_base::hexfloat ? 'a'	// added with TR1
; 1404 : 				: _Ffl == ios_base::scientific ? 'e' : 'g';	// specifier
; 1405 : 
; 1406 : 		*_Ptr = '\0';

  001a0	48 8b 44 24 10	 mov	 rax, QWORD PTR _Ptr$[rsp]
  001a5	c6 00 00	 mov	 BYTE PTR [rax], 0

; 1407 : 		return (_Fmt);

  001a8	48 8b 44 24 38	 mov	 rax, QWORD PTR _Fmt$[rsp]

; 1408 : 		}

  001ad	48 83 c4 28	 add	 rsp, 40			; 00000028H
  001b1	c3		 ret	 0
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z
_TEXT	SEGMENT
$T1 = 64
_Buf$ = 80
__$ArrayPad$ = 144
this$ = 192
__$ReturnUdt$ = 200
_Dest$ = 208
_Iosbase$ = 216
_Fill$ = 224
_Val$ = 232
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT

; 1373 : 		{	// put formatted void pointer to _Dest

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1374 : 		char _Buf[2 * _MAX_INT_DIG];
; 1375 : 
; 1376 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

  0002f	4c 8b 8c 24 e8
	00 00 00	 mov	 r9, QWORD PTR _Val$[rsp]
  00037	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02BBAHNLBA@?$CFp?$AA@
  0003e	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00043	48 8d 4c 24 50	 lea	 rcx, QWORD PTR _Buf$[rsp]
  00048	e8 00 00 00 00	 call	 sprintf_s
  0004d	48 98		 cdqe
  0004f	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T1[rsp]
  00054	48 8b f9	 mov	 rdi, rcx
  00057	48 8b b4 24 d0
	00 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  0005f	b9 10 00 00 00	 mov	 ecx, 16
  00064	f3 a4		 rep movsb
  00066	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0006b	48 8d 44 24 50	 lea	 rax, QWORD PTR _Buf$[rsp]
  00070	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00075	0f b6 84 24 e0
	00 00 00	 movzx	 eax, BYTE PTR _Fill$[rsp]
  0007d	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00081	4c 8b 8c 24 d8
	00 00 00	 mov	 r9, QWORD PTR _Iosbase$[rsp]
  00089	4c 8d 44 24 40	 lea	 r8, QWORD PTR $T1[rsp]
  0008e	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  00096	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0009e	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
  000a3	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1377 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), "%p", _Val)));
; 1378 : 		}

  000ab	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000b3	48 33 cc	 xor	 rcx, rsp
  000b6	e8 00 00 00 00	 call	 __security_check_cookie
  000bb	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000c2	5f		 pop	 rdi
  000c3	5e		 pop	 rsi
  000c4	c3		 ret	 0
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBX@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z
_TEXT	SEGMENT
_Isfixed$ = 64
tv71 = 68
_Ptwo$1 = 72
_Ngen$ = 76
_Bufsize$ = 80
tv80 = 88
_Precision$ = 96
tv133 = 104
tv141 = 112
tv148 = 120
$T2 = 128
$T3 = 144
_Buf$ = 160
_Fmt$ = 192
__$ArrayPad$ = 200
this$ = 240
__$ReturnUdt$ = 248
_Dest$ = 256
_Iosbase$ = 264
_Fill$ = 272
_Val$ = 280
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT

; 1349 : 		{	// put formatted long double to _Dest

$LN9:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0001d	48 c7 84 24 80
	00 00 00 fe ff
	ff ff		 mov	 QWORD PTR $T2[rsp], -2
  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00030	48 33 c4	 xor	 rax, rsp
  00033	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1350 : 		string _Buf;

  0003b	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR _Buf$[rsp]
  00043	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00048	90		 npad	 1

; 1351 : 		char _Fmt[8];
; 1352 : 		bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield)
; 1353 : 			== ios_base::fixed;

  00049	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00051	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  00056	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  0005b	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  00060	75 0a		 jne	 SHORT $LN4@do_put
  00062	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv71[rsp], 1
  0006a	eb 08		 jmp	 SHORT $LN5@do_put
$LN4@do_put:
  0006c	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
$LN5@do_put:
  00074	0f b6 44 24 44	 movzx	 eax, BYTE PTR tv71[rsp]
  00079	88 44 24 40	 mov	 BYTE PTR _Isfixed$[rsp], al

; 1354 : 		streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed

  0007d	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00085	e8 00 00 00 00	 call	 ?precision@ios_base@std@@QEBA_JXZ ; std::ios_base::precision
  0008a	48 85 c0	 test	 rax, rax
  0008d	7f 14		 jg	 SHORT $LN6@do_put
  0008f	0f b6 44 24 40	 movzx	 eax, BYTE PTR _Isfixed$[rsp]
  00094	85 c0		 test	 eax, eax
  00096	75 0b		 jne	 SHORT $LN6@do_put
  00098	48 c7 44 24 58
	06 00 00 00	 mov	 QWORD PTR tv80[rsp], 6
  000a1	eb 12		 jmp	 SHORT $LN7@do_put
$LN6@do_put:
  000a3	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  000ab	e8 00 00 00 00	 call	 ?precision@ios_base@std@@QEBA_JXZ ; std::ios_base::precision
  000b0	48 89 44 24 58	 mov	 QWORD PTR tv80[rsp], rax
$LN7@do_put:
  000b5	48 8b 44 24 58	 mov	 rax, QWORD PTR tv80[rsp]
  000ba	48 89 44 24 60	 mov	 QWORD PTR _Precision$[rsp], rax

; 1355 : 			? 6 : _Iosbase.precision();	// desired precision
; 1356 : 		size_t _Bufsize = (size_t)_Precision;

  000bf	48 8b 44 24 60	 mov	 rax, QWORD PTR _Precision$[rsp]
  000c4	48 89 44 24 50	 mov	 QWORD PTR _Bufsize$[rsp], rax

; 1357 : 		if (_Isfixed && 1e10 < _CSTD fabsl(_Val))

  000c9	0f b6 44 24 40	 movzx	 eax, BYTE PTR _Isfixed$[rsp]
  000ce	85 c0		 test	 eax, eax
  000d0	74 54		 je	 SHORT $LN2@do_put
  000d2	f2 0f 10 84 24
	18 01 00 00	 movsd	 xmm0, QWORD PTR _Val$[rsp]
  000db	e8 00 00 00 00	 call	 fabsl
  000e0	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4202a05f20000000
  000e8	76 3c		 jbe	 SHORT $LN2@do_put

; 1358 : 			{	// f or F format
; 1359 : 			int _Ptwo;
; 1360 : 			(void)_CSTD frexpl(_Val, &_Ptwo);

  000ea	48 8d 54 24 48	 lea	 rdx, QWORD PTR _Ptwo$1[rsp]
  000ef	f2 0f 10 84 24
	18 01 00 00	 movsd	 xmm0, QWORD PTR _Val$[rsp]
  000f8	e8 00 00 00 00	 call	 frexpl

; 1361 : 			_Bufsize += _CSTD abs(_Ptwo) * 30103L / 100000L;

  000fd	8b 4c 24 48	 mov	 ecx, DWORD PTR _Ptwo$1[rsp]
  00101	e8 00 00 00 00	 call	 abs
  00106	69 c0 97 75 00
	00		 imul	 eax, eax, 30103		; 00007597H
  0010c	99		 cdq
  0010d	b9 a0 86 01 00	 mov	 ecx, 100000		; 000186a0H
  00112	f7 f9		 idiv	 ecx
  00114	48 98		 cdqe
  00116	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Bufsize$[rsp]
  0011b	48 03 c8	 add	 rcx, rax
  0011e	48 8b c1	 mov	 rax, rcx
  00121	48 89 44 24 50	 mov	 QWORD PTR _Bufsize$[rsp], rax
$LN2@do_put:

; 1362 : 			}
; 1363 : 		_Buf.resize(_Bufsize + 50);	// add fudge factor

  00126	48 8b 44 24 50	 mov	 rax, QWORD PTR _Bufsize$[rsp]
  0012b	48 83 c0 32	 add	 rax, 50			; 00000032H
  0012f	48 8b d0	 mov	 rdx, rax
  00132	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR _Buf$[rsp]
  0013a	e8 00 00 00 00	 call	 ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize

; 1364 : 
; 1365 : 		int _Ngen = _CSTD sprintf_s((char *)_Buf.c_str(), _Buf.size(),

  0013f	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00147	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  0014c	44 8b c8	 mov	 r9d, eax
  0014f	41 b0 4c	 mov	 r8b, 76			; 0000004cH
  00152	48 8d 94 24 c0
	00 00 00	 lea	 rdx, QWORD PTR _Fmt$[rsp]
  0015a	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00162	e8 00 00 00 00	 call	 ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
  00167	48 89 44 24 68	 mov	 QWORD PTR tv133[rsp], rax
  0016c	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR _Buf$[rsp]
  00174	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00179	48 89 44 24 70	 mov	 QWORD PTR tv141[rsp], rax
  0017e	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR _Buf$[rsp]
  00186	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0018b	f2 0f 10 84 24
	18 01 00 00	 movsd	 xmm0, QWORD PTR _Val$[rsp]
  00194	f2 0f 11 44 24
	20		 movsd	 QWORD PTR [rsp+32], xmm0
  0019a	44 8b 4c 24 60	 mov	 r9d, DWORD PTR _Precision$[rsp]
  0019f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv133[rsp]
  001a4	4c 8b c1	 mov	 r8, rcx
  001a7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv141[rsp]
  001ac	48 8b d1	 mov	 rdx, rcx
  001af	48 8b c8	 mov	 rcx, rax
  001b2	e8 00 00 00 00	 call	 sprintf_s
  001b7	89 44 24 4c	 mov	 DWORD PTR _Ngen$[rsp], eax

; 1366 : 			_Ffmt(_Fmt, 'L', _Iosbase.flags()), (int)_Precision, _Val);
; 1367 : 
; 1368 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));

  001bb	48 63 44 24 4c	 movsxd	 rax, DWORD PTR _Ngen$[rsp]
  001c0	48 89 44 24 78	 mov	 QWORD PTR tv148[rsp], rax
  001c5	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR _Buf$[rsp]
  001cd	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  001d2	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR $T3[rsp]
  001da	48 8b f9	 mov	 rdi, rcx
  001dd	48 8b b4 24 00
	01 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  001e5	b9 10 00 00 00	 mov	 ecx, 16
  001ea	f3 a4		 rep movsb
  001ec	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv148[rsp]
  001f1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001f6	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001fb	0f b6 84 24 10
	01 00 00	 movzx	 eax, BYTE PTR _Fill$[rsp]
  00203	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00207	4c 8b 8c 24 08
	01 00 00	 mov	 r9, QWORD PTR _Iosbase$[rsp]
  0020f	4c 8d 84 24 90
	00 00 00	 lea	 r8, QWORD PTR $T3[rsp]
  00217	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  0021f	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00227	e8 00 00 00 00	 call	 ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
  0022c	90		 npad	 1
  0022d	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR _Buf$[rsp]
  00235	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0023a	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1369 : 		}

  00242	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0024a	48 33 cc	 xor	 rcx, rsp
  0024d	e8 00 00 00 00	 call	 __security_check_cookie
  00252	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  00259	5f		 pop	 rdi
  0025a	5e		 pop	 rsi
  0025b	c3		 ret	 0
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Isfixed$ = 64
tv71 = 68
_Ptwo$1 = 72
_Ngen$ = 76
_Bufsize$ = 80
tv80 = 88
_Precision$ = 96
tv133 = 104
tv141 = 112
tv148 = 120
$T2 = 128
$T3 = 144
_Buf$ = 160
_Fmt$ = 192
__$ArrayPad$ = 200
this$ = 240
__$ReturnUdt$ = 248
_Dest$ = 256
_Iosbase$ = 264
_Fill$ = 272
_Val$ = 280
?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 8d a0 00
	00 00		 lea	 rcx, QWORD PTR _Buf$[rbp]
  00010	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_Isfixed$ = 64
tv71 = 68
_Ptwo$1 = 72
_Ngen$ = 76
_Bufsize$ = 80
tv80 = 88
_Precision$ = 96
tv133 = 104
tv141 = 112
tv148 = 120
$T2 = 128
$T3 = 144
_Buf$ = 160
_Fmt$ = 192
__$ArrayPad$ = 200
this$ = 240
__$ReturnUdt$ = 248
_Dest$ = 256
_Iosbase$ = 264
_Fill$ = 272
_Val$ = 280
?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 8d a0 00
	00 00		 lea	 rcx, QWORD PTR _Buf$[rbp]
  00010	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DO@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z
_TEXT	SEGMENT
_Isfixed$ = 64
tv71 = 68
_Ptwo$1 = 72
_Ngen$ = 76
_Bufsize$ = 80
tv80 = 88
_Precision$ = 96
tv133 = 104
tv141 = 112
tv148 = 120
$T2 = 128
$T3 = 144
_Buf$ = 160
_Fmt$ = 192
__$ArrayPad$ = 200
this$ = 240
__$ReturnUdt$ = 248
_Dest$ = 256
_Iosbase$ = 264
_Fill$ = 272
_Val$ = 280
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT

; 1325 : 		{	// put formatted double to _Dest

$LN9:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0001d	48 c7 84 24 80
	00 00 00 fe ff
	ff ff		 mov	 QWORD PTR $T2[rsp], -2
  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00030	48 33 c4	 xor	 rax, rsp
  00033	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1326 : 		string _Buf;

  0003b	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR _Buf$[rsp]
  00043	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00048	90		 npad	 1

; 1327 : 		char _Fmt[8];
; 1328 : 		bool _Isfixed = (_Iosbase.flags() & ios_base::floatfield)
; 1329 : 			== ios_base::fixed;

  00049	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00051	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  00056	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  0005b	3d 00 20 00 00	 cmp	 eax, 8192		; 00002000H
  00060	75 0a		 jne	 SHORT $LN4@do_put
  00062	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv71[rsp], 1
  0006a	eb 08		 jmp	 SHORT $LN5@do_put
$LN4@do_put:
  0006c	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
$LN5@do_put:
  00074	0f b6 44 24 44	 movzx	 eax, BYTE PTR tv71[rsp]
  00079	88 44 24 40	 mov	 BYTE PTR _Isfixed$[rsp], al

; 1330 : 		streamsize _Precision = _Iosbase.precision() <= 0 && !_Isfixed

  0007d	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00085	e8 00 00 00 00	 call	 ?precision@ios_base@std@@QEBA_JXZ ; std::ios_base::precision
  0008a	48 85 c0	 test	 rax, rax
  0008d	7f 14		 jg	 SHORT $LN6@do_put
  0008f	0f b6 44 24 40	 movzx	 eax, BYTE PTR _Isfixed$[rsp]
  00094	85 c0		 test	 eax, eax
  00096	75 0b		 jne	 SHORT $LN6@do_put
  00098	48 c7 44 24 58
	06 00 00 00	 mov	 QWORD PTR tv80[rsp], 6
  000a1	eb 12		 jmp	 SHORT $LN7@do_put
$LN6@do_put:
  000a3	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  000ab	e8 00 00 00 00	 call	 ?precision@ios_base@std@@QEBA_JXZ ; std::ios_base::precision
  000b0	48 89 44 24 58	 mov	 QWORD PTR tv80[rsp], rax
$LN7@do_put:
  000b5	48 8b 44 24 58	 mov	 rax, QWORD PTR tv80[rsp]
  000ba	48 89 44 24 60	 mov	 QWORD PTR _Precision$[rsp], rax

; 1331 : 			? 6 : _Iosbase.precision();	// desired precision
; 1332 : 		size_t _Bufsize = (size_t)_Precision;

  000bf	48 8b 44 24 60	 mov	 rax, QWORD PTR _Precision$[rsp]
  000c4	48 89 44 24 50	 mov	 QWORD PTR _Bufsize$[rsp], rax

; 1333 : 		if (_Isfixed && 1e10 < _CSTD fabs(_Val))

  000c9	0f b6 44 24 40	 movzx	 eax, BYTE PTR _Isfixed$[rsp]
  000ce	85 c0		 test	 eax, eax
  000d0	74 54		 je	 SHORT $LN2@do_put
  000d2	f2 0f 10 84 24
	18 01 00 00	 movsd	 xmm0, QWORD PTR _Val$[rsp]
  000db	e8 00 00 00 00	 call	 fabs
  000e0	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4202a05f20000000
  000e8	76 3c		 jbe	 SHORT $LN2@do_put

; 1334 : 			{	// f or F format
; 1335 : 			int _Ptwo;
; 1336 : 			(void)_CSTD frexp(_Val, &_Ptwo);

  000ea	48 8d 54 24 48	 lea	 rdx, QWORD PTR _Ptwo$1[rsp]
  000ef	f2 0f 10 84 24
	18 01 00 00	 movsd	 xmm0, QWORD PTR _Val$[rsp]
  000f8	e8 00 00 00 00	 call	 frexp

; 1337 : 			_Bufsize += _CSTD abs(_Ptwo) * 30103L / 100000L;

  000fd	8b 4c 24 48	 mov	 ecx, DWORD PTR _Ptwo$1[rsp]
  00101	e8 00 00 00 00	 call	 abs
  00106	69 c0 97 75 00
	00		 imul	 eax, eax, 30103		; 00007597H
  0010c	99		 cdq
  0010d	b9 a0 86 01 00	 mov	 ecx, 100000		; 000186a0H
  00112	f7 f9		 idiv	 ecx
  00114	48 98		 cdqe
  00116	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Bufsize$[rsp]
  0011b	48 03 c8	 add	 rcx, rax
  0011e	48 8b c1	 mov	 rax, rcx
  00121	48 89 44 24 50	 mov	 QWORD PTR _Bufsize$[rsp], rax
$LN2@do_put:

; 1338 : 			}
; 1339 : 		_Buf.resize(_Bufsize + 50);	// add fudge factor

  00126	48 8b 44 24 50	 mov	 rax, QWORD PTR _Bufsize$[rsp]
  0012b	48 83 c0 32	 add	 rax, 50			; 00000032H
  0012f	48 8b d0	 mov	 rdx, rax
  00132	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR _Buf$[rsp]
  0013a	e8 00 00 00 00	 call	 ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize

; 1340 : 
; 1341 : 		int _Ngen = _CSTD sprintf_s((char *)_Buf.c_str(), _Buf.size(),

  0013f	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00147	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  0014c	44 8b c8	 mov	 r9d, eax
  0014f	45 33 c0	 xor	 r8d, r8d
  00152	48 8d 94 24 c0
	00 00 00	 lea	 rdx, QWORD PTR _Fmt$[rsp]
  0015a	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00162	e8 00 00 00 00	 call	 ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
  00167	48 89 44 24 68	 mov	 QWORD PTR tv133[rsp], rax
  0016c	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR _Buf$[rsp]
  00174	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00179	48 89 44 24 70	 mov	 QWORD PTR tv141[rsp], rax
  0017e	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR _Buf$[rsp]
  00186	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0018b	f2 0f 10 84 24
	18 01 00 00	 movsd	 xmm0, QWORD PTR _Val$[rsp]
  00194	f2 0f 11 44 24
	20		 movsd	 QWORD PTR [rsp+32], xmm0
  0019a	44 8b 4c 24 60	 mov	 r9d, DWORD PTR _Precision$[rsp]
  0019f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv133[rsp]
  001a4	4c 8b c1	 mov	 r8, rcx
  001a7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv141[rsp]
  001ac	48 8b d1	 mov	 rdx, rcx
  001af	48 8b c8	 mov	 rcx, rax
  001b2	e8 00 00 00 00	 call	 sprintf_s
  001b7	89 44 24 4c	 mov	 DWORD PTR _Ngen$[rsp], eax

; 1342 : 			_Ffmt(_Fmt, 0, _Iosbase.flags()), (int)_Precision, _Val);
; 1343 : 
; 1344 : 		return (_Fput(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen));

  001bb	48 63 44 24 4c	 movsxd	 rax, DWORD PTR _Ngen$[rsp]
  001c0	48 89 44 24 78	 mov	 QWORD PTR tv148[rsp], rax
  001c5	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR _Buf$[rsp]
  001cd	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  001d2	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR $T3[rsp]
  001da	48 8b f9	 mov	 rdi, rcx
  001dd	48 8b b4 24 00
	01 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  001e5	b9 10 00 00 00	 mov	 ecx, 16
  001ea	f3 a4		 rep movsb
  001ec	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv148[rsp]
  001f1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001f6	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001fb	0f b6 84 24 10
	01 00 00	 movzx	 eax, BYTE PTR _Fill$[rsp]
  00203	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00207	4c 8b 8c 24 08
	01 00 00	 mov	 r9, QWORD PTR _Iosbase$[rsp]
  0020f	4c 8d 84 24 90
	00 00 00	 lea	 r8, QWORD PTR $T3[rsp]
  00217	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  0021f	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00227	e8 00 00 00 00	 call	 ?_Fput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput
  0022c	90		 npad	 1
  0022d	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR _Buf$[rsp]
  00235	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0023a	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1345 : 		}

  00242	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0024a	48 33 cc	 xor	 rcx, rsp
  0024d	e8 00 00 00 00	 call	 __security_check_cookie
  00252	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  00259	5f		 pop	 rdi
  0025a	5e		 pop	 rsi
  0025b	c3		 ret	 0
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Isfixed$ = 64
tv71 = 68
_Ptwo$1 = 72
_Ngen$ = 76
_Bufsize$ = 80
tv80 = 88
_Precision$ = 96
tv133 = 104
tv141 = 112
tv148 = 120
$T2 = 128
$T3 = 144
_Buf$ = 160
_Fmt$ = 192
__$ArrayPad$ = 200
this$ = 240
__$ReturnUdt$ = 248
_Dest$ = 256
_Iosbase$ = 264
_Fill$ = 272
_Val$ = 280
?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 8d a0 00
	00 00		 lea	 rcx, QWORD PTR _Buf$[rbp]
  00010	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_Isfixed$ = 64
tv71 = 68
_Ptwo$1 = 72
_Ngen$ = 76
_Bufsize$ = 80
tv80 = 88
_Precision$ = 96
tv133 = 104
tv141 = 112
tv148 = 120
$T2 = 128
$T3 = 144
_Buf$ = 160
_Fmt$ = 192
__$ArrayPad$ = 200
this$ = 240
__$ReturnUdt$ = 248
_Dest$ = 256
_Iosbase$ = 264
_Fill$ = 272
_Val$ = 280
?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 8d a0 00
	00 00		 lea	 rcx, QWORD PTR _Buf$[rbp]
  00010	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DN@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_K@Z
_TEXT	SEGMENT
$T1 = 64
_Fmt$ = 80
_Buf$ = 96
__$ArrayPad$ = 160
this$ = 208
__$ReturnUdt$ = 216
_Dest$ = 224
_Iosbase$ = 232
_Fill$ = 240
_Val$ = 248
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT

; 1315 : 		{	// put formatted unsigned long long to _Dest

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1316 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[8];
; 1317 : 
; 1318 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

  0002f	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00037	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  0003c	44 8b c8	 mov	 r9d, eax
  0003f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02CLHGNPPK@Lu?$AA@
  00046	48 8d 54 24 50	 lea	 rdx, QWORD PTR _Fmt$[rsp]
  0004b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00053	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00058	4c 8b 8c 24 f8
	00 00 00	 mov	 r9, QWORD PTR _Val$[rsp]
  00060	4c 8b c0	 mov	 r8, rax
  00063	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00068	48 8d 4c 24 60	 lea	 rcx, QWORD PTR _Buf$[rsp]
  0006d	e8 00 00 00 00	 call	 sprintf_s
  00072	48 98		 cdqe
  00074	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T1[rsp]
  00079	48 8b f9	 mov	 rdi, rcx
  0007c	48 8b b4 24 e0
	00 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  00084	b9 10 00 00 00	 mov	 ecx, 16
  00089	f3 a4		 rep movsb
  0008b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00090	48 8d 44 24 60	 lea	 rax, QWORD PTR _Buf$[rsp]
  00095	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0009a	0f b6 84 24 f0
	00 00 00	 movzx	 eax, BYTE PTR _Fill$[rsp]
  000a2	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  000a6	4c 8b 8c 24 e8
	00 00 00	 mov	 r9, QWORD PTR _Iosbase$[rsp]
  000ae	4c 8d 44 24 40	 lea	 r8, QWORD PTR $T1[rsp]
  000b3	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  000bb	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000c3	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
  000c8	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1319 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Lu",
; 1320 : 				_Iosbase.flags()), _Val)));
; 1321 : 		}

  000d0	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000d8	48 33 cc	 xor	 rcx, rsp
  000db	e8 00 00 00 00	 call	 __security_check_cookie
  000e0	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  000e7	5f		 pop	 rdi
  000e8	5e		 pop	 rsi
  000e9	c3		 ret	 0
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_J@Z
_TEXT	SEGMENT
$T1 = 64
_Fmt$ = 80
_Buf$ = 96
__$ArrayPad$ = 160
this$ = 208
__$ReturnUdt$ = 216
_Dest$ = 224
_Iosbase$ = 232
_Fill$ = 240
_Val$ = 248
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_J@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT

; 1305 : 		{	// put formatted long long to _Dest

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1306 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[8];
; 1307 : 
; 1308 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

  0002f	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00037	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  0003c	44 8b c8	 mov	 r9d, eax
  0003f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HIKPPMOK@Ld?$AA@
  00046	48 8d 54 24 50	 lea	 rdx, QWORD PTR _Fmt$[rsp]
  0004b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00053	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00058	4c 8b 8c 24 f8
	00 00 00	 mov	 r9, QWORD PTR _Val$[rsp]
  00060	4c 8b c0	 mov	 r8, rax
  00063	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00068	48 8d 4c 24 60	 lea	 rcx, QWORD PTR _Buf$[rsp]
  0006d	e8 00 00 00 00	 call	 sprintf_s
  00072	48 98		 cdqe
  00074	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T1[rsp]
  00079	48 8b f9	 mov	 rdi, rcx
  0007c	48 8b b4 24 e0
	00 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  00084	b9 10 00 00 00	 mov	 ecx, 16
  00089	f3 a4		 rep movsb
  0008b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00090	48 8d 44 24 60	 lea	 rax, QWORD PTR _Buf$[rsp]
  00095	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0009a	0f b6 84 24 f0
	00 00 00	 movzx	 eax, BYTE PTR _Fill$[rsp]
  000a2	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  000a6	4c 8b 8c 24 e8
	00 00 00	 mov	 r9, QWORD PTR _Iosbase$[rsp]
  000ae	4c 8d 44 24 40	 lea	 r8, QWORD PTR $T1[rsp]
  000b3	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  000bb	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000c3	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
  000c8	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1309 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Ld",
; 1310 : 				_Iosbase.flags()), _Val)));
; 1311 : 		}

  000d0	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000d8	48 33 cc	 xor	 rcx, rsp
  000db	e8 00 00 00 00	 call	 __security_check_cookie
  000e0	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  000e7	5f		 pop	 rdi
  000e8	5e		 pop	 rsi
  000e9	c3		 ret	 0
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_J@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z
_TEXT	SEGMENT
$T1 = 64
_Fmt$ = 80
_Buf$ = 96
__$ArrayPad$ = 160
this$ = 208
__$ReturnUdt$ = 216
_Dest$ = 224
_Iosbase$ = 232
_Fill$ = 240
_Val$ = 248
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT

; 1295 : 		{	// put formatted unsigned long to _Dest

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1296 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[6];
; 1297 : 
; 1298 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

  0002f	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00037	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  0003c	44 8b c8	 mov	 r9d, eax
  0003f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02BDDLJJBK@lu?$AA@
  00046	48 8d 54 24 50	 lea	 rdx, QWORD PTR _Fmt$[rsp]
  0004b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00053	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00058	44 8b 8c 24 f8
	00 00 00	 mov	 r9d, DWORD PTR _Val$[rsp]
  00060	4c 8b c0	 mov	 r8, rax
  00063	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00068	48 8d 4c 24 60	 lea	 rcx, QWORD PTR _Buf$[rsp]
  0006d	e8 00 00 00 00	 call	 sprintf_s
  00072	48 98		 cdqe
  00074	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T1[rsp]
  00079	48 8b f9	 mov	 rdi, rcx
  0007c	48 8b b4 24 e0
	00 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  00084	b9 10 00 00 00	 mov	 ecx, 16
  00089	f3 a4		 rep movsb
  0008b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00090	48 8d 44 24 60	 lea	 rax, QWORD PTR _Buf$[rsp]
  00095	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0009a	0f b6 84 24 f0
	00 00 00	 movzx	 eax, BYTE PTR _Fill$[rsp]
  000a2	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  000a6	4c 8b 8c 24 e8
	00 00 00	 mov	 r9, QWORD PTR _Iosbase$[rsp]
  000ae	4c 8d 44 24 40	 lea	 r8, QWORD PTR $T1[rsp]
  000b3	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  000bb	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000c3	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
  000c8	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1299 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "lu",
; 1300 : 				_Iosbase.flags()), _Val)));
; 1301 : 		}

  000d0	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000d8	48 33 cc	 xor	 rcx, rsp
  000db	e8 00 00 00 00	 call	 __security_check_cookie
  000e0	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  000e7	5f		 pop	 rdi
  000e8	5e		 pop	 rsi
  000e9	c3		 ret	 0
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z
_TEXT	SEGMENT
$T1 = 64
_Fmt$ = 80
_Buf$ = 96
__$ArrayPad$ = 160
this$ = 208
__$ReturnUdt$ = 216
_Dest$ = 224
_Iosbase$ = 232
_Fill$ = 240
_Val$ = 248
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT

; 1285 : 		{	// put formatted long to _Dest

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1286 : 		char _Buf[2 * _MAX_INT_DIG], _Fmt[6];
; 1287 : 
; 1288 : 		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,

  0002f	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00037	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  0003c	44 8b c8	 mov	 r9d, eax
  0003f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02EAOCLKAK@ld?$AA@
  00046	48 8d 54 24 50	 lea	 rdx, QWORD PTR _Fmt$[rsp]
  0004b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00053	e8 00 00 00 00	 call	 ?_Ifmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBAPEADPEADPEBDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ifmt
  00058	44 8b 8c 24 f8
	00 00 00	 mov	 r9d, DWORD PTR _Val$[rsp]
  00060	4c 8b c0	 mov	 r8, rax
  00063	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00068	48 8d 4c 24 60	 lea	 rcx, QWORD PTR _Buf$[rsp]
  0006d	e8 00 00 00 00	 call	 sprintf_s
  00072	48 98		 cdqe
  00074	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T1[rsp]
  00079	48 8b f9	 mov	 rdi, rcx
  0007c	48 8b b4 24 e0
	00 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  00084	b9 10 00 00 00	 mov	 ecx, 16
  00089	f3 a4		 rep movsb
  0008b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00090	48 8d 44 24 60	 lea	 rax, QWORD PTR _Buf$[rsp]
  00095	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0009a	0f b6 84 24 f0
	00 00 00	 movzx	 eax, BYTE PTR _Fill$[rsp]
  000a2	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  000a6	4c 8b 8c 24 e8
	00 00 00	 mov	 r9, QWORD PTR _Iosbase$[rsp]
  000ae	4c 8d 44 24 40	 lea	 r8, QWORD PTR $T1[rsp]
  000b3	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  000bb	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000c3	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DPEAD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
  000c8	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1289 : 			_CSTD sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "ld",
; 1290 : 				_Iosbase.flags()), _Val)));
; 1291 : 		}

  000d0	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000d8	48 33 cc	 xor	 rcx, rsp
  000db	e8 00 00 00 00	 call	 __security_check_cookie
  000e0	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  000e7	5f		 pop	 rdi
  000e8	5e		 pop	 rsi
  000e9	c3		 ret	 0
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DJ@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z
_TEXT	SEGMENT
_Fillcount$1 = 48
_Punct_fac$2 = 56
tv148 = 64
tv85 = 72
tv186 = 80
tv179 = 88
tv182 = 96
tv184 = 104
tv139 = 112
tv144 = 120
tv163 = 128
$T3 = 136
$T4 = 144
$T5 = 160
$T6 = 176
$T7 = 192
$T8 = 208
$T9 = 224
$T10 = 240
_Str$11 = 256
$T12 = 288
$T13 = 320
__$ArrayPad$ = 352
this$ = 400
__$ReturnUdt$ = 408
_Dest$ = 416
_Iosbase$ = 424
_Fill$ = 432
_Val$ = 440
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT

; 1255 : 		{	// put formatted bool to _Dest

$LN14:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  0001d	48 c7 84 24 88
	00 00 00 fe ff
	ff ff		 mov	 QWORD PTR $T3[rsp], -2
  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00030	48 33 c4	 xor	 rax, rsp
  00033	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1256 : 		_DEBUG_POINTER(_Dest);
; 1257 : 		if (!(_Iosbase.flags() & ios_base::boolalpha))

  0003b	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00043	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  00048	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  0004d	85 c0		 test	 eax, eax
  0004f	75 7c		 jne	 SHORT $LN2@do_put

; 1258 : 			return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));

  00051	0f b6 84 24 b8
	01 00 00	 movzx	 eax, BYTE PTR _Val$[rsp]
  00059	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR $T4[rsp]
  00061	48 8b f9	 mov	 rdi, rcx
  00064	48 8b b4 24 a0
	01 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  0006c	b9 10 00 00 00	 mov	 ecx, 16
  00071	f3 a4		 rep movsb
  00073	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0007b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0007e	48 89 4c 24 48	 mov	 QWORD PTR tv85[rsp], rcx
  00083	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00087	0f b6 84 24 b0
	01 00 00	 movzx	 eax, BYTE PTR _Fill$[rsp]
  0008f	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00093	4c 8b 8c 24 a8
	01 00 00	 mov	 r9, QWORD PTR _Iosbase$[rsp]
  0009b	4c 8d 84 24 90
	00 00 00	 lea	 r8, QWORD PTR $T4[rsp]
  000a3	48 8b 94 24 98
	01 00 00	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  000ab	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000b3	48 8b 44 24 48	 mov	 rax, QWORD PTR tv85[rsp]
  000b8	ff 50 48	 call	 QWORD PTR [rax+72]
  000bb	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
  000c3	e9 b2 02 00 00	 jmp	 $LN1@do_put

; 1259 : 		else

  000c8	e9 ad 02 00 00	 jmp	 $LN1@do_put
$LN2@do_put:

; 1260 : 			{	// put "false" or "true"
; 1261 : 			const _Mypunct& _Punct_fac = _USE(_Iosbase.getloc(), _Mypunct);

  000cd	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR $T5[rsp]
  000d5	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  000dd	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QEBA?AVlocale@2@XZ ; std::ios_base::getloc
  000e2	48 89 44 24 50	 mov	 QWORD PTR tv186[rsp], rax
  000e7	48 8b 44 24 50	 mov	 rax, QWORD PTR tv186[rsp]
  000ec	48 89 44 24 58	 mov	 QWORD PTR tv179[rsp], rax
  000f1	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv179[rsp]
  000f6	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAAEBV?$numpunct@D@0@AEBVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  000fb	48 89 44 24 38	 mov	 QWORD PTR _Punct_fac$2[rsp], rax
  00100	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR $T5[rsp]
  00108	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale

; 1262 : 			_Mystr _Str;

  0010d	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR _Str$11[rsp]
  00115	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0011a	90		 npad	 1

; 1263 : 			if (_Val)

  0011b	0f b6 84 24 b8
	01 00 00	 movzx	 eax, BYTE PTR _Val$[rsp]
  00123	85 c0		 test	 eax, eax
  00125	74 38		 je	 SHORT $LN4@do_put

; 1264 : 				_Str.assign(_Punct_fac.truename());

  00127	48 8d 94 24 20
	01 00 00	 lea	 rdx, QWORD PTR $T12[rsp]
  0012f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Punct_fac$2[rsp]
  00134	e8 00 00 00 00	 call	 ?truename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::truename
  00139	48 89 44 24 60	 mov	 QWORD PTR tv182[rsp], rax
  0013e	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv182[rsp]
  00143	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR _Str$11[rsp]
  0014b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00150	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR $T12[rsp]
  00158	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 1265 : 			else

  0015d	eb 36		 jmp	 SHORT $LN5@do_put
$LN4@do_put:

; 1266 : 				_Str.assign(_Punct_fac.falsename());

  0015f	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR $T13[rsp]
  00167	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Punct_fac$2[rsp]
  0016c	e8 00 00 00 00	 call	 ?falsename@?$numpunct@D@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::falsename
  00171	48 89 44 24 68	 mov	 QWORD PTR tv184[rsp], rax
  00176	48 8b 54 24 68	 mov	 rdx, QWORD PTR tv184[rsp]
  0017b	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR _Str$11[rsp]
  00183	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00188	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR $T13[rsp]
  00190	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@do_put:

; 1267 : 
; 1268 : 			size_t _Fillcount = _Iosbase.width() <= 0
; 1269 : 				|| (size_t)_Iosbase.width() <= _Str.size()

  00195	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  0019d	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  001a2	48 85 c0	 test	 rax, rax
  001a5	7e 5a		 jle	 SHORT $LN8@do_put
  001a7	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  001af	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  001b4	48 89 44 24 70	 mov	 QWORD PTR tv139[rsp], rax
  001b9	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR _Str$11[rsp]
  001c1	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  001c6	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv139[rsp]
  001cb	48 3b c8	 cmp	 rcx, rax
  001ce	76 31		 jbe	 SHORT $LN8@do_put
  001d0	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  001d8	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  001dd	48 89 44 24 78	 mov	 QWORD PTR tv144[rsp], rax
  001e2	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR _Str$11[rsp]
  001ea	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  001ef	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv144[rsp]
  001f4	48 2b c8	 sub	 rcx, rax
  001f7	48 8b c1	 mov	 rax, rcx
  001fa	48 89 44 24 40	 mov	 QWORD PTR tv148[rsp], rax
  001ff	eb 09		 jmp	 SHORT $LN9@do_put
$LN8@do_put:
  00201	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tv148[rsp], 0
$LN9@do_put:
  0020a	48 8b 44 24 40	 mov	 rax, QWORD PTR tv148[rsp]
  0020f	48 89 44 24 30	 mov	 QWORD PTR _Fillcount$1[rsp], rax

; 1270 : 					? 0 : (size_t)_Iosbase.width() - _Str.size();
; 1271 : 
; 1272 : 			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)

  00214	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  0021c	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  00221	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00226	83 f8 40	 cmp	 eax, 64			; 00000040H
  00229	74 65		 je	 SHORT $LN6@do_put

; 1273 : 				{	// put leading fill
; 1274 : 				_Dest = _Rep(_Dest, _Fill, _Fillcount);

  0022b	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR $T6[rsp]
  00233	48 8b f8	 mov	 rdi, rax
  00236	48 8b b4 24 a0
	01 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  0023e	b9 10 00 00 00	 mov	 ecx, 16
  00243	f3 a4		 rep movsb
  00245	48 8b 44 24 30	 mov	 rax, QWORD PTR _Fillcount$1[rsp]
  0024a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0024f	44 0f b6 8c 24
	b0 01 00 00	 movzx	 r9d, BYTE PTR _Fill$[rsp]
  00258	4c 8d 84 24 b0
	00 00 00	 lea	 r8, QWORD PTR $T6[rsp]
  00260	48 8d 94 24 e0
	00 00 00	 lea	 rdx, QWORD PTR $T9[rsp]
  00268	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00270	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00275	48 8b bc 24 a0
	01 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  0027d	48 8b f0	 mov	 rsi, rax
  00280	b9 10 00 00 00	 mov	 ecx, 16
  00285	f3 a4		 rep movsb

; 1275 : 				_Fillcount = 0;

  00287	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR _Fillcount$1[rsp], 0
$LN6@do_put:

; 1276 : 				}
; 1277 : 			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	// put field

  00290	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR _Str$11[rsp]
  00298	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  0029d	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv163[rsp], rax
  002a5	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR _Str$11[rsp]
  002ad	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  002b2	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR $T7[rsp]
  002ba	48 8b f9	 mov	 rdi, rcx
  002bd	48 8b b4 24 a0
	01 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  002c5	b9 10 00 00 00	 mov	 ecx, 16
  002ca	f3 a4		 rep movsb
  002cc	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv163[rsp]
  002d4	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  002d9	4c 8b c8	 mov	 r9, rax
  002dc	4c 8d 84 24 c0
	00 00 00	 lea	 r8, QWORD PTR $T7[rsp]
  002e4	48 8d 94 24 f0
	00 00 00	 lea	 rdx, QWORD PTR $T10[rsp]
  002ec	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  002f4	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PEBD_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  002f9	48 8b bc 24 a0
	01 00 00	 mov	 rdi, QWORD PTR _Dest$[rsp]
  00301	48 8b f0	 mov	 rsi, rax
  00304	b9 10 00 00 00	 mov	 ecx, 16
  00309	f3 a4		 rep movsb

; 1278 : 			_Iosbase.width(0);

  0030b	33 d2		 xor	 edx, edx
  0030d	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR _Iosbase$[rsp]
  00315	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEAA_J_J@Z ; std::ios_base::width

; 1279 : 			return (_Rep(_Dest, _Fill, _Fillcount));	// put trailing fill

  0031a	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR $T8[rsp]
  00322	48 8b f8	 mov	 rdi, rax
  00325	48 8b b4 24 a0
	01 00 00	 mov	 rsi, QWORD PTR _Dest$[rsp]
  0032d	b9 10 00 00 00	 mov	 ecx, 16
  00332	f3 a4		 rep movsb
  00334	48 8b 44 24 30	 mov	 rax, QWORD PTR _Fillcount$1[rsp]
  00339	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0033e	44 0f b6 8c 24
	b0 01 00 00	 movzx	 r9d, BYTE PTR _Fill$[rsp]
  00347	4c 8d 84 24 d0
	00 00 00	 lea	 r8, QWORD PTR $T8[rsp]
  0034f	48 8b 94 24 98
	01 00 00	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  00357	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0035f	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@AEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  00364	90		 npad	 1
  00365	48 8d 8c 24 00
	01 00 00	 lea	 rcx, QWORD PTR _Str$11[rsp]
  0036d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00372	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
$LN1@do_put:

; 1280 : 			}
; 1281 : 		}

  0037a	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00382	48 33 cc	 xor	 rcx, rsp
  00385	e8 00 00 00 00	 call	 __security_check_cookie
  0038a	48 81 c4 78 01
	00 00		 add	 rsp, 376		; 00000178H
  00391	5f		 pop	 rdi
  00392	5e		 pop	 rsi
  00393	c3		 ret	 0
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Fillcount$1 = 48
_Punct_fac$2 = 56
tv148 = 64
tv85 = 72
tv186 = 80
tv179 = 88
tv182 = 96
tv184 = 104
tv139 = 112
tv144 = 120
tv163 = 128
$T3 = 136
$T4 = 144
$T5 = 160
$T6 = 176
$T7 = 192
$T8 = 208
$T9 = 224
$T10 = 240
_Str$11 = 256
$T12 = 288
$T13 = 320
__$ArrayPad$ = 352
this$ = 400
__$ReturnUdt$ = 408
_Dest$ = 416
_Iosbase$ = 424
_Fill$ = 432
_Val$ = 440
?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 8d a0 00
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00010	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put'::`1'::dtor$0
_Fillcount$1 = 48
_Punct_fac$2 = 56
tv148 = 64
tv85 = 72
tv186 = 80
tv179 = 88
tv182 = 96
tv184 = 104
tv139 = 112
tv144 = 120
tv163 = 128
$T3 = 136
$T4 = 144
$T5 = 160
$T6 = 176
$T7 = 192
$T8 = 208
$T9 = 224
$T10 = 240
_Str$11 = 256
$T12 = 288
$T13 = 320
__$ArrayPad$ = 352
this$ = 400
__$ReturnUdt$ = 408
_Dest$ = 416
_Iosbase$ = 424
_Fill$ = 432
_Val$ = 440
?dtor$1@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put'::`1'::dtor$1
  0001b	40 55		 push	 rbp
  0001d	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00021	48 8b ea	 mov	 rbp, rdx
  00024	48 8d 8d 00 01
	00 00		 lea	 rcx, QWORD PTR _Str$11[rbp]
  0002b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5d		 pop	 rbp
  00035	c3		 ret	 0
?dtor$1@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_Fillcount$1 = 48
_Punct_fac$2 = 56
tv148 = 64
tv85 = 72
tv186 = 80
tv179 = 88
tv182 = 96
tv184 = 104
tv139 = 112
tv144 = 120
tv163 = 128
$T3 = 136
$T4 = 144
$T5 = 160
$T6 = 176
$T7 = 192
$T8 = 208
$T9 = 224
$T10 = 240
_Str$11 = 256
$T12 = 288
$T13 = 320
__$ArrayPad$ = 352
this$ = 400
__$ReturnUdt$ = 408
_Dest$ = 416
_Iosbase$ = 424
_Fill$ = 432
_Val$ = 440
?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 8d a0 00
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00010	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$0@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_Fillcount$1 = 48
_Punct_fac$2 = 56
tv148 = 64
tv85 = 72
tv186 = 80
tv179 = 88
tv182 = 96
tv184 = 104
tv139 = 112
tv144 = 120
tv163 = 128
$T3 = 136
$T4 = 144
$T5 = 160
$T6 = 176
$T7 = 192
$T8 = 208
$T9 = 224
$T10 = 240
_Str$11 = 256
$T12 = 288
$T13 = 320
__$ArrayPad$ = 352
this$ = 400
__$ReturnUdt$ = 408
_Dest$ = 416
_Iosbase$ = 424
_Fill$ = 432
_Val$ = 440
?dtor$1@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put'::`1'::dtor$1
  0001b	40 55		 push	 rbp
  0001d	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00021	48 8b ea	 mov	 rbp, rdx
  00024	48 8d 8d 00 01
	00 00		 lea	 rcx, QWORD PTR _Str$11[rbp]
  0002b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00030	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00034	5d		 pop	 rbp
  00035	c3		 ret	 0
?dtor$1@?0??do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@D_N@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z
_TEXT	SEGMENT
$T1 = 48
this$ = 96
__$ReturnUdt$ = 104
_Dest$ = 112
_Iosbase$ = 120
_Fill$ = 128
_Val$ = 136
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put, COMDAT

; 1218 : 		{	// put formatted unsigned long to _Dest

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1219 : 		return (do_put(_Dest, _Iosbase, _Fill, _Val));

  0001a	48 8d 44 24 30	 lea	 rax, QWORD PTR $T1[rsp]
  0001f	48 8b f8	 mov	 rdi, rax
  00022	48 8b 74 24 70	 mov	 rsi, QWORD PTR _Dest$[rsp]
  00027	b9 10 00 00 00	 mov	 ecx, 16
  0002c	f3 a4		 rep movsb
  0002e	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00033	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00036	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR _Val$[rsp]
  0003d	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  00041	0f b6 8c 24 80
	00 00 00	 movzx	 ecx, BYTE PTR _Fill$[rsp]
  00049	88 4c 24 20	 mov	 BYTE PTR [rsp+32], cl
  0004d	4c 8b 4c 24 78	 mov	 r9, QWORD PTR _Iosbase$[rsp]
  00052	4c 8d 44 24 30	 lea	 r8, QWORD PTR $T1[rsp]
  00057	48 8b 54 24 68	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  0005c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00061	ff 50 40	 call	 QWORD PTR [rax+64]
  00064	48 8b 44 24 68	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1220 : 		}

  00069	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006d	5f		 pop	 rdi
  0006e	5e		 pop	 rsi
  0006f	c3		 ret	 0
?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Lobj$ = 72
_Refs$ = 80
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT

; 1197 : 		{	// construct from specified locale

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00013	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 1196 : 		: locale::facet(_Refs)

  0001c	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Refs$[rsp]
  00021	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00026	e8 00 00 00 00	 call	 ??0facet@locale@std@@IEAA@_K@Z ; std::locale::facet::facet
  0002b	90		 npad	 1

; 1197 : 		{	// construct from specified locale

  0002c	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
  00038	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1198 : 		_Init(_Lobj);

  0003b	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Lobj$[rsp]
  00040	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00045	e8 00 00 00 00	 call	 ?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
  0004a	90		 npad	 1

; 1199 : 		}

  0004b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00050	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00054	c3		 ret	 0
??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
_Lobj$ = 72
_Refs$ = 80
?dtor$0@?0???0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1facet@locale@std@@MEAA@XZ ; std::locale::facet::~facet
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
_Lobj$ = 72
_Refs$ = 80
?dtor$0@?0???0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1facet@locale@std@@MEAA@XZ ; std::locale::facet::~facet
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init, COMDAT

; 1183 : 		{	// initialize from _Locinfo object

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1184 : 		}

  0000a	c3		 ret	 0
?_Init@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAXAEBV_Locinfo@2@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT

; 1179 : 		{	// destroy the object

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
  00015	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1180 : 		}

  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ??1facet@locale@std@@MEAA@XZ ; std::locale::facet::~facet
  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MEAA@XZ ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocnum
;	COMDAT ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
tv89 = 48
tv132 = 56
tv128 = 64
$T3 = 72
$T4 = 80
$T5 = 88
_Ppf$ = 208
_Ploc$ = 216
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat, COMDAT

; 1168 : 		{	// return locale category mask and construct standard facet

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00011	48 c7 44 24 50
	fe ff ff ff	 mov	 QWORD PTR $T4[rsp], -2
  0001a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 1169 : 		if (_Ppf != 0 && *_Ppf == 0)

  00022	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR _Ppf$[rsp], 0
  0002b	0f 84 b3 00 00
	00		 je	 $LN2@Getcat
  00031	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR _Ppf$[rsp]
  00039	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0003d	0f 85 a1 00 00
	00		 jne	 $LN2@Getcat

; 1170 : 			*_Ppf = new num_put<_Elem, _OutIt>(

  00043	b9 10 00 00 00	 mov	 ecx, 16
  00048	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0004d	48 89 44 24 28	 mov	 QWORD PTR $T2[rsp], rax
  00052	48 83 7c 24 28
	00		 cmp	 QWORD PTR $T2[rsp], 0
  00058	74 4d		 je	 SHORT $LN4@Getcat
  0005a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR _Ploc$[rsp]
  00062	e8 00 00 00 00	 call	 ?c_str@locale@std@@QEBAPEBDXZ ; std::locale::c_str
  00067	48 8b d0	 mov	 rdx, rax
  0006a	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T5[rsp]
  0006f	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QEAA@PEBD@Z ; std::_Locinfo::_Locinfo
  00074	48 89 44 24 38	 mov	 QWORD PTR tv132[rsp], rax
  00079	48 8b 44 24 38	 mov	 rax, QWORD PTR tv132[rsp]
  0007e	48 89 44 24 40	 mov	 QWORD PTR tv128[rsp], rax
  00083	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  00087	83 c8 01	 or	 eax, 1
  0008a	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  0008e	45 33 c0	 xor	 r8d, r8d
  00091	48 8b 54 24 40	 mov	 rdx, QWORD PTR tv128[rsp]
  00096	48 8b 4c 24 28	 mov	 rcx, QWORD PTR $T2[rsp]
  0009b	e8 00 00 00 00	 call	 ??0?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEAA@AEBV_Locinfo@1@_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
  000a0	48 89 44 24 30	 mov	 QWORD PTR tv89[rsp], rax
  000a5	eb 09		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  000a7	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv89[rsp], 0
$LN5@Getcat:
  000b0	48 8b 44 24 30	 mov	 rax, QWORD PTR tv89[rsp]
  000b5	48 89 44 24 48	 mov	 QWORD PTR $T3[rsp], rax
  000ba	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR _Ppf$[rsp]
  000c2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR $T3[rsp]
  000c7	48 89 08	 mov	 QWORD PTR [rax], rcx
  000ca	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  000ce	83 e0 01	 and	 eax, 1
  000d1	85 c0		 test	 eax, eax
  000d3	74 0f		 je	 SHORT $LN2@Getcat
  000d5	83 64 24 20 fe	 and	 DWORD PTR $T1[rsp], -2
  000da	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T5[rsp]
  000df	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QEAA@XZ ; std::_Locinfo::~_Locinfo
$LN2@Getcat:

; 1171 : 				_Locinfo(_Ploc->c_str()));
; 1172 : 		return (_X_NUMERIC);

  000e4	b8 04 00 00 00	 mov	 eax, 4

; 1173 : 		}

  000e9	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000f0	c3		 ret	 0
?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
tv89 = 48
tv132 = 56
tv128 = 64
$T3 = 72
$T4 = 80
$T5 = 88
_Ppf$ = 208
_Ploc$ = 216
?dtor$0@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	ba 10 00 00 00	 mov	 edx, 16
  0000e	48 8b 4d 28	 mov	 rcx, QWORD PTR $T2[rbp]
  00012	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5d		 pop	 rbp
  0001c	c3		 ret	 0
?dtor$0@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat'::`1'::dtor$0
$T1 = 32
$T2 = 40
tv89 = 48
tv132 = 56
tv128 = 64
$T3 = 72
$T4 = 80
$T5 = 88
_Ppf$ = 208
_Ploc$ = 216
?dtor$1@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat'::`1'::dtor$1
  0001d	40 55		 push	 rbp
  0001f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00023	48 8b ea	 mov	 rbp, rdx
  00026	8b 45 20	 mov	 eax, DWORD PTR $T1[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 0d		 je	 SHORT $LN8@dtor$1
  00030	83 65 20 fe	 and	 DWORD PTR $T1[rbp], -2
  00034	48 8d 4d 58	 lea	 rcx, QWORD PTR $T5[rbp]
  00038	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QEAA@XZ ; std::_Locinfo::~_Locinfo
$LN8@dtor$1:
  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?dtor$1@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
tv89 = 48
tv132 = 56
tv128 = 64
$T3 = 72
$T4 = 80
$T5 = 88
_Ppf$ = 208
_Ploc$ = 216
?dtor$0@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	ba 10 00 00 00	 mov	 edx, 16
  0000e	48 8b 4d 28	 mov	 rcx, QWORD PTR $T2[rbp]
  00012	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5d		 pop	 rbp
  0001c	c3		 ret	 0
?dtor$0@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
tv89 = 48
tv132 = 56
tv128 = 64
$T3 = 72
$T4 = 80
$T5 = 88
_Ppf$ = 208
_Ploc$ = 216
?dtor$1@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA PROC ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat'::`1'::dtor$1
  0001d	40 55		 push	 rbp
  0001f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00023	48 8b ea	 mov	 rbp, rdx
  00026	8b 45 20	 mov	 eax, DWORD PTR $T1[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 0d		 je	 SHORT $LN8@dtor$1
  00030	83 65 20 fe	 and	 DWORD PTR $T1[rbp], -2
  00034	48 8d 4d 58	 lea	 rcx, QWORD PTR $T5[rbp]
  00038	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QEAA@XZ ; std::_Locinfo::~_Locinfo
$LN8@dtor$1:
  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?dtor$1@?0??_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA ENDP ; `std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z
_TEXT	SEGMENT
_Psave$1 = 32
_Pf$2 = 40
_Lock$3 = 48
_Pfmod$4 = 56
_Id$5 = 64
$T6 = 72
$T7 = 80
$T8 = 88
_Loc$ = 128
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z PROC ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >, COMDAT

; 553  : 	{	// get facet reference from locale

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  00009	48 c7 44 24 50
	fe ff ff ff	 mov	 QWORD PTR $T7[rsp], -2

; 554  :  #if _NO_LOCALES
; 555  : 	static _Wrap_facet<_Facet> _Wfac;
; 556  : 	return (*(_Facet *)&_Wfac);
; 557  : 
; 558  :  #else /* _NO_LOCALES */
; 559  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00012	33 d2		 xor	 edx, edx
  00014	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Lock$3[rsp]
  00019	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit
  0001e	90		 npad	 1

; 560  : 		const locale::facet *_Psave =
; 561  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  0001f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PEBVfacet@locale@2@EB ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
  00026	48 89 44 24 20	 mov	 QWORD PTR _Psave$1[rsp], rax

; 562  : 
; 563  : 		size_t _Id = _Facet::id;

  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  00032	e8 00 00 00 00	 call	 ??Bid@locale@std@@QEAA_KXZ ; std::locale::id::operator unsigned __int64
  00037	48 89 44 24 40	 mov	 QWORD PTR _Id$5[rsp], rax

; 564  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  0003c	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Id$5[rsp]
  00041	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Loc$[rsp]
  00049	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z ; std::locale::_Getfacet
  0004e	48 89 44 24 28	 mov	 QWORD PTR _Pf$2[rsp], rax

; 565  : 
; 566  : 		if (_Pf != 0)

  00053	48 83 7c 24 28
	00		 cmp	 QWORD PTR _Pf$2[rsp], 0
  00059	74 05		 je	 SHORT $LN2@use_facet
  0005b	e9 84 00 00 00	 jmp	 $LN3@use_facet
$LN2@use_facet:

; 567  : 			;	// got facet from locale
; 568  : 		else if (_Psave != 0)

  00060	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Psave$1[rsp], 0
  00066	74 0c		 je	 SHORT $LN4@use_facet

; 569  : 			_Pf = _Psave;	// lazy facet already allocated

  00068	48 8b 44 24 20	 mov	 rax, QWORD PTR _Psave$1[rsp]
  0006d	48 89 44 24 28	 mov	 QWORD PTR _Pf$2[rsp], rax
  00072	eb 70		 jmp	 SHORT $LN3@use_facet
$LN4@use_facet:

; 570  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  00074	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR _Loc$[rsp]
  0007c	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Psave$1[rsp]
  00081	e8 00 00 00 00	 call	 ?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Getcat
  00086	48 83 f8 ff	 cmp	 rax, -1
  0008a	75 1e		 jne	 SHORT $LN6@use_facet

; 571  : 
; 572  :  #if _HAS_EXCEPTIONS
; 573  : 
; 574  : 			_THROW_NCEE(_XSTD bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  0008c	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T8[rsp]
  00091	e8 00 00 00 00	 call	 ??0bad_cast@std@@QEAA@XZ ; std::bad_cast::bad_cast
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVbad_cast@std@@
  0009d	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T8[rsp]
  000a2	e8 00 00 00 00	 call	 _CxxThrowException
  000a7	90		 npad	 1

; 575  : 
; 576  :  #else /* _HAS_EXCEPTIONS */
; 577  : 			abort();	// lazy disallowed
; 578  :  #endif /* _HAS_EXCEPTIONS */
; 579  : 
; 580  : 		else

  000a8	eb 3a		 jmp	 SHORT $LN3@use_facet
$LN6@use_facet:

; 581  : 			{	// queue up lazy facet for destruction
; 582  : 			_Pf = _Psave;

  000aa	48 8b 44 24 20	 mov	 rax, QWORD PTR _Psave$1[rsp]
  000af	48 89 44 24 28	 mov	 QWORD PTR _Pf$2[rsp], rax

; 583  : 			_Facetptr<_Facet>::_Psave = _Psave;

  000b4	48 8b 44 24 20	 mov	 rax, QWORD PTR _Psave$1[rsp]
  000b9	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PEBVfacet@locale@2@EB, rax ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave

; 584  : 
; 585  : 			locale::facet *_Pfmod = (_Facet *)_Psave;

  000c0	48 8b 44 24 20	 mov	 rax, QWORD PTR _Psave$1[rsp]
  000c5	48 89 44 24 38	 mov	 QWORD PTR _Pfmod$4[rsp], rax

; 586  : 			_Pfmod->_Incref();

  000ca	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pfmod$4[rsp]
  000cf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Pfmod$4[rsp]
  000d7	ff 50 08	 call	 QWORD PTR [rax+8]

; 587  : 
; 588  :  #if defined(_M_CEE)
; 589  : 			_Facet_Register_m(_Pfmod);
; 590  : 
; 591  :  #else /* defined(_M_CEE) */
; 592  : 			_Facet_Register(_Pfmod);

  000da	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Pfmod$4[rsp]
  000df	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z ; std::_Facet_Register
$LN3@use_facet:

; 593  :  #endif /* defined(_M_CEE) */
; 594  : 			}
; 595  : 
; 596  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  000e4	48 8b 44 24 28	 mov	 rax, QWORD PTR _Pf$2[rsp]
  000e9	48 89 44 24 48	 mov	 QWORD PTR $T6[rsp], rax
  000ee	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Lock$3[rsp]
  000f3	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit
  000f8	48 8b 44 24 48	 mov	 rax, QWORD PTR $T6[rsp]

; 597  : 	_END_LOCK()
; 598  :  #endif /* _NO_LOCALES */
; 599  : 	}	// end of use_facet body

  000fd	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00101	c3		 ret	 0
$LN10@use_facet:
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z ENDP ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Psave$1 = 32
_Pf$2 = 40
_Lock$3 = 48
_Pfmod$4 = 56
_Id$5 = 64
$T6 = 72
$T7 = 80
$T8 = 88
_Loc$ = 128
?dtor$0@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z@4HA PROC ; `std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 4d 30	 lea	 rcx, QWORD PTR _Lock$3[rbp]
  0000d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z@4HA ENDP ; `std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_Psave$1 = 32
_Pf$2 = 40
_Lock$3 = 48
_Pfmod$4 = 56
_Id$5 = 64
$T6 = 72
$T7 = 80
$T8 = 88
_Loc$ = 128
?dtor$0@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z@4HA PROC ; `std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 4d 30	 lea	 rcx, QWORD PTR _Lock$3[rbp]
  0000d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z@4HA ENDP ; `std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT

; 141  : 			{	// test if stream state okay

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 142  : 			return (_Ok);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]

; 143  : 			}

  0000e	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT

; 130  : 			{	// destroy the object

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 131  :  #if _HAS_EXCEPTIONS
; 132  : 			if (!_XSTD uncaught_exception())

  00012	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00017	90		 npad	 1
  00018	0f b6 c0	 movzx	 eax, al
  0001b	85 c0		 test	 eax, eax
  0001d	75 0e		 jne	 SHORT $LN2@sentry

; 133  : 				this->_Myostr._Osfx();

  0001f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00024	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00027	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
  0002c	90		 npad	 1
$LN2@sentry:

; 134  : 
; 135  :  #else /* _HAS_EXCEPTIONS */
; 136  : 			this->_Myostr._Osfx();
; 137  :  #endif /* _HAS_EXCEPTIONS */
; 138  : 			}

  0002d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00032	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00037	90		 npad	 1
  00038	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003c	c3		 ret	 0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Ostr$ = 72
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT

; 123  : 			{	// construct locking and testing stream

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 122  : 			: _Sentry_base(_Ostr)

  00017	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Ostr$[rsp]
  0001c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00021	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00026	90		 npad	 1

; 124  : 			if (_Ostr.good() && _Ostr.tie() != 0 && _Ostr.tie() != &_Ostr)

  00027	48 8b 44 24 48	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0002c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002f	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00033	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00038	48 03 c8	 add	 rcx, rax
  0003b	48 8b c1	 mov	 rax, rcx
  0003e	48 8b c8	 mov	 rcx, rax
  00041	e8 00 00 00 00	 call	 ?good@ios_base@std@@QEBA_NXZ ; std::ios_base::good
  00046	0f b6 c0	 movzx	 eax, al
  00049	85 c0		 test	 eax, eax
  0004b	74 71		 je	 SHORT $LN2@sentry
  0004d	48 8b 44 24 48	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00052	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00055	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00059	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0005e	48 03 c8	 add	 rcx, rax
  00061	48 8b c1	 mov	 rax, rcx
  00064	48 8b c8	 mov	 rcx, rax
  00067	e8 00 00 00 00	 call	 ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
  0006c	48 85 c0	 test	 rax, rax
  0006f	74 4d		 je	 SHORT $LN2@sentry
  00071	48 8b 44 24 48	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00076	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00079	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0007d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00082	48 03 c8	 add	 rcx, rax
  00085	48 8b c1	 mov	 rax, rcx
  00088	48 8b c8	 mov	 rcx, rax
  0008b	e8 00 00 00 00	 call	 ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
  00090	48 3b 44 24 48	 cmp	 rax, QWORD PTR _Ostr$[rsp]
  00095	74 27		 je	 SHORT $LN2@sentry

; 125  : 				_Ostr.tie()->flush();

  00097	48 8b 44 24 48	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0009c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009f	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000a3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  000a8	48 03 c8	 add	 rcx, rax
  000ab	48 8b c1	 mov	 rax, rcx
  000ae	48 8b c8	 mov	 rcx, rax
  000b1	e8 00 00 00 00	 call	 ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::tie
  000b6	48 8b c8	 mov	 rcx, rax
  000b9	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
$LN2@sentry:

; 126  : 			_Ok = _Ostr.good();	// store test only after flushing tie

  000be	48 8b 44 24 48	 mov	 rax, QWORD PTR _Ostr$[rsp]
  000c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c6	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000ca	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  000cf	48 03 c8	 add	 rcx, rax
  000d2	48 8b c1	 mov	 rax, rcx
  000d5	48 8b c8	 mov	 rcx, rax
  000d8	e8 00 00 00 00	 call	 ?good@ios_base@std@@QEBA_NXZ ; std::ios_base::good
  000dd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000e2	88 41 08	 mov	 BYTE PTR [rcx+8], al

; 127  : 			}

  000e5	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000ea	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ee	c3		 ret	 0
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
_Ostr$ = 72
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
_Ostr$ = 72
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
tv72 = 32
tv87 = 40
tv94 = 48
$T1 = 56
this$ = 80
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT

; 106  : 			{	// destroy after unlocking

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00009	48 c7 44 24 38
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 107  : 			if (_Myostr.rdbuf() != 0)

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001a	48 89 44 24 20	 mov	 QWORD PTR tv72[rsp], rax
  0001f	48 8b 44 24 20	 mov	 rax, QWORD PTR tv72[rsp]
  00024	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00027	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0002b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv72[rsp]
  00030	48 03 c8	 add	 rcx, rax
  00033	48 8b c1	 mov	 rax, rcx
  00036	48 8b c8	 mov	 rcx, rax
  00039	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0003e	90		 npad	 1
  0003f	48 85 c0	 test	 rax, rax
  00042	74 43		 je	 SHORT $LN2@Sentry_bas

; 108  : 				_Myostr.rdbuf()->_Unlock();

  00044	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00049	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004c	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  00051	48 8b 44 24 28	 mov	 rax, QWORD PTR tv87[rsp]
  00056	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00059	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0005d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv87[rsp]
  00062	48 03 c8	 add	 rcx, rax
  00065	48 8b c1	 mov	 rax, rcx
  00068	48 8b c8	 mov	 rcx, rax
  0006b	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00070	90		 npad	 1
  00071	48 89 44 24 30	 mov	 QWORD PTR tv94[rsp], rax
  00076	48 8b 44 24 30	 mov	 rax, QWORD PTR tv94[rsp]
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv94[rsp]
  00083	ff 50 10	 call	 QWORD PTR [rax+16]
  00086	90		 npad	 1
$LN2@Sentry_bas:

; 109  : 			}

  00087	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0008b	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
tv73 = 32
tv88 = 40
tv95 = 48
this$ = 80
_Ostr$ = 88
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT

; 100  : 			{	// lock the stream buffer, if there

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 99   : 			: _Myostr(_Ostr)

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00018	48 89 08	 mov	 QWORD PTR [rax], rcx

; 101  : 			if (_Myostr.rdbuf() != 0)

  0001b	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00020	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00023	48 89 44 24 20	 mov	 QWORD PTR tv73[rsp], rax
  00028	48 8b 44 24 20	 mov	 rax, QWORD PTR tv73[rsp]
  0002d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00030	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00034	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv73[rsp]
  00039	48 03 c8	 add	 rcx, rax
  0003c	48 8b c1	 mov	 rax, rcx
  0003f	48 8b c8	 mov	 rcx, rax
  00042	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00047	48 85 c0	 test	 rax, rax
  0004a	74 41		 je	 SHORT $LN2@Sentry_bas

; 102  : 				_Myostr.rdbuf()->_Lock();

  0004c	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00051	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00054	48 89 44 24 28	 mov	 QWORD PTR tv88[rsp], rax
  00059	48 8b 44 24 28	 mov	 rax, QWORD PTR tv88[rsp]
  0005e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00061	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00065	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv88[rsp]
  0006a	48 03 c8	 add	 rcx, rax
  0006d	48 8b c1	 mov	 rax, rcx
  00070	48 8b c8	 mov	 rcx, rax
  00073	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00078	48 89 44 24 30	 mov	 QWORD PTR tv95[rsp], rax
  0007d	48 8b 44 24 30	 mov	 rax, QWORD PTR tv95[rsp]
  00082	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00085	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv95[rsp]
  0008a	ff 50 08	 call	 QWORD PTR [rax+8]
$LN2@Sentry_bas:

; 103  : 			}

  0008d	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00092	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00096	c3		 ret	 0
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ
_TEXT	SEGMENT
this$ = 8
??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ PROC		; std::fpos<_Mbstatet>::operator __int64, COMDAT

; 67   : 		{	// return offset

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 68   : 		return ((streamoff)(_Myoff + _FPOSOFF(_Fpos)));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0000d	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00012	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]

; 69   : 		}

  00016	c3		 ret	 0
??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ ENDP		; std::fpos<_Mbstatet>::operator __int64
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z
_TEXT	SEGMENT
this$ = 16
_Off$ = 24
??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z PROC		; std::fpos<_Mbstatet>::fpos<_Mbstatet>, COMDAT

; 43   : 		{	// construct with stream offset

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi

; 42   : 		: _Myoff(_Off), _Fpos(_Fpz), _Mystate()

  0000b	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00010	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Off$[rsp]
  00015	48 89 08	 mov	 QWORD PTR [rax], rcx
  00018	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0001d	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00025	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0002a	48 83 c0 10	 add	 rax, 16
  0002e	48 8b f8	 mov	 rdi, rax
  00031	33 c0		 xor	 eax, eax
  00033	b9 08 00 00 00	 mov	 ecx, 8
  00038	f3 aa		 rep stosb

; 44   : 		}

  0003a	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  0003f	5f		 pop	 rdi
  00040	c3		 ret	 0
??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ENDP		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Al$ = 72
??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::_Wrap_alloc<std::allocator<char> >,void>, COMDAT

; 597  : 		{	// construct allocator from _Al

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 595  : 		: _Mypair(_One_then_variadic_args_t(),

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Al$[rsp]
  00013	e8 00 00 00 00	 call	 ??$forward@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEAU10@@Z ; std::forward<std::_Wrap_alloc<std::allocator<char> > >
  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	4c 8b c0	 mov	 r8, rax
  00020	0f b6 54 24 20	 movzx	 edx, BYTE PTR $T1[rsp]
  00025	e8 00 00 00 00	 call	 ??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><std::_Wrap_alloc<std::allocator<char> > >

; 598  : 		}

  0002a	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0002f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00033	c3		 ret	 0
??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::_Wrap_alloc<std::allocator<char> >,void>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AEAU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$move@AEAU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEAU10@@Z PROC ; std::move<std::_Wrap_alloc<std::allocator<char> > & __ptr64>, COMDAT

; 1291 : 	{	// forward _Arg as movable

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1293 : 	}

  0000a	c3		 ret	 0
??$move@AEAU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEAU10@@Z ENDP ; std::move<std::_Wrap_alloc<std::allocator<char> > & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1277 : 	}

  0000a	c3		 ret	 0
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 56
$T3 = 64
$T4 = 72
this$ = 96
_First$ = 104
_Last$ = 112
??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > >, COMDAT

; 1202 : 		{	// assign [_First, _Last), input iterators

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1203 : 		return (replace(begin(), end(), _First, _Last));

  00013	48 8d 54 24 40	 lea	 rdx, QWORD PTR $T3[rsp]
  00018	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
  00022	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00025	48 89 44 24 30	 mov	 QWORD PTR $T1[rsp], rax
  0002a	48 8d 54 24 48	 lea	 rdx, QWORD PTR $T4[rsp]
  0002f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00034	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  00039	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003c	48 89 44 24 38	 mov	 QWORD PTR $T2[rsp], rax
  00041	48 8b 44 24 70	 mov	 rax, QWORD PTR _Last$[rsp]
  00046	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0004b	4c 8b 4c 24 68	 mov	 r9, QWORD PTR _First$[rsp]
  00050	4c 8b 44 24 30	 mov	 r8, QWORD PTR $T1[rsp]
  00055	48 8b 54 24 38	 mov	 rdx, QWORD PTR $T2[rsp]
  0005a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0005f	e8 00 00 00 00	 call	 ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace

; 1204 : 		}

  00064	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00068	c3		 ret	 0
??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_JAEBV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_JAEBV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator-, COMDAT

; 398  : 		{	// return difference of iterators

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 399  : 		return (*(_Mybase *)this - _Right);

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Right$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_JAEBV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator-

; 400  : 		}

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_JAEBV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator-
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ
_TEXT	SEGMENT
this$ = 48
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*, COMDAT

; 339  : 		{	// return designated object

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 340  : 		return ((reference)**(_Mybase *)this);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*

; 341  : 		}

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base0@1@@Z
_TEXT	SEGMENT
this$ = 48
_Parg$ = 56
_Pstring$ = 64
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base0@1@@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 322  : 		{	// construct with pointer _Parg

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 321  : 		: _Mybase(_Parg, _Pstring)

  00013	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Pstring$[rsp]
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Parg$[rsp]
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base0@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >

; 323  : 		}

  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base0@1@@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?9DD@std@@YA_NAEBV?$allocator@D@0@0@Z
_TEXT	SEGMENT
_Left$ = 8
_Right$ = 16
??$?9DD@std@@YA_NAEBV?$allocator@D@0@0@Z PROC		; std::operator!=<char,char>, COMDAT

; 803  : 	{	// test for allocator inequality

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 804  : 	return (false);

  0000a	32 c0		 xor	 al, al

; 805  : 	}

  0000c	c3		 ret	 0
??$?9DD@std@@YA_NAEBV?$allocator@D@0@0@Z ENDP		; std::operator!=<char,char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$?9V?$allocator@D@std@@V01@@std@@YA_NAEBU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z
_TEXT	SEGMENT
tv69 = 32
_Left$ = 64
_Right$ = 72
??$?9V?$allocator@D@std@@V01@@std@@YA_NAEBU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z PROC ; std::operator!=<std::allocator<char>,std::allocator<char> >, COMDAT

; 1025 : 	{	// test for allocator inequality

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1026 : 	return (!(_Left == _Right));

  0000e	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Right$[rsp]
  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Left$[rsp]
  00018	e8 00 00 00 00	 call	 ??$?8V?$allocator@D@std@@V01@@std@@YA_NAEBU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z ; std::operator==<std::allocator<char>,std::allocator<char> >
  0001d	0f b6 c0	 movzx	 eax, al
  00020	85 c0		 test	 eax, eax
  00022	75 0a		 jne	 SHORT $LN3@operator
  00024	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv69[rsp], 1
  0002c	eb 08		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0002e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv69[rsp], 0
$LN4@operator:
  00036	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv69[rsp]

; 1027 : 	}

  0003b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003f	c3		 ret	 0
??$?9V?$allocator@D@std@@V01@@std@@YA_NAEBU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z ENDP ; std::operator!=<std::allocator<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAXAEBV12@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAXAEBV12@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat, COMDAT

; 269  : 		{	// test for compatible iterator pair

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 270  : 		}

  0000a	c3		 ret	 0
?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAXAEBV12@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
tv69 = 32
this$ = 64
_Right$ = 72
??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_NAEBV01@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator==, COMDAT

; 220  : 		{	// test for iterator equality

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 221  : 		_Compat(_Right);

  0000e	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Right$[rsp]
  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAXAEBV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat

; 222  : 		return (_Ptr == _Right._Ptr);

  0001d	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  00027	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0002a	48 39 08	 cmp	 QWORD PTR [rax], rcx
  0002d	75 0a		 jne	 SHORT $LN3@operator
  0002f	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv69[rsp], 1
  00037	eb 08		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00039	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv69[rsp], 0
$LN4@operator:
  00041	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv69[rsp]

; 223  : 		}

  00046	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004a	c3		 ret	 0
??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_NAEBV01@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_JAEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_JAEBV01@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator-, COMDAT

; 209  : 		{	// return difference of iterators

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 210  : 		_Compat(_Right);

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Right$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAXAEBV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat

; 211  : 		return (_Ptr - _Right._Ptr);

  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Right$[rsp]
  00027	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0002a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002d	48 2b c1	 sub	 rax, rcx

; 212  : 		}

  00030	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00034	c3		 ret	 0
??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_JAEBV01@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator-
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ
_TEXT	SEGMENT
this$ = 8
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*, COMDAT

; 67   : 		{	// return designated object

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 68   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 69   : 		const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
; 70   : 		const auto _Contptr = _Mycont ? _Mycont->_Myptr() : 0;
; 71   : 		if (_Mycont == 0
; 72   : 			|| _Ptr == nullptr_t{}
; 73   : 			|| _Unfancy(_Ptr) < _Contptr
; 74   : 			|| _Contptr + _Mycont->_Mysize <= _Unfancy(_Ptr))
; 75   : 			{	// report error
; 76   : 			_DEBUG_ERROR("string iterator not dereferencable");
; 77   : 			_SCL_SECURE_OUT_OF_RANGE;
; 78   : 			}
; 79   : 
; 80   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 81   : 		_SCL_SECURE_VALIDATE(_Ptr != nullptr_t{});
; 82   : 		const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
; 83   : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 84   : 		const auto _Contptr = _Mycont->_Myptr();
; 85   : 		_SCL_SECURE_VALIDATE_RANGE(_Contptr <= _Unfancy(_Ptr) && _Unfancy(_Ptr) < _Contptr + _Mycont->_Mysize);
; 86   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 87   : 
; 88   : 		_Analysis_assume_(_Ptr != nullptr_t{});
; 89   : 
; 90   : 		return (*_Ptr);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 91   : 		}

  0000d	c3		 ret	 0
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEBDXZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base0@1@@Z
_TEXT	SEGMENT
this$ = 48
_Parg$ = 56
_Pstring$ = 64
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base0@1@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 49   : 		{	// construct with pointer _Parg

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 48   : 		: _Ptr(_Parg)

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00018	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Parg$[rsp]
  0001d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 50   : 		this->_Adopt(_Pstring);

  00020	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Pstring$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002a	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 51   : 		}

  0002f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00034	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00038	c3		 ret	 0
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEBDPEBU_Container_base0@1@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@V?$vector@IV?$allocator@I@std@@@std@@@std@@YA$$QEAV?$vector@IV?$allocator@I@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@V?$vector@IV?$allocator@I@std@@@std@@@std@@YA$$QEAV?$vector@IV?$allocator@I@std@@@0@AEAV10@@Z PROC ; std::forward<std::vector<unsigned int,std::allocator<unsigned int> > >, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1277 : 	}

  0000a	c3		 ret	 0
??$forward@V?$vector@IV?$allocator@I@std@@@std@@@std@@YA$$QEAV?$vector@IV?$allocator@I@std@@@0@AEAV10@@Z ENDP ; std::forward<std::vector<unsigned int,std::allocator<unsigned int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@I@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAA@$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@1@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Al$ = 72
??$?0U?$_Wrap_alloc@V?$allocator@I@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAA@$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > ><std::_Wrap_alloc<std::allocator<unsigned int> >,void>, COMDAT

; 528  : 		{	// construct allocator from _Al

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 526  : 		: _Mypair(_One_then_variadic_args_t(),

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Al$[rsp]
  00013	e8 00 00 00 00	 call	 ??$forward@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@AEAU10@@Z ; std::forward<std::_Wrap_alloc<std::allocator<unsigned int> > >
  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	4c 8b c0	 mov	 r8, rax
  00020	0f b6 54 24 20	 movzx	 edx, BYTE PTR $T1[rsp]
  00025	e8 00 00 00 00	 call	 ??$?0U?$_Wrap_alloc@V?$allocator@I@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1><std::_Wrap_alloc<std::allocator<unsigned int> > >

; 529  : 		}

  0002a	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0002f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00033	c3		 ret	 0
??$?0U?$_Wrap_alloc@V?$allocator@I@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAA@$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > ><std::_Wrap_alloc<std::allocator<unsigned int> >,void>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$move@AEAU?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@AEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$move@AEAU?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@AEAU10@@Z PROC ; std::move<std::_Wrap_alloc<std::allocator<unsigned int> > & __ptr64>, COMDAT

; 1291 : 	{	// forward _Arg as movable

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1292 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1293 : 	}

  0000a	c3		 ret	 0
??$move@AEAU?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@AEAU10@@Z ENDP ; std::move<std::_Wrap_alloc<std::allocator<unsigned int> > & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@II@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAI$$QEAI@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@II@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAI$$QEAI@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned int> >::construct<unsigned int,unsigned int>, COMDAT

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00018	e8 00 00 00 00	 call	 ??$forward@I@std@@YA$$QEAIAEAI@Z ; std::forward<unsigned int>
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$construct@II@?$allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@PEAI$$QEAI@Z ; std::allocator_traits<std::allocator<unsigned int> >::construct<unsigned int,unsigned int>

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
??$construct@II@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAI$$QEAI@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned int> >::construct<unsigned int,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@I@std@@YA$$QEAIAEAI@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@I@std@@YA$$QEAIAEAI@Z PROC			; std::forward<unsigned int>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1277 : 	}

  0000a	c3		 ret	 0
??$forward@I@std@@YA$$QEAIAEAI@Z ENDP			; std::forward<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@I@std@@YAPEAIAEAI@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@I@std@@YAPEAIAEAI@Z PROC			; std::addressof<unsigned int>, COMDAT

; 724  : 	{	// return address of _Val

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 725  : 	return (__builtin_addressof(_Val));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Val$[rsp]

; 726  : 	}

  0000a	c3		 ret	 0
??$addressof@I@std@@YAPEAIAEAI@Z ENDP			; std::addressof<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@IAEBI@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAIAEBI@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@IAEBI@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAIAEBI@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned int> >::construct<unsigned int,unsigned int const & __ptr64>, COMDAT

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00018	e8 00 00 00 00	 call	 ??$forward@AEBI@std@@YAAEBIAEBI@Z ; std::forward<unsigned int const & __ptr64>
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$construct@IAEBI@?$allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@PEAIAEBI@Z ; std::allocator_traits<std::allocator<unsigned int> >::construct<unsigned int,unsigned int const & __ptr64>

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
??$construct@IAEBI@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAIAEBI@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned int> >::construct<unsigned int,unsigned int const & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@IAEAI@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAIAEAI@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@IAEAI@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAIAEAI@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned int> >::construct<unsigned int,unsigned int & __ptr64>, COMDAT

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00018	e8 00 00 00 00	 call	 ??$forward@AEAI@std@@YAAEAIAEAI@Z ; std::forward<unsigned int & __ptr64>
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$construct@IAEAI@?$allocator_traits@V?$allocator@I@std@@@std@@SAXAEAV?$allocator@I@1@PEAIAEAI@Z ; std::allocator_traits<std::allocator<unsigned int> >::construct<unsigned int,unsigned int & __ptr64>

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
??$construct@IAEAI@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAIAEAI@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned int> >::construct<unsigned int,unsigned int & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Unfancy@I@std@@YAPEAIPEAI@Z
_TEXT	SEGMENT
_Ptr$ = 8
??$_Unfancy@I@std@@YAPEAIPEAI@Z PROC			; std::_Unfancy<unsigned int>, COMDAT

; 739  : 	{	// do nothing for plain pointers

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 740  : 	return (_Ptr);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]

; 741  : 	}

  0000a	c3		 ret	 0
??$_Unfancy@I@std@@YAPEAIPEAI@Z ENDP			; std::_Unfancy<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBI@std@@YAPEBIAEBI@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@$$CBI@std@@YAPEBIAEBI@Z PROC		; std::addressof<unsigned int const >, COMDAT

; 724  : 	{	// return address of _Val

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 725  : 	return (__builtin_addressof(_Val));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Val$[rsp]

; 726  : 	}

  0000a	c3		 ret	 0
??$addressof@$$CBI@std@@YAPEBIAEBI@Z ENDP		; std::addressof<unsigned int const >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@W4Api@RtAudio@@W412@@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXPEAW4Api@RtAudio@@$$QEAW423@@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@W4Api@RtAudio@@W412@@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXPEAW4Api@RtAudio@@$$QEAW423@@Z PROC ; std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >::construct<enum RtAudio::Api,enum RtAudio::Api>, COMDAT

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00018	e8 00 00 00 00	 call	 ??$forward@W4Api@RtAudio@@@std@@YA$$QEAW4Api@RtAudio@@AEAW412@@Z ; std::forward<enum RtAudio::Api>
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$construct@W4Api@RtAudio@@W412@@?$allocator_traits@V?$allocator@W4Api@RtAudio@@@std@@@std@@SAXAEAV?$allocator@W4Api@RtAudio@@@1@PEAW4Api@RtAudio@@$$QEAW434@@Z ; std::allocator_traits<std::allocator<enum RtAudio::Api> >::construct<enum RtAudio::Api,enum RtAudio::Api>

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
??$construct@W4Api@RtAudio@@W412@@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXPEAW4Api@RtAudio@@$$QEAW423@@Z ENDP ; std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >::construct<enum RtAudio::Api,enum RtAudio::Api>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@W4Api@RtAudio@@@std@@YA$$QEAW4Api@RtAudio@@AEAW412@@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@W4Api@RtAudio@@@std@@YA$$QEAW4Api@RtAudio@@AEAW412@@Z PROC ; std::forward<enum RtAudio::Api>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1277 : 	}

  0000a	c3		 ret	 0
??$forward@W4Api@RtAudio@@@std@@YA$$QEAW4Api@RtAudio@@AEAW412@@Z ENDP ; std::forward<enum RtAudio::Api>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Unfancy@W4Api@RtAudio@@@std@@YAPEAW4Api@RtAudio@@PEAW412@@Z
_TEXT	SEGMENT
_Ptr$ = 8
??$_Unfancy@W4Api@RtAudio@@@std@@YAPEAW4Api@RtAudio@@PEAW412@@Z PROC ; std::_Unfancy<enum RtAudio::Api>, COMDAT

; 739  : 	{	// do nothing for plain pointers

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 740  : 	return (_Ptr);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]

; 741  : 	}

  0000a	c3		 ret	 0
??$_Unfancy@W4Api@RtAudio@@@std@@YAPEAW4Api@RtAudio@@PEAW412@@Z ENDP ; std::_Unfancy<enum RtAudio::Api>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@W4Api@RtAudio@@@std@@YAPEAW4Api@RtAudio@@AEAW412@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@W4Api@RtAudio@@@std@@YAPEAW4Api@RtAudio@@AEAW412@@Z PROC ; std::addressof<enum RtAudio::Api>, COMDAT

; 724  : 	{	// return address of _Val

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 725  : 	return (__builtin_addressof(_Val));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Val$[rsp]

; 726  : 	}

  0000a	c3		 ret	 0
??$addressof@W4Api@RtAudio@@@std@@YAPEAW4Api@RtAudio@@AEAW412@@Z ENDP ; std::addressof<enum RtAudio::Api>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@HH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAH$$QEAH@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@HH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAH$$QEAH@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int>, COMDAT

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00018	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$construct@HH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@PEAH$$QEAH@Z ; std::allocator_traits<std::allocator<int> >::construct<int,int>

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
??$construct@HH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAH$$QEAH@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\type_traits
;	COMDAT ??$forward@H@std@@YA$$QEAHAEAH@Z
_TEXT	SEGMENT
_Arg$ = 8
??$forward@H@std@@YA$$QEAHAEAH@Z PROC			; std::forward<int>, COMDAT

; 1275 : 	{	// forward an lvalue as either an lvalue or an rvalue

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1276 : 	return (static_cast<_Ty&&>(_Arg));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Arg$[rsp]

; 1277 : 	}

  0000a	c3		 ret	 0
??$forward@H@std@@YA$$QEAHAEAH@Z ENDP			; std::forward<int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@H@std@@YAPEAHAEAH@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@H@std@@YAPEAHAEAH@Z PROC			; std::addressof<int>, COMDAT

; 724  : 	{	// return address of _Val

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 725  : 	return (__builtin_addressof(_Val));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Val$[rsp]

; 726  : 	}

  0000a	c3		 ret	 0
??$addressof@H@std@@YAPEAHAEAH@Z ENDP			; std::addressof<int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@HAEBH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAHAEBH@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@HAEBH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAHAEBH@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int const & __ptr64>, COMDAT

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00018	e8 00 00 00 00	 call	 ??$forward@AEBH@std@@YAAEBHAEBH@Z ; std::forward<int const & __ptr64>
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$construct@HAEBH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@PEAHAEBH@Z ; std::allocator_traits<std::allocator<int> >::construct<int,int const & __ptr64>

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
??$construct@HAEBH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAHAEBH@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int const & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@HAEAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAHAEAH@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@HAEAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAHAEAH@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int & __ptr64>, COMDAT

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00018	e8 00 00 00 00	 call	 ??$forward@AEAH@std@@YAAEAHAEAH@Z ; std::forward<int & __ptr64>
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$construct@HAEAH@?$allocator_traits@V?$allocator@H@std@@@std@@SAXAEAV?$allocator@H@1@PEAHAEAH@Z ; std::allocator_traits<std::allocator<int> >::construct<int,int & __ptr64>

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
??$construct@HAEAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAHAEAH@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Unfancy@H@std@@YAPEAHPEAH@Z
_TEXT	SEGMENT
_Ptr$ = 8
??$_Unfancy@H@std@@YAPEAHPEAH@Z PROC			; std::_Unfancy<int>, COMDAT

; 739  : 	{	// do nothing for plain pointers

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 740  : 	return (_Ptr);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]

; 741  : 	}

  0000a	c3		 ret	 0
??$_Unfancy@H@std@@YAPEAHPEAH@Z ENDP			; std::_Unfancy<int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBH@std@@YAPEBHAEBH@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@$$CBH@std@@YAPEBHAEBH@Z PROC		; std::addressof<int const >, COMDAT

; 724  : 	{	// return address of _Val

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 725  : 	return (__builtin_addressof(_Val));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Val$[rsp]

; 726  : 	}

  0000a	c3		 ret	 0
??$addressof@$$CBH@std@@YAPEBHAEBH@Z ENDP		; std::addressof<int const >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UDsDevice@@AEBU1@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@UDsDevice@@AEBU1@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z PROC ; std::_Wrap_alloc<std::allocator<DsDevice> >::construct<DsDevice,DsDevice const & __ptr64>, COMDAT

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00018	e8 00 00 00 00	 call	 ??$forward@AEBUDsDevice@@@std@@YAAEBUDsDevice@@AEBU1@@Z ; std::forward<DsDevice const & __ptr64>
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$construct@UDsDevice@@AEBU1@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@AEBU3@@Z ; std::allocator_traits<std::allocator<DsDevice> >::construct<DsDevice,DsDevice const & __ptr64>

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
??$construct@UDsDevice@@AEBU1@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<DsDevice> >::construct<DsDevice,DsDevice const & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??$construct@UDsDevice@@AEAU1@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
<_Args_0>$ = 64
??$construct@UDsDevice@@AEAU1@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<DsDevice> >::construct<DsDevice,DsDevice & __ptr64>, COMDAT

; 994  : 		{	// construct _Ty(_Types...) at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 995  : 		_Mytraits::construct(*this, _Ptr,

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR <_Args_0>$[rsp]
  00018	e8 00 00 00 00	 call	 ??$forward@AEAUDsDevice@@@std@@YAAEAUDsDevice@@AEAU1@@Z ; std::forward<DsDevice & __ptr64>
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$construct@UDsDevice@@AEAU1@@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SAXAEAV?$allocator@UDsDevice@@@1@PEAUDsDevice@@AEAU3@@Z ; std::allocator_traits<std::allocator<DsDevice> >::construct<DsDevice,DsDevice & __ptr64>

; 996  : 			_STD forward<_Types>(_Args)...);
; 997  : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
??$construct@UDsDevice@@AEAU1@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<DsDevice> >::construct<DsDevice,DsDevice & __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$_Unfancy@UDsDevice@@@std@@YAPEAUDsDevice@@PEAU1@@Z
_TEXT	SEGMENT
_Ptr$ = 8
??$_Unfancy@UDsDevice@@@std@@YAPEAUDsDevice@@PEAU1@@Z PROC ; std::_Unfancy<DsDevice>, COMDAT

; 739  : 	{	// do nothing for plain pointers

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 740  : 	return (_Ptr);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ptr$[rsp]

; 741  : 	}

  0000a	c3		 ret	 0
??$_Unfancy@UDsDevice@@@std@@YAPEAUDsDevice@@PEAU1@@Z ENDP ; std::_Unfancy<DsDevice>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstddef
;	COMDAT ??$addressof@$$CBUDsDevice@@@std@@YAPEBUDsDevice@@AEBU1@@Z
_TEXT	SEGMENT
_Val$ = 8
??$addressof@$$CBUDsDevice@@@std@@YAPEBUDsDevice@@AEBU1@@Z PROC ; std::addressof<DsDevice const >, COMDAT

; 724  : 	{	// return address of _Val

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 725  : 	return (__builtin_addressof(_Val));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Val$[rsp]

; 726  : 	}

  0000a	c3		 ret	 0
??$addressof@$$CBUDsDevice@@@std@@YAPEBUDsDevice@@AEBU1@@Z ENDP ; std::addressof<DsDevice const >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??$_Move_unchecked@PEAUDsDevice@@PEAU1@@std@@YAPEAUDsDevice@@PEAU1@00@Z
_TEXT	SEGMENT
$T1 = 32
_First$ = 64
_Last$ = 72
_Dest$ = 80
??$_Move_unchecked@PEAUDsDevice@@PEAU1@@std@@YAPEAUDsDevice@@PEAU1@00@Z PROC ; std::_Move_unchecked<DsDevice * __ptr64,DsDevice * __ptr64>, COMDAT

; 2597 : 	{	// move [_First, _Last) to [_Dest, ...), choose optimization

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2598 : 	return (_Move_unchecked1(_First, _Last,

  00013	48 8d 54 24 50	 lea	 rdx, QWORD PTR _Dest$[rsp]
  00018	48 8d 4c 24 40	 lea	 rcx, QWORD PTR _First$[rsp]
  0001d	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@UDsDevice@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@AEBQEAUDsDevice@@0@Z ; std::_Ptr_move_cat<DsDevice,DsDevice>
  00022	88 44 24 20	 mov	 BYTE PTR $T1[rsp], al
  00026	44 0f b6 4c 24
	20		 movzx	 r9d, BYTE PTR $T1[rsp]
  0002c	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Dest$[rsp]
  00031	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Last$[rsp]
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First$[rsp]
  0003b	e8 00 00 00 00	 call	 ??$_Move_unchecked1@PEAUDsDevice@@PEAU1@@std@@YAPEAUDsDevice@@PEAU1@00U_General_ptr_iterator_tag@0@@Z ; std::_Move_unchecked1<DsDevice * __ptr64,DsDevice * __ptr64>

; 2599 : 		_Dest, _Ptr_move_cat(_First, _Dest)));
; 2600 : 	}

  00040	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00044	c3		 ret	 0
??$_Move_unchecked@PEAUDsDevice@@PEAU1@@std@@YAPEAUDsDevice@@PEAU1@00@Z ENDP ; std::_Move_unchecked<DsDevice * __ptr64,DsDevice * __ptr64>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
tv68 = 32
_Left$ = 64
_Right$ = 72
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2459 : 	{	// test for string equality

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2460 : 	return (_Left.compare(_Right) == 0);

  0000e	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Right$[rsp]
  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Left$[rsp]
  00018	e8 00 00 00 00	 call	 ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAHAEBV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
  0001d	85 c0		 test	 eax, eax
  0001f	75 0a		 jne	 SHORT $LN3@operator
  00021	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
  00029	eb 08		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0002b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
$LN4@operator:
  00033	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv68[rsp]

; 2461 : 	}

  00038	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003c	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\algorithm
;	COMDAT ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@0@Z
_TEXT	SEGMENT
$T1 = 32
_First$ = 64
_Last$ = 72
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@0@Z PROC ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > > >, COMDAT

; 2790 : 	{	// order [_First, _Last), using operator<

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2791 : 	_STD sort(_First, _Last, less<>());

  0000e	44 0f b6 44 24
	20		 movzx	 r8d, BYTE PTR $T1[rsp]
  00014	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Last$[rsp]
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First$[rsp]
  0001e	e8 00 00 00 00	 call	 ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@U?$less@X@2@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@0U?$less@X@0@@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >,std::less<void> >

; 2792 : 	}

  00023	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00027	c3		 ret	 0
??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@0@Z ENDP ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@QEBAPEAIXZ
_TEXT	SEGMENT
this$ = 8
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@QEBAPEAIXZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Unchecked, COMDAT

; 325  : 		{	// make an unchecked iterator

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 326  : 		return (this->_Ptr);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 327  : 		}

  0000d	c3		 ret	 0
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@QEBAPEAIXZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z
_TEXT	SEGMENT
this$ = 48
_Parg$ = 56
_Pvector$ = 64
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >, COMDAT

; 313  : 		{	// construct with pointer _Parg

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 312  : 		: _Mybase(_Parg, _Pvector)

  00013	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Pvector$[rsp]
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Parg$[rsp]
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >

; 314  : 		}

  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z
_TEXT	SEGMENT
this$ = 48
_Parg$ = 56
_Pvector$ = 64
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >, COMDAT

; 47   : 		{	// construct with pointer _Parg

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 46   : 		: _Ptr(_Parg)

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00018	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Parg$[rsp]
  0001d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 48   : 		this->_Adopt(_Pvector);

  00020	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Pvector$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002a	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 49   : 		}

  0002f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00034	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00038	c3		 ret	 0
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\string
;	COMDAT ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
_State$ = 32
tv295 = 36
tv300 = 37
_Pad$ = 40
_Size$ = 48
tv139 = 56
tv297 = 60
$T1 = 64
$T2 = 68
tv302 = 72
$T3 = 76
$T4 = 80
tv137 = 88
tv296 = 96
tv298 = 104
tv299 = 112
tv301 = 120
$T5 = 128
_Ok$ = 136
$T6 = 152
_Ostr$ = 176
_Str$ = 184
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 170  : 	{	// insert a string

$LN25:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  00011	48 c7 84 24 98
	00 00 00 fe ff
	ff ff		 mov	 QWORD PTR $T6[rsp], -2

; 171  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 172  : 	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
; 173  : 	typedef typename _Mystr::size_type _Mysizt;
; 174  : 
; 175  : 	ios_base::iostate _State = ios_base::goodbit;

  0001d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _State$[rsp], 0

; 176  : 	_Mysizt _Size = _Str.size();

  00025	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR _Str$[rsp]
  0002d	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00032	48 89 44 24 30	 mov	 QWORD PTR _Size$[rsp], rax

; 177  : 	_Mysizt _Pad = _Ostr.width() <= 0 || (_Mysizt)_Ostr.width() <= _Size

  00037	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0003f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00042	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00046	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0004e	48 03 c8	 add	 rcx, rax
  00051	48 8b c1	 mov	 rax, rcx
  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  0005c	48 85 c0	 test	 rax, rax
  0005f	7e 5d		 jle	 SHORT $LN17@operator
  00061	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00069	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006c	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00070	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00078	48 03 c8	 add	 rcx, rax
  0007b	48 8b c1	 mov	 rax, rcx
  0007e	48 8b c8	 mov	 rcx, rax
  00081	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  00086	48 3b 44 24 30	 cmp	 rax, QWORD PTR _Size$[rsp]
  0008b	76 31		 jbe	 SHORT $LN17@operator
  0008d	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00095	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00098	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0009c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  000a4	48 03 c8	 add	 rcx, rax
  000a7	48 8b c1	 mov	 rax, rcx
  000aa	48 8b c8	 mov	 rcx, rax
  000ad	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  000b2	48 2b 44 24 30	 sub	 rax, QWORD PTR _Size$[rsp]
  000b7	48 89 44 24 58	 mov	 QWORD PTR tv137[rsp], rax
  000bc	eb 09		 jmp	 SHORT $LN18@operator
$LN17@operator:
  000be	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tv137[rsp], 0
$LN18@operator:
  000c7	48 8b 44 24 58	 mov	 rax, QWORD PTR tv137[rsp]
  000cc	48 89 44 24 28	 mov	 QWORD PTR _Pad$[rsp], rax

; 178  : 		? 0 : (_Mysizt)_Ostr.width() - _Size;
; 179  : 	const typename _Myos::sentry _Ok(_Ostr);

  000d1	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR _Ostr$[rsp]
  000d9	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR _Ok$[rsp]
  000e1	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  000e6	90		 npad	 1

; 180  : 
; 181  : 	if (!_Ok)

  000e7	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR _Ok$[rsp]
  000ef	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  000f4	0f b6 c0	 movzx	 eax, al
  000f7	85 c0		 test	 eax, eax
  000f9	75 10		 jne	 SHORT $LN8@operator

; 182  : 		_State |= ios_base::badbit;

  000fb	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  000ff	83 c8 04	 or	 eax, 4
  00102	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 183  : 	else

  00106	e9 4a 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 184  : 		{	// state okay, insert characters
; 185  : 	_TRY_IO_BEGIN
; 186  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  0010b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00113	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00116	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0011a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00122	48 03 c8	 add	 rcx, rax
  00125	48 8b c1	 mov	 rax, rcx
  00128	48 8b c8	 mov	 rcx, rax
  0012b	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  00130	89 44 24 38	 mov	 DWORD PTR tv139[rsp], eax
  00134	8b 44 24 38	 mov	 eax, DWORD PTR tv139[rsp]
  00138	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0013d	83 f8 40	 cmp	 eax, 64			; 00000040H
  00140	0f 84 ba 00 00
	00		 je	 $LN11@operator

; 187  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00146	eb 0d		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00148	48 8b 44 24 28	 mov	 rax, QWORD PTR _Pad$[rsp]
  0014d	48 ff c8	 dec	 rax
  00150	48 89 44 24 28	 mov	 QWORD PTR _Pad$[rsp], rax
$LN4@operator:
  00155	48 83 7c 24 28
	00		 cmp	 QWORD PTR _Pad$[rsp], 0
  0015b	0f 86 9f 00 00
	00		 jbe	 $LN11@operator

; 188  : 				if (_Traits::eq_int_type(_Traits::eof(),

  00161	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00169	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0016c	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00170	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00178	48 03 c8	 add	 rcx, rax
  0017b	48 8b c1	 mov	 rax, rcx
  0017e	48 8b c8	 mov	 rcx, rax
  00181	e8 00 00 00 00	 call	 ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ ; std::basic_ios<char,std::char_traits<char> >::fill
  00186	88 44 24 24	 mov	 BYTE PTR tv295[rsp], al
  0018a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00192	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00195	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00199	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  001a1	48 03 c8	 add	 rcx, rax
  001a4	48 8b c1	 mov	 rax, rcx
  001a7	48 8b c8	 mov	 rcx, rax
  001aa	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  001af	48 89 44 24 60	 mov	 QWORD PTR tv296[rsp], rax
  001b4	0f b6 54 24 24	 movzx	 edx, BYTE PTR tv295[rsp]
  001b9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv296[rsp]
  001be	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  001c3	89 44 24 3c	 mov	 DWORD PTR tv297[rsp], eax
  001c7	8b 44 24 3c	 mov	 eax, DWORD PTR tv297[rsp]
  001cb	89 44 24 40	 mov	 DWORD PTR $T1[rsp], eax
  001cf	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  001d4	89 44 24 44	 mov	 DWORD PTR $T2[rsp], eax
  001d8	48 8d 54 24 40	 lea	 rdx, QWORD PTR $T1[rsp]
  001dd	48 8d 4c 24 44	 lea	 rcx, QWORD PTR $T2[rsp]
  001e2	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  001e7	0f b6 c0	 movzx	 eax, al
  001ea	85 c0		 test	 eax, eax
  001ec	74 0d		 je	 SHORT $LN12@operator

; 189  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 190  : 					{	// insertion failed, quit
; 191  : 					_State |= ios_base::badbit;

  001ee	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  001f2	83 c8 04	 or	 eax, 4
  001f5	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 192  : 					break;

  001f9	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 193  : 					}
; 194  : 
; 195  : 		if (_State == ios_base::goodbit

  001fb	e9 48 ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 196  : 			&& _Ostr.rdbuf()->sputn(_Str.c_str(), (streamsize)_Size)

  00200	83 7c 24 20 00	 cmp	 DWORD PTR _State$[rsp], 0
  00205	75 6a		 jne	 SHORT $LN13@operator
  00207	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0020f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00212	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00216	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0021e	48 03 c8	 add	 rcx, rax
  00221	48 8b c1	 mov	 rax, rcx
  00224	48 8b c8	 mov	 rcx, rax
  00227	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0022c	48 89 44 24 68	 mov	 QWORD PTR tv298[rsp], rax
  00231	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR _Str$[rsp]
  00239	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0023e	4c 8b 44 24 30	 mov	 r8, QWORD PTR _Size$[rsp]
  00243	48 8b d0	 mov	 rdx, rax
  00246	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv298[rsp]
  0024b	e8 00 00 00 00	 call	 ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputn
  00250	48 89 44 24 70	 mov	 QWORD PTR tv299[rsp], rax
  00255	48 8b 44 24 30	 mov	 rax, QWORD PTR _Size$[rsp]
  0025a	48 39 44 24 70	 cmp	 QWORD PTR tv299[rsp], rax
  0025f	74 10		 je	 SHORT $LN13@operator

; 197  : 				!= (streamsize)_Size)
; 198  : 				_State |= ios_base::badbit;

  00261	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  00265	83 c8 04	 or	 eax, 4
  00268	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 199  : 		else

  0026c	e9 ba 00 00 00	 jmp	 $LN14@operator
$LN13@operator:

; 200  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  00271	eb 0d		 jmp	 SHORT $LN7@operator
$LN5@operator:
  00273	48 8b 44 24 28	 mov	 rax, QWORD PTR _Pad$[rsp]
  00278	48 ff c8	 dec	 rax
  0027b	48 89 44 24 28	 mov	 QWORD PTR _Pad$[rsp], rax
$LN7@operator:
  00280	48 83 7c 24 28
	00		 cmp	 QWORD PTR _Pad$[rsp], 0
  00286	0f 86 9f 00 00
	00		 jbe	 $LN14@operator

; 201  : 				if (_Traits::eq_int_type(_Traits::eof(),

  0028c	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00294	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00297	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0029b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  002a3	48 03 c8	 add	 rcx, rax
  002a6	48 8b c1	 mov	 rax, rcx
  002a9	48 8b c8	 mov	 rcx, rax
  002ac	e8 00 00 00 00	 call	 ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ ; std::basic_ios<char,std::char_traits<char> >::fill
  002b1	88 44 24 25	 mov	 BYTE PTR tv300[rsp], al
  002b5	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  002bd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002c0	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002c4	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  002cc	48 03 c8	 add	 rcx, rax
  002cf	48 8b c1	 mov	 rax, rcx
  002d2	48 8b c8	 mov	 rcx, rax
  002d5	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  002da	48 89 44 24 78	 mov	 QWORD PTR tv301[rsp], rax
  002df	0f b6 54 24 25	 movzx	 edx, BYTE PTR tv300[rsp]
  002e4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv301[rsp]
  002e9	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  002ee	89 44 24 48	 mov	 DWORD PTR tv302[rsp], eax
  002f2	8b 44 24 48	 mov	 eax, DWORD PTR tv302[rsp]
  002f6	89 44 24 4c	 mov	 DWORD PTR $T3[rsp], eax
  002fa	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  002ff	89 44 24 50	 mov	 DWORD PTR $T4[rsp], eax
  00303	48 8d 54 24 4c	 lea	 rdx, QWORD PTR $T3[rsp]
  00308	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T4[rsp]
  0030d	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  00312	0f b6 c0	 movzx	 eax, al
  00315	85 c0		 test	 eax, eax
  00317	74 0d		 je	 SHORT $LN15@operator

; 202  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 203  : 					{	// insertion failed, quit
; 204  : 					_State |= ios_base::badbit;

  00319	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  0031d	83 c8 04	 or	 eax, 4
  00320	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 205  : 					break;

  00324	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 206  : 					}

  00326	e9 48 ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 207  : 		_Ostr.width(0);

  0032b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00333	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00336	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0033a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00342	48 03 c8	 add	 rcx, rax
  00345	48 8b c1	 mov	 rax, rcx
  00348	33 d2		 xor	 edx, edx
  0034a	48 8b c8	 mov	 rcx, rax
  0034d	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEAA_J_J@Z ; std::ios_base::width
  00352	90		 npad	 1
  00353	eb 00		 jmp	 SHORT $LN9@operator
$LN23@operator:
$LN9@operator:

; 208  : 		_CATCH_IO_(_Ostr)
; 209  : 		}
; 210  : 
; 211  : 	_Ostr.setstate(_State);

  00355	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0035d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00360	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00364	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0036c	48 03 c8	 add	 rcx, rax
  0036f	48 8b c1	 mov	 rax, rcx
  00372	45 33 c0	 xor	 r8d, r8d
  00375	8b 54 24 20	 mov	 edx, DWORD PTR _State$[rsp]
  00379	48 8b c8	 mov	 rcx, rax
  0037c	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 212  : 	return (_Ostr);

  00381	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00389	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR $T5[rsp], rax
  00391	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR _Ok$[rsp]
  00399	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0039e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR $T5[rsp]

; 213  : 	}

  003a6	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  003ad	c3		 ret	 0
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
tv295 = 36
tv300 = 37
_Pad$ = 40
_Size$ = 48
tv139 = 56
tv297 = 60
$T1 = 64
$T2 = 68
tv302 = 72
$T3 = 76
$T4 = 80
tv137 = 88
tv296 = 96
tv298 = 104
tv299 = 112
tv301 = 120
$T5 = 128
_Ok$ = 136
$T6 = 152
_Ostr$ = 176
_Str$ = 184
?dtor$0@?0???$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA PROC ; `std::operator<<<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Ok$[rbp]
  00010	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$0@?0???$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA ENDP ; `std::operator<<<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
_State$ = 32
tv295 = 36
tv300 = 37
_Pad$ = 40
_Size$ = 48
tv139 = 56
tv297 = 60
$T1 = 64
$T2 = 68
tv302 = 72
$T3 = 76
$T4 = 80
tv137 = 88
tv296 = 96
tv298 = 104
tv299 = 112
tv301 = 120
$T5 = 128
_Ok$ = 136
$T6 = 152
_Ostr$ = 176
_Str$ = 184
?catch$1@?0???$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA PROC ; `std::operator<<<char,std::char_traits<char>,std::allocator<char> >'::`1'::catch$1

; 208  : 		_CATCH_IO_(_Ostr)

  0001b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00020	55		 push	 rbp
  00021	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00025	48 8b ea	 mov	 rbp, rdx
__catch$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$0:
  00028	48 8b 85 b0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0002f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00032	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00036	48 8b 8d b0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0003d	48 03 c8	 add	 rcx, rax
  00040	48 8b c1	 mov	 rax, rcx
  00043	41 b0 01	 mov	 r8b, 1
  00046	ba 04 00 00 00	 mov	 edx, 4
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  00053	90		 npad	 1
  00054	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5d		 pop	 rbp
  00060	c3		 ret	 0
  00061	cc		 int	 3
?catch$1@?0???$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA ENDP ; `std::operator<<<char,std::char_traits<char>,std::allocator<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
tv295 = 36
tv300 = 37
_Pad$ = 40
_Size$ = 48
tv139 = 56
tv297 = 60
$T1 = 64
$T2 = 68
tv302 = 72
$T3 = 76
$T4 = 80
tv137 = 88
tv296 = 96
tv298 = 104
tv299 = 112
tv301 = 120
$T5 = 128
_Ok$ = 136
$T6 = 152
_Ostr$ = 176
_Str$ = 184
?dtor$0@?0???$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA PROC ; `std::operator<<<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Ok$[rbp]
  00010	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$0@?0???$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA ENDP ; `std::operator<<<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
tv295 = 36
tv300 = 37
_Pad$ = 40
_Size$ = 48
tv139 = 56
tv297 = 60
$T1 = 64
$T2 = 68
tv302 = 72
$T3 = 76
$T4 = 80
tv137 = 88
tv296 = 96
tv298 = 104
tv299 = 112
tv301 = 120
$T5 = 128
_Ok$ = 136
$T6 = 152
_Ostr$ = 176
_Str$ = 184
?catch$1@?0???$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA PROC ; `std::operator<<<char,std::char_traits<char>,std::allocator<char> >'::`1'::catch$1

; 208  : 		_CATCH_IO_(_Ostr)

  0001b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00020	55		 push	 rbp
  00021	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00025	48 8b ea	 mov	 rbp, rdx
__catch$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z$0:
  00028	48 8b 85 b0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0002f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00032	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00036	48 8b 8d b0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0003d	48 03 c8	 add	 rcx, rax
  00040	48 8b c1	 mov	 rax, rcx
  00043	41 b0 01	 mov	 r8b, 1
  00046	ba 04 00 00 00	 mov	 edx, 4
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  00053	90		 npad	 1
  00054	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5d		 pop	 rbp
  00060	c3		 ret	 0
  00061	cc		 int	 3
?catch$1@?0???$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z@4HA ENDP ; `std::operator<<<char,std::char_traits<char>,std::allocator<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEBA?AV01@_J@Z
_TEXT	SEGMENT
_Tmp$ = 32
this$ = 64
__$ReturnUdt$ = 72
_Off$ = 80
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEBA?AV01@_J@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >::operator+, COMDAT

; 372  : 		{	// return this + integer

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 373  : 		_Myiter _Tmp = *this;

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00018	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001b	48 89 44 24 20	 mov	 QWORD PTR _Tmp$[rsp], rax

; 374  : 		return (_Tmp += _Off);

  00020	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Off$[rsp]
  00025	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Tmp$[rsp]
  0002a	e8 00 00 00 00	 call	 ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAAAEAV01@_J@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >::operator+=
  0002f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00032	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00037	48 89 01	 mov	 QWORD PTR [rcx], rax
  0003a	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 375  : 		}

  0003f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00043	c3		 ret	 0
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEBA?AV01@_J@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >::operator+
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAAAEAV01@_J@Z
_TEXT	SEGMENT
this$ = 48
_Off$ = 56
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAAAEAV01@_J@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >::operator+=, COMDAT

; 366  : 		{	// increment by integer

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 367  : 		*(_Mybase *)this += _Off;

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Off$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAAAEAV01@_J@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >::operator+=

; 368  : 		return (*this);

  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]

; 369  : 		}

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAAAEAV01@_J@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAA@PEAUDsDevice@@PEBU_Container_base0@1@@Z
_TEXT	SEGMENT
this$ = 48
_Parg$ = 56
_Pvector$ = 64
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAA@PEAUDsDevice@@PEBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >, COMDAT

; 313  : 		{	// construct with pointer _Parg

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 312  : 		: _Mybase(_Parg, _Pvector)

  00013	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Pvector$[rsp]
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Parg$[rsp]
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAA@PEAUDsDevice@@PEBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >

; 314  : 		}

  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAA@PEAUDsDevice@@PEBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAAAEAV01@_J@Z
_TEXT	SEGMENT
this$ = 8
_Off$ = 16
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAAAEAV01@_J@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >::operator+=, COMDAT

; 155  : 		{	// increment by integer

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 156  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 157  : 		if (_Off != 0)
; 158  : 			{
; 159  : 			const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
; 160  : 			if (_Mycont == 0
; 161  : 				|| _Ptr + _Off < _Mycont->_Myfirst
; 162  : 				|| _Mycont->_Mylast < _Ptr + _Off)
; 163  : 				{
; 164  : 				_DEBUG_ERROR("vector iterator + offset out of range");
; 165  : 				_SCL_SECURE_OUT_OF_RANGE;
; 166  : 				}
; 167  : 			}
; 168  : 
; 169  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 170  : 		if (_Off != 0)
; 171  : 			{
; 172  : 			const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
; 173  : 			_SCL_SECURE_VALIDATE(_Mycont != 0);
; 174  : 			_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myfirst <= _Ptr + _Off
; 175  : 				&& _Ptr + _Off <= _Mycont->_Mylast);
; 176  : 			}
; 177  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 178  : 
; 179  : 		_Ptr += _Off;

  0000a	48 6b 44 24 10
	38		 imul	 rax, QWORD PTR _Off$[rsp], 56 ; 00000038H
  00010	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00015	48 03 01	 add	 rax, QWORD PTR [rcx]
  00018	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	48 89 01	 mov	 QWORD PTR [rcx], rax

; 180  : 		return (*this);

  00020	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 181  : 		}

  00025	c3		 ret	 0
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAAAEAV01@_J@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAA@PEAUDsDevice@@PEBU_Container_base0@1@@Z
_TEXT	SEGMENT
this$ = 48
_Parg$ = 56
_Pvector$ = 64
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAA@PEAUDsDevice@@PEBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >, COMDAT

; 47   : 		{	// construct with pointer _Parg

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 46   : 		: _Ptr(_Parg)

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00018	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Parg$[rsp]
  0001d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 48   : 		this->_Adopt(_Pvector);

  00020	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Pvector$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002a	e8 00 00 00 00	 call	 ?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ; std::_Iterator_base0::_Adopt

; 49   : 		}

  0002f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00034	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00038	c3		 ret	 0
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAA@PEAUDsDevice@@PEBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GDsDevice@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GDsDevice@@QEAAPEAXI@Z PROC				; DsDevice::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1DsDevice@@QEAA@XZ
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_GDsDevice@@QEAAPEAXI@Z ENDP				; DsDevice::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??4DsDevice@@QEAAAEAU0@$$QEAU0@@Z
_TEXT	SEGMENT
$S1$1 = 32
$S2$2 = 40
this$ = 64
__that$ = 72
??4DsDevice@@QEAAAEAU0@$$QEAU0@@Z PROC			; DsDevice::operator=, COMDAT
$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR $S1$1[rsp], 0
  00017	eb 0d		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00019	48 8b 44 24 20	 mov	 rax, QWORD PTR $S1$1[rsp]
  0001e	48 ff c0	 inc	 rax
  00021	48 89 44 24 20	 mov	 QWORD PTR $S1$1[rsp], rax
$LN4@operator:
  00026	48 83 7c 24 20
	02		 cmp	 QWORD PTR $S1$1[rsp], 2
  0002c	73 1e		 jae	 SHORT $LN3@operator
  0002e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00033	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $S1$1[rsp]
  00038	48 8b 54 24 48	 mov	 rdx, QWORD PTR __that$[rsp]
  0003d	4c 8b 44 24 20	 mov	 r8, QWORD PTR $S1$1[rsp]
  00042	4a 8b 14 c2	 mov	 rdx, QWORD PTR [rdx+r8*8]
  00046	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx
  0004a	eb cd		 jmp	 SHORT $LN2@operator
$LN3@operator:
  0004c	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR $S2$2[rsp], 0
  00055	eb 0d		 jmp	 SHORT $LN7@operator
$LN5@operator:
  00057	48 8b 44 24 28	 mov	 rax, QWORD PTR $S2$2[rsp]
  0005c	48 ff c0	 inc	 rax
  0005f	48 89 44 24 28	 mov	 QWORD PTR $S2$2[rsp], rax
$LN7@operator:
  00064	48 83 7c 24 28
	02		 cmp	 QWORD PTR $S2$2[rsp], 2
  0006a	73 29		 jae	 SHORT $LN6@operator
  0006c	48 8b 44 24 28	 mov	 rax, QWORD PTR $S2$2[rsp]
  00071	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00076	48 03 c8	 add	 rcx, rax
  00079	48 8b c1	 mov	 rax, rcx
  0007c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR $S2$2[rsp]
  00081	48 8b 54 24 48	 mov	 rdx, QWORD PTR __that$[rsp]
  00086	48 03 d1	 add	 rdx, rcx
  00089	48 8b ca	 mov	 rcx, rdx
  0008c	0f b6 49 10	 movzx	 ecx, BYTE PTR [rcx+16]
  00090	88 48 10	 mov	 BYTE PTR [rax+16], cl
  00093	eb c2		 jmp	 SHORT $LN5@operator
$LN6@operator:
  00095	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0009a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __that$[rsp]
  0009f	0f b6 49 12	 movzx	 ecx, BYTE PTR [rcx+18]
  000a3	88 48 12	 mov	 BYTE PTR [rax+18], cl
  000a6	48 8b 44 24 48	 mov	 rax, QWORD PTR __that$[rsp]
  000ab	48 83 c0 18	 add	 rax, 24
  000af	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000b4	48 83 c1 18	 add	 rcx, 24
  000b8	48 8b d0	 mov	 rdx, rax
  000bb	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  000c0	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000c5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c9	c3		 ret	 0
??4DsDevice@@QEAAAEAU0@$$QEAU0@@Z ENDP			; DsDevice::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0DsDevice@@QEAA@$$QEAU0@@Z
_TEXT	SEGMENT
this$ = 64
__that$ = 72
??0DsDevice@@QEAA@$$QEAU0@@Z PROC			; DsDevice::DsDevice, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b 7c 24 40	 mov	 rdi, QWORD PTR this$[rsp]
  00015	48 8b 74 24 48	 mov	 rsi, QWORD PTR __that$[rsp]
  0001a	b9 10 00 00 00	 mov	 ecx, 16
  0001f	f3 a4		 rep movsb
  00021	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00026	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __that$[rsp]
  0002b	0f b7 49 10	 movzx	 ecx, WORD PTR [rcx+16]
  0002f	66 89 48 10	 mov	 WORD PTR [rax+16], cx
  00033	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __that$[rsp]
  0003d	0f b6 49 12	 movzx	 ecx, BYTE PTR [rcx+18]
  00041	88 48 12	 mov	 BYTE PTR [rax+18], cl
  00044	48 8b 44 24 48	 mov	 rax, QWORD PTR __that$[rsp]
  00049	48 83 c0 18	 add	 rax, 24
  0004d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00052	48 83 c1 18	 add	 rcx, 24
  00056	48 8b d0	 mov	 rdx, rax
  00059	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0005e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	5f		 pop	 rdi
  00068	5e		 pop	 rsi
  00069	c3		 ret	 0
??0DsDevice@@QEAA@$$QEAU0@@Z ENDP			; DsDevice::DsDevice
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0DsDevice@@QEAA@AEBU0@@Z
_TEXT	SEGMENT
this$ = 64
__that$ = 72
??0DsDevice@@QEAA@AEBU0@@Z PROC				; DsDevice::DsDevice, COMDAT
$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b 7c 24 40	 mov	 rdi, QWORD PTR this$[rsp]
  00015	48 8b 74 24 48	 mov	 rsi, QWORD PTR __that$[rsp]
  0001a	b9 10 00 00 00	 mov	 ecx, 16
  0001f	f3 a4		 rep movsb
  00021	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00026	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __that$[rsp]
  0002b	0f b7 49 10	 movzx	 ecx, WORD PTR [rcx+16]
  0002f	66 89 48 10	 mov	 WORD PTR [rax+16], cx
  00033	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __that$[rsp]
  0003d	0f b6 49 12	 movzx	 ecx, BYTE PTR [rcx+18]
  00041	88 48 12	 mov	 BYTE PTR [rax+18], cl
  00044	48 8b 44 24 48	 mov	 rax, QWORD PTR __that$[rsp]
  00049	48 83 c0 18	 add	 rax, 24
  0004d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00052	48 83 c1 18	 add	 rcx, 24
  00056	48 8b d0	 mov	 rdx, rax
  00059	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0005e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	5f		 pop	 rdi
  00068	5e		 pop	 rsi
  00069	c3		 ret	 0
??0DsDevice@@QEAA@AEBU0@@Z ENDP				; DsDevice::DsDevice
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1DsDevice@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1DsDevice@@QEAA@XZ PROC				; DsDevice::~DsDevice, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 c0 18	 add	 rax, 24
  00012	48 8b c8	 mov	 rcx, rax
  00015	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
??1DsDevice@@QEAA@XZ ENDP				; DsDevice::~DsDevice
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
;	COMDAT ??0DsDevice@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0DsDevice@@QEAA@XZ PROC				; DsDevice::DsDevice, COMDAT

; 5187 :   DsDevice()

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 5188 :   : found(false) { validId[0] = false; validId[1] = false; }

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	c6 40 12 00	 mov	 BYTE PTR [rax+18], 0
  00012	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 83 c0 18	 add	 rax, 24
  0001b	48 8b c8	 mov	 rcx, rax
  0001e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00023	b8 01 00 00 00	 mov	 eax, 1
  00028	48 6b c0 00	 imul	 rax, rax, 0
  0002c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00031	c6 44 01 10 00	 mov	 BYTE PTR [rcx+rax+16], 0
  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	48 6b c0 01	 imul	 rax, rax, 1
  0003f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00044	c6 44 01 10 00	 mov	 BYTE PTR [rcx+rax+16], 0
  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00052	c3		 ret	 0
??0DsDevice@@QEAA@XZ ENDP				; DsDevice::DsDevice
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
info$ = 32
isRunning$ = 40
object$ = 48
ptr$ = 80
?callbackHandler@@YAIPEAX@Z PROC			; callbackHandler

; 6588 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 6589 :   CallbackInfo *info = (CallbackInfo *) ptr;

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	48 89 44 24 20	 mov	 QWORD PTR info$[rsp], rax

; 6590 :   RtApiDs *object = (RtApiDs *) info->object;

  00013	48 8b 44 24 20	 mov	 rax, QWORD PTR info$[rsp]
  00018	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001b	48 89 44 24 30	 mov	 QWORD PTR object$[rsp], rax

; 6591 :   bool* isRunning = &info->isRunning;

  00020	48 8b 44 24 20	 mov	 rax, QWORD PTR info$[rsp]
  00025	48 83 c0 30	 add	 rax, 48			; 00000030H
  00029	48 89 44 24 28	 mov	 QWORD PTR isRunning$[rsp], rax
$LN2@callbackHa:

; 6592 : 
; 6593 :   while ( *isRunning == true ) {

  0002e	48 8b 44 24 28	 mov	 rax, QWORD PTR isRunning$[rsp]
  00033	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00036	83 f8 01	 cmp	 eax, 1
  00039	75 0c		 jne	 SHORT $LN3@callbackHa

; 6594 :     object->callbackEvent();

  0003b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR object$[rsp]
  00040	e8 00 00 00 00	 call	 ?callbackEvent@RtApiDs@@QEAAXXZ ; RtApiDs::callbackEvent

; 6595 :   }

  00045	eb e7		 jmp	 SHORT $LN2@callbackHa
$LN3@callbackHa:

; 6596 : 
; 6597 :   _endthreadex( 0 );

  00047	33 c9		 xor	 ecx, ecx
  00049	e8 00 00 00 00	 call	 _endthreadex

; 6598 :   return 0;

  0004e	33 c0		 xor	 eax, eax

; 6599 : }

  00050	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00054	c3		 ret	 0
?callbackHandler@@YAIPEAX@Z ENDP			; callbackHandler
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
tv64 = 0
code$ = 32
?getErrorString@@YAPEBDH@Z PROC				; getErrorString

; 6680 : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 18	 sub	 rsp, 24

; 6681 :   switch ( code ) {

  00008	8b 44 24 20	 mov	 eax, DWORD PTR code$[rsp]
  0000c	89 04 24	 mov	 DWORD PTR tv64[rsp], eax
  0000f	81 3c 24 0a 00
	78 88		 cmp	 DWORD PTR tv64[rsp], -2005401590 ; ffffffff8878000aH
  00016	7f 47		 jg	 SHORT $LN21@getErrorSt
  00018	81 3c 24 0a 00
	78 88		 cmp	 DWORD PTR tv64[rsp], -2005401590 ; ffffffff8878000aH
  0001f	74 75		 je	 SHORT $LN4@getErrorSt
  00021	81 3c 24 01 40
	00 80		 cmp	 DWORD PTR tv64[rsp], -2147467263 ; ffffffff80004001H
  00028	0f 84 b3 00 00
	00		 je	 $LN12@getErrorSt
  0002e	81 3c 24 05 40
	00 80		 cmp	 DWORD PTR tv64[rsp], -2147467259 ; ffffffff80004005H
  00035	0f 84 82 00 00
	00		 je	 $LN8@getErrorSt
  0003b	81 3c 24 10 01
	04 80		 cmp	 DWORD PTR tv64[rsp], -2147221232 ; ffffffff80040110H
  00042	0f 84 b4 00 00
	00		 je	 $LN15@getErrorSt
  00048	81 3c 24 0e 00
	07 80		 cmp	 DWORD PTR tv64[rsp], -2147024882 ; ffffffff8007000eH
  0004f	74 7e		 je	 SHORT $LN10@getErrorSt
  00051	81 3c 24 57 00
	07 80		 cmp	 DWORD PTR tv64[rsp], -2147024809 ; ffffffff80070057H
  00058	74 51		 je	 SHORT $LN6@getErrorSt
  0005a	e9 c1 00 00 00	 jmp	 $LN19@getErrorSt
$LN21@getErrorSt:
  0005f	8b 04 24	 mov	 eax, DWORD PTR tv64[rsp]
  00062	05 e2 ff 87 77	 add	 eax, 2005401570		; 7787ffe2H
  00067	89 04 24	 mov	 DWORD PTR tv64[rsp], eax
  0006a	81 3c 24 8c 00
	00 00		 cmp	 DWORD PTR tv64[rsp], 140 ; 0000008cH
  00071	0f 87 a9 00 00
	00		 ja	 $LN19@getErrorSt
  00077	48 63 04 24	 movsxd	 rax, DWORD PTR tv64[rsp]
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00082	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN22@getErrorSt[rcx+rax]
  0008a	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN23@getErrorSt[rcx+rax*4]
  00091	48 03 c1	 add	 rax, rcx
  00094	ff e0		 jmp	 rax
$LN4@getErrorSt:

; 6682 : 
; 6683 :   case DSERR_ALLOCATED:
; 6684 :     return "Already allocated";

  00096	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG129608
  0009d	e9 85 00 00 00	 jmp	 $LN1@getErrorSt
$LN5@getErrorSt:

; 6685 : 
; 6686 :   case DSERR_CONTROLUNAVAIL:
; 6687 :     return "Control unavailable";

  000a2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG129610
  000a9	eb 7c		 jmp	 SHORT $LN1@getErrorSt
$LN6@getErrorSt:

; 6688 : 
; 6689 :   case DSERR_INVALIDPARAM:
; 6690 :     return "Invalid parameter";

  000ab	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG129612
  000b2	eb 73		 jmp	 SHORT $LN1@getErrorSt
$LN7@getErrorSt:

; 6691 : 
; 6692 :   case DSERR_INVALIDCALL:
; 6693 :     return "Invalid call";

  000b4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG129614
  000bb	eb 6a		 jmp	 SHORT $LN1@getErrorSt
$LN8@getErrorSt:

; 6694 : 
; 6695 :   case DSERR_GENERIC:
; 6696 :     return "Generic error";

  000bd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG129616
  000c4	eb 61		 jmp	 SHORT $LN1@getErrorSt
$LN9@getErrorSt:

; 6697 : 
; 6698 :   case DSERR_PRIOLEVELNEEDED:
; 6699 :     return "Priority level needed";

  000c6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG129618
  000cd	eb 58		 jmp	 SHORT $LN1@getErrorSt
$LN10@getErrorSt:

; 6700 : 
; 6701 :   case DSERR_OUTOFMEMORY:
; 6702 :     return "Out of memory";

  000cf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG129620
  000d6	eb 4f		 jmp	 SHORT $LN1@getErrorSt
$LN11@getErrorSt:

; 6703 : 
; 6704 :   case DSERR_BADFORMAT:
; 6705 :     return "The sample rate or the channel format is not supported";

  000d8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG129622
  000df	eb 46		 jmp	 SHORT $LN1@getErrorSt
$LN12@getErrorSt:

; 6706 : 
; 6707 :   case DSERR_UNSUPPORTED:
; 6708 :     return "Not supported";

  000e1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG129624
  000e8	eb 3d		 jmp	 SHORT $LN1@getErrorSt
$LN13@getErrorSt:

; 6709 : 
; 6710 :   case DSERR_NODRIVER:
; 6711 :     return "No driver";

  000ea	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG129626
  000f1	eb 34		 jmp	 SHORT $LN1@getErrorSt
$LN14@getErrorSt:

; 6712 : 
; 6713 :   case DSERR_ALREADYINITIALIZED:
; 6714 :     return "Already initialized";

  000f3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG129628
  000fa	eb 2b		 jmp	 SHORT $LN1@getErrorSt
$LN15@getErrorSt:

; 6715 : 
; 6716 :   case DSERR_NOAGGREGATION:
; 6717 :     return "No aggregation";

  000fc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG129630
  00103	eb 22		 jmp	 SHORT $LN1@getErrorSt
$LN16@getErrorSt:

; 6718 : 
; 6719 :   case DSERR_BUFFERLOST:
; 6720 :     return "Buffer lost";

  00105	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG129632
  0010c	eb 19		 jmp	 SHORT $LN1@getErrorSt
$LN17@getErrorSt:

; 6721 : 
; 6722 :   case DSERR_OTHERAPPHASPRIO:
; 6723 :     return "Another application already has priority";

  0010e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG129634
  00115	eb 10		 jmp	 SHORT $LN1@getErrorSt
$LN18@getErrorSt:

; 6724 : 
; 6725 :   case DSERR_UNINITIALIZED:
; 6726 :     return "Uninitialized";

  00117	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG129636
  0011e	eb 07		 jmp	 SHORT $LN1@getErrorSt
$LN19@getErrorSt:

; 6727 : 
; 6728 :   default:
; 6729 :     return "DirectSound unknown error";

  00120	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG129638
$LN1@getErrorSt:

; 6730 :   }
; 6731 : }

  00127	48 83 c4 18	 add	 rsp, 24
  0012b	c3		 ret	 0
$LN23@getErrorSt:
  0012c	00 00 00 00	 DD	 $LN5@getErrorSt
  00130	00 00 00 00	 DD	 $LN7@getErrorSt
  00134	00 00 00 00	 DD	 $LN9@getErrorSt
  00138	00 00 00 00	 DD	 $LN11@getErrorSt
  0013c	00 00 00 00	 DD	 $LN13@getErrorSt
  00140	00 00 00 00	 DD	 $LN14@getErrorSt
  00144	00 00 00 00	 DD	 $LN16@getErrorSt
  00148	00 00 00 00	 DD	 $LN17@getErrorSt
  0014c	00 00 00 00	 DD	 $LN18@getErrorSt
  00150	00 00 00 00	 DD	 $LN19@getErrorSt
$LN22@getErrorSt:
  00154	00		 DB	 0
  00155	09		 DB	 9
  00156	09		 DB	 9
  00157	09		 DB	 9
  00158	09		 DB	 9
  00159	09		 DB	 9
  0015a	09		 DB	 9
  0015b	09		 DB	 9
  0015c	09		 DB	 9
  0015d	09		 DB	 9
  0015e	09		 DB	 9
  0015f	09		 DB	 9
  00160	09		 DB	 9
  00161	09		 DB	 9
  00162	09		 DB	 9
  00163	09		 DB	 9
  00164	09		 DB	 9
  00165	09		 DB	 9
  00166	09		 DB	 9
  00167	09		 DB	 9
  00168	01		 DB	 1
  00169	09		 DB	 9
  0016a	09		 DB	 9
  0016b	09		 DB	 9
  0016c	09		 DB	 9
  0016d	09		 DB	 9
  0016e	09		 DB	 9
  0016f	09		 DB	 9
  00170	09		 DB	 9
  00171	09		 DB	 9
  00172	09		 DB	 9
  00173	09		 DB	 9
  00174	09		 DB	 9
  00175	09		 DB	 9
  00176	09		 DB	 9
  00177	09		 DB	 9
  00178	09		 DB	 9
  00179	09		 DB	 9
  0017a	09		 DB	 9
  0017b	09		 DB	 9
  0017c	02		 DB	 2
  0017d	09		 DB	 9
  0017e	09		 DB	 9
  0017f	09		 DB	 9
  00180	09		 DB	 9
  00181	09		 DB	 9
  00182	09		 DB	 9
  00183	09		 DB	 9
  00184	09		 DB	 9
  00185	09		 DB	 9
  00186	09		 DB	 9
  00187	09		 DB	 9
  00188	09		 DB	 9
  00189	09		 DB	 9
  0018a	09		 DB	 9
  0018b	09		 DB	 9
  0018c	09		 DB	 9
  0018d	09		 DB	 9
  0018e	09		 DB	 9
  0018f	09		 DB	 9
  00190	09		 DB	 9
  00191	09		 DB	 9
  00192	09		 DB	 9
  00193	09		 DB	 9
  00194	09		 DB	 9
  00195	09		 DB	 9
  00196	09		 DB	 9
  00197	09		 DB	 9
  00198	09		 DB	 9
  00199	09		 DB	 9
  0019a	03		 DB	 3
  0019b	09		 DB	 9
  0019c	09		 DB	 9
  0019d	09		 DB	 9
  0019e	09		 DB	 9
  0019f	09		 DB	 9
  001a0	09		 DB	 9
  001a1	09		 DB	 9
  001a2	09		 DB	 9
  001a3	09		 DB	 9
  001a4	09		 DB	 9
  001a5	09		 DB	 9
  001a6	09		 DB	 9
  001a7	09		 DB	 9
  001a8	09		 DB	 9
  001a9	09		 DB	 9
  001aa	09		 DB	 9
  001ab	09		 DB	 9
  001ac	09		 DB	 9
  001ad	09		 DB	 9
  001ae	04		 DB	 4
  001af	09		 DB	 9
  001b0	09		 DB	 9
  001b1	09		 DB	 9
  001b2	09		 DB	 9
  001b3	09		 DB	 9
  001b4	09		 DB	 9
  001b5	09		 DB	 9
  001b6	09		 DB	 9
  001b7	09		 DB	 9
  001b8	05		 DB	 5
  001b9	09		 DB	 9
  001ba	09		 DB	 9
  001bb	09		 DB	 9
  001bc	09		 DB	 9
  001bd	09		 DB	 9
  001be	09		 DB	 9
  001bf	09		 DB	 9
  001c0	09		 DB	 9
  001c1	09		 DB	 9
  001c2	09		 DB	 9
  001c3	09		 DB	 9
  001c4	09		 DB	 9
  001c5	09		 DB	 9
  001c6	09		 DB	 9
  001c7	09		 DB	 9
  001c8	09		 DB	 9
  001c9	09		 DB	 9
  001ca	09		 DB	 9
  001cb	09		 DB	 9
  001cc	06		 DB	 6
  001cd	09		 DB	 9
  001ce	09		 DB	 9
  001cf	09		 DB	 9
  001d0	09		 DB	 9
  001d1	09		 DB	 9
  001d2	09		 DB	 9
  001d3	09		 DB	 9
  001d4	09		 DB	 9
  001d5	09		 DB	 9
  001d6	07		 DB	 7
  001d7	09		 DB	 9
  001d8	09		 DB	 9
  001d9	09		 DB	 9
  001da	09		 DB	 9
  001db	09		 DB	 9
  001dc	09		 DB	 9
  001dd	09		 DB	 9
  001de	09		 DB	 9
  001df	09		 DB	 9
  001e0	08		 DB	 8
?getErrorString@@YAPEBDH@Z ENDP				; getErrorString
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
validDevice$ = 32
i$1 = 36
hr$ = 40
dsDevices$ = 48
object$2 = 56
object$3 = 64
probeInfo$ = 72
$T4 = 80
$T5 = 84
tv152 = 88
$T6 = 96
caps$7 = 104
name$ = 120
device$8 = 152
caps$9 = 208
__$ArrayPad$ = 304
lpguid$ = 336
description$ = 344
__formal$ = 352
lpContext$ = 360
?deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z PROC	; deviceQueryCallback

; 6605 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001b	48 c7 44 24 60
	fe ff ff ff	 mov	 QWORD PTR $T6[rsp], -2
  00024	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002b	48 33 c4	 xor	 rax, rsp
  0002e	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 6606 :   struct DsProbeData& probeInfo = *(struct DsProbeData*) lpContext;

  00036	48 8b 84 24 68
	01 00 00	 mov	 rax, QWORD PTR lpContext$[rsp]
  0003e	48 89 44 24 48	 mov	 QWORD PTR probeInfo$[rsp], rax

; 6607 :   std::vector<struct DsDevice>& dsDevices = *probeInfo.dsDevices;

  00043	48 8b 44 24 48	 mov	 rax, QWORD PTR probeInfo$[rsp]
  00048	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004c	48 89 44 24 30	 mov	 QWORD PTR dsDevices$[rsp], rax

; 6608 : 
; 6609 :   HRESULT hr;
; 6610 :   bool validDevice = false;

  00051	c6 44 24 20 00	 mov	 BYTE PTR validDevice$[rsp], 0

; 6611 :   if ( probeInfo.isInput == true ) {

  00056	48 8b 44 24 48	 mov	 rax, QWORD PTR probeInfo$[rsp]
  0005b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0005e	83 f8 01	 cmp	 eax, 1
  00061	75 7a		 jne	 SHORT $LN5@deviceQuer

; 6612 :     DSCCAPS caps;
; 6613 :     LPDIRECTSOUNDCAPTURE object;
; 6614 : 
; 6615 :     hr = DirectSoundCaptureCreate(  lpguid, &object,   NULL );

  00063	45 33 c0	 xor	 r8d, r8d
  00066	48 8d 54 24 38	 lea	 rdx, QWORD PTR object$2[rsp]
  0006b	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR lpguid$[rsp]
  00073	e8 00 00 00 00	 call	 DirectSoundCaptureCreate
  00078	89 44 24 28	 mov	 DWORD PTR hr$[rsp], eax

; 6616 :     if ( hr != DS_OK ) return TRUE;

  0007c	83 7c 24 28 00	 cmp	 DWORD PTR hr$[rsp], 0
  00081	74 0a		 je	 SHORT $LN7@deviceQuer
  00083	b8 01 00 00 00	 mov	 eax, 1
  00088	e9 fe 02 00 00	 jmp	 $LN1@deviceQuer
$LN7@deviceQuer:

; 6617 : 
; 6618 :     caps.dwSize = sizeof(caps);

  0008d	c7 44 24 68 10
	00 00 00	 mov	 DWORD PTR caps$7[rsp], 16

; 6619 :     hr = object->GetCaps( &caps );

  00095	48 8b 44 24 38	 mov	 rax, QWORD PTR object$2[rsp]
  0009a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009d	48 8d 54 24 68	 lea	 rdx, QWORD PTR caps$7[rsp]
  000a2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR object$2[rsp]
  000a7	ff 50 20	 call	 QWORD PTR [rax+32]
  000aa	89 44 24 28	 mov	 DWORD PTR hr$[rsp], eax

; 6620 :     if ( hr == DS_OK ) {

  000ae	83 7c 24 28 00	 cmp	 DWORD PTR hr$[rsp], 0
  000b3	75 13		 jne	 SHORT $LN8@deviceQuer

; 6621 :       if ( caps.dwChannels > 0 && caps.dwFormats > 0 )

  000b5	83 7c 24 74 00	 cmp	 DWORD PTR caps$7[rsp+12], 0
  000ba	76 0c		 jbe	 SHORT $LN8@deviceQuer
  000bc	83 7c 24 70 00	 cmp	 DWORD PTR caps$7[rsp+8], 0
  000c1	76 05		 jbe	 SHORT $LN8@deviceQuer

; 6622 :         validDevice = true;

  000c3	c6 44 24 20 01	 mov	 BYTE PTR validDevice$[rsp], 1
$LN8@deviceQuer:

; 6623 :     }
; 6624 :     object->Release();

  000c8	48 8b 44 24 38	 mov	 rax, QWORD PTR object$2[rsp]
  000cd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR object$2[rsp]
  000d5	ff 50 10	 call	 QWORD PTR [rax+16]

; 6625 :   }
; 6626 :   else {

  000d8	e9 89 00 00 00	 jmp	 $LN6@deviceQuer
$LN5@deviceQuer:

; 6627 :     DSCAPS caps;
; 6628 :     LPDIRECTSOUND object;
; 6629 :     hr = DirectSoundCreate(  lpguid, &object,   NULL );

  000dd	45 33 c0	 xor	 r8d, r8d
  000e0	48 8d 54 24 40	 lea	 rdx, QWORD PTR object$3[rsp]
  000e5	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR lpguid$[rsp]
  000ed	e8 00 00 00 00	 call	 DirectSoundCreate
  000f2	89 44 24 28	 mov	 DWORD PTR hr$[rsp], eax

; 6630 :     if ( hr != DS_OK ) return TRUE;

  000f6	83 7c 24 28 00	 cmp	 DWORD PTR hr$[rsp], 0
  000fb	74 0a		 je	 SHORT $LN10@deviceQuer
  000fd	b8 01 00 00 00	 mov	 eax, 1
  00102	e9 84 02 00 00	 jmp	 $LN1@deviceQuer
$LN10@deviceQuer:

; 6631 : 
; 6632 :     caps.dwSize = sizeof(caps);

  00107	c7 84 24 d0 00
	00 00 60 00 00
	00		 mov	 DWORD PTR caps$9[rsp], 96 ; 00000060H

; 6633 :     hr = object->GetCaps( &caps );

  00112	48 8b 44 24 40	 mov	 rax, QWORD PTR object$3[rsp]
  00117	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0011a	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR caps$9[rsp]
  00122	48 8b 4c 24 40	 mov	 rcx, QWORD PTR object$3[rsp]
  00127	ff 50 20	 call	 QWORD PTR [rax+32]
  0012a	89 44 24 28	 mov	 DWORD PTR hr$[rsp], eax

; 6634 :     if ( hr == DS_OK ) {

  0012e	83 7c 24 28 00	 cmp	 DWORD PTR hr$[rsp], 0
  00133	75 21		 jne	 SHORT $LN11@deviceQuer

; 6635 :       if ( caps.dwFlags & DSCAPS_PRIMARYMONO || caps.dwFlags & DSCAPS_PRIMARYSTEREO )

  00135	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR caps$9[rsp+4]
  0013c	83 e0 01	 and	 eax, 1
  0013f	85 c0		 test	 eax, eax
  00141	75 0e		 jne	 SHORT $LN13@deviceQuer
  00143	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR caps$9[rsp+4]
  0014a	83 e0 02	 and	 eax, 2
  0014d	85 c0		 test	 eax, eax
  0014f	74 05		 je	 SHORT $LN11@deviceQuer
$LN13@deviceQuer:

; 6636 :         validDevice = true;

  00151	c6 44 24 20 01	 mov	 BYTE PTR validDevice$[rsp], 1
$LN11@deviceQuer:

; 6637 :     }
; 6638 :     object->Release();

  00156	48 8b 44 24 40	 mov	 rax, QWORD PTR object$3[rsp]
  0015b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0015e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR object$3[rsp]
  00163	ff 50 10	 call	 QWORD PTR [rax+16]
$LN6@deviceQuer:

; 6639 :   }
; 6640 : 
; 6641 :   // If good device, then save its name and guid.
; 6642 :   std::string name = convertCharPointerToStdString( description );

  00166	48 8b 94 24 58
	01 00 00	 mov	 rdx, QWORD PTR description$[rsp]
  0016e	48 8d 4c 24 78	 lea	 rcx, QWORD PTR name$[rsp]
  00173	e8 00 00 00 00	 call	 ?convertCharPointerToStdString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBD@Z ; convertCharPointerToStdString
  00178	90		 npad	 1

; 6643 :   //if ( name == "Primary Sound Driver" || name == "Primary Sound Capture Driver" )
; 6644 :   if ( lpguid == NULL )

  00179	48 83 bc 24 50
	01 00 00 00	 cmp	 QWORD PTR lpguid$[rsp], 0
  00182	75 11		 jne	 SHORT $LN14@deviceQuer

; 6645 :     name = "Default Device";

  00184	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129546
  0018b	48 8d 4c 24 78	 lea	 rcx, QWORD PTR name$[rsp]
  00190	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
$LN14@deviceQuer:

; 6646 :   if ( validDevice ) {

  00195	0f b6 44 24 20	 movzx	 eax, BYTE PTR validDevice$[rsp]
  0019a	85 c0		 test	 eax, eax
  0019c	0f 84 d3 01 00
	00		 je	 $LN15@deviceQuer

; 6647 :     for ( unsigned int i=0; i<dsDevices.size(); i++ ) {

  001a2	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0
  001aa	eb 0a		 jmp	 SHORT $LN4@deviceQuer
$LN2@deviceQuer:
  001ac	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  001b0	ff c0		 inc	 eax
  001b2	89 44 24 24	 mov	 DWORD PTR i$1[rsp], eax
$LN4@deviceQuer:
  001b6	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  001ba	48 89 44 24 58	 mov	 QWORD PTR tv152[rsp], rax
  001bf	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dsDevices$[rsp]
  001c4	e8 00 00 00 00	 call	 ?size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ ; std::vector<DsDevice,std::allocator<DsDevice> >::size
  001c9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv152[rsp]
  001ce	48 3b c8	 cmp	 rcx, rax
  001d1	0f 83 f4 00 00
	00		 jae	 $LN3@deviceQuer

; 6648 :       if ( dsDevices[i].name == name ) {

  001d7	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  001db	8b d0		 mov	 edx, eax
  001dd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dsDevices$[rsp]
  001e2	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  001e7	48 83 c0 18	 add	 rax, 24
  001eb	48 8d 54 24 78	 lea	 rdx, QWORD PTR name$[rsp]
  001f0	48 8b c8	 mov	 rcx, rax
  001f3	e8 00 00 00 00	 call	 ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
  001f8	0f b6 c0	 movzx	 eax, al
  001fb	85 c0		 test	 eax, eax
  001fd	0f 84 c3 00 00
	00		 je	 $LN16@deviceQuer

; 6649 :         dsDevices[i].found = true;

  00203	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  00207	8b d0		 mov	 edx, eax
  00209	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dsDevices$[rsp]
  0020e	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  00213	c6 40 12 01	 mov	 BYTE PTR [rax+18], 1

; 6650 :         if ( probeInfo.isInput ) {

  00217	48 8b 44 24 48	 mov	 rax, QWORD PTR probeInfo$[rsp]
  0021c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0021f	85 c0		 test	 eax, eax
  00221	74 45		 je	 SHORT $LN17@deviceQuer

; 6651 :           dsDevices[i].id[1] = lpguid;

  00223	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  00227	8b d0		 mov	 edx, eax
  00229	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dsDevices$[rsp]
  0022e	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  00233	b9 08 00 00 00	 mov	 ecx, 8
  00238	48 6b c9 01	 imul	 rcx, rcx, 1
  0023c	48 8b 94 24 50
	01 00 00	 mov	 rdx, QWORD PTR lpguid$[rsp]
  00244	48 89 14 08	 mov	 QWORD PTR [rax+rcx], rdx

; 6652 :           dsDevices[i].validId[1] = true;

  00248	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  0024c	8b d0		 mov	 edx, eax
  0024e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dsDevices$[rsp]
  00253	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  00258	b9 01 00 00 00	 mov	 ecx, 1
  0025d	48 6b c9 01	 imul	 rcx, rcx, 1
  00261	c6 44 08 10 01	 mov	 BYTE PTR [rax+rcx+16], 1

; 6653 :         }
; 6654 :         else {

  00266	eb 43		 jmp	 SHORT $LN18@deviceQuer
$LN17@deviceQuer:

; 6655 :           dsDevices[i].id[0] = lpguid;

  00268	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  0026c	8b d0		 mov	 edx, eax
  0026e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dsDevices$[rsp]
  00273	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  00278	b9 08 00 00 00	 mov	 ecx, 8
  0027d	48 6b c9 00	 imul	 rcx, rcx, 0
  00281	48 8b 94 24 50
	01 00 00	 mov	 rdx, QWORD PTR lpguid$[rsp]
  00289	48 89 14 08	 mov	 QWORD PTR [rax+rcx], rdx

; 6656 :           dsDevices[i].validId[0] = true;

  0028d	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  00291	8b d0		 mov	 edx, eax
  00293	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dsDevices$[rsp]
  00298	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  0029d	b9 01 00 00 00	 mov	 ecx, 1
  002a2	48 6b c9 00	 imul	 rcx, rcx, 0
  002a6	c6 44 08 10 01	 mov	 BYTE PTR [rax+rcx+16], 1
$LN18@deviceQuer:

; 6657 :         }
; 6658 :         return TRUE;

  002ab	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR $T4[rsp], 1
  002b3	48 8d 4c 24 78	 lea	 rcx, QWORD PTR name$[rsp]
  002b8	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  002bd	8b 44 24 50	 mov	 eax, DWORD PTR $T4[rsp]
  002c1	e9 c5 00 00 00	 jmp	 $LN1@deviceQuer
$LN16@deviceQuer:

; 6659 :       }
; 6660 :     }

  002c6	e9 e1 fe ff ff	 jmp	 $LN2@deviceQuer
$LN3@deviceQuer:

; 6661 : 
; 6662 :     DsDevice device;

  002cb	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR device$8[rsp]
  002d3	e8 00 00 00 00	 call	 ??0DsDevice@@QEAA@XZ	; DsDevice::DsDevice
  002d8	90		 npad	 1

; 6663 :     device.name = name;

  002d9	48 8d 54 24 78	 lea	 rdx, QWORD PTR name$[rsp]
  002de	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR device$8[rsp+24]
  002e6	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 6664 :     device.found = true;

  002eb	c6 84 24 aa 00
	00 00 01	 mov	 BYTE PTR device$8[rsp+18], 1

; 6665 :     if ( probeInfo.isInput ) {

  002f3	48 8b 44 24 48	 mov	 rax, QWORD PTR probeInfo$[rsp]
  002f8	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  002fb	85 c0		 test	 eax, eax
  002fd	74 2c		 je	 SHORT $LN19@deviceQuer

; 6666 :       device.id[1] = lpguid;

  002ff	b8 08 00 00 00	 mov	 eax, 8
  00304	48 6b c0 01	 imul	 rax, rax, 1
  00308	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR lpguid$[rsp]
  00310	48 89 8c 04 98
	00 00 00	 mov	 QWORD PTR device$8[rsp+rax], rcx

; 6667 :       device.validId[1] = true;

  00318	b8 01 00 00 00	 mov	 eax, 1
  0031d	48 6b c0 01	 imul	 rax, rax, 1
  00321	c6 84 04 a8 00
	00 00 01	 mov	 BYTE PTR device$8[rsp+rax+16], 1

; 6668 :     }
; 6669 :     else {

  00329	eb 2a		 jmp	 SHORT $LN20@deviceQuer
$LN19@deviceQuer:

; 6670 :       device.id[0] = lpguid;

  0032b	b8 08 00 00 00	 mov	 eax, 8
  00330	48 6b c0 00	 imul	 rax, rax, 0
  00334	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR lpguid$[rsp]
  0033c	48 89 8c 04 98
	00 00 00	 mov	 QWORD PTR device$8[rsp+rax], rcx

; 6671 :       device.validId[0] = true;

  00344	b8 01 00 00 00	 mov	 eax, 1
  00349	48 6b c0 00	 imul	 rax, rax, 0
  0034d	c6 84 04 a8 00
	00 00 01	 mov	 BYTE PTR device$8[rsp+rax+16], 1
$LN20@deviceQuer:

; 6672 :     }
; 6673 :     dsDevices.push_back( device );

  00355	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR device$8[rsp]
  0035d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dsDevices$[rsp]
  00362	e8 00 00 00 00	 call	 ?push_back@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAXAEBUDsDevice@@@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::push_back
  00367	90		 npad	 1

; 6674 :   }

  00368	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR device$8[rsp]
  00370	e8 00 00 00 00	 call	 ??1DsDevice@@QEAA@XZ
$LN15@deviceQuer:

; 6675 : 
; 6676 :   return TRUE;

  00375	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR $T5[rsp], 1
  0037d	48 8d 4c 24 78	 lea	 rcx, QWORD PTR name$[rsp]
  00382	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00387	8b 44 24 54	 mov	 eax, DWORD PTR $T5[rsp]
$LN1@deviceQuer:

; 6677 : }

  0038b	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00393	48 33 cc	 xor	 rcx, rsp
  00396	e8 00 00 00 00	 call	 __security_check_cookie
  0039b	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  003a2	c3		 ret	 0
?deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z ENDP	; deviceQueryCallback
_TEXT	ENDS
text$x	SEGMENT
validDevice$ = 32
i$1 = 36
hr$ = 40
dsDevices$ = 48
object$2 = 56
object$3 = 64
probeInfo$ = 72
$T4 = 80
$T5 = 84
tv152 = 88
$T6 = 96
caps$7 = 104
name$ = 120
device$8 = 152
caps$9 = 208
__$ArrayPad$ = 304
lpguid$ = 336
description$ = 344
__formal$ = 352
lpContext$ = 360
?dtor$0@?0??deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z@4HA PROC ; `deviceQueryCallback'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 4d 78	 lea	 rcx, QWORD PTR name$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0??deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z@4HA ENDP ; `deviceQueryCallback'::`1'::dtor$0
validDevice$ = 32
i$1 = 36
hr$ = 40
dsDevices$ = 48
object$2 = 56
object$3 = 64
probeInfo$ = 72
$T4 = 80
$T5 = 84
tv152 = 88
$T6 = 96
caps$7 = 104
name$ = 120
device$8 = 152
caps$9 = 208
__$ArrayPad$ = 304
lpguid$ = 336
description$ = 344
__formal$ = 352
lpContext$ = 360
?dtor$1@?0??deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z@4HA PROC ; `deviceQueryCallback'::`1'::dtor$1
  00018	40 55		 push	 rbp
  0001a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001e	48 8b ea	 mov	 rbp, rdx
  00021	48 8d 8d 98 00
	00 00		 lea	 rcx, QWORD PTR device$8[rbp]
  00028	e8 00 00 00 00	 call	 ??1DsDevice@@QEAA@XZ
  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$1@?0??deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z@4HA ENDP ; `deviceQueryCallback'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
text$x	SEGMENT
validDevice$ = 32
i$1 = 36
hr$ = 40
dsDevices$ = 48
object$2 = 56
object$3 = 64
probeInfo$ = 72
$T4 = 80
$T5 = 84
tv152 = 88
$T6 = 96
caps$7 = 104
name$ = 120
device$8 = 152
caps$9 = 208
__$ArrayPad$ = 304
lpguid$ = 336
description$ = 344
__formal$ = 352
lpContext$ = 360
?dtor$0@?0??deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z@4HA PROC ; `deviceQueryCallback'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 4d 78	 lea	 rcx, QWORD PTR name$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0??deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z@4HA ENDP ; `deviceQueryCallback'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
text$x	SEGMENT
validDevice$ = 32
i$1 = 36
hr$ = 40
dsDevices$ = 48
object$2 = 56
object$3 = 64
probeInfo$ = 72
$T4 = 80
$T5 = 84
tv152 = 88
$T6 = 96
caps$7 = 104
name$ = 120
device$8 = 152
caps$9 = 208
__$ArrayPad$ = 304
lpguid$ = 336
description$ = 344
__formal$ = 352
lpContext$ = 360
?dtor$1@?0??deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z@4HA PROC ; `deviceQueryCallback'::`1'::dtor$1
  00018	40 55		 push	 rbp
  0001a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001e	48 8b ea	 mov	 rbp, rdx
  00021	48 8d 8d 98 00
	00 00		 lea	 rcx, QWORD PTR device$8[rbp]
  00028	e8 00 00 00 00	 call	 ??1DsDevice@@QEAA@XZ
  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$1@?0??deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z@4HA ENDP ; `deviceQueryCallback'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
;	COMDAT ??0DsHandle@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0DsHandle@@QEAA@XZ PROC				; DsHandle::DsHandle, COMDAT

; 5166 :   DsHandle()

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 5167 :     :drainCounter(0), internalDrain(false) { id[0] = 0; id[1] = 0; buffer[0] = 0; buffer[1] = 0; xrun[0] = false; xrun[1] = false; bufferPointer[0] = 0; bufferPointer[1] = 0; }

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
  00010	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00015	c6 40 04 00	 mov	 BYTE PTR [rax+4], 0
  00019	b8 08 00 00 00	 mov	 eax, 8
  0001e	48 6b c0 00	 imul	 rax, rax, 0
  00022	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00027	48 c7 44 01 08
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+8], 0
  00030	b8 08 00 00 00	 mov	 eax, 8
  00035	48 6b c0 01	 imul	 rax, rax, 1
  00039	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  0003e	48 c7 44 01 08
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+8], 0
  00047	b8 08 00 00 00	 mov	 eax, 8
  0004c	48 6b c0 00	 imul	 rax, rax, 0
  00050	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00055	48 c7 44 01 18
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+24], 0
  0005e	b8 08 00 00 00	 mov	 eax, 8
  00063	48 6b c0 01	 imul	 rax, rax, 1
  00067	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  0006c	48 c7 44 01 18
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+24], 0
  00075	b8 01 00 00 00	 mov	 eax, 1
  0007a	48 6b c0 00	 imul	 rax, rax, 0
  0007e	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00083	c6 44 01 28 00	 mov	 BYTE PTR [rcx+rax+40], 0
  00088	b8 01 00 00 00	 mov	 eax, 1
  0008d	48 6b c0 01	 imul	 rax, rax, 1
  00091	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00096	c6 44 01 28 00	 mov	 BYTE PTR [rcx+rax+40], 0
  0009b	b8 04 00 00 00	 mov	 eax, 4
  000a0	48 6b c0 00	 imul	 rax, rax, 0
  000a4	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  000a9	c7 44 01 2c 00
	00 00 00	 mov	 DWORD PTR [rcx+rax+44], 0
  000b1	b8 04 00 00 00	 mov	 eax, 4
  000b6	48 6b c0 01	 imul	 rax, rax, 1
  000ba	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  000bf	c7 44 01 2c 00
	00 00 00	 mov	 DWORD PTR [rcx+rax+44], 0
  000c7	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  000cc	c3		 ret	 0
??0DsHandle@@QEAA@XZ ENDP				; DsHandle::DsHandle
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
tv72 = 0
pointer$ = 32
laterPointer$ = 40
earlierPointer$ = 48
bufferSize$ = 56
?dsPointerBetween@@YAKKKKK@Z PROC			; dsPointerBetween

; 5146 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00012	48 83 ec 18	 sub	 rsp, 24

; 5147 :   if ( pointer > bufferSize ) pointer -= bufferSize;

  00016	8b 44 24 38	 mov	 eax, DWORD PTR bufferSize$[rsp]
  0001a	39 44 24 20	 cmp	 DWORD PTR pointer$[rsp], eax
  0001e	76 10		 jbe	 SHORT $LN2@dsPointerB
  00020	8b 44 24 38	 mov	 eax, DWORD PTR bufferSize$[rsp]
  00024	8b 4c 24 20	 mov	 ecx, DWORD PTR pointer$[rsp]
  00028	2b c8		 sub	 ecx, eax
  0002a	8b c1		 mov	 eax, ecx
  0002c	89 44 24 20	 mov	 DWORD PTR pointer$[rsp], eax
$LN2@dsPointerB:

; 5148 :   if ( laterPointer < earlierPointer ) laterPointer += bufferSize;

  00030	8b 44 24 30	 mov	 eax, DWORD PTR earlierPointer$[rsp]
  00034	39 44 24 28	 cmp	 DWORD PTR laterPointer$[rsp], eax
  00038	73 10		 jae	 SHORT $LN3@dsPointerB
  0003a	8b 44 24 38	 mov	 eax, DWORD PTR bufferSize$[rsp]
  0003e	8b 4c 24 28	 mov	 ecx, DWORD PTR laterPointer$[rsp]
  00042	03 c8		 add	 ecx, eax
  00044	8b c1		 mov	 eax, ecx
  00046	89 44 24 28	 mov	 DWORD PTR laterPointer$[rsp], eax
$LN3@dsPointerB:

; 5149 :   if ( pointer < earlierPointer ) pointer += bufferSize;

  0004a	8b 44 24 30	 mov	 eax, DWORD PTR earlierPointer$[rsp]
  0004e	39 44 24 20	 cmp	 DWORD PTR pointer$[rsp], eax
  00052	73 10		 jae	 SHORT $LN4@dsPointerB
  00054	8b 44 24 38	 mov	 eax, DWORD PTR bufferSize$[rsp]
  00058	8b 4c 24 20	 mov	 ecx, DWORD PTR pointer$[rsp]
  0005c	03 c8		 add	 ecx, eax
  0005e	8b c1		 mov	 eax, ecx
  00060	89 44 24 20	 mov	 DWORD PTR pointer$[rsp], eax
$LN4@dsPointerB:

; 5150 :   return pointer >= earlierPointer && pointer < laterPointer;

  00064	8b 44 24 30	 mov	 eax, DWORD PTR earlierPointer$[rsp]
  00068	39 44 24 20	 cmp	 DWORD PTR pointer$[rsp], eax
  0006c	72 13		 jb	 SHORT $LN6@dsPointerB
  0006e	8b 44 24 28	 mov	 eax, DWORD PTR laterPointer$[rsp]
  00072	39 44 24 20	 cmp	 DWORD PTR pointer$[rsp], eax
  00076	73 09		 jae	 SHORT $LN6@dsPointerB
  00078	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv72[rsp], 1
  0007f	eb 07		 jmp	 SHORT $LN7@dsPointerB
$LN6@dsPointerB:
  00081	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv72[rsp], 0
$LN7@dsPointerB:
  00088	8b 04 24	 mov	 eax, DWORD PTR tv72[rsp]

; 5151 : }

  0008b	48 83 c4 18	 add	 rsp, 24
  0008f	c3		 ret	 0
?dsPointerBetween@@YAKKKKK@Z ENDP			; dsPointerBetween
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Ostr$ = 48
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 991  : 	{	// insert newline and flush stream

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 992  : 	_Ostr.put(_Ostr.widen('\n'));

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00015	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0001a	48 03 c8	 add	 rcx, rax
  0001d	48 8b c1	 mov	 rax, rcx
  00020	b2 0a		 mov	 dl, 10
  00022	48 8b c8	 mov	 rcx, rax
  00025	e8 00 00 00 00	 call	 ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
  0002a	0f b6 d0	 movzx	 edx, al
  0002d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00032	e8 00 00 00 00	 call	 ?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z ; std::basic_ostream<char,std::char_traits<char> >::put

; 993  : 	_Ostr.flush();

  00037	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0003c	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush

; 994  : 	return (_Ostr);

  00041	48 8b 44 24 30	 mov	 rax, QWORD PTR _Ostr$[rsp]

; 995  : 	}

  00046	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004a	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBAXPEAW4Api@RtAudio@@0@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
__formal$ = 24
?_Orphan_range@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBAXPEAW4Api@RtAudio@@0@Z PROC ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Orphan_range, COMDAT

; 1793 : 		{	// orphan iterators within specified (inclusive) range

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1794 : 		}

  0000f	c3		 ret	 0
?_Orphan_range@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBAXPEAW4Api@RtAudio@@0@Z ENDP ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBAXXZ
_TEXT	SEGMENT
this$ = 48
?_Xlen@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBAXXZ PROC ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Xlen, COMDAT

; 1764 : 		{	// report a length_error

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1765 : 		_Xlength_error("vector<T> too long");

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00010	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 1766 : 		}

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
?_Xlen@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBAXXZ ENDP ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAXXZ
_TEXT	SEGMENT
tv82 = 32
tv135 = 40
tv143 = 48
tv150 = 56
this$ = 80
?_Tidy@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAXXZ PROC ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Tidy, COMDAT

; 1636 : 		{	// free all storage

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1637 : 		if (this->_Myfirst() != pointer())

  00009	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst
  00013	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00017	0f 84 cf 00 00
	00		 je	 $LN2@Tidy

; 1638 : 			{	// something to free, destroy and deallocate it
; 1639 : 			this->_Orphan_all();

  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAXXZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Orphan_all

; 1640 : 			_Destroy(this->_Myfirst(), this->_Mylast());

  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast
  00031	48 89 44 24 20	 mov	 QWORD PTR tv82[rsp], rax
  00036	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0003b	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst
  00040	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv82[rsp]
  00045	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  00048	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0004b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00050	e8 00 00 00 00	 call	 ?_Destroy@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAXPEAW4Api@RtAudio@@0@Z ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Destroy

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

  00055	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0005a	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myend
  0005f	48 89 44 24 28	 mov	 QWORD PTR tv135[rsp], rax
  00064	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00069	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst
  0006e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00071	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv135[rsp]
  00076	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00079	48 2b c8	 sub	 rcx, rax
  0007c	48 8b c1	 mov	 rax, rcx
  0007f	48 c1 f8 02	 sar	 rax, 2
  00083	48 89 44 24 30	 mov	 QWORD PTR tv143[rsp], rax
  00088	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0008d	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst
  00092	48 89 44 24 38	 mov	 QWORD PTR tv150[rsp], rax
  00097	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0009c	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Getal
  000a1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv143[rsp]
  000a6	4c 8b c1	 mov	 r8, rcx
  000a9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv150[rsp]
  000ae	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  000b1	48 8b c8	 mov	 rcx, rax
  000b4	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXPEAW4Api@RtAudio@@_K@Z ; std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >::deallocate

; 1642 : 				this->_Myend() - this->_Myfirst());
; 1643 : 			this->_Myfirst() = pointer();

  000b9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000be	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst
  000c3	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1644 : 			this->_Mylast() = pointer();

  000ca	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000cf	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast
  000d4	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1645 : 			this->_Myend() = pointer();

  000db	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000e0	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myend
  000e5	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN2@Tidy:

; 1646 : 			}
; 1647 : 		}

  000ec	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f0	c3		 ret	 0
?_Tidy@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAXXZ ENDP ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z
_TEXT	SEGMENT
tv68 = 32
this$ = 64
_Count$ = 72
?_Reserve@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z PROC ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Reserve, COMDAT

; 1626 : 		{	// ensure room for _Count new elements, grow exponentially

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1627 : 		if (_Unused_capacity() < _Count)

  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?_Unused_capacity@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Unused_capacity
  00018	48 3b 44 24 48	 cmp	 rax, QWORD PTR _Count$[rsp]
  0001d	73 5e		 jae	 SHORT $LN2@Reserve

; 1628 : 			{	// need more room, try to get it
; 1629 : 			if (max_size() - size() < _Count)

  0001f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00024	e8 00 00 00 00	 call	 ?max_size@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::max_size
  00029	48 89 44 24 20	 mov	 QWORD PTR tv68[rsp], rax
  0002e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00033	e8 00 00 00 00	 call	 ?size@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::size
  00038	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv68[rsp]
  0003d	48 2b c8	 sub	 rcx, rax
  00040	48 8b c1	 mov	 rax, rcx
  00043	48 3b 44 24 48	 cmp	 rax, QWORD PTR _Count$[rsp]
  00048	73 0a		 jae	 SHORT $LN3@Reserve

; 1630 : 				_Xlen();

  0004a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0004f	e8 00 00 00 00	 call	 ?_Xlen@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBAXXZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Xlen
$LN3@Reserve:

; 1631 : 			_Reallocate(_Grow_to(size() + _Count));

  00054	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00059	e8 00 00 00 00	 call	 ?size@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::size
  0005e	48 03 44 24 48	 add	 rax, QWORD PTR _Count$[rsp]
  00063	48 8b d0	 mov	 rdx, rax
  00066	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0006b	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBA_K_K@Z ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Grow_to
  00070	48 8b d0	 mov	 rdx, rax
  00073	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00078	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Reallocate
$LN2@Reserve:
$LN4@Reserve:

; 1632 : 			}
; 1633 : 		}

  0007d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00081	c3		 ret	 0
?_Reserve@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z ENDP ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 32
tv84 = 40
tv150 = 48
tv177 = 56
tv179 = 64
tv186 = 72
tv200 = 80
_Size$ = 88
tv208 = 96
$T1 = 104
this$ = 128
_Count$ = 136
?_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z PROC ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Reallocate, COMDAT

; 1601 : 		{	// move to array of exactly _Count elements

$LN11:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  0000e	48 c7 44 24 68
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 1602 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  00017	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0001f	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Getal
  00024	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR _Count$[rsp]
  0002c	48 8b c8	 mov	 rcx, rax
  0002f	e8 00 00 00 00	 call	 ?allocate@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAPEAW4Api@RtAudio@@_K@Z ; std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >::allocate
  00034	48 89 44 24 20	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1603 : 
; 1604 : 		_TRY_BEGIN
; 1605 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);

  00039	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00041	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast
  00046	48 89 44 24 28	 mov	 QWORD PTR tv84[rsp], rax
  0004b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00053	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst
  00058	4c 8b 4c 24 20	 mov	 r9, QWORD PTR _Ptr$[rsp]
  0005d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv84[rsp]
  00062	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  00065	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00068	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00070	e8 00 00 00 00	 call	 ??$_Umove@PEAW4Api@RtAudio@@@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAPEAW4Api@RtAudio@@PEAW423@00@Z ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Umove<enum RtAudio::Api * __ptr64>
  00075	90		 npad	 1
  00076	eb 00		 jmp	 SHORT $LN7@Reallocate
$LN8@Reallocate:
$LN7@Reallocate:

; 1606 : 		_CATCH_ALL
; 1607 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1608 : 		_RERAISE;
; 1609 : 		_CATCH_END
; 1610 : 
; 1611 : 		size_type _Size = size();

  00078	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00080	e8 00 00 00 00	 call	 ?size@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::size
  00085	48 89 44 24 58	 mov	 QWORD PTR _Size$[rsp], rax

; 1612 : 		if (this->_Myfirst() != pointer())

  0008a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00092	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst
  00097	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0009b	0f 84 a4 00 00
	00		 je	 $LN3@Reallocate

; 1613 : 			{	// destroy and deallocate old array
; 1614 : 			_Destroy(this->_Myfirst(), this->_Mylast());

  000a1	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000a9	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast
  000ae	48 89 44 24 30	 mov	 QWORD PTR tv150[rsp], rax
  000b3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000bb	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst
  000c0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv150[rsp]
  000c5	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  000c8	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000cb	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000d3	e8 00 00 00 00	 call	 ?_Destroy@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAXPEAW4Api@RtAudio@@0@Z ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Destroy

; 1615 : 			this->_Getal().deallocate(this->_Myfirst(),

  000d8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000e0	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst
  000e5	48 89 44 24 38	 mov	 QWORD PTR tv177[rsp], rax
  000ea	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000f2	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myend
  000f7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv177[rsp]
  000fc	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ff	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00102	48 2b c1	 sub	 rax, rcx
  00105	48 c1 f8 02	 sar	 rax, 2
  00109	48 89 44 24 40	 mov	 QWORD PTR tv179[rsp], rax
  0010e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00116	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst
  0011b	48 89 44 24 48	 mov	 QWORD PTR tv186[rsp], rax
  00120	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00128	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Getal
  0012d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv179[rsp]
  00132	4c 8b c1	 mov	 r8, rcx
  00135	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv186[rsp]
  0013a	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  0013d	48 8b c8	 mov	 rcx, rax
  00140	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXPEAW4Api@RtAudio@@_K@Z ; std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >::deallocate
$LN3@Reallocate:

; 1616 : 				this->_Myend() - this->_Myfirst());
; 1617 : 			}
; 1618 : 
; 1619 : 		this->_Orphan_all();

  00145	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0014d	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAXXZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Orphan_all

; 1620 : 		this->_Myend() = _Ptr + _Count;

  00152	48 8b 44 24 20	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00157	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _Count$[rsp]
  0015f	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  00163	48 89 44 24 50	 mov	 QWORD PTR tv200[rsp], rax
  00168	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00170	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myend
  00175	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv200[rsp]
  0017a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1621 : 		this->_Mylast() = _Ptr + _Size;

  0017d	48 8b 44 24 20	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00182	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Size$[rsp]
  00187	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  0018b	48 89 44 24 60	 mov	 QWORD PTR tv208[rsp], rax
  00190	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00198	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast
  0019d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv208[rsp]
  001a2	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1622 : 		this->_Myfirst() = _Ptr;

  001a5	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001ad	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst
  001b2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  001b7	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1623 : 		}

  001ba	48 83 c4 78	 add	 rsp, 120		; 00000078H
  001be	c3		 ret	 0
$LN9@Reallocate:
?_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z ENDP ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Reallocate
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Ptr$ = 32
tv84 = 40
tv150 = 48
tv177 = 56
tv179 = 64
tv186 = 72
tv200 = 80
_Size$ = 88
tv208 = 96
$T1 = 104
this$ = 128
_Count$ = 136
?catch$0@?0??_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z@4HA PROC ; `std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Reallocate'::`1'::catch$0

; 1606 : 		_CATCH_ALL

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$?_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z$0:

; 1606 : 		_CATCH_ALL
; 1607 : 		this->_Getal().deallocate(_Ptr, _Count);

  0000d	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00014	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Getal
  00019	4c 8b 85 88 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00020	48 8b 55 20	 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00024	48 8b c8	 mov	 rcx, rax
  00027	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXPEAW4Api@RtAudio@@_K@Z ; std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >::deallocate

; 1606 : 		_CATCH_ALL
; 1607 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1608 : 		_RERAISE;

  0002c	33 d2		 xor	 edx, edx
  0002e	33 c9		 xor	 ecx, ecx
  00030	e8 00 00 00 00	 call	 _CxxThrowException
  00035	90		 npad	 1

; 1606 : 		_CATCH_ALL
; 1607 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1608 : 		_RERAISE;
; 1609 : 		_CATCH_END

  00036	48 8d 05 00 00
	00 00		 lea	 rax, $LN8@catch$0
  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
  00043	cc		 int	 3
?catch$0@?0??_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z@4HA ENDP ; `std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Reallocate'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_Ptr$ = 32
tv84 = 40
tv150 = 48
tv177 = 56
tv179 = 64
tv186 = 72
tv200 = 80
_Size$ = 88
tv208 = 96
$T1 = 104
this$ = 128
_Count$ = 136
?catch$0@?0??_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z@4HA PROC ; `std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Reallocate'::`1'::catch$0

; 1606 : 		_CATCH_ALL

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$?_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z$0:

; 1607 : 		this->_Getal().deallocate(_Ptr, _Count);

  0000d	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00014	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Getal
  00019	4c 8b 85 88 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00020	48 8b 55 20	 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00024	48 8b c8	 mov	 rcx, rax
  00027	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXPEAW4Api@RtAudio@@_K@Z ; std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >::deallocate

; 1608 : 		_RERAISE;

  0002c	33 d2		 xor	 edx, edx
  0002e	33 c9		 xor	 ecx, ecx
  00030	e8 00 00 00 00	 call	 _CxxThrowException
  00035	90		 npad	 1

; 1609 : 		_CATCH_END

  00036	48 8d 05 00 00
	00 00		 lea	 rax, $LN8@catch$0
  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
  00043	cc		 int	 3
?catch$0@?0??_Reallocate@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z@4HA ENDP ; `std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Reallocate'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBA_NPEBW4Api@RtAudio@@@Z
_TEXT	SEGMENT
tv82 = 32
this$ = 64
_Ptr$ = 72
?_Inside@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBA_NPEBW4Api@RtAudio@@@Z PROC ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Inside, COMDAT

; 1596 : 		{	// test if _Ptr points inside vector

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast
  00018	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0001b	e8 00 00 00 00	 call	 ??$_Unfancy@W4Api@RtAudio@@@std@@YAPEAW4Api@RtAudio@@PEAW412@@Z ; std::_Unfancy<enum RtAudio::Api>
  00020	48 39 44 24 48	 cmp	 QWORD PTR _Ptr$[rsp], rax
  00025	73 23		 jae	 SHORT $LN3@Inside
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst
  00031	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00034	e8 00 00 00 00	 call	 ??$_Unfancy@W4Api@RtAudio@@@std@@YAPEAW4Api@RtAudio@@PEAW412@@Z ; std::_Unfancy<enum RtAudio::Api>
  00039	48 3b 44 24 48	 cmp	 rax, QWORD PTR _Ptr$[rsp]
  0003e	77 0a		 ja	 SHORT $LN3@Inside
  00040	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
  00048	eb 08		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  0004a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
$LN4@Inside:
  00052	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv82[rsp]

; 1598 : 		}

  00057	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005b	c3		 ret	 0
?_Inside@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBA_NPEBW4Api@RtAudio@@@Z ENDP ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBA_K_K@Z
_TEXT	SEGMENT
_Capacity$ = 32
tv73 = 40
tv67 = 48
this$ = 80
_Count$ = 88
?_Grow_to@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBA_K_K@Z PROC ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Grow_to, COMDAT

; 1585 : 		{	// grow by 50% or at least to _Count

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1586 : 		size_type _Capacity = capacity();

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?capacity@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::capacity
  00018	48 89 44 24 20	 mov	 QWORD PTR _Capacity$[rsp], rax

; 1587 : 
; 1588 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ?max_size@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::max_size
  00027	48 89 44 24 30	 mov	 QWORD PTR tv67[rsp], rax
  0002c	33 d2		 xor	 edx, edx
  0002e	48 8b 44 24 20	 mov	 rax, QWORD PTR _Capacity$[rsp]
  00033	b9 02 00 00 00	 mov	 ecx, 2
  00038	48 f7 f1	 div	 rcx
  0003b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv67[rsp]
  00040	48 2b c8	 sub	 rcx, rax
  00043	48 8b c1	 mov	 rax, rcx
  00046	48 3b 44 24 20	 cmp	 rax, QWORD PTR _Capacity$[rsp]
  0004b	73 0b		 jae	 SHORT $LN4@Grow_to
  0004d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv73[rsp], 0
  00056	eb 1f		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00058	33 d2		 xor	 edx, edx
  0005a	48 8b 44 24 20	 mov	 rax, QWORD PTR _Capacity$[rsp]
  0005f	b9 02 00 00 00	 mov	 ecx, 2
  00064	48 f7 f1	 div	 rcx
  00067	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Capacity$[rsp]
  0006c	48 03 c8	 add	 rcx, rax
  0006f	48 8b c1	 mov	 rax, rcx
  00072	48 89 44 24 28	 mov	 QWORD PTR tv73[rsp], rax
$LN5@Grow_to:
  00077	48 8b 44 24 28	 mov	 rax, QWORD PTR tv73[rsp]
  0007c	48 89 44 24 20	 mov	 QWORD PTR _Capacity$[rsp], rax

; 1589 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1590 : 		if (_Capacity < _Count)

  00081	48 8b 44 24 58	 mov	 rax, QWORD PTR _Count$[rsp]
  00086	48 39 44 24 20	 cmp	 QWORD PTR _Capacity$[rsp], rax
  0008b	73 0a		 jae	 SHORT $LN2@Grow_to

; 1591 : 			_Capacity = _Count;

  0008d	48 8b 44 24 58	 mov	 rax, QWORD PTR _Count$[rsp]
  00092	48 89 44 24 20	 mov	 QWORD PTR _Capacity$[rsp], rax
$LN2@Grow_to:

; 1592 : 		return (_Capacity);

  00097	48 8b 44 24 20	 mov	 rax, QWORD PTR _Capacity$[rsp]

; 1593 : 		}

  0009c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a0	c3		 ret	 0
?_Grow_to@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBA_K_K@Z ENDP ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAXPEAW4Api@RtAudio@@0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Destroy@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAXPEAW4Api@RtAudio@@0@Z PROC ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Destroy, COMDAT

; 1580 : 		{	// destroy [_First, _Last) using allocator

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1581 : 		_Destroy_range(_First, _Last, this->_Getal());

  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Getal
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Last$[rsp]
  00025	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _First$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@W4Api@RtAudio@@@std@@PEAW4Api@RtAudio@@@std@@YAXPEAW4Api@RtAudio@@0AEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<enum RtAudio::Api>,enum RtAudio::Api * __ptr64>

; 1582 : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
?_Destroy@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAXPEAW4Api@RtAudio@@0@Z ENDP ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?clear@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
tv75 = 32
tv95 = 40
$T1 = 48
this$ = 80
?clear@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXXZ PROC ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::clear, COMDAT

; 1539 : 		{	// erase all

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00009	48 c7 44 24 30
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 1540 : 		this->_Orphan_all();

  00012	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00017	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAXXZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Orphan_all
  0001c	90		 npad	 1

; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());

  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast
  00027	90		 npad	 1
  00028	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  0002d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00032	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst
  00037	90		 npad	 1
  00038	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv75[rsp]
  0003d	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  00040	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00043	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00048	e8 00 00 00 00	 call	 ?_Destroy@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAXPEAW4Api@RtAudio@@0@Z ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Destroy
  0004d	90		 npad	 1

; 1542 : 		this->_Mylast() = this->_Myfirst();

  0004e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00053	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst
  00058	90		 npad	 1
  00059	48 89 44 24 28	 mov	 QWORD PTR tv95[rsp], rax
  0005e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00063	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast
  00068	90		 npad	 1
  00069	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv95[rsp]
  0006e	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00071	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1543 : 		}

  00074	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00078	c3		 ret	 0
?clear@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXXZ ENDP ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??A?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAAEAW4Api@RtAudio@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Pos$ = 56
??A?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAAEAW4Api@RtAudio@@_K@Z PROC ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::operator[], COMDAT

; 1230 : 		{	// subscript mutable sequence

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1231 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1232 : 		if (size() <= _Pos)
; 1233 : 			{	// report error
; 1234 : 			_DEBUG_ERROR("vector subscript out of range");
; 1235 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1236 : 			}
; 1237 : 
; 1238 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1239 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1240 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1241 : 
; 1242 : 		return (*(this->_Myfirst() + _Pos));

  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst
  00018	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Pos$[rsp]
  00020	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]

; 1243 : 		}

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
??A?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAAEAW4Api@RtAudio@@_K@Z ENDP ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
?max_size@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ PROC ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::max_size, COMDAT

; 1184 : 		{	// return maximum possible length of sequence

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1185 : 		return (this->_Getal().max_size());

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Getal
  00013	0f b6 54 24 20	 movzx	 edx, BYTE PTR $T1[rsp]
  00018	48 8b c8	 mov	 rcx, rax
  0001b	e8 00 00 00 00	 call	 ?max_size@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >::max_size

; 1186 : 		}

  00020	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00024	c3		 ret	 0
?max_size@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
tv69 = 32
this$ = 64
?size@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ PROC ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::size, COMDAT

; 1179 : 		{	// return length of sequence

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast
  00013	48 89 44 24 20	 mov	 QWORD PTR tv69[rsp], rax
  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst
  00022	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00025	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv69[rsp]
  0002a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0002d	48 2b c8	 sub	 rcx, rax
  00030	48 8b c1	 mov	 rax, rcx
  00033	48 c1 f8 02	 sar	 rax, 2

; 1181 : 		}

  00037	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003b	c3		 ret	 0
?size@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
tv69 = 32
this$ = 64
?_Unused_capacity@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ PROC ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Unused_capacity, COMDAT

; 1047 : 		{	// micro-optimization for capacity() - size()

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1048 : 		return (this->_Myend() - this->_Mylast());

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myend
  00013	48 89 44 24 20	 mov	 QWORD PTR tv69[rsp], rax
  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast
  00022	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00025	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv69[rsp]
  0002a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0002d	48 2b c8	 sub	 rcx, rax
  00030	48 8b c1	 mov	 rax, rcx
  00033	48 c1 f8 02	 sar	 rax, 2

; 1049 : 		}

  00037	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003b	c3		 ret	 0
?_Unused_capacity@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
tv69 = 32
this$ = 64
?capacity@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ PROC ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::capacity, COMDAT

; 1042 : 		{	// return current length of allocated storage

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1043 : 		return (this->_Myend() - this->_Myfirst());

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myend
  00013	48 89 44 24 20	 mov	 QWORD PTR tv69[rsp], rax
  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst
  00022	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00025	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv69[rsp]
  0002a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0002d	48 2b c8	 sub	 rcx, rax
  00030	48 8b c1	 mov	 rax, rcx
  00033	48 c1 f8 02	 sar	 rax, 2

; 1044 : 		}

  00037	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003b	c3		 ret	 0
?capacity@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ PROC ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::~vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >, COMDAT

; 975  : 		{	// destroy the object

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 976  : 		_Tidy();

  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00017	e8 00 00 00 00	 call	 ?_Tidy@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAXXZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Tidy
  0001c	90		 npad	 1

; 977  : 		}

  0001d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00021	c3		 ret	 0
??1?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ ENDP ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::~vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAX$$QEAW4Api@RtAudio@@@Z
_TEXT	SEGMENT
tv178 = 32
tv235 = 40
tv71 = 48
tv88 = 56
tv136 = 64
_Idx$1 = 72
tv152 = 80
tv163 = 88
tv185 = 96
tv201 = 104
tv217 = 112
tv220 = 120
this$ = 144
_Val$ = 152
?push_back@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAX$$QEAW4Api@RtAudio@@@Z PROC ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::push_back, COMDAT

; 896  : 		{	// insert by moving into element at end

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 897  : 		if (_Inside(_STD addressof(_Val)))

  00011	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Val$[rsp]
  00019	e8 00 00 00 00	 call	 ??$addressof@W4Api@RtAudio@@@std@@YAPEAW4Api@RtAudio@@AEAW412@@Z ; std::addressof<enum RtAudio::Api>
  0001e	48 8b d0	 mov	 rdx, rax
  00021	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00029	e8 00 00 00 00	 call	 ?_Inside@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBA_NPEBW4Api@RtAudio@@@Z ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Inside
  0002e	0f b6 c0	 movzx	 eax, al
  00031	85 c0		 test	 eax, eax
  00033	0f 84 40 01 00
	00		 je	 $LN2@push_back

; 898  : 			{	// push back an element
; 899  : 			size_type _Idx = _STD addressof(_Val) - _Unfancy(this->_Myfirst());

  00039	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Val$[rsp]
  00041	e8 00 00 00 00	 call	 ??$addressof@W4Api@RtAudio@@@std@@YAPEAW4Api@RtAudio@@AEAW412@@Z ; std::addressof<enum RtAudio::Api>
  00046	48 89 44 24 30	 mov	 QWORD PTR tv71[rsp], rax
  0004b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00053	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst
  00058	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0005b	e8 00 00 00 00	 call	 ??$_Unfancy@W4Api@RtAudio@@@std@@YAPEAW4Api@RtAudio@@PEAW412@@Z ; std::_Unfancy<enum RtAudio::Api>
  00060	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv71[rsp]
  00065	48 2b c8	 sub	 rcx, rax
  00068	48 8b c1	 mov	 rax, rcx
  0006b	48 c1 f8 02	 sar	 rax, 2
  0006f	48 89 44 24 48	 mov	 QWORD PTR _Idx$1[rsp], rax

; 900  : 			if (this->_Mylast() == this->_Myend())

  00074	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0007c	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast
  00081	48 89 44 24 38	 mov	 QWORD PTR tv88[rsp], rax
  00086	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0008e	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myend
  00093	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00096	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv88[rsp]
  0009b	48 39 01	 cmp	 QWORD PTR [rcx], rax
  0009e	75 12		 jne	 SHORT $LN4@push_back

; 901  : 				_Reserve(1);

  000a0	ba 01 00 00 00	 mov	 edx, 1
  000a5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000ad	e8 00 00 00 00	 call	 ?_Reserve@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Reserve
$LN4@push_back:

; 902  : 			_Orphan_range(this->_Mylast(), this->_Mylast());

  000b2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000ba	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast
  000bf	48 89 44 24 40	 mov	 QWORD PTR tv136[rsp], rax
  000c4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000cc	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast
  000d1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv136[rsp]
  000d6	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  000d9	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000dc	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000e4	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBAXPEAW4Api@RtAudio@@0@Z ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Orphan_range

; 903  : 			this->_Getal().construct(_Unfancy(this->_Mylast()),

  000e9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000f1	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst
  000f6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Idx$1[rsp]
  000fe	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  00102	48 8b c8	 mov	 rcx, rax
  00105	e8 00 00 00 00	 call	 ??$forward@W4Api@RtAudio@@@std@@YA$$QEAW4Api@RtAudio@@AEAW412@@Z ; std::forward<enum RtAudio::Api>
  0010a	48 89 44 24 50	 mov	 QWORD PTR tv152[rsp], rax
  0010f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00117	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast
  0011c	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0011f	e8 00 00 00 00	 call	 ??$_Unfancy@W4Api@RtAudio@@@std@@YAPEAW4Api@RtAudio@@PEAW412@@Z ; std::_Unfancy<enum RtAudio::Api>
  00124	48 89 44 24 58	 mov	 QWORD PTR tv163[rsp], rax
  00129	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00131	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Getal
  00136	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv152[rsp]
  0013b	4c 8b c1	 mov	 r8, rcx
  0013e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv163[rsp]
  00143	48 8b d1	 mov	 rdx, rcx
  00146	48 8b c8	 mov	 rcx, rax
  00149	e8 00 00 00 00	 call	 ??$construct@W4Api@RtAudio@@W412@@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXPEAW4Api@RtAudio@@$$QEAW423@@Z ; std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >::construct<enum RtAudio::Api,enum RtAudio::Api>

; 904  : 				_STD forward<value_type>(this->_Myfirst()[_Idx]));
; 905  : 			++this->_Mylast();

  0014e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00156	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast
  0015b	48 89 44 24 20	 mov	 QWORD PTR tv178[rsp], rax
  00160	48 8b 44 24 20	 mov	 rax, QWORD PTR tv178[rsp]
  00165	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00168	48 83 c0 04	 add	 rax, 4
  0016c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv178[rsp]
  00171	48 89 01	 mov	 QWORD PTR [rcx], rax

; 906  : 			}
; 907  : 		else

  00174	e9 ec 00 00 00	 jmp	 $LN3@push_back
$LN2@push_back:

; 908  : 			{	// push back a non-element
; 909  : 			if (this->_Mylast() == this->_Myend())

  00179	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00181	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast
  00186	48 89 44 24 60	 mov	 QWORD PTR tv185[rsp], rax
  0018b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00193	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myend
  00198	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0019b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv185[rsp]
  001a0	48 39 01	 cmp	 QWORD PTR [rcx], rax
  001a3	75 12		 jne	 SHORT $LN5@push_back

; 910  : 				_Reserve(1);

  001a5	ba 01 00 00 00	 mov	 edx, 1
  001aa	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001b2	e8 00 00 00 00	 call	 ?_Reserve@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEAAX_K@Z ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Reserve
$LN5@push_back:

; 911  : 			_Orphan_range(this->_Mylast(), this->_Mylast());

  001b7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001bf	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast
  001c4	48 89 44 24 68	 mov	 QWORD PTR tv201[rsp], rax
  001c9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001d1	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast
  001d6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv201[rsp]
  001db	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  001de	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  001e1	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001e9	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@IEBAXPEAW4Api@RtAudio@@0@Z ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::_Orphan_range

; 912  : 			this->_Getal().construct(_Unfancy(this->_Mylast()),

  001ee	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Val$[rsp]
  001f6	e8 00 00 00 00	 call	 ??$forward@W4Api@RtAudio@@@std@@YA$$QEAW4Api@RtAudio@@AEAW412@@Z ; std::forward<enum RtAudio::Api>
  001fb	48 89 44 24 70	 mov	 QWORD PTR tv217[rsp], rax
  00200	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00208	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast
  0020d	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00210	e8 00 00 00 00	 call	 ??$_Unfancy@W4Api@RtAudio@@@std@@YAPEAW4Api@RtAudio@@PEAW412@@Z ; std::_Unfancy<enum RtAudio::Api>
  00215	48 89 44 24 78	 mov	 QWORD PTR tv220[rsp], rax
  0021a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00222	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Getal
  00227	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv217[rsp]
  0022c	4c 8b c1	 mov	 r8, rcx
  0022f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv220[rsp]
  00234	48 8b d1	 mov	 rdx, rcx
  00237	48 8b c8	 mov	 rcx, rax
  0023a	e8 00 00 00 00	 call	 ??$construct@W4Api@RtAudio@@W412@@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXPEAW4Api@RtAudio@@$$QEAW423@@Z ; std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >::construct<enum RtAudio::Api,enum RtAudio::Api>

; 913  : 				_STD forward<value_type>(_Val));
; 914  : 			++this->_Mylast();

  0023f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00247	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast
  0024c	48 89 44 24 28	 mov	 QWORD PTR tv235[rsp], rax
  00251	48 8b 44 24 28	 mov	 rax, QWORD PTR tv235[rsp]
  00256	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00259	48 83 c0 04	 add	 rax, 4
  0025d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv235[rsp]
  00262	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN3@push_back:

; 915  : 			}
; 916  : 		}

  00265	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0026c	c3		 ret	 0
?push_back@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAX$$QEAW4Api@RtAudio@@@Z ENDP ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??0?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ PROC ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >, COMDAT

; 707  : 		{	// construct empty vector

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 706  : 		: _Mybase()

  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAA@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >
  0001c	90		 npad	 1

; 708  : 		}

  0001d	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00026	c3		 ret	 0
??0?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ ENDP ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >,std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >,1>::_Get_second, COMDAT

; 319  : 		{	// return const reference to second

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 320  : 		return (_Myval2);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 321  : 		}

  0000a	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >,std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >,std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >,1>::_Get_second, COMDAT

; 314  : 		{	// return reference to second

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 315  : 		return (_Myval2);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 316  : 		}

  0000a	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >,std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >,std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >,1>::_Get_first, COMDAT

; 299  : 		{	// return const reference to first

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 300  : 		return (*this);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 301  : 		}

  0000a	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >,std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >,std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >,1>::_Get_first, COMDAT

; 294  : 		{	// return reference to first

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 295  : 		return (*this);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 296  : 		}

  0000a	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >,std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >::_Vector_val<std::_Simple_types<enum RtAudio::Api> >, COMDAT

; 488  : 		{	// initialize values

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 485  : 		: _Myfirst(),

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 486  : 		_Mylast(),

  00011	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00016	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 487  : 		_Myend()

  0001e	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 489  : 		}

  0002b	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00030	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >::_Vector_val<std::_Simple_types<enum RtAudio::Api> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ
_TEXT	SEGMENT
this$ = 48
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myend, COMDAT

; 667  : 		{	// return const reference to _Myend

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 668  : 		return (_Get_data()._Myend);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Get_data
  00013	48 83 c0 10	 add	 rax, 16

; 669  : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ
_TEXT	SEGMENT
this$ = 48
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myend, COMDAT

; 662  : 		{	// return reference to _Myend

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 663  : 		return (_Get_data()._Myend);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Get_data
  00013	48 83 c0 10	 add	 rax, 16

; 664  : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ
_TEXT	SEGMENT
this$ = 48
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast, COMDAT

; 657  : 		{	// return const reference to _Mylast

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 658  : 		return (_Get_data()._Mylast);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Get_data
  00013	48 83 c0 08	 add	 rax, 8

; 659  : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ
_TEXT	SEGMENT
this$ = 48
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast, COMDAT

; 652  : 		{	// return reference to _Mylast

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 653  : 		return (_Get_data()._Mylast);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Get_data
  00013	48 83 c0 08	 add	 rax, 8

; 654  : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ
_TEXT	SEGMENT
this$ = 48
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst, COMDAT

; 647  : 		{	// return const reference to _Myfirst

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 648  : 		return (_Get_data()._Myfirst);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Get_data

; 649  : 		}

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBQEAW4Api@RtAudio@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ
_TEXT	SEGMENT
this$ = 48
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst, COMDAT

; 642  : 		{	// return reference to _Myfirst

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 643  : 		return (_Get_data()._Myfirst);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Get_data

; 644  : 		}

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAPEAW4Api@RtAudio@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Get_data, COMDAT

; 637  : 		{	// return const reference to _Vector_val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 638  : 		return (_Mypair._Get_second());

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >,std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >,1>::_Get_second

; 639  : 		}

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Get_data, COMDAT

; 632  : 		{	// return reference to _Vector_val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 633  : 		return (_Mypair._Get_second());

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >,std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >,1>::_Get_second

; 634  : 		}

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Getal, COMDAT

; 627  : 		{	// return const reference to allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 628  : 		return (_Mypair._Get_first());

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >,std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >,1>::_Get_first

; 629  : 		}

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Getal, COMDAT

; 622  : 		{	// return reference to allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 623  : 		return (_Mypair._Get_first());

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >,std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >,1>::_Get_first

; 624  : 		}

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Orphan_all, COMDAT

; 612  : 		{	// orphan all iterators

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 613  : 		_Get_data()._Orphan_all();

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Get_data
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 614  : 		}

  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAAXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??0?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >, COMDAT

; 520  : 		{	// default construct allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 519  : 		: _Mypair(_Zero_then_variadic_args_t())

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	0f b6 54 24 20	 movzx	 edx, BYTE PTR $T1[rsp]
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@W4Api@RtAudio@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >,std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >,std::_Vector_val<std::_Simple_types<enum RtAudio::Api> >,1><>

; 521  : 		}

  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00020	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00024	c3		 ret	 0
??0?$_Vector_alloc@U?$_Vec_base_types@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >::_Vector_alloc<std::_Vec_base_types<enum RtAudio::Api,std::allocator<enum RtAudio::Api> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KU_Nil@2@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
?max_size@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >::max_size, COMDAT

; 1007 : 		{	// get maximum size

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1008 : 		return (_Mytraits::max_size(*this));

  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ?max_size@?$allocator_traits@V?$allocator@W4Api@RtAudio@@@std@@@std@@SA_KAEBV?$allocator@W4Api@RtAudio@@@2@@Z ; std::allocator_traits<std::allocator<enum RtAudio::Api> >::max_size

; 1009 : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXPEAW4Api@RtAudio@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXPEAW4Api@RtAudio@@_K@Z PROC ; std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >::deallocate, COMDAT

; 986  : 		{	// deallocate object at _Ptr, ignore size

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 987  : 		_Mybase::deallocate(_Ptr, _Count);

  00013	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Count$[rsp]
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ?deallocate@?$allocator@W4Api@RtAudio@@@std@@QEAAXPEAW4Api@RtAudio@@_K@Z ; std::allocator<enum RtAudio::Api>::deallocate

; 988  : 		}

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
?deallocate@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXPEAW4Api@RtAudio@@_K@Z ENDP ; std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAPEAW4Api@RtAudio@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAPEAW4Api@RtAudio@@_K@Z PROC ; std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >::allocate, COMDAT

; 975  : 		{	// allocate array of _Count elements

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 976  : 		return (_Mybase::allocate(_Count));

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Count$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ?allocate@?$allocator@W4Api@RtAudio@@@std@@QEAAPEAW4Api@RtAudio@@_K@Z ; std::allocator<enum RtAudio::Api>::allocate

; 977  : 		}

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
?allocate@?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAPEAW4Api@RtAudio@@_K@Z ENDP ; std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ PROC ; std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >::_Wrap_alloc<std::allocator<enum RtAudio::Api> >, COMDAT

; 936  : 		{	// construct default allocator (do nothing)

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 935  : 		: _Mybase()

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??0?$allocator@W4Api@RtAudio@@@std@@QEAA@XZ ; std::allocator<enum RtAudio::Api>::allocator<enum RtAudio::Api>

; 937  : 		}

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ ENDP ; std::_Wrap_alloc<std::allocator<enum RtAudio::Api> >::_Wrap_alloc<std::allocator<enum RtAudio::Api> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@W4Api@RtAudio@@@std@@@std@@SA_KAEBV?$allocator@W4Api@RtAudio@@@2@@Z
_TEXT	SEGMENT
_Al$ = 48
?max_size@?$allocator_traits@V?$allocator@W4Api@RtAudio@@@std@@@std@@SA_KAEBV?$allocator@W4Api@RtAudio@@@2@@Z PROC ; std::allocator_traits<std::allocator<enum RtAudio::Api> >::max_size, COMDAT

; 868  : 		{	// get maximum size

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 869  : 		return (_Al.max_size());

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  0000e	e8 00 00 00 00	 call	 ?max_size@?$allocator@W4Api@RtAudio@@@std@@QEBA_KXZ ; std::allocator<enum RtAudio::Api>::max_size

; 870  : 		}

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@W4Api@RtAudio@@@std@@@std@@SA_KAEBV?$allocator@W4Api@RtAudio@@@2@@Z ENDP ; std::allocator_traits<std::allocator<enum RtAudio::Api> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@W4Api@RtAudio@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 8
?max_size@?$allocator@W4Api@RtAudio@@@std@@QEBA_KXZ PROC ; std::allocator<enum RtAudio::Api>::max_size, COMDAT

; 748  : 		{	// estimate maximum array size

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 749  : 		return ((size_t)(-1) / sizeof (_Ty));

  00005	48 b8 ff ff ff
	ff ff ff ff 3f	 mov	 rax, 4611686018427387903 ; 3fffffffffffffffH

; 750  : 		}

  0000f	c3		 ret	 0
?max_size@?$allocator@W4Api@RtAudio@@@std@@QEBA_KXZ ENDP ; std::allocator<enum RtAudio::Api>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@W4Api@RtAudio@@@std@@QEAAPEAW4Api@RtAudio@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@W4Api@RtAudio@@@std@@QEAAPEAW4Api@RtAudio@@_K@Z PROC ; std::allocator<enum RtAudio::Api>::allocate, COMDAT

; 724  : 		{	// allocate array of _Count elements

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

  0000e	41 b0 01	 mov	 r8b, 1
  00011	ba 04 00 00 00	 mov	 edx, 4
  00016	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Count$[rsp]
  0001b	e8 00 00 00 00	 call	 ?_Allocate@std@@YAPEAX_K0_N@Z ; std::_Allocate

; 726  : 		}

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
?allocate@?$allocator@W4Api@RtAudio@@@std@@QEAAPEAW4Api@RtAudio@@_K@Z ENDP ; std::allocator<enum RtAudio::Api>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@W4Api@RtAudio@@@std@@QEAAXPEAW4Api@RtAudio@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$allocator@W4Api@RtAudio@@@std@@QEAAXPEAW4Api@RtAudio@@_K@Z PROC ; std::allocator<enum RtAudio::Api>::deallocate, COMDAT

; 719  : 		{	// deallocate object at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00013	41 b8 04 00 00
	00		 mov	 r8d, 4
  00019	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Count$[rsp]
  0001e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00023	e8 00 00 00 00	 call	 ?_Deallocate@std@@YAXPEAX_K1@Z ; std::_Deallocate

; 721  : 		}

  00028	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002c	c3		 ret	 0
?deallocate@?$allocator@W4Api@RtAudio@@@std@@QEAAXPEAW4Api@RtAudio@@_K@Z ENDP ; std::allocator<enum RtAudio::Api>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@W4Api@RtAudio@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$allocator@W4Api@RtAudio@@@std@@QEAA@XZ PROC	; std::allocator<enum RtAudio::Api>::allocator<enum RtAudio::Api>, COMDAT

; 699  : 	allocator() _THROW0()

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	c3		 ret	 0
??0?$allocator@W4Api@RtAudio@@@std@@QEAA@XZ ENDP	; std::allocator<enum RtAudio::Api>::allocator<enum RtAudio::Api>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
text$ = 72
?convertCharPointerToStdString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBD@Z PROC ; convertCharPointerToStdString

; 67   :   {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 68   :     return std::string(text);

  00016	48 8b 54 24 48	 mov	 rdx, QWORD PTR text$[rsp]
  0001b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00020	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00025	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  00029	83 c8 01	 or	 eax, 1
  0002c	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  00030	48 8b 44 24 40	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 69   :   }

  00035	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00039	c3		 ret	 0
?convertCharPointerToStdString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBD@Z ENDP ; convertCharPointerToStdString
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GRtApiDs@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GRtApiDs@@UEAAPEAXI@Z PROC				; RtApiDs::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1RtApiDs@@UEAA@XZ	; RtApiDs::~RtApiDs
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba a8 02 00 00	 mov	 edx, 680		; 000002a8H
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_GRtApiDs@@UEAAPEAXI@Z ENDP				; RtApiDs::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
result$ = 64
dsBufferSize$ = 68
output$1 = 72
makeBuffer$2 = 80
buffer$3 = 88
handle$ = 96
nBuffers$ = 104
input$4 = 112
bufferBytes$ = 120
i$5 = 124
buffer$6 = 128
dsPointerLeadTime$ = 136
deviceFormats$7 = 140
dataLen$8 = 144
dataLen$9 = 148
bytesOut$10 = 152
ohandle$ = 160
bhandle$ = 168
buffer$11 = 176
buffer$12 = 184
object$13 = 192
nDevices$ = 200
audioPtr$14 = 208
audioPtr$15 = 216
$T16 = 224
tv1881 = 232
object$17 = 240
threadId$18 = 248
tv94 = 256
tv132 = 264
tv2173 = 272
tv159 = 280
tv176 = 288
tv2175 = 296
tv232 = 304
tv238 = 312
tv255 = 320
tv250 = 328
tv2177 = 336
tv316 = 344
tv311 = 352
tv2179 = 360
tv363 = 368
tv2181 = 376
hWnd$ = 384
tv498 = 392
tv493 = 400
tv2183 = 408
tv564 = 416
tv559 = 424
tv2185 = 432
tv625 = 440
tv620 = 448
tv2187 = 456
tv699 = 464
tv694 = 472
tv2189 = 480
tv767 = 488
tv762 = 496
tv2191 = 504
tv841 = 512
tv836 = 520
tv2193 = 528
tv948 = 536
tv943 = 544
tv2195 = 552
tv987 = 560
tv993 = 568
tv1010 = 576
tv1005 = 584
tv2197 = 592
tv1103 = 600
tv1098 = 608
tv2199 = 616
tv1243 = 624
tv1238 = 632
tv2201 = 640
tv1311 = 648
tv1306 = 656
tv2203 = 664
tv1385 = 672
tv1380 = 680
tv2205 = 688
tv1460 = 696
tv1455 = 704
tv2207 = 712
tv2212 = 720
tv2214 = 728
$T19 = 736
$T20 = 744
bufferDescription$21 = 752
$T22 = 792
bufferDescription$23 = 800
waveFormat$ = 840
inCaps$24 = 864
dscbcaps$25 = 880
dsbcaps$26 = 896
$T27 = 920
$T28 = 952
$T29 = 984
$T30 = 1016
$T31 = 1048
$T32 = 1080
$T33 = 1112
$T34 = 1144
$T35 = 1176
$T36 = 1208
$T37 = 1240
$T38 = 1272
$T39 = 1304
$T40 = 1336
$T41 = 1368
$T42 = 1400
$T43 = 1432
$T44 = 1464
outCaps$45 = 1504
__$ArrayPad$ = 1600
this$ = 1632
device$ = 1640
mode$ = 1648
channels$ = 1656
firstChannel$ = 1664
sampleRate$ = 1672
format$ = 1680
bufferSize$ = 1688
options$ = 1696
?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z PROC ; RtApiDs::probeDeviceOpen

; 5443 : {

$LN110:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 81 ec 58 06
	00 00		 sub	 rsp, 1624		; 00000658H
  0001a	48 c7 84 24 18
	03 00 00 fe ff
	ff ff		 mov	 QWORD PTR $T22[rsp], -2
  00026	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0002d	48 33 c4	 xor	 rax, rsp
  00030	48 89 84 24 40
	06 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 5444 :   if ( channels + firstChannel > 2 ) {

  00038	8b 84 24 80 06
	00 00		 mov	 eax, DWORD PTR firstChannel$[rsp]
  0003f	8b 8c 24 78 06
	00 00		 mov	 ecx, DWORD PTR channels$[rsp]
  00046	03 c8		 add	 ecx, eax
  00048	8b c1		 mov	 eax, ecx
  0004a	83 f8 02	 cmp	 eax, 2
  0004d	76 24		 jbe	 SHORT $LN9@probeDevic

; 5445 :     errorText_ = "RtApiDs::probeDeviceOpen: DirectSound does not support more than 2 channels per device.";

  0004f	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00057	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128906
  00064	48 8b c8	 mov	 rcx, rax
  00067	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 5446 :     return FAILURE;

  0006c	32 c0		 xor	 al, al
  0006e	e9 a7 24 00 00	 jmp	 $LN1@probeDevic
$LN9@probeDevic:

; 5447 :   }
; 5448 : 
; 5449 :   size_t nDevices = dsDevices.size();

  00073	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0007b	48 05 90 02 00
	00		 add	 rax, 656		; 00000290H
  00081	48 8b c8	 mov	 rcx, rax
  00084	e8 00 00 00 00	 call	 ?size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ ; std::vector<DsDevice,std::allocator<DsDevice> >::size
  00089	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR nDevices$[rsp], rax

; 5450 :   if ( nDevices == 0 ) {

  00091	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR nDevices$[rsp], 0
  0009a	75 24		 jne	 SHORT $LN10@probeDevic

; 5451 :     // This should not happen because a check is made before this function is called.
; 5452 :     errorText_ = "RtApiDs::probeDeviceOpen: no devices found!";

  0009c	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000a4	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  000aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128908
  000b1	48 8b c8	 mov	 rcx, rax
  000b4	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 5453 :     return FAILURE;

  000b9	32 c0		 xor	 al, al
  000bb	e9 5a 24 00 00	 jmp	 $LN1@probeDevic
$LN10@probeDevic:

; 5454 :   }
; 5455 : 
; 5456 :   if ( device >= nDevices ) {

  000c0	8b 84 24 68 06
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  000c7	48 3b 84 24 c8
	00 00 00	 cmp	 rax, QWORD PTR nDevices$[rsp]
  000cf	72 24		 jb	 SHORT $LN11@probeDevic

; 5457 :     // This should not happen because a check is made before this function is called.
; 5458 :     errorText_ = "RtApiDs::probeDeviceOpen: device ID is invalid!";

  000d1	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000d9	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  000df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128910
  000e6	48 8b c8	 mov	 rcx, rax
  000e9	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 5459 :     return FAILURE;

  000ee	32 c0		 xor	 al, al
  000f0	e9 25 24 00 00	 jmp	 $LN1@probeDevic
$LN11@probeDevic:

; 5460 :   }
; 5461 : 
; 5462 :   if ( mode == OUTPUT ) {

  000f5	83 bc 24 70 06
	00 00 00	 cmp	 DWORD PTR mode$[rsp], 0
  000fd	0f 85 e7 00 00
	00		 jne	 $LN12@probeDevic

; 5463 :     if ( dsDevices[ device ].validId[0] == false ) {

  00103	b8 01 00 00 00	 mov	 eax, 1
  00108	48 6b c0 00	 imul	 rax, rax, 0
  0010c	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv132[rsp], rax
  00114	8b 8c 24 68 06
	00 00		 mov	 ecx, DWORD PTR device$[rsp]
  0011b	48 8b 94 24 60
	06 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  00123	48 81 c2 90 02
	00 00		 add	 rdx, 656		; 00000290H
  0012a	48 89 94 24 00
	01 00 00	 mov	 QWORD PTR tv94[rsp], rdx
  00132	8b d1		 mov	 edx, ecx
  00134	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR tv94[rsp]
  0013c	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  00141	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tv132[rsp]
  00149	0f b6 44 08 10	 movzx	 eax, BYTE PTR [rax+rcx+16]
  0014e	85 c0		 test	 eax, eax
  00150	0f 85 8f 00 00
	00		 jne	 $LN14@probeDevic

; 5464 :       errorStream_ << "RtApiDs::probeDeviceOpen: device (" << device << ") does not support output!";

  00156	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0015e	48 83 c0 08	 add	 rax, 8
  00162	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128915
  00169	48 8b c8	 mov	 rcx, rax
  0016c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00171	8b 94 24 68 06
	00 00		 mov	 edx, DWORD PTR device$[rsp]
  00178	48 8b c8	 mov	 rcx, rax
  0017b	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00180	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128914
  00187	48 8b c8	 mov	 rcx, rax
  0018a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 5465 :       errorText_ = errorStream_.str();

  0018f	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00197	48 83 c0 08	 add	 rax, 8
  0019b	48 8d 94 24 98
	03 00 00	 lea	 rdx, QWORD PTR $T27[rsp]
  001a3	48 8b c8	 mov	 rcx, rax
  001a6	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  001ab	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv2173[rsp], rax
  001b3	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001bb	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  001c1	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR tv2173[rsp]
  001c9	48 8b c8	 mov	 rcx, rax
  001cc	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  001d1	48 8d 8c 24 98
	03 00 00	 lea	 rcx, QWORD PTR $T27[rsp]
  001d9	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5466 :       return FAILURE;

  001de	32 c0		 xor	 al, al
  001e0	e9 35 23 00 00	 jmp	 $LN1@probeDevic
$LN14@probeDevic:

; 5467 :     }
; 5468 :   }
; 5469 :   else { // mode == INPUT

  001e5	e9 e2 00 00 00	 jmp	 $LN13@probeDevic
$LN12@probeDevic:

; 5470 :     if ( dsDevices[ device ].validId[1] == false ) {

  001ea	b8 01 00 00 00	 mov	 eax, 1
  001ef	48 6b c0 01	 imul	 rax, rax, 1
  001f3	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv176[rsp], rax
  001fb	8b 8c 24 68 06
	00 00		 mov	 ecx, DWORD PTR device$[rsp]
  00202	48 8b 94 24 60
	06 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  0020a	48 81 c2 90 02
	00 00		 add	 rdx, 656		; 00000290H
  00211	48 89 94 24 18
	01 00 00	 mov	 QWORD PTR tv159[rsp], rdx
  00219	8b d1		 mov	 edx, ecx
  0021b	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR tv159[rsp]
  00223	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  00228	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR tv176[rsp]
  00230	0f b6 44 08 10	 movzx	 eax, BYTE PTR [rax+rcx+16]
  00235	85 c0		 test	 eax, eax
  00237	0f 85 8f 00 00
	00		 jne	 $LN13@probeDevic

; 5471 :       errorStream_ << "RtApiDs::probeDeviceOpen: device (" << device << ") does not support input!";

  0023d	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00245	48 83 c0 08	 add	 rax, 8
  00249	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128918
  00250	48 8b c8	 mov	 rcx, rax
  00253	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00258	8b 94 24 68 06
	00 00		 mov	 edx, DWORD PTR device$[rsp]
  0025f	48 8b c8	 mov	 rcx, rax
  00262	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00267	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128917
  0026e	48 8b c8	 mov	 rcx, rax
  00271	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 5472 :       errorText_ = errorStream_.str();

  00276	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0027e	48 83 c0 08	 add	 rax, 8
  00282	48 8d 94 24 b8
	03 00 00	 lea	 rdx, QWORD PTR $T28[rsp]
  0028a	48 8b c8	 mov	 rcx, rax
  0028d	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00292	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv2175[rsp], rax
  0029a	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  002a2	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  002a8	48 8b 94 24 28
	01 00 00	 mov	 rdx, QWORD PTR tv2175[rsp]
  002b0	48 8b c8	 mov	 rcx, rax
  002b3	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  002b8	48 8d 8c 24 b8
	03 00 00	 lea	 rcx, QWORD PTR $T28[rsp]
  002c0	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5473 :       return FAILURE;

  002c5	32 c0		 xor	 al, al
  002c7	e9 4e 22 00 00	 jmp	 $LN1@probeDevic
$LN13@probeDevic:

; 5474 :     }
; 5475 :   }
; 5476 : 
; 5477 :   // According to a note in PortAudio, using GetDesktopWindow()
; 5478 :   // instead of GetForegroundWindow() is supposed to avoid problems
; 5479 :   // that occur when the application's window is not the foreground
; 5480 :   // window.  Also, if the application window closes before the
; 5481 :   // DirectSound buffer, DirectSound can crash.  In the past, I had
; 5482 :   // problems when using GetDesktopWindow() but it seems fine now
; 5483 :   // (January 2010).  I'll leave it commented here.
; 5484 :   // HWND hWnd = GetForegroundWindow();
; 5485 :   HWND hWnd = GetDesktopWindow();

  002cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDesktopWindow
  002d2	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR hWnd$[rsp], rax

; 5486 : 
; 5487 :   // Check the numberOfBuffers parameter and limit the lowest value to
; 5488 :   // two.  This is a judgement call and a value of two is probably too
; 5489 :   // low for capture, but it should work for playback.
; 5490 :   int nBuffers = 0;

  002da	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR nBuffers$[rsp], 0

; 5491 :   if ( options ) nBuffers = options->numberOfBuffers;

  002e2	48 83 bc 24 a0
	06 00 00 00	 cmp	 QWORD PTR options$[rsp], 0
  002eb	74 0f		 je	 SHORT $LN16@probeDevic
  002ed	48 8b 84 24 a0
	06 00 00	 mov	 rax, QWORD PTR options$[rsp]
  002f5	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  002f8	89 44 24 68	 mov	 DWORD PTR nBuffers$[rsp], eax
$LN16@probeDevic:

; 5492 :   if ( options && options->flags & RTAUDIO_MINIMIZE_LATENCY ) nBuffers = 2;

  002fc	48 83 bc 24 a0
	06 00 00 00	 cmp	 QWORD PTR options$[rsp], 0
  00305	74 19		 je	 SHORT $LN17@probeDevic
  00307	48 8b 84 24 a0
	06 00 00	 mov	 rax, QWORD PTR options$[rsp]
  0030f	8b 00		 mov	 eax, DWORD PTR [rax]
  00311	83 e0 02	 and	 eax, 2
  00314	85 c0		 test	 eax, eax
  00316	74 08		 je	 SHORT $LN17@probeDevic
  00318	c7 44 24 68 02
	00 00 00	 mov	 DWORD PTR nBuffers$[rsp], 2
$LN17@probeDevic:

; 5493 :   if ( nBuffers < 2 ) nBuffers = 3;

  00320	83 7c 24 68 02	 cmp	 DWORD PTR nBuffers$[rsp], 2
  00325	7d 08		 jge	 SHORT $LN18@probeDevic
  00327	c7 44 24 68 03
	00 00 00	 mov	 DWORD PTR nBuffers$[rsp], 3
$LN18@probeDevic:

; 5494 : 
; 5495 :   // Check the lower range of the user-specified buffer size and set
; 5496 :   // (arbitrarily) to a lower bound of 32.
; 5497 :   if ( *bufferSize < 32 ) *bufferSize = 32;

  0032f	48 8b 84 24 98
	06 00 00	 mov	 rax, QWORD PTR bufferSize$[rsp]
  00337	83 38 20	 cmp	 DWORD PTR [rax], 32	; 00000020H
  0033a	73 0e		 jae	 SHORT $LN19@probeDevic
  0033c	48 8b 84 24 98
	06 00 00	 mov	 rax, QWORD PTR bufferSize$[rsp]
  00344	c7 00 20 00 00
	00		 mov	 DWORD PTR [rax], 32	; 00000020H
$LN19@probeDevic:

; 5498 : 
; 5499 :   // Create the wave format structure.  The data format setting will
; 5500 :   // be determined later.
; 5501 :   WAVEFORMATEX waveFormat;
; 5502 :   ZeroMemory( &waveFormat, sizeof(WAVEFORMATEX) );

  0034a	41 b8 12 00 00
	00		 mov	 r8d, 18
  00350	33 d2		 xor	 edx, edx
  00352	48 8d 8c 24 48
	03 00 00	 lea	 rcx, QWORD PTR waveFormat$[rsp]
  0035a	e8 00 00 00 00	 call	 memset

; 5503 :   waveFormat.wFormatTag = WAVE_FORMAT_PCM;

  0035f	b8 01 00 00 00	 mov	 eax, 1
  00364	66 89 84 24 48
	03 00 00	 mov	 WORD PTR waveFormat$[rsp], ax

; 5504 :   waveFormat.nChannels = channels + firstChannel;

  0036c	8b 84 24 80 06
	00 00		 mov	 eax, DWORD PTR firstChannel$[rsp]
  00373	8b 8c 24 78 06
	00 00		 mov	 ecx, DWORD PTR channels$[rsp]
  0037a	03 c8		 add	 ecx, eax
  0037c	8b c1		 mov	 eax, ecx
  0037e	66 89 84 24 4a
	03 00 00	 mov	 WORD PTR waveFormat$[rsp+2], ax

; 5505 :   waveFormat.nSamplesPerSec = (unsigned long) sampleRate;

  00386	8b 84 24 88 06
	00 00		 mov	 eax, DWORD PTR sampleRate$[rsp]
  0038d	89 84 24 4c 03
	00 00		 mov	 DWORD PTR waveFormat$[rsp+4], eax

; 5506 : 
; 5507 :   // Determine the device buffer size. By default, we'll use the value
; 5508 :   // defined above (32K), but we will grow it to make allowances for
; 5509 :   // very large software buffer sizes.
; 5510 :   DWORD dsBufferSize = MINIMUM_DEVICE_BUFFER_SIZE;

  00394	c7 44 24 44 00
	80 00 00	 mov	 DWORD PTR dsBufferSize$[rsp], 32768 ; 00008000H

; 5511 :   DWORD dsPointerLeadTime = 0;

  0039c	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR dsPointerLeadTime$[rsp], 0

; 5512 : 
; 5513 :   void *ohandle = 0, *bhandle = 0;

  003a7	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR ohandle$[rsp], 0
  003b3	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR bhandle$[rsp], 0

; 5514 :   HRESULT result;
; 5515 :   if ( mode == OUTPUT ) {

  003bf	83 bc 24 70 06
	00 00 00	 cmp	 DWORD PTR mode$[rsp], 0
  003c7	0f 85 f8 0d 00
	00		 jne	 $LN20@probeDevic

; 5516 : 
; 5517 :     LPDIRECTSOUND output;
; 5518 :     result = DirectSoundCreate( dsDevices[ device ].id[0], &output, NULL );

  003cd	b8 08 00 00 00	 mov	 eax, 8
  003d2	48 6b c0 00	 imul	 rax, rax, 0
  003d6	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv238[rsp], rax
  003de	8b 8c 24 68 06
	00 00		 mov	 ecx, DWORD PTR device$[rsp]
  003e5	48 8b 94 24 60
	06 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  003ed	48 81 c2 90 02
	00 00		 add	 rdx, 656		; 00000290H
  003f4	48 89 94 24 30
	01 00 00	 mov	 QWORD PTR tv232[rsp], rdx
  003fc	8b d1		 mov	 edx, ecx
  003fe	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR tv232[rsp]
  00406	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  0040b	45 33 c0	 xor	 r8d, r8d
  0040e	48 8d 54 24 48	 lea	 rdx, QWORD PTR output$1[rsp]
  00413	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR tv238[rsp]
  0041b	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0041f	e8 00 00 00 00	 call	 DirectSoundCreate
  00424	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 5519 :     if ( FAILED( result ) ) {

  00428	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  0042d	0f 8d ec 00 00
	00		 jge	 $LN21@probeDevic

; 5520 :       errorStream_ << "RtApiDs::probeDeviceOpen: error (" << getErrorString( result ) << ") opening output device (" << dsDevices[ device ].name << ")!";

  00433	8b 84 24 68 06
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  0043a	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00442	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  00449	8b d0		 mov	 edx, eax
  0044b	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  00450	48 83 c0 18	 add	 rax, 24
  00454	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv250[rsp], rax
  0045c	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  00460	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  00465	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR tv255[rsp], rax
  0046d	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00475	48 83 c1 08	 add	 rcx, 8
  00479	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128927
  00480	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00485	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR tv255[rsp]
  0048d	48 8b d1	 mov	 rdx, rcx
  00490	48 8b c8	 mov	 rcx, rax
  00493	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00498	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128926
  0049f	48 8b c8	 mov	 rcx, rax
  004a2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  004a7	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR tv250[rsp]
  004af	48 8b d1	 mov	 rdx, rcx
  004b2	48 8b c8	 mov	 rcx, rax
  004b5	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  004ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128925
  004c1	48 8b c8	 mov	 rcx, rax
  004c4	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 5521 :       errorText_ = errorStream_.str();

  004c9	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  004d1	48 83 c0 08	 add	 rax, 8
  004d5	48 8d 94 24 d8
	03 00 00	 lea	 rdx, QWORD PTR $T29[rsp]
  004dd	48 8b c8	 mov	 rcx, rax
  004e0	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  004e5	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR tv2177[rsp], rax
  004ed	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  004f5	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  004fb	48 8b 94 24 50
	01 00 00	 mov	 rdx, QWORD PTR tv2177[rsp]
  00503	48 8b c8	 mov	 rcx, rax
  00506	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  0050b	48 8d 8c 24 d8
	03 00 00	 lea	 rcx, QWORD PTR $T29[rsp]
  00513	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5522 :       return FAILURE;

  00518	32 c0		 xor	 al, al
  0051a	e9 fb 1f 00 00	 jmp	 $LN1@probeDevic
$LN21@probeDevic:

; 5523 :     }
; 5524 : 
; 5525 :     DSCAPS outCaps;
; 5526 :     outCaps.dwSize = sizeof( outCaps );

  0051f	c7 84 24 e0 05
	00 00 60 00 00
	00		 mov	 DWORD PTR outCaps$45[rsp], 96 ; 00000060H

; 5527 :     result = output->GetCaps( &outCaps );

  0052a	48 8b 44 24 48	 mov	 rax, QWORD PTR output$1[rsp]
  0052f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00532	48 8d 94 24 e0
	05 00 00	 lea	 rdx, QWORD PTR outCaps$45[rsp]
  0053a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR output$1[rsp]
  0053f	ff 50 20	 call	 QWORD PTR [rax+32]
  00542	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 5528 :     if ( FAILED( result ) ) {

  00546	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  0054b	0f 8d fc 00 00
	00		 jge	 $LN22@probeDevic

; 5529 :       output->Release();

  00551	48 8b 44 24 48	 mov	 rax, QWORD PTR output$1[rsp]
  00556	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00559	48 8b 4c 24 48	 mov	 rcx, QWORD PTR output$1[rsp]
  0055e	ff 50 10	 call	 QWORD PTR [rax+16]

; 5530 :       errorStream_ << "RtApiDs::probeDeviceOpen: error (" << getErrorString( result ) << ") getting capabilities (" << dsDevices[ device ].name << ")!";

  00561	8b 84 24 68 06
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  00568	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00570	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  00577	8b d0		 mov	 edx, eax
  00579	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  0057e	48 83 c0 18	 add	 rax, 24
  00582	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv311[rsp], rax
  0058a	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  0058e	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  00593	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR tv316[rsp], rax
  0059b	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  005a3	48 83 c1 08	 add	 rcx, 8
  005a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128931
  005ae	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  005b3	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tv316[rsp]
  005bb	48 8b d1	 mov	 rdx, rcx
  005be	48 8b c8	 mov	 rcx, rax
  005c1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  005c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128930
  005cd	48 8b c8	 mov	 rcx, rax
  005d0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  005d5	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR tv311[rsp]
  005dd	48 8b d1	 mov	 rdx, rcx
  005e0	48 8b c8	 mov	 rcx, rax
  005e3	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  005e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128929
  005ef	48 8b c8	 mov	 rcx, rax
  005f2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 5531 :       errorText_ = errorStream_.str();

  005f7	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  005ff	48 83 c0 08	 add	 rax, 8
  00603	48 8d 94 24 f8
	03 00 00	 lea	 rdx, QWORD PTR $T30[rsp]
  0060b	48 8b c8	 mov	 rcx, rax
  0060e	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00613	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR tv2179[rsp], rax
  0061b	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00623	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00629	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR tv2179[rsp]
  00631	48 8b c8	 mov	 rcx, rax
  00634	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00639	48 8d 8c 24 f8
	03 00 00	 lea	 rcx, QWORD PTR $T30[rsp]
  00641	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5532 :       return FAILURE;

  00646	32 c0		 xor	 al, al
  00648	e9 cd 1e 00 00	 jmp	 $LN1@probeDevic
$LN22@probeDevic:

; 5533 :     }
; 5534 : 
; 5535 :     // Check channel information.
; 5536 :     if ( channels + firstChannel == 2 && !( outCaps.dwFlags & DSCAPS_PRIMARYSTEREO ) ) {

  0064d	8b 84 24 80 06
	00 00		 mov	 eax, DWORD PTR firstChannel$[rsp]
  00654	8b 8c 24 78 06
	00 00		 mov	 ecx, DWORD PTR channels$[rsp]
  0065b	03 c8		 add	 ecx, eax
  0065d	8b c1		 mov	 eax, ecx
  0065f	83 f8 02	 cmp	 eax, 2
  00662	0f 85 cb 00 00
	00		 jne	 $LN23@probeDevic
  00668	8b 84 24 e4 05
	00 00		 mov	 eax, DWORD PTR outCaps$45[rsp+4]
  0066f	83 e0 02	 and	 eax, 2
  00672	85 c0		 test	 eax, eax
  00674	0f 85 b9 00 00
	00		 jne	 $LN23@probeDevic

; 5537 :       errorStream_ << "RtApiDs::getDeviceInfo: the output device (" << dsDevices[ device ].name << ") does not support stereo playback.";

  0067a	8b 84 24 68 06
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  00681	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00689	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  00690	8b d0		 mov	 edx, eax
  00692	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  00697	48 83 c0 18	 add	 rax, 24
  0069b	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR tv363[rsp], rax
  006a3	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  006ab	48 83 c1 08	 add	 rcx, 8
  006af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128934
  006b6	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  006bb	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR tv363[rsp]
  006c3	48 8b d1	 mov	 rdx, rcx
  006c6	48 8b c8	 mov	 rcx, rax
  006c9	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  006ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128933
  006d5	48 8b c8	 mov	 rcx, rax
  006d8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 5538 :       errorText_ = errorStream_.str();

  006dd	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  006e5	48 83 c0 08	 add	 rax, 8
  006e9	48 8d 94 24 18
	04 00 00	 lea	 rdx, QWORD PTR $T31[rsp]
  006f1	48 8b c8	 mov	 rcx, rax
  006f4	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  006f9	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR tv2181[rsp], rax
  00701	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00709	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  0070f	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR tv2181[rsp]
  00717	48 8b c8	 mov	 rcx, rax
  0071a	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  0071f	48 8d 8c 24 18
	04 00 00	 lea	 rcx, QWORD PTR $T31[rsp]
  00727	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5539 :       return FAILURE;

  0072c	32 c0		 xor	 al, al
  0072e	e9 e7 1d 00 00	 jmp	 $LN1@probeDevic
$LN23@probeDevic:

; 5540 :     }
; 5541 : 
; 5542 :     // Check format information.  Use 16-bit format unless not
; 5543 :     // supported or user requests 8-bit.
; 5544 :     if ( outCaps.dwFlags & DSCAPS_PRIMARY16BIT &&

  00733	8b 84 24 e4 05
	00 00		 mov	 eax, DWORD PTR outCaps$45[rsp+4]
  0073a	83 e0 08	 and	 eax, 8
  0073d	85 c0		 test	 eax, eax
  0073f	74 42		 je	 SHORT $LN24@probeDevic
  00741	83 bc 24 90 06
	00 00 01	 cmp	 DWORD PTR format$[rsp], 1
  00749	75 0e		 jne	 SHORT $LN26@probeDevic
  0074b	8b 84 24 e4 05
	00 00		 mov	 eax, DWORD PTR outCaps$45[rsp+4]
  00752	83 e0 04	 and	 eax, 4
  00755	85 c0		 test	 eax, eax
  00757	75 2a		 jne	 SHORT $LN24@probeDevic
$LN26@probeDevic:

; 5545 :          !( format == RTAUDIO_SINT8 && outCaps.dwFlags & DSCAPS_PRIMARY8BIT ) ) {
; 5546 :       waveFormat.wBitsPerSample = 16;

  00759	b8 10 00 00 00	 mov	 eax, 16
  0075e	66 89 84 24 56
	03 00 00	 mov	 WORD PTR waveFormat$[rsp+14], ax

; 5547 :       stream_.deviceFormat[mode] = RTAUDIO_SINT16;

  00766	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  0076e	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00776	c7 84 81 80 01
	00 00 02 00 00
	00		 mov	 DWORD PTR [rcx+rax*4+384], 2

; 5548 :     }
; 5549 :     else {

  00781	eb 28		 jmp	 SHORT $LN25@probeDevic
$LN24@probeDevic:

; 5550 :       waveFormat.wBitsPerSample = 8;

  00783	b8 08 00 00 00	 mov	 eax, 8
  00788	66 89 84 24 56
	03 00 00	 mov	 WORD PTR waveFormat$[rsp+14], ax

; 5551 :       stream_.deviceFormat[mode] = RTAUDIO_SINT8;

  00790	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  00798	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  007a0	c7 84 81 80 01
	00 00 01 00 00
	00		 mov	 DWORD PTR [rcx+rax*4+384], 1
$LN25@probeDevic:

; 5552 :     }
; 5553 :     stream_.userFormat = format;

  007ab	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  007b3	8b 8c 24 90 06
	00 00		 mov	 ecx, DWORD PTR format$[rsp]
  007ba	89 88 7c 01 00
	00		 mov	 DWORD PTR [rax+380], ecx

; 5554 : 
; 5555 :     // Update wave format structure and buffer information.
; 5556 :     waveFormat.nBlockAlign = waveFormat.nChannels * waveFormat.wBitsPerSample / 8;

  007c0	0f b7 84 24 56
	03 00 00	 movzx	 eax, WORD PTR waveFormat$[rsp+14]
  007c8	0f b7 8c 24 4a
	03 00 00	 movzx	 ecx, WORD PTR waveFormat$[rsp+2]
  007d0	0f af c8	 imul	 ecx, eax
  007d3	8b c1		 mov	 eax, ecx
  007d5	99		 cdq
  007d6	83 e2 07	 and	 edx, 7
  007d9	03 c2		 add	 eax, edx
  007db	c1 f8 03	 sar	 eax, 3
  007de	66 89 84 24 54
	03 00 00	 mov	 WORD PTR waveFormat$[rsp+12], ax

; 5557 :     waveFormat.nAvgBytesPerSec = waveFormat.nSamplesPerSec * waveFormat.nBlockAlign;

  007e6	0f b7 84 24 54
	03 00 00	 movzx	 eax, WORD PTR waveFormat$[rsp+12]
  007ee	8b 8c 24 4c 03
	00 00		 mov	 ecx, DWORD PTR waveFormat$[rsp+4]
  007f5	0f af c8	 imul	 ecx, eax
  007f8	8b c1		 mov	 eax, ecx
  007fa	89 84 24 50 03
	00 00		 mov	 DWORD PTR waveFormat$[rsp+8], eax

; 5558 :     dsPointerLeadTime = nBuffers * (*bufferSize) * (waveFormat.wBitsPerSample / 8) * channels;

  00801	0f b7 84 24 56
	03 00 00	 movzx	 eax, WORD PTR waveFormat$[rsp+14]
  00809	99		 cdq
  0080a	83 e2 07	 and	 edx, 7
  0080d	03 c2		 add	 eax, edx
  0080f	c1 f8 03	 sar	 eax, 3
  00812	48 8b 8c 24 98
	06 00 00	 mov	 rcx, QWORD PTR bufferSize$[rsp]
  0081a	8b 54 24 68	 mov	 edx, DWORD PTR nBuffers$[rsp]
  0081e	0f af 11	 imul	 edx, DWORD PTR [rcx]
  00821	8b ca		 mov	 ecx, edx
  00823	0f af c8	 imul	 ecx, eax
  00826	8b c1		 mov	 eax, ecx
  00828	0f af 84 24 78
	06 00 00	 imul	 eax, DWORD PTR channels$[rsp]
  00830	89 84 24 88 00
	00 00		 mov	 DWORD PTR dsPointerLeadTime$[rsp], eax
$LN2@probeDevic:

; 5559 : 
; 5560 :     // If the user wants an even bigger buffer, increase the device buffer size accordingly.
; 5561 :     while ( dsPointerLeadTime * 2U > dsBufferSize )

  00837	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR dsPointerLeadTime$[rsp]
  0083e	d1 e0		 shl	 eax, 1
  00840	3b 44 24 44	 cmp	 eax, DWORD PTR dsBufferSize$[rsp]
  00844	76 0c		 jbe	 SHORT $LN3@probeDevic

; 5562 :       dsBufferSize *= 2;

  00846	8b 44 24 44	 mov	 eax, DWORD PTR dsBufferSize$[rsp]
  0084a	d1 e0		 shl	 eax, 1
  0084c	89 44 24 44	 mov	 DWORD PTR dsBufferSize$[rsp], eax
  00850	eb e5		 jmp	 SHORT $LN2@probeDevic
$LN3@probeDevic:

; 5563 : 
; 5564 :     // Set cooperative level to DSSCL_EXCLUSIVE ... sound stops when window focus changes.
; 5565 :     // result = output->SetCooperativeLevel( hWnd, DSSCL_EXCLUSIVE );
; 5566 :     // Set cooperative level to DSSCL_PRIORITY ... sound remains when window focus changes.
; 5567 :     result = output->SetCooperativeLevel( hWnd, DSSCL_PRIORITY );

  00852	48 8b 44 24 48	 mov	 rax, QWORD PTR output$1[rsp]
  00857	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0085a	41 b8 02 00 00
	00		 mov	 r8d, 2
  00860	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR hWnd$[rsp]
  00868	48 8b 4c 24 48	 mov	 rcx, QWORD PTR output$1[rsp]
  0086d	ff 50 30	 call	 QWORD PTR [rax+48]
  00870	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 5568 :     if ( FAILED( result ) ) {

  00874	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  00879	0f 8d fc 00 00
	00		 jge	 $LN27@probeDevic

; 5569 :       output->Release();

  0087f	48 8b 44 24 48	 mov	 rax, QWORD PTR output$1[rsp]
  00884	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00887	48 8b 4c 24 48	 mov	 rcx, QWORD PTR output$1[rsp]
  0088c	ff 50 10	 call	 QWORD PTR [rax+16]

; 5570 :       errorStream_ << "RtApiDs::probeDeviceOpen: error (" << getErrorString( result ) << ") setting cooperative level (" << dsDevices[ device ].name << ")!";

  0088f	8b 84 24 68 06
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  00896	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0089e	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  008a5	8b d0		 mov	 edx, eax
  008a7	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  008ac	48 83 c0 18	 add	 rax, 24
  008b0	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR tv493[rsp], rax
  008b8	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  008bc	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  008c1	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR tv498[rsp], rax
  008c9	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  008d1	48 83 c1 08	 add	 rcx, 8
  008d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128941
  008dc	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  008e1	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR tv498[rsp]
  008e9	48 8b d1	 mov	 rdx, rcx
  008ec	48 8b c8	 mov	 rcx, rax
  008ef	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  008f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128940
  008fb	48 8b c8	 mov	 rcx, rax
  008fe	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00903	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR tv493[rsp]
  0090b	48 8b d1	 mov	 rdx, rcx
  0090e	48 8b c8	 mov	 rcx, rax
  00911	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  00916	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128939
  0091d	48 8b c8	 mov	 rcx, rax
  00920	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 5571 :       errorText_ = errorStream_.str();

  00925	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0092d	48 83 c0 08	 add	 rax, 8
  00931	48 8d 94 24 38
	04 00 00	 lea	 rdx, QWORD PTR $T32[rsp]
  00939	48 8b c8	 mov	 rcx, rax
  0093c	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00941	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR tv2183[rsp], rax
  00949	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00951	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00957	48 8b 94 24 98
	01 00 00	 mov	 rdx, QWORD PTR tv2183[rsp]
  0095f	48 8b c8	 mov	 rcx, rax
  00962	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00967	48 8d 8c 24 38
	04 00 00	 lea	 rcx, QWORD PTR $T32[rsp]
  0096f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5572 :       return FAILURE;

  00974	32 c0		 xor	 al, al
  00976	e9 9f 1b 00 00	 jmp	 $LN1@probeDevic
$LN27@probeDevic:

; 5573 :     }
; 5574 : 
; 5575 :     // Even though we will write to the secondary buffer, we need to
; 5576 :     // access the primary buffer to set the correct output format
; 5577 :     // (since the default is 8-bit, 22 kHz!).  Setup the DS primary
; 5578 :     // buffer description.
; 5579 :     DSBUFFERDESC bufferDescription;
; 5580 :     ZeroMemory( &bufferDescription, sizeof( DSBUFFERDESC ) );

  0097b	41 b8 28 00 00
	00		 mov	 r8d, 40			; 00000028H
  00981	33 d2		 xor	 edx, edx
  00983	48 8d 8c 24 20
	03 00 00	 lea	 rcx, QWORD PTR bufferDescription$23[rsp]
  0098b	e8 00 00 00 00	 call	 memset

; 5581 :     bufferDescription.dwSize = sizeof( DSBUFFERDESC );

  00990	c7 84 24 20 03
	00 00 28 00 00
	00		 mov	 DWORD PTR bufferDescription$23[rsp], 40 ; 00000028H

; 5582 :     bufferDescription.dwFlags = DSBCAPS_PRIMARYBUFFER;

  0099b	c7 84 24 24 03
	00 00 01 00 00
	00		 mov	 DWORD PTR bufferDescription$23[rsp+4], 1

; 5583 : 
; 5584 :     // Obtain the primary buffer
; 5585 :     LPDIRECTSOUNDBUFFER buffer;
; 5586 :     result = output->CreateSoundBuffer( &bufferDescription, &buffer, NULL );

  009a6	48 8b 44 24 48	 mov	 rax, QWORD PTR output$1[rsp]
  009ab	48 8b 00	 mov	 rax, QWORD PTR [rax]
  009ae	45 33 c9	 xor	 r9d, r9d
  009b1	4c 8d 44 24 58	 lea	 r8, QWORD PTR buffer$3[rsp]
  009b6	48 8d 94 24 20
	03 00 00	 lea	 rdx, QWORD PTR bufferDescription$23[rsp]
  009be	48 8b 4c 24 48	 mov	 rcx, QWORD PTR output$1[rsp]
  009c3	ff 50 18	 call	 QWORD PTR [rax+24]
  009c6	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 5587 :     if ( FAILED( result ) ) {

  009ca	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  009cf	0f 8d fc 00 00
	00		 jge	 $LN28@probeDevic

; 5588 :       output->Release();

  009d5	48 8b 44 24 48	 mov	 rax, QWORD PTR output$1[rsp]
  009da	48 8b 00	 mov	 rax, QWORD PTR [rax]
  009dd	48 8b 4c 24 48	 mov	 rcx, QWORD PTR output$1[rsp]
  009e2	ff 50 10	 call	 QWORD PTR [rax+16]

; 5589 :       errorStream_ << "RtApiDs::probeDeviceOpen: error (" << getErrorString( result ) << ") accessing primary buffer (" << dsDevices[ device ].name << ")!";

  009e5	8b 84 24 68 06
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  009ec	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  009f4	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  009fb	8b d0		 mov	 edx, eax
  009fd	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  00a02	48 83 c0 18	 add	 rax, 24
  00a06	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR tv559[rsp], rax
  00a0e	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  00a12	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  00a17	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR tv564[rsp], rax
  00a1f	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00a27	48 83 c1 08	 add	 rcx, 8
  00a2b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128945
  00a32	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00a37	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR tv564[rsp]
  00a3f	48 8b d1	 mov	 rdx, rcx
  00a42	48 8b c8	 mov	 rcx, rax
  00a45	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00a4a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128944
  00a51	48 8b c8	 mov	 rcx, rax
  00a54	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00a59	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR tv559[rsp]
  00a61	48 8b d1	 mov	 rdx, rcx
  00a64	48 8b c8	 mov	 rcx, rax
  00a67	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  00a6c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128943
  00a73	48 8b c8	 mov	 rcx, rax
  00a76	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 5590 :       errorText_ = errorStream_.str();

  00a7b	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00a83	48 83 c0 08	 add	 rax, 8
  00a87	48 8d 94 24 58
	04 00 00	 lea	 rdx, QWORD PTR $T33[rsp]
  00a8f	48 8b c8	 mov	 rcx, rax
  00a92	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00a97	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR tv2185[rsp], rax
  00a9f	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00aa7	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00aad	48 8b 94 24 b0
	01 00 00	 mov	 rdx, QWORD PTR tv2185[rsp]
  00ab5	48 8b c8	 mov	 rcx, rax
  00ab8	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00abd	48 8d 8c 24 58
	04 00 00	 lea	 rcx, QWORD PTR $T33[rsp]
  00ac5	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5591 :       return FAILURE;

  00aca	32 c0		 xor	 al, al
  00acc	e9 49 1a 00 00	 jmp	 $LN1@probeDevic
$LN28@probeDevic:

; 5592 :     }
; 5593 : 
; 5594 :     // Set the primary DS buffer sound format.
; 5595 :     result = buffer->SetFormat( &waveFormat );

  00ad1	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$3[rsp]
  00ad6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00ad9	48 8d 94 24 48
	03 00 00	 lea	 rdx, QWORD PTR waveFormat$[rsp]
  00ae1	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buffer$3[rsp]
  00ae6	ff 50 70	 call	 QWORD PTR [rax+112]
  00ae9	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 5596 :     if ( FAILED( result ) ) {

  00aed	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  00af2	0f 8d fc 00 00
	00		 jge	 $LN29@probeDevic

; 5597 :       output->Release();

  00af8	48 8b 44 24 48	 mov	 rax, QWORD PTR output$1[rsp]
  00afd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00b00	48 8b 4c 24 48	 mov	 rcx, QWORD PTR output$1[rsp]
  00b05	ff 50 10	 call	 QWORD PTR [rax+16]

; 5598 :       errorStream_ << "RtApiDs::probeDeviceOpen: error (" << getErrorString( result ) << ") setting primary buffer format (" << dsDevices[ device ].name << ")!";

  00b08	8b 84 24 68 06
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  00b0f	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00b17	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  00b1e	8b d0		 mov	 edx, eax
  00b20	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  00b25	48 83 c0 18	 add	 rax, 24
  00b29	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR tv620[rsp], rax
  00b31	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  00b35	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  00b3a	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR tv625[rsp], rax
  00b42	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00b4a	48 83 c1 08	 add	 rcx, 8
  00b4e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128949
  00b55	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00b5a	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR tv625[rsp]
  00b62	48 8b d1	 mov	 rdx, rcx
  00b65	48 8b c8	 mov	 rcx, rax
  00b68	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00b6d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128948
  00b74	48 8b c8	 mov	 rcx, rax
  00b77	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00b7c	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR tv620[rsp]
  00b84	48 8b d1	 mov	 rdx, rcx
  00b87	48 8b c8	 mov	 rcx, rax
  00b8a	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  00b8f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128947
  00b96	48 8b c8	 mov	 rcx, rax
  00b99	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 5599 :       errorText_ = errorStream_.str();

  00b9e	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00ba6	48 83 c0 08	 add	 rax, 8
  00baa	48 8d 94 24 78
	04 00 00	 lea	 rdx, QWORD PTR $T34[rsp]
  00bb2	48 8b c8	 mov	 rcx, rax
  00bb5	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00bba	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR tv2187[rsp], rax
  00bc2	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00bca	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00bd0	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR tv2187[rsp]
  00bd8	48 8b c8	 mov	 rcx, rax
  00bdb	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00be0	48 8d 8c 24 78
	04 00 00	 lea	 rcx, QWORD PTR $T34[rsp]
  00be8	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5600 :       return FAILURE;

  00bed	32 c0		 xor	 al, al
  00bef	e9 26 19 00 00	 jmp	 $LN1@probeDevic
$LN29@probeDevic:

; 5601 :     }
; 5602 : 
; 5603 :     // Setup the secondary DS buffer description.
; 5604 :     ZeroMemory( &bufferDescription, sizeof( DSBUFFERDESC ) );

  00bf4	41 b8 28 00 00
	00		 mov	 r8d, 40			; 00000028H
  00bfa	33 d2		 xor	 edx, edx
  00bfc	48 8d 8c 24 20
	03 00 00	 lea	 rcx, QWORD PTR bufferDescription$23[rsp]
  00c04	e8 00 00 00 00	 call	 memset

; 5605 :     bufferDescription.dwSize = sizeof( DSBUFFERDESC );

  00c09	c7 84 24 20 03
	00 00 28 00 00
	00		 mov	 DWORD PTR bufferDescription$23[rsp], 40 ; 00000028H

; 5606 :     bufferDescription.dwFlags = ( DSBCAPS_STICKYFOCUS |

  00c14	c7 84 24 24 03
	00 00 04 c0 01
	00		 mov	 DWORD PTR bufferDescription$23[rsp+4], 114692 ; 0001c004H

; 5607 :                                   DSBCAPS_GLOBALFOCUS |
; 5608 :                                   DSBCAPS_GETCURRENTPOSITION2 |
; 5609 :                                   DSBCAPS_LOCHARDWARE );  // Force hardware mixing
; 5610 :     bufferDescription.dwBufferBytes = dsBufferSize;

  00c1f	8b 44 24 44	 mov	 eax, DWORD PTR dsBufferSize$[rsp]
  00c23	89 84 24 28 03
	00 00		 mov	 DWORD PTR bufferDescription$23[rsp+8], eax

; 5611 :     bufferDescription.lpwfxFormat = &waveFormat;

  00c2a	48 8d 84 24 48
	03 00 00	 lea	 rax, QWORD PTR waveFormat$[rsp]
  00c32	48 89 84 24 30
	03 00 00	 mov	 QWORD PTR bufferDescription$23[rsp+16], rax

; 5612 : 
; 5613 :     // Try to create the secondary DS buffer.  If that doesn't work,
; 5614 :     // try to use software mixing.  Otherwise, there's a problem.
; 5615 :     result = output->CreateSoundBuffer( &bufferDescription, &buffer, NULL );

  00c3a	48 8b 44 24 48	 mov	 rax, QWORD PTR output$1[rsp]
  00c3f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00c42	45 33 c9	 xor	 r9d, r9d
  00c45	4c 8d 44 24 58	 lea	 r8, QWORD PTR buffer$3[rsp]
  00c4a	48 8d 94 24 20
	03 00 00	 lea	 rdx, QWORD PTR bufferDescription$23[rsp]
  00c52	48 8b 4c 24 48	 mov	 rcx, QWORD PTR output$1[rsp]
  00c57	ff 50 18	 call	 QWORD PTR [rax+24]
  00c5a	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 5616 :     if ( FAILED( result ) ) {

  00c5e	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  00c63	0f 8d 36 01 00
	00		 jge	 $LN30@probeDevic

; 5617 :       bufferDescription.dwFlags = ( DSBCAPS_STICKYFOCUS |

  00c69	c7 84 24 24 03
	00 00 08 c0 01
	00		 mov	 DWORD PTR bufferDescription$23[rsp+4], 114696 ; 0001c008H

; 5618 :                                     DSBCAPS_GLOBALFOCUS |
; 5619 :                                     DSBCAPS_GETCURRENTPOSITION2 |
; 5620 :                                     DSBCAPS_LOCSOFTWARE );  // Force software mixing
; 5621 :       result = output->CreateSoundBuffer( &bufferDescription, &buffer, NULL );

  00c74	48 8b 44 24 48	 mov	 rax, QWORD PTR output$1[rsp]
  00c79	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00c7c	45 33 c9	 xor	 r9d, r9d
  00c7f	4c 8d 44 24 58	 lea	 r8, QWORD PTR buffer$3[rsp]
  00c84	48 8d 94 24 20
	03 00 00	 lea	 rdx, QWORD PTR bufferDescription$23[rsp]
  00c8c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR output$1[rsp]
  00c91	ff 50 18	 call	 QWORD PTR [rax+24]
  00c94	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 5622 :       if ( FAILED( result ) ) {

  00c98	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  00c9d	0f 8d fc 00 00
	00		 jge	 $LN30@probeDevic

; 5623 :         output->Release();

  00ca3	48 8b 44 24 48	 mov	 rax, QWORD PTR output$1[rsp]
  00ca8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00cab	48 8b 4c 24 48	 mov	 rcx, QWORD PTR output$1[rsp]
  00cb0	ff 50 10	 call	 QWORD PTR [rax+16]

; 5624 :         errorStream_ << "RtApiDs::probeDeviceOpen: error (" << getErrorString( result ) << ") creating secondary buffer (" << dsDevices[ device ].name << ")!";

  00cb3	8b 84 24 68 06
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  00cba	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00cc2	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  00cc9	8b d0		 mov	 edx, eax
  00ccb	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  00cd0	48 83 c0 18	 add	 rax, 24
  00cd4	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR tv694[rsp], rax
  00cdc	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  00ce0	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  00ce5	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR tv699[rsp], rax
  00ced	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00cf5	48 83 c1 08	 add	 rcx, 8
  00cf9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128954
  00d00	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00d05	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR tv699[rsp]
  00d0d	48 8b d1	 mov	 rdx, rcx
  00d10	48 8b c8	 mov	 rcx, rax
  00d13	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00d18	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128953
  00d1f	48 8b c8	 mov	 rcx, rax
  00d22	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00d27	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR tv694[rsp]
  00d2f	48 8b d1	 mov	 rdx, rcx
  00d32	48 8b c8	 mov	 rcx, rax
  00d35	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  00d3a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128952
  00d41	48 8b c8	 mov	 rcx, rax
  00d44	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 5625 :         errorText_ = errorStream_.str();

  00d49	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00d51	48 83 c0 08	 add	 rax, 8
  00d55	48 8d 94 24 98
	04 00 00	 lea	 rdx, QWORD PTR $T35[rsp]
  00d5d	48 8b c8	 mov	 rcx, rax
  00d60	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00d65	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR tv2189[rsp], rax
  00d6d	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00d75	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00d7b	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR tv2189[rsp]
  00d83	48 8b c8	 mov	 rcx, rax
  00d86	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00d8b	48 8d 8c 24 98
	04 00 00	 lea	 rcx, QWORD PTR $T35[rsp]
  00d93	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5626 :         return FAILURE;

  00d98	32 c0		 xor	 al, al
  00d9a	e9 7b 17 00 00	 jmp	 $LN1@probeDevic
$LN30@probeDevic:

; 5627 :       }
; 5628 :     }
; 5629 : 
; 5630 :     // Get the buffer size ... might be different from what we specified.
; 5631 :     DSBCAPS dsbcaps;
; 5632 :     dsbcaps.dwSize = sizeof( DSBCAPS );

  00d9f	c7 84 24 80 03
	00 00 14 00 00
	00		 mov	 DWORD PTR dsbcaps$26[rsp], 20

; 5633 :     result = buffer->GetCaps( &dsbcaps );

  00daa	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$3[rsp]
  00daf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00db2	48 8d 94 24 80
	03 00 00	 lea	 rdx, QWORD PTR dsbcaps$26[rsp]
  00dba	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buffer$3[rsp]
  00dbf	ff 50 18	 call	 QWORD PTR [rax+24]
  00dc2	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 5634 :     if ( FAILED( result ) ) {

  00dc6	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  00dcb	0f 8d 0c 01 00
	00		 jge	 $LN32@probeDevic

; 5635 :       output->Release();

  00dd1	48 8b 44 24 48	 mov	 rax, QWORD PTR output$1[rsp]
  00dd6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00dd9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR output$1[rsp]
  00dde	ff 50 10	 call	 QWORD PTR [rax+16]

; 5636 :       buffer->Release();

  00de1	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$3[rsp]
  00de6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00de9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buffer$3[rsp]
  00dee	ff 50 10	 call	 QWORD PTR [rax+16]

; 5637 :       errorStream_ << "RtApiDs::probeDeviceOpen: error (" << getErrorString( result ) << ") getting buffer settings (" << dsDevices[ device ].name << ")!";

  00df1	8b 84 24 68 06
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  00df8	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00e00	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  00e07	8b d0		 mov	 edx, eax
  00e09	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  00e0e	48 83 c0 18	 add	 rax, 24
  00e12	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR tv762[rsp], rax
  00e1a	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  00e1e	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  00e23	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR tv767[rsp], rax
  00e2b	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00e33	48 83 c1 08	 add	 rcx, 8
  00e37	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128958
  00e3e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00e43	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR tv767[rsp]
  00e4b	48 8b d1	 mov	 rdx, rcx
  00e4e	48 8b c8	 mov	 rcx, rax
  00e51	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00e56	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128957
  00e5d	48 8b c8	 mov	 rcx, rax
  00e60	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00e65	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR tv762[rsp]
  00e6d	48 8b d1	 mov	 rdx, rcx
  00e70	48 8b c8	 mov	 rcx, rax
  00e73	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  00e78	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128956
  00e7f	48 8b c8	 mov	 rcx, rax
  00e82	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 5638 :       errorText_ = errorStream_.str();

  00e87	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00e8f	48 83 c0 08	 add	 rax, 8
  00e93	48 8d 94 24 b8
	04 00 00	 lea	 rdx, QWORD PTR $T36[rsp]
  00e9b	48 8b c8	 mov	 rcx, rax
  00e9e	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00ea3	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR tv2191[rsp], rax
  00eab	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00eb3	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00eb9	48 8b 94 24 f8
	01 00 00	 mov	 rdx, QWORD PTR tv2191[rsp]
  00ec1	48 8b c8	 mov	 rcx, rax
  00ec4	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00ec9	48 8d 8c 24 b8
	04 00 00	 lea	 rcx, QWORD PTR $T36[rsp]
  00ed1	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5639 :       return FAILURE;

  00ed6	32 c0		 xor	 al, al
  00ed8	e9 3d 16 00 00	 jmp	 $LN1@probeDevic
$LN32@probeDevic:

; 5640 :     }
; 5641 : 
; 5642 :     dsBufferSize = dsbcaps.dwBufferBytes;

  00edd	8b 84 24 88 03
	00 00		 mov	 eax, DWORD PTR dsbcaps$26[rsp+8]
  00ee4	89 44 24 44	 mov	 DWORD PTR dsBufferSize$[rsp], eax

; 5643 : 
; 5644 :     // Lock the DS buffer
; 5645 :     LPVOID audioPtr;
; 5646 :     DWORD dataLen;
; 5647 :     result = buffer->Lock( 0, dsBufferSize, &audioPtr, &dataLen, NULL, NULL, 0 );

  00ee8	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$3[rsp]
  00eed	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00ef0	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  00ef8	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00f01	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00f0a	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR dataLen$8[rsp]
  00f12	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00f17	4c 8d 8c 24 d0
	00 00 00	 lea	 r9, QWORD PTR audioPtr$14[rsp]
  00f1f	44 8b 44 24 44	 mov	 r8d, DWORD PTR dsBufferSize$[rsp]
  00f24	33 d2		 xor	 edx, edx
  00f26	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buffer$3[rsp]
  00f2b	ff 50 58	 call	 QWORD PTR [rax+88]
  00f2e	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 5648 :     if ( FAILED( result ) ) {

  00f32	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  00f37	0f 8d 0c 01 00
	00		 jge	 $LN33@probeDevic

; 5649 :       output->Release();

  00f3d	48 8b 44 24 48	 mov	 rax, QWORD PTR output$1[rsp]
  00f42	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00f45	48 8b 4c 24 48	 mov	 rcx, QWORD PTR output$1[rsp]
  00f4a	ff 50 10	 call	 QWORD PTR [rax+16]

; 5650 :       buffer->Release();

  00f4d	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$3[rsp]
  00f52	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00f55	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buffer$3[rsp]
  00f5a	ff 50 10	 call	 QWORD PTR [rax+16]

; 5651 :       errorStream_ << "RtApiDs::probeDeviceOpen: error (" << getErrorString( result ) << ") locking buffer (" << dsDevices[ device ].name << ")!";

  00f5d	8b 84 24 68 06
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  00f64	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00f6c	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  00f73	8b d0		 mov	 edx, eax
  00f75	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  00f7a	48 83 c0 18	 add	 rax, 24
  00f7e	48 89 84 24 08
	02 00 00	 mov	 QWORD PTR tv836[rsp], rax
  00f86	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  00f8a	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  00f8f	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR tv841[rsp], rax
  00f97	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00f9f	48 83 c1 08	 add	 rcx, 8
  00fa3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128962
  00faa	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00faf	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR tv841[rsp]
  00fb7	48 8b d1	 mov	 rdx, rcx
  00fba	48 8b c8	 mov	 rcx, rax
  00fbd	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00fc2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128961
  00fc9	48 8b c8	 mov	 rcx, rax
  00fcc	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00fd1	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR tv836[rsp]
  00fd9	48 8b d1	 mov	 rdx, rcx
  00fdc	48 8b c8	 mov	 rcx, rax
  00fdf	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  00fe4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128960
  00feb	48 8b c8	 mov	 rcx, rax
  00fee	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 5652 :       errorText_ = errorStream_.str();

  00ff3	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00ffb	48 83 c0 08	 add	 rax, 8
  00fff	48 8d 94 24 d8
	04 00 00	 lea	 rdx, QWORD PTR $T37[rsp]
  01007	48 8b c8	 mov	 rcx, rax
  0100a	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  0100f	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR tv2193[rsp], rax
  01017	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0101f	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01025	48 8b 94 24 10
	02 00 00	 mov	 rdx, QWORD PTR tv2193[rsp]
  0102d	48 8b c8	 mov	 rcx, rax
  01030	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  01035	48 8d 8c 24 d8
	04 00 00	 lea	 rcx, QWORD PTR $T37[rsp]
  0103d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5653 :       return FAILURE;

  01042	32 c0		 xor	 al, al
  01044	e9 d1 14 00 00	 jmp	 $LN1@probeDevic
$LN33@probeDevic:

; 5654 :     }
; 5655 : 
; 5656 :     // Zero the DS buffer
; 5657 :     ZeroMemory( audioPtr, dataLen );

  01049	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR dataLen$8[rsp]
  01050	44 8b c0	 mov	 r8d, eax
  01053	33 d2		 xor	 edx, edx
  01055	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR audioPtr$14[rsp]
  0105d	e8 00 00 00 00	 call	 memset

; 5658 : 
; 5659 :     // Unlock the DS buffer
; 5660 :     result = buffer->Unlock( audioPtr, dataLen, NULL, 0 );

  01062	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$3[rsp]
  01067	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0106a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  01072	45 33 c9	 xor	 r9d, r9d
  01075	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR dataLen$8[rsp]
  0107d	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR audioPtr$14[rsp]
  01085	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buffer$3[rsp]
  0108a	ff 90 98 00 00
	00		 call	 QWORD PTR [rax+152]
  01090	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 5661 :     if ( FAILED( result ) ) {

  01094	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  01099	0f 8d 0c 01 00
	00		 jge	 $LN34@probeDevic

; 5662 :       output->Release();

  0109f	48 8b 44 24 48	 mov	 rax, QWORD PTR output$1[rsp]
  010a4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  010a7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR output$1[rsp]
  010ac	ff 50 10	 call	 QWORD PTR [rax+16]

; 5663 :       buffer->Release();

  010af	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$3[rsp]
  010b4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  010b7	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buffer$3[rsp]
  010bc	ff 50 10	 call	 QWORD PTR [rax+16]

; 5664 :       errorStream_ << "RtApiDs::probeDeviceOpen: error (" << getErrorString( result ) << ") unlocking buffer (" << dsDevices[ device ].name << ")!";

  010bf	8b 84 24 68 06
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  010c6	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  010ce	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  010d5	8b d0		 mov	 edx, eax
  010d7	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  010dc	48 83 c0 18	 add	 rax, 24
  010e0	48 89 84 24 20
	02 00 00	 mov	 QWORD PTR tv943[rsp], rax
  010e8	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  010ec	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  010f1	48 89 84 24 18
	02 00 00	 mov	 QWORD PTR tv948[rsp], rax
  010f9	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01101	48 83 c1 08	 add	 rcx, 8
  01105	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128966
  0110c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  01111	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR tv948[rsp]
  01119	48 8b d1	 mov	 rdx, rcx
  0111c	48 8b c8	 mov	 rcx, rax
  0111f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  01124	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128965
  0112b	48 8b c8	 mov	 rcx, rax
  0112e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  01133	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR tv943[rsp]
  0113b	48 8b d1	 mov	 rdx, rcx
  0113e	48 8b c8	 mov	 rcx, rax
  01141	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  01146	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128964
  0114d	48 8b c8	 mov	 rcx, rax
  01150	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 5665 :       errorText_ = errorStream_.str();

  01155	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0115d	48 83 c0 08	 add	 rax, 8
  01161	48 8d 94 24 f8
	04 00 00	 lea	 rdx, QWORD PTR $T38[rsp]
  01169	48 8b c8	 mov	 rcx, rax
  0116c	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  01171	48 89 84 24 28
	02 00 00	 mov	 QWORD PTR tv2195[rsp], rax
  01179	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01181	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01187	48 8b 94 24 28
	02 00 00	 mov	 rdx, QWORD PTR tv2195[rsp]
  0118f	48 8b c8	 mov	 rcx, rax
  01192	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  01197	48 8d 8c 24 f8
	04 00 00	 lea	 rcx, QWORD PTR $T38[rsp]
  0119f	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5666 :       return FAILURE;

  011a4	32 c0		 xor	 al, al
  011a6	e9 6f 13 00 00	 jmp	 $LN1@probeDevic
$LN34@probeDevic:

; 5667 :     }
; 5668 : 
; 5669 :     ohandle = (void *) output;

  011ab	48 8b 44 24 48	 mov	 rax, QWORD PTR output$1[rsp]
  011b0	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR ohandle$[rsp], rax

; 5670 :     bhandle = (void *) buffer;

  011b8	48 8b 44 24 58	 mov	 rax, QWORD PTR buffer$3[rsp]
  011bd	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR bhandle$[rsp], rax
$LN20@probeDevic:

; 5671 :   }
; 5672 : 
; 5673 :   if ( mode == INPUT ) {

  011c5	83 bc 24 70 06
	00 00 01	 cmp	 DWORD PTR mode$[rsp], 1
  011cd	0f 85 42 0a 00
	00		 jne	 $LN35@probeDevic

; 5674 : 
; 5675 :     LPDIRECTSOUNDCAPTURE input;
; 5676 :     result = DirectSoundCaptureCreate( dsDevices[ device ].id[1], &input, NULL );

  011d3	b8 08 00 00 00	 mov	 eax, 8
  011d8	48 6b c0 01	 imul	 rax, rax, 1
  011dc	48 89 84 24 38
	02 00 00	 mov	 QWORD PTR tv993[rsp], rax
  011e4	8b 8c 24 68 06
	00 00		 mov	 ecx, DWORD PTR device$[rsp]
  011eb	48 8b 94 24 60
	06 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  011f3	48 81 c2 90 02
	00 00		 add	 rdx, 656		; 00000290H
  011fa	48 89 94 24 30
	02 00 00	 mov	 QWORD PTR tv987[rsp], rdx
  01202	8b d1		 mov	 edx, ecx
  01204	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR tv987[rsp]
  0120c	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  01211	45 33 c0	 xor	 r8d, r8d
  01214	48 8d 54 24 70	 lea	 rdx, QWORD PTR input$4[rsp]
  01219	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR tv993[rsp]
  01221	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  01225	e8 00 00 00 00	 call	 DirectSoundCaptureCreate
  0122a	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 5677 :     if ( FAILED( result ) ) {

  0122e	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  01233	0f 8d ec 00 00
	00		 jge	 $LN36@probeDevic

; 5678 :       errorStream_ << "RtApiDs::probeDeviceOpen: error (" << getErrorString( result ) << ") opening input device (" << dsDevices[ device ].name << ")!";

  01239	8b 84 24 68 06
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  01240	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01248	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  0124f	8b d0		 mov	 edx, eax
  01251	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  01256	48 83 c0 18	 add	 rax, 24
  0125a	48 89 84 24 48
	02 00 00	 mov	 QWORD PTR tv1005[rsp], rax
  01262	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  01266	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  0126b	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR tv1010[rsp], rax
  01273	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0127b	48 83 c1 08	 add	 rcx, 8
  0127f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128971
  01286	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0128b	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR tv1010[rsp]
  01293	48 8b d1	 mov	 rdx, rcx
  01296	48 8b c8	 mov	 rcx, rax
  01299	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0129e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128970
  012a5	48 8b c8	 mov	 rcx, rax
  012a8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  012ad	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR tv1005[rsp]
  012b5	48 8b d1	 mov	 rdx, rcx
  012b8	48 8b c8	 mov	 rcx, rax
  012bb	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  012c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128969
  012c7	48 8b c8	 mov	 rcx, rax
  012ca	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 5679 :       errorText_ = errorStream_.str();

  012cf	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  012d7	48 83 c0 08	 add	 rax, 8
  012db	48 8d 94 24 18
	05 00 00	 lea	 rdx, QWORD PTR $T39[rsp]
  012e3	48 8b c8	 mov	 rcx, rax
  012e6	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  012eb	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR tv2197[rsp], rax
  012f3	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  012fb	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01301	48 8b 94 24 50
	02 00 00	 mov	 rdx, QWORD PTR tv2197[rsp]
  01309	48 8b c8	 mov	 rcx, rax
  0130c	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  01311	48 8d 8c 24 18
	05 00 00	 lea	 rcx, QWORD PTR $T39[rsp]
  01319	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5680 :       return FAILURE;

  0131e	32 c0		 xor	 al, al
  01320	e9 f5 11 00 00	 jmp	 $LN1@probeDevic
$LN36@probeDevic:

; 5681 :     }
; 5682 : 
; 5683 :     DSCCAPS inCaps;
; 5684 :     inCaps.dwSize = sizeof( inCaps );

  01325	c7 84 24 60 03
	00 00 10 00 00
	00		 mov	 DWORD PTR inCaps$24[rsp], 16

; 5685 :     result = input->GetCaps( &inCaps );

  01330	48 8b 44 24 70	 mov	 rax, QWORD PTR input$4[rsp]
  01335	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01338	48 8d 94 24 60
	03 00 00	 lea	 rdx, QWORD PTR inCaps$24[rsp]
  01340	48 8b 4c 24 70	 mov	 rcx, QWORD PTR input$4[rsp]
  01345	ff 50 20	 call	 QWORD PTR [rax+32]
  01348	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 5686 :     if ( FAILED( result ) ) {

  0134c	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  01351	0f 8d fc 00 00
	00		 jge	 $LN37@probeDevic

; 5687 :       input->Release();

  01357	48 8b 44 24 70	 mov	 rax, QWORD PTR input$4[rsp]
  0135c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0135f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR input$4[rsp]
  01364	ff 50 10	 call	 QWORD PTR [rax+16]

; 5688 :       errorStream_ << "RtApiDs::probeDeviceOpen: error (" << getErrorString( result ) << ") getting input capabilities (" << dsDevices[ device ].name << ")!";

  01367	8b 84 24 68 06
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  0136e	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01376	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  0137d	8b d0		 mov	 edx, eax
  0137f	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  01384	48 83 c0 18	 add	 rax, 24
  01388	48 89 84 24 60
	02 00 00	 mov	 QWORD PTR tv1098[rsp], rax
  01390	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  01394	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  01399	48 89 84 24 58
	02 00 00	 mov	 QWORD PTR tv1103[rsp], rax
  013a1	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  013a9	48 83 c1 08	 add	 rcx, 8
  013ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128975
  013b4	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  013b9	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR tv1103[rsp]
  013c1	48 8b d1	 mov	 rdx, rcx
  013c4	48 8b c8	 mov	 rcx, rax
  013c7	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  013cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128974
  013d3	48 8b c8	 mov	 rcx, rax
  013d6	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  013db	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR tv1098[rsp]
  013e3	48 8b d1	 mov	 rdx, rcx
  013e6	48 8b c8	 mov	 rcx, rax
  013e9	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  013ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128973
  013f5	48 8b c8	 mov	 rcx, rax
  013f8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 5689 :       errorText_ = errorStream_.str();

  013fd	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01405	48 83 c0 08	 add	 rax, 8
  01409	48 8d 94 24 38
	05 00 00	 lea	 rdx, QWORD PTR $T40[rsp]
  01411	48 8b c8	 mov	 rcx, rax
  01414	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  01419	48 89 84 24 68
	02 00 00	 mov	 QWORD PTR tv2199[rsp], rax
  01421	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01429	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  0142f	48 8b 94 24 68
	02 00 00	 mov	 rdx, QWORD PTR tv2199[rsp]
  01437	48 8b c8	 mov	 rcx, rax
  0143a	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  0143f	48 8d 8c 24 38
	05 00 00	 lea	 rcx, QWORD PTR $T40[rsp]
  01447	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5690 :       return FAILURE;

  0144c	32 c0		 xor	 al, al
  0144e	e9 c7 10 00 00	 jmp	 $LN1@probeDevic
$LN37@probeDevic:

; 5691 :     }
; 5692 : 
; 5693 :     // Check channel information.
; 5694 :     if ( inCaps.dwChannels < channels + firstChannel ) {

  01453	8b 84 24 80 06
	00 00		 mov	 eax, DWORD PTR firstChannel$[rsp]
  0145a	8b 8c 24 78 06
	00 00		 mov	 ecx, DWORD PTR channels$[rsp]
  01461	03 c8		 add	 ecx, eax
  01463	8b c1		 mov	 eax, ecx
  01465	39 84 24 6c 03
	00 00		 cmp	 DWORD PTR inCaps$24[rsp+12], eax
  0146c	73 24		 jae	 SHORT $LN38@probeDevic

; 5695 :       errorText_ = "RtApiDs::getDeviceInfo: the input device does not support requested input channels.";

  0146e	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01476	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  0147c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128977
  01483	48 8b c8	 mov	 rcx, rax
  01486	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 5696 :       return FAILURE;

  0148b	32 c0		 xor	 al, al
  0148d	e9 88 10 00 00	 jmp	 $LN1@probeDevic
$LN38@probeDevic:

; 5697 :     }
; 5698 : 
; 5699 :     // Check format information.  Use 16-bit format unless user
; 5700 :     // requests 8-bit.
; 5701 :     DWORD deviceFormats;
; 5702 :     if ( channels + firstChannel == 2 ) {

  01492	8b 84 24 80 06
	00 00		 mov	 eax, DWORD PTR firstChannel$[rsp]
  01499	8b 8c 24 78 06
	00 00		 mov	 ecx, DWORD PTR channels$[rsp]
  014a0	03 c8		 add	 ecx, eax
  014a2	8b c1		 mov	 eax, ecx
  014a4	83 f8 02	 cmp	 eax, 2
  014a7	75 7f		 jne	 SHORT $LN39@probeDevic

; 5703 :       deviceFormats = WAVE_FORMAT_1S08 | WAVE_FORMAT_2S08 | WAVE_FORMAT_4S08 | WAVE_FORMAT_96S08;

  014a9	c7 84 24 8c 00
	00 00 22 02 02
	00		 mov	 DWORD PTR deviceFormats$7[rsp], 131618 ; 00020222H

; 5704 :       if ( format == RTAUDIO_SINT8 && inCaps.dwFormats & deviceFormats ) {

  014b4	83 bc 24 90 06
	00 00 01	 cmp	 DWORD PTR format$[rsp], 1
  014bc	75 40		 jne	 SHORT $LN41@probeDevic
  014be	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR deviceFormats$7[rsp]
  014c5	8b 8c 24 68 03
	00 00		 mov	 ecx, DWORD PTR inCaps$24[rsp+8]
  014cc	23 c8		 and	 ecx, eax
  014ce	8b c1		 mov	 eax, ecx
  014d0	85 c0		 test	 eax, eax
  014d2	74 2a		 je	 SHORT $LN41@probeDevic

; 5705 :         waveFormat.wBitsPerSample = 8;

  014d4	b8 08 00 00 00	 mov	 eax, 8
  014d9	66 89 84 24 56
	03 00 00	 mov	 WORD PTR waveFormat$[rsp+14], ax

; 5706 :         stream_.deviceFormat[mode] = RTAUDIO_SINT8;

  014e1	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  014e9	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  014f1	c7 84 81 80 01
	00 00 01 00 00
	00		 mov	 DWORD PTR [rcx+rax*4+384], 1

; 5707 :       }
; 5708 :       else { // assume 16-bit is supported

  014fc	eb 28		 jmp	 SHORT $LN42@probeDevic
$LN41@probeDevic:

; 5709 :         waveFormat.wBitsPerSample = 16;

  014fe	b8 10 00 00 00	 mov	 eax, 16
  01503	66 89 84 24 56
	03 00 00	 mov	 WORD PTR waveFormat$[rsp+14], ax

; 5710 :         stream_.deviceFormat[mode] = RTAUDIO_SINT16;

  0150b	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  01513	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0151b	c7 84 81 80 01
	00 00 02 00 00
	00		 mov	 DWORD PTR [rcx+rax*4+384], 2
$LN42@probeDevic:

; 5711 :       }
; 5712 :     }
; 5713 :     else { // channel == 1

  01526	eb 7d		 jmp	 SHORT $LN40@probeDevic
$LN39@probeDevic:

; 5714 :       deviceFormats = WAVE_FORMAT_1M08 | WAVE_FORMAT_2M08 | WAVE_FORMAT_4M08 | WAVE_FORMAT_96M08;

  01528	c7 84 24 8c 00
	00 00 11 01 01
	00		 mov	 DWORD PTR deviceFormats$7[rsp], 65809 ; 00010111H

; 5715 :       if ( format == RTAUDIO_SINT8 && inCaps.dwFormats & deviceFormats ) {

  01533	83 bc 24 90 06
	00 00 01	 cmp	 DWORD PTR format$[rsp], 1
  0153b	75 40		 jne	 SHORT $LN43@probeDevic
  0153d	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR deviceFormats$7[rsp]
  01544	8b 8c 24 68 03
	00 00		 mov	 ecx, DWORD PTR inCaps$24[rsp+8]
  0154b	23 c8		 and	 ecx, eax
  0154d	8b c1		 mov	 eax, ecx
  0154f	85 c0		 test	 eax, eax
  01551	74 2a		 je	 SHORT $LN43@probeDevic

; 5716 :         waveFormat.wBitsPerSample = 8;

  01553	b8 08 00 00 00	 mov	 eax, 8
  01558	66 89 84 24 56
	03 00 00	 mov	 WORD PTR waveFormat$[rsp+14], ax

; 5717 :         stream_.deviceFormat[mode] = RTAUDIO_SINT8;

  01560	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  01568	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01570	c7 84 81 80 01
	00 00 01 00 00
	00		 mov	 DWORD PTR [rcx+rax*4+384], 1

; 5718 :       }
; 5719 :       else { // assume 16-bit is supported

  0157b	eb 28		 jmp	 SHORT $LN40@probeDevic
$LN43@probeDevic:

; 5720 :         waveFormat.wBitsPerSample = 16;

  0157d	b8 10 00 00 00	 mov	 eax, 16
  01582	66 89 84 24 56
	03 00 00	 mov	 WORD PTR waveFormat$[rsp+14], ax

; 5721 :         stream_.deviceFormat[mode] = RTAUDIO_SINT16;

  0158a	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  01592	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0159a	c7 84 81 80 01
	00 00 02 00 00
	00		 mov	 DWORD PTR [rcx+rax*4+384], 2
$LN40@probeDevic:

; 5722 :       }
; 5723 :     }
; 5724 :     stream_.userFormat = format;

  015a5	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  015ad	8b 8c 24 90 06
	00 00		 mov	 ecx, DWORD PTR format$[rsp]
  015b4	89 88 7c 01 00
	00		 mov	 DWORD PTR [rax+380], ecx

; 5725 : 
; 5726 :     // Update wave format structure and buffer information.
; 5727 :     waveFormat.nBlockAlign = waveFormat.nChannels * waveFormat.wBitsPerSample / 8;

  015ba	0f b7 84 24 56
	03 00 00	 movzx	 eax, WORD PTR waveFormat$[rsp+14]
  015c2	0f b7 8c 24 4a
	03 00 00	 movzx	 ecx, WORD PTR waveFormat$[rsp+2]
  015ca	0f af c8	 imul	 ecx, eax
  015cd	8b c1		 mov	 eax, ecx
  015cf	99		 cdq
  015d0	83 e2 07	 and	 edx, 7
  015d3	03 c2		 add	 eax, edx
  015d5	c1 f8 03	 sar	 eax, 3
  015d8	66 89 84 24 54
	03 00 00	 mov	 WORD PTR waveFormat$[rsp+12], ax

; 5728 :     waveFormat.nAvgBytesPerSec = waveFormat.nSamplesPerSec * waveFormat.nBlockAlign;

  015e0	0f b7 84 24 54
	03 00 00	 movzx	 eax, WORD PTR waveFormat$[rsp+12]
  015e8	8b 8c 24 4c 03
	00 00		 mov	 ecx, DWORD PTR waveFormat$[rsp+4]
  015ef	0f af c8	 imul	 ecx, eax
  015f2	8b c1		 mov	 eax, ecx
  015f4	89 84 24 50 03
	00 00		 mov	 DWORD PTR waveFormat$[rsp+8], eax

; 5729 :     dsPointerLeadTime = nBuffers * (*bufferSize) * (waveFormat.wBitsPerSample / 8) * channels;

  015fb	0f b7 84 24 56
	03 00 00	 movzx	 eax, WORD PTR waveFormat$[rsp+14]
  01603	99		 cdq
  01604	83 e2 07	 and	 edx, 7
  01607	03 c2		 add	 eax, edx
  01609	c1 f8 03	 sar	 eax, 3
  0160c	48 8b 8c 24 98
	06 00 00	 mov	 rcx, QWORD PTR bufferSize$[rsp]
  01614	8b 54 24 68	 mov	 edx, DWORD PTR nBuffers$[rsp]
  01618	0f af 11	 imul	 edx, DWORD PTR [rcx]
  0161b	8b ca		 mov	 ecx, edx
  0161d	0f af c8	 imul	 ecx, eax
  01620	8b c1		 mov	 eax, ecx
  01622	0f af 84 24 78
	06 00 00	 imul	 eax, DWORD PTR channels$[rsp]
  0162a	89 84 24 88 00
	00 00		 mov	 DWORD PTR dsPointerLeadTime$[rsp], eax
$LN4@probeDevic:

; 5730 : 
; 5731 :     // If the user wants an even bigger buffer, increase the device buffer size accordingly.
; 5732 :     while ( dsPointerLeadTime * 2U > dsBufferSize )

  01631	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR dsPointerLeadTime$[rsp]
  01638	d1 e0		 shl	 eax, 1
  0163a	3b 44 24 44	 cmp	 eax, DWORD PTR dsBufferSize$[rsp]
  0163e	76 0c		 jbe	 SHORT $LN5@probeDevic

; 5733 :       dsBufferSize *= 2;

  01640	8b 44 24 44	 mov	 eax, DWORD PTR dsBufferSize$[rsp]
  01644	d1 e0		 shl	 eax, 1
  01646	89 44 24 44	 mov	 DWORD PTR dsBufferSize$[rsp], eax
  0164a	eb e5		 jmp	 SHORT $LN4@probeDevic
$LN5@probeDevic:

; 5734 : 
; 5735 :     // Setup the secondary DS buffer description.
; 5736 :     DSCBUFFERDESC bufferDescription;
; 5737 :     ZeroMemory( &bufferDescription, sizeof( DSCBUFFERDESC ) );

  0164c	41 b8 28 00 00
	00		 mov	 r8d, 40			; 00000028H
  01652	33 d2		 xor	 edx, edx
  01654	48 8d 8c 24 f0
	02 00 00	 lea	 rcx, QWORD PTR bufferDescription$21[rsp]
  0165c	e8 00 00 00 00	 call	 memset

; 5738 :     bufferDescription.dwSize = sizeof( DSCBUFFERDESC );

  01661	c7 84 24 f0 02
	00 00 28 00 00
	00		 mov	 DWORD PTR bufferDescription$21[rsp], 40 ; 00000028H

; 5739 :     bufferDescription.dwFlags = 0;

  0166c	c7 84 24 f4 02
	00 00 00 00 00
	00		 mov	 DWORD PTR bufferDescription$21[rsp+4], 0

; 5740 :     bufferDescription.dwReserved = 0;

  01677	c7 84 24 fc 02
	00 00 00 00 00
	00		 mov	 DWORD PTR bufferDescription$21[rsp+12], 0

; 5741 :     bufferDescription.dwBufferBytes = dsBufferSize;

  01682	8b 44 24 44	 mov	 eax, DWORD PTR dsBufferSize$[rsp]
  01686	89 84 24 f8 02
	00 00		 mov	 DWORD PTR bufferDescription$21[rsp+8], eax

; 5742 :     bufferDescription.lpwfxFormat = &waveFormat;

  0168d	48 8d 84 24 48
	03 00 00	 lea	 rax, QWORD PTR waveFormat$[rsp]
  01695	48 89 84 24 00
	03 00 00	 mov	 QWORD PTR bufferDescription$21[rsp+16], rax

; 5743 : 
; 5744 :     // Create the capture buffer.
; 5745 :     LPDIRECTSOUNDCAPTUREBUFFER buffer;
; 5746 :     result = input->CreateCaptureBuffer( &bufferDescription, &buffer, NULL );

  0169d	48 8b 44 24 70	 mov	 rax, QWORD PTR input$4[rsp]
  016a2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  016a5	45 33 c9	 xor	 r9d, r9d
  016a8	4c 8d 84 24 80
	00 00 00	 lea	 r8, QWORD PTR buffer$6[rsp]
  016b0	48 8d 94 24 f0
	02 00 00	 lea	 rdx, QWORD PTR bufferDescription$21[rsp]
  016b8	48 8b 4c 24 70	 mov	 rcx, QWORD PTR input$4[rsp]
  016bd	ff 50 18	 call	 QWORD PTR [rax+24]
  016c0	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 5747 :     if ( FAILED( result ) ) {

  016c4	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  016c9	0f 8d fc 00 00
	00		 jge	 $LN45@probeDevic

; 5748 :       input->Release();

  016cf	48 8b 44 24 70	 mov	 rax, QWORD PTR input$4[rsp]
  016d4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  016d7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR input$4[rsp]
  016dc	ff 50 10	 call	 QWORD PTR [rax+16]

; 5749 :       errorStream_ << "RtApiDs::probeDeviceOpen: error (" << getErrorString( result ) << ") creating input buffer (" << dsDevices[ device ].name << ")!";

  016df	8b 84 24 68 06
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  016e6	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  016ee	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  016f5	8b d0		 mov	 edx, eax
  016f7	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  016fc	48 83 c0 18	 add	 rax, 24
  01700	48 89 84 24 78
	02 00 00	 mov	 QWORD PTR tv1238[rsp], rax
  01708	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  0170c	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  01711	48 89 84 24 70
	02 00 00	 mov	 QWORD PTR tv1243[rsp], rax
  01719	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01721	48 83 c1 08	 add	 rcx, 8
  01725	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128987
  0172c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  01731	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR tv1243[rsp]
  01739	48 8b d1	 mov	 rdx, rcx
  0173c	48 8b c8	 mov	 rcx, rax
  0173f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  01744	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128986
  0174b	48 8b c8	 mov	 rcx, rax
  0174e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  01753	48 8b 8c 24 78
	02 00 00	 mov	 rcx, QWORD PTR tv1238[rsp]
  0175b	48 8b d1	 mov	 rdx, rcx
  0175e	48 8b c8	 mov	 rcx, rax
  01761	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  01766	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128985
  0176d	48 8b c8	 mov	 rcx, rax
  01770	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 5750 :       errorText_ = errorStream_.str();

  01775	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0177d	48 83 c0 08	 add	 rax, 8
  01781	48 8d 94 24 58
	05 00 00	 lea	 rdx, QWORD PTR $T41[rsp]
  01789	48 8b c8	 mov	 rcx, rax
  0178c	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  01791	48 89 84 24 80
	02 00 00	 mov	 QWORD PTR tv2201[rsp], rax
  01799	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  017a1	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  017a7	48 8b 94 24 80
	02 00 00	 mov	 rdx, QWORD PTR tv2201[rsp]
  017af	48 8b c8	 mov	 rcx, rax
  017b2	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  017b7	48 8d 8c 24 58
	05 00 00	 lea	 rcx, QWORD PTR $T41[rsp]
  017bf	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5751 :       return FAILURE;

  017c4	32 c0		 xor	 al, al
  017c6	e9 4f 0d 00 00	 jmp	 $LN1@probeDevic
$LN45@probeDevic:

; 5752 :     }
; 5753 : 
; 5754 :     // Get the buffer size ... might be different from what we specified.
; 5755 :     DSCBCAPS dscbcaps;
; 5756 :     dscbcaps.dwSize = sizeof( DSCBCAPS );

  017cb	c7 84 24 70 03
	00 00 10 00 00
	00		 mov	 DWORD PTR dscbcaps$25[rsp], 16

; 5757 :     result = buffer->GetCaps( &dscbcaps );

  017d6	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR buffer$6[rsp]
  017de	48 8b 00	 mov	 rax, QWORD PTR [rax]
  017e1	48 8d 94 24 70
	03 00 00	 lea	 rdx, QWORD PTR dscbcaps$25[rsp]
  017e9	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR buffer$6[rsp]
  017f1	ff 50 18	 call	 QWORD PTR [rax+24]
  017f4	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 5758 :     if ( FAILED( result ) ) {

  017f8	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  017fd	0f 8d 12 01 00
	00		 jge	 $LN46@probeDevic

; 5759 :       input->Release();

  01803	48 8b 44 24 70	 mov	 rax, QWORD PTR input$4[rsp]
  01808	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0180b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR input$4[rsp]
  01810	ff 50 10	 call	 QWORD PTR [rax+16]

; 5760 :       buffer->Release();

  01813	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR buffer$6[rsp]
  0181b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0181e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR buffer$6[rsp]
  01826	ff 50 10	 call	 QWORD PTR [rax+16]

; 5761 :       errorStream_ << "RtApiDs::probeDeviceOpen: error (" << getErrorString( result ) << ") getting buffer settings (" << dsDevices[ device ].name << ")!";

  01829	8b 84 24 68 06
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  01830	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01838	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  0183f	8b d0		 mov	 edx, eax
  01841	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  01846	48 83 c0 18	 add	 rax, 24
  0184a	48 89 84 24 90
	02 00 00	 mov	 QWORD PTR tv1306[rsp], rax
  01852	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  01856	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  0185b	48 89 84 24 88
	02 00 00	 mov	 QWORD PTR tv1311[rsp], rax
  01863	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0186b	48 83 c1 08	 add	 rcx, 8
  0186f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128991
  01876	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0187b	48 8b 8c 24 88
	02 00 00	 mov	 rcx, QWORD PTR tv1311[rsp]
  01883	48 8b d1	 mov	 rdx, rcx
  01886	48 8b c8	 mov	 rcx, rax
  01889	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0188e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128990
  01895	48 8b c8	 mov	 rcx, rax
  01898	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0189d	48 8b 8c 24 90
	02 00 00	 mov	 rcx, QWORD PTR tv1306[rsp]
  018a5	48 8b d1	 mov	 rdx, rcx
  018a8	48 8b c8	 mov	 rcx, rax
  018ab	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  018b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128989
  018b7	48 8b c8	 mov	 rcx, rax
  018ba	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 5762 :       errorText_ = errorStream_.str();

  018bf	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  018c7	48 83 c0 08	 add	 rax, 8
  018cb	48 8d 94 24 78
	05 00 00	 lea	 rdx, QWORD PTR $T42[rsp]
  018d3	48 8b c8	 mov	 rcx, rax
  018d6	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  018db	48 89 84 24 98
	02 00 00	 mov	 QWORD PTR tv2203[rsp], rax
  018e3	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  018eb	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  018f1	48 8b 94 24 98
	02 00 00	 mov	 rdx, QWORD PTR tv2203[rsp]
  018f9	48 8b c8	 mov	 rcx, rax
  018fc	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  01901	48 8d 8c 24 78
	05 00 00	 lea	 rcx, QWORD PTR $T42[rsp]
  01909	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5763 :       return FAILURE;

  0190e	32 c0		 xor	 al, al
  01910	e9 05 0c 00 00	 jmp	 $LN1@probeDevic
$LN46@probeDevic:

; 5764 :     }
; 5765 : 
; 5766 :     dsBufferSize = dscbcaps.dwBufferBytes;

  01915	8b 84 24 78 03
	00 00		 mov	 eax, DWORD PTR dscbcaps$25[rsp+8]
  0191c	89 44 24 44	 mov	 DWORD PTR dsBufferSize$[rsp], eax

; 5767 : 
; 5768 :     // NOTE: We could have a problem here if this is a duplex stream
; 5769 :     // and the play and capture hardware buffer sizes are different
; 5770 :     // (I'm actually not sure if that is a problem or not).
; 5771 :     // Currently, we are not verifying that.
; 5772 : 
; 5773 :     // Lock the capture buffer
; 5774 :     LPVOID audioPtr;
; 5775 :     DWORD dataLen;
; 5776 :     result = buffer->Lock( 0, dsBufferSize, &audioPtr, &dataLen, NULL, NULL, 0 );

  01920	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR buffer$6[rsp]
  01928	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0192b	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  01933	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  0193c	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  01945	48 8d 8c 24 94
	00 00 00	 lea	 rcx, QWORD PTR dataLen$9[rsp]
  0194d	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  01952	4c 8d 8c 24 d8
	00 00 00	 lea	 r9, QWORD PTR audioPtr$15[rsp]
  0195a	44 8b 44 24 44	 mov	 r8d, DWORD PTR dsBufferSize$[rsp]
  0195f	33 d2		 xor	 edx, edx
  01961	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR buffer$6[rsp]
  01969	ff 50 40	 call	 QWORD PTR [rax+64]
  0196c	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 5777 :     if ( FAILED( result ) ) {

  01970	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  01975	0f 8d 12 01 00
	00		 jge	 $LN47@probeDevic

; 5778 :       input->Release();

  0197b	48 8b 44 24 70	 mov	 rax, QWORD PTR input$4[rsp]
  01980	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01983	48 8b 4c 24 70	 mov	 rcx, QWORD PTR input$4[rsp]
  01988	ff 50 10	 call	 QWORD PTR [rax+16]

; 5779 :       buffer->Release();

  0198b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR buffer$6[rsp]
  01993	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01996	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR buffer$6[rsp]
  0199e	ff 50 10	 call	 QWORD PTR [rax+16]

; 5780 :       errorStream_ << "RtApiDs::probeDeviceOpen: error (" << getErrorString( result ) << ") locking input buffer (" << dsDevices[ device ].name << ")!";

  019a1	8b 84 24 68 06
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  019a8	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  019b0	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  019b7	8b d0		 mov	 edx, eax
  019b9	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  019be	48 83 c0 18	 add	 rax, 24
  019c2	48 89 84 24 a8
	02 00 00	 mov	 QWORD PTR tv1380[rsp], rax
  019ca	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  019ce	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  019d3	48 89 84 24 a0
	02 00 00	 mov	 QWORD PTR tv1385[rsp], rax
  019db	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  019e3	48 83 c1 08	 add	 rcx, 8
  019e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128995
  019ee	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  019f3	48 8b 8c 24 a0
	02 00 00	 mov	 rcx, QWORD PTR tv1385[rsp]
  019fb	48 8b d1	 mov	 rdx, rcx
  019fe	48 8b c8	 mov	 rcx, rax
  01a01	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  01a06	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128994
  01a0d	48 8b c8	 mov	 rcx, rax
  01a10	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  01a15	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR tv1380[rsp]
  01a1d	48 8b d1	 mov	 rdx, rcx
  01a20	48 8b c8	 mov	 rcx, rax
  01a23	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  01a28	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128993
  01a2f	48 8b c8	 mov	 rcx, rax
  01a32	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 5781 :       errorText_ = errorStream_.str();

  01a37	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01a3f	48 83 c0 08	 add	 rax, 8
  01a43	48 8d 94 24 98
	05 00 00	 lea	 rdx, QWORD PTR $T43[rsp]
  01a4b	48 8b c8	 mov	 rcx, rax
  01a4e	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  01a53	48 89 84 24 b0
	02 00 00	 mov	 QWORD PTR tv2205[rsp], rax
  01a5b	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01a63	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01a69	48 8b 94 24 b0
	02 00 00	 mov	 rdx, QWORD PTR tv2205[rsp]
  01a71	48 8b c8	 mov	 rcx, rax
  01a74	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  01a79	48 8d 8c 24 98
	05 00 00	 lea	 rcx, QWORD PTR $T43[rsp]
  01a81	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5782 :       return FAILURE;

  01a86	32 c0		 xor	 al, al
  01a88	e9 8d 0a 00 00	 jmp	 $LN1@probeDevic
$LN47@probeDevic:

; 5783 :     }
; 5784 : 
; 5785 :     // Zero the buffer
; 5786 :     ZeroMemory( audioPtr, dataLen );

  01a8d	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR dataLen$9[rsp]
  01a94	44 8b c0	 mov	 r8d, eax
  01a97	33 d2		 xor	 edx, edx
  01a99	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR audioPtr$15[rsp]
  01aa1	e8 00 00 00 00	 call	 memset

; 5787 : 
; 5788 :     // Unlock the buffer
; 5789 :     result = buffer->Unlock( audioPtr, dataLen, NULL, 0 );

  01aa6	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR buffer$6[rsp]
  01aae	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01ab1	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  01ab9	45 33 c9	 xor	 r9d, r9d
  01abc	44 8b 84 24 94
	00 00 00	 mov	 r8d, DWORD PTR dataLen$9[rsp]
  01ac4	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR audioPtr$15[rsp]
  01acc	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR buffer$6[rsp]
  01ad4	ff 50 58	 call	 QWORD PTR [rax+88]
  01ad7	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 5790 :     if ( FAILED( result ) ) {

  01adb	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  01ae0	0f 8d 12 01 00
	00		 jge	 $LN48@probeDevic

; 5791 :       input->Release();

  01ae6	48 8b 44 24 70	 mov	 rax, QWORD PTR input$4[rsp]
  01aeb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01aee	48 8b 4c 24 70	 mov	 rcx, QWORD PTR input$4[rsp]
  01af3	ff 50 10	 call	 QWORD PTR [rax+16]

; 5792 :       buffer->Release();

  01af6	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR buffer$6[rsp]
  01afe	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01b01	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR buffer$6[rsp]
  01b09	ff 50 10	 call	 QWORD PTR [rax+16]

; 5793 :       errorStream_ << "RtApiDs::probeDeviceOpen: error (" << getErrorString( result ) << ") unlocking input buffer (" << dsDevices[ device ].name << ")!";

  01b0c	8b 84 24 68 06
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  01b13	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01b1b	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  01b22	8b d0		 mov	 edx, eax
  01b24	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  01b29	48 83 c0 18	 add	 rax, 24
  01b2d	48 89 84 24 c0
	02 00 00	 mov	 QWORD PTR tv1455[rsp], rax
  01b35	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  01b39	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  01b3e	48 89 84 24 b8
	02 00 00	 mov	 QWORD PTR tv1460[rsp], rax
  01b46	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01b4e	48 83 c1 08	 add	 rcx, 8
  01b52	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128999
  01b59	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  01b5e	48 8b 8c 24 b8
	02 00 00	 mov	 rcx, QWORD PTR tv1460[rsp]
  01b66	48 8b d1	 mov	 rdx, rcx
  01b69	48 8b c8	 mov	 rcx, rax
  01b6c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  01b71	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128998
  01b78	48 8b c8	 mov	 rcx, rax
  01b7b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  01b80	48 8b 8c 24 c0
	02 00 00	 mov	 rcx, QWORD PTR tv1455[rsp]
  01b88	48 8b d1	 mov	 rdx, rcx
  01b8b	48 8b c8	 mov	 rcx, rax
  01b8e	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  01b93	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128997
  01b9a	48 8b c8	 mov	 rcx, rax
  01b9d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 5794 :       errorText_ = errorStream_.str();

  01ba2	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01baa	48 83 c0 08	 add	 rax, 8
  01bae	48 8d 94 24 b8
	05 00 00	 lea	 rdx, QWORD PTR $T44[rsp]
  01bb6	48 8b c8	 mov	 rcx, rax
  01bb9	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  01bbe	48 89 84 24 c8
	02 00 00	 mov	 QWORD PTR tv2207[rsp], rax
  01bc6	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01bce	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01bd4	48 8b 94 24 c8
	02 00 00	 mov	 rdx, QWORD PTR tv2207[rsp]
  01bdc	48 8b c8	 mov	 rcx, rax
  01bdf	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  01be4	48 8d 8c 24 b8
	05 00 00	 lea	 rcx, QWORD PTR $T44[rsp]
  01bec	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5795 :       return FAILURE;

  01bf1	32 c0		 xor	 al, al
  01bf3	e9 22 09 00 00	 jmp	 $LN1@probeDevic
$LN48@probeDevic:

; 5796 :     }
; 5797 : 
; 5798 :     ohandle = (void *) input;

  01bf8	48 8b 44 24 70	 mov	 rax, QWORD PTR input$4[rsp]
  01bfd	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR ohandle$[rsp], rax

; 5799 :     bhandle = (void *) buffer;

  01c05	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR buffer$6[rsp]
  01c0d	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR bhandle$[rsp], rax
$LN35@probeDevic:

; 5800 :   }
; 5801 : 
; 5802 :   // Set various stream parameters
; 5803 :   DsHandle *handle = 0;

  01c15	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR handle$[rsp], 0

; 5804 :   stream_.nDeviceChannels[mode] = channels + firstChannel;

  01c1e	8b 84 24 80 06
	00 00		 mov	 eax, DWORD PTR firstChannel$[rsp]
  01c25	8b 8c 24 78 06
	00 00		 mov	 ecx, DWORD PTR channels$[rsp]
  01c2c	03 c8		 add	 ecx, eax
  01c2e	8b c1		 mov	 eax, ecx
  01c30	48 63 8c 24 70
	06 00 00	 movsxd	 rcx, DWORD PTR mode$[rsp]
  01c38	48 8b 94 24 60
	06 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  01c40	89 84 8a 64 01
	00 00		 mov	 DWORD PTR [rdx+rcx*4+356], eax

; 5805 :   stream_.nUserChannels[mode] = channels;

  01c47	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  01c4f	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01c57	8b 94 24 78 06
	00 00		 mov	 edx, DWORD PTR channels$[rsp]
  01c5e	89 94 81 5c 01
	00 00		 mov	 DWORD PTR [rcx+rax*4+348], edx

; 5806 :   stream_.bufferSize = *bufferSize;

  01c65	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01c6d	48 8b 8c 24 98
	06 00 00	 mov	 rcx, QWORD PTR bufferSize$[rsp]
  01c75	8b 09		 mov	 ecx, DWORD PTR [rcx]
  01c77	89 88 54 01 00
	00		 mov	 DWORD PTR [rax+340], ecx

; 5807 :   stream_.channelOffset[mode] = firstChannel;

  01c7d	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  01c85	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01c8d	8b 94 24 80 06
	00 00		 mov	 edx, DWORD PTR firstChannel$[rsp]
  01c94	89 94 81 6c 01
	00 00		 mov	 DWORD PTR [rcx+rax*4+364], edx

; 5808 :   stream_.deviceInterleaved[mode] = true;

  01c9b	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  01ca3	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01cab	c6 84 01 4b 01
	00 00 01	 mov	 BYTE PTR [rcx+rax+331], 1

; 5809 :   if ( options && options->flags & RTAUDIO_NONINTERLEAVED ) stream_.userInterleaved = false;

  01cb3	48 83 bc 24 a0
	06 00 00 00	 cmp	 QWORD PTR options$[rsp], 0
  01cbc	74 22		 je	 SHORT $LN49@probeDevic
  01cbe	48 8b 84 24 a0
	06 00 00	 mov	 rax, QWORD PTR options$[rsp]
  01cc6	8b 00		 mov	 eax, DWORD PTR [rax]
  01cc8	83 e0 01	 and	 eax, 1
  01ccb	85 c0		 test	 eax, eax
  01ccd	74 11		 je	 SHORT $LN49@probeDevic
  01ccf	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01cd7	c6 80 4a 01 00
	00 00		 mov	 BYTE PTR [rax+330], 0
  01cde	eb 0f		 jmp	 SHORT $LN50@probeDevic
$LN49@probeDevic:

; 5810 :   else stream_.userInterleaved = true;

  01ce0	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01ce8	c6 80 4a 01 00
	00 01		 mov	 BYTE PTR [rax+330], 1
$LN50@probeDevic:

; 5811 : 
; 5812 :   // Set flag for buffer conversion
; 5813 :   stream_.doConvertBuffer[mode] = false;

  01cef	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  01cf7	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01cff	c6 84 01 48 01
	00 00 00	 mov	 BYTE PTR [rcx+rax+328], 0

; 5814 :   if (stream_.nUserChannels[mode] != stream_.nDeviceChannels[mode])

  01d07	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  01d0f	48 63 8c 24 70
	06 00 00	 movsxd	 rcx, DWORD PTR mode$[rsp]
  01d17	48 8b 94 24 60
	06 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  01d1f	4c 8b 84 24 60
	06 00 00	 mov	 r8, QWORD PTR this$[rsp]
  01d27	41 8b 84 80 64
	01 00 00	 mov	 eax, DWORD PTR [r8+rax*4+356]
  01d2f	39 84 8a 5c 01
	00 00		 cmp	 DWORD PTR [rdx+rcx*4+348], eax
  01d36	74 18		 je	 SHORT $LN51@probeDevic

; 5815 :     stream_.doConvertBuffer[mode] = true;

  01d38	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  01d40	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01d48	c6 84 01 48 01
	00 00 01	 mov	 BYTE PTR [rcx+rax+328], 1
$LN51@probeDevic:

; 5816 :   if (stream_.userFormat != stream_.deviceFormat[mode])

  01d50	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  01d58	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01d60	48 8b 94 24 60
	06 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  01d68	8b 84 82 80 01
	00 00		 mov	 eax, DWORD PTR [rdx+rax*4+384]
  01d6f	39 81 7c 01 00
	00		 cmp	 DWORD PTR [rcx+380], eax
  01d75	74 18		 je	 SHORT $LN52@probeDevic

; 5817 :     stream_.doConvertBuffer[mode] = true;

  01d77	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  01d7f	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01d87	c6 84 01 48 01
	00 00 01	 mov	 BYTE PTR [rcx+rax+328], 1
$LN52@probeDevic:

; 5818 :   if ( stream_.userInterleaved != stream_.deviceInterleaved[mode] &&

  01d8f	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  01d97	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01d9f	0f b6 84 01 4b
	01 00 00	 movzx	 eax, BYTE PTR [rcx+rax+331]
  01da7	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01daf	0f b6 89 4a 01
	00 00		 movzx	 ecx, BYTE PTR [rcx+330]
  01db6	3b c8		 cmp	 ecx, eax
  01db8	74 32		 je	 SHORT $LN53@probeDevic
  01dba	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  01dc2	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01dca	83 bc 81 5c 01
	00 00 01	 cmp	 DWORD PTR [rcx+rax*4+348], 1
  01dd2	76 18		 jbe	 SHORT $LN53@probeDevic

; 5819 :        stream_.nUserChannels[mode] > 1 )
; 5820 :     stream_.doConvertBuffer[mode] = true;

  01dd4	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  01ddc	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01de4	c6 84 01 48 01
	00 00 01	 mov	 BYTE PTR [rcx+rax+328], 1
$LN53@probeDevic:

; 5821 : 
; 5822 :   // Allocate necessary internal buffers
; 5823 :   long bufferBytes = stream_.nUserChannels[mode] * *bufferSize * formatBytes( stream_.userFormat );

  01dec	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01df4	8b 90 7c 01 00
	00		 mov	 edx, DWORD PTR [rax+380]
  01dfa	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01e02	e8 00 00 00 00	 call	 ?formatBytes@RtApi@@IEAAIK@Z ; RtApi::formatBytes
  01e07	48 63 8c 24 70
	06 00 00	 movsxd	 rcx, DWORD PTR mode$[rsp]
  01e0f	48 8b 94 24 60
	06 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  01e17	4c 8b 84 24 98
	06 00 00	 mov	 r8, QWORD PTR bufferSize$[rsp]
  01e1f	8b 8c 8a 5c 01
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx*4+348]
  01e26	41 0f af 08	 imul	 ecx, DWORD PTR [r8]
  01e2a	0f af c8	 imul	 ecx, eax
  01e2d	8b c1		 mov	 eax, ecx
  01e2f	89 44 24 78	 mov	 DWORD PTR bufferBytes$[rsp], eax

; 5824 :   stream_.userBuffer[mode] = (char *) calloc( bufferBytes, 1 );

  01e33	48 63 44 24 78	 movsxd	 rax, DWORD PTR bufferBytes$[rsp]
  01e38	ba 01 00 00 00	 mov	 edx, 1
  01e3d	48 8b c8	 mov	 rcx, rax
  01e40	e8 00 00 00 00	 call	 calloc
  01e45	48 63 8c 24 70
	06 00 00	 movsxd	 rcx, DWORD PTR mode$[rsp]
  01e4d	48 8b 94 24 60
	06 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  01e55	48 89 84 ca 30
	01 00 00	 mov	 QWORD PTR [rdx+rcx*8+304], rax

; 5825 :   if ( stream_.userBuffer[mode] == NULL ) {

  01e5d	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  01e65	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01e6d	48 83 bc c1 30
	01 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+304], 0
  01e76	75 22		 jne	 SHORT $LN54@probeDevic

; 5826 :     errorText_ = "RtApiDs::probeDeviceOpen: error allocating user buffer memory.";

  01e78	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01e80	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01e86	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129006
  01e8d	48 8b c8	 mov	 rcx, rax
  01e90	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 5827 :     goto error;

  01e95	e9 78 04 00 00	 jmp	 $error$111
$LN54@probeDevic:

; 5828 :   }
; 5829 : 
; 5830 :   if ( stream_.doConvertBuffer[mode] ) {

  01e9a	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  01ea2	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01eaa	0f b6 84 01 48
	01 00 00	 movzx	 eax, BYTE PTR [rcx+rax+328]
  01eb2	85 c0		 test	 eax, eax
  01eb4	0f 84 6e 01 00
	00		 je	 $LN56@probeDevic

; 5831 : 
; 5832 :     bool makeBuffer = true;

  01eba	c6 44 24 50 01	 mov	 BYTE PTR makeBuffer$2[rsp], 1

; 5833 :     bufferBytes = stream_.nDeviceChannels[mode] * formatBytes( stream_.deviceFormat[mode] );

  01ebf	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  01ec7	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01ecf	8b 94 81 80 01
	00 00		 mov	 edx, DWORD PTR [rcx+rax*4+384]
  01ed6	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01ede	e8 00 00 00 00	 call	 ?formatBytes@RtApi@@IEAAIK@Z ; RtApi::formatBytes
  01ee3	48 63 8c 24 70
	06 00 00	 movsxd	 rcx, DWORD PTR mode$[rsp]
  01eeb	48 8b 94 24 60
	06 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  01ef3	8b 8c 8a 64 01
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx*4+356]
  01efa	0f af c8	 imul	 ecx, eax
  01efd	8b c1		 mov	 eax, ecx
  01eff	89 44 24 78	 mov	 DWORD PTR bufferBytes$[rsp], eax

; 5834 :     if ( mode == INPUT ) {

  01f03	83 bc 24 70 06
	00 00 01	 cmp	 DWORD PTR mode$[rsp], 1
  01f0b	75 7e		 jne	 SHORT $LN57@probeDevic

; 5835 :       if ( stream_.mode == OUTPUT && stream_.deviceBuffer ) {

  01f0d	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01f15	83 b8 28 01 00
	00 00		 cmp	 DWORD PTR [rax+296], 0
  01f1c	75 6d		 jne	 SHORT $LN57@probeDevic
  01f1e	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01f26	48 83 b8 40 01
	00 00 00	 cmp	 QWORD PTR [rax+320], 0
  01f2e	74 5b		 je	 SHORT $LN57@probeDevic

; 5836 :         unsigned long bytesOut = stream_.nDeviceChannels[0] * formatBytes( stream_.deviceFormat[0] );

  01f30	b8 04 00 00 00	 mov	 eax, 4
  01f35	48 6b c0 00	 imul	 rax, rax, 0
  01f39	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01f41	8b 94 01 80 01
	00 00		 mov	 edx, DWORD PTR [rcx+rax+384]
  01f48	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01f50	e8 00 00 00 00	 call	 ?formatBytes@RtApi@@IEAAIK@Z ; RtApi::formatBytes
  01f55	b9 04 00 00 00	 mov	 ecx, 4
  01f5a	48 6b c9 00	 imul	 rcx, rcx, 0
  01f5e	48 8b 94 24 60
	06 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  01f66	8b 8c 0a 64 01
	00 00		 mov	 ecx, DWORD PTR [rdx+rcx+356]
  01f6d	0f af c8	 imul	 ecx, eax
  01f70	8b c1		 mov	 eax, ecx
  01f72	89 84 24 98 00
	00 00		 mov	 DWORD PTR bytesOut$10[rsp], eax

; 5837 :         if ( bufferBytes <= (long) bytesOut ) makeBuffer = false;

  01f79	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR bytesOut$10[rsp]
  01f80	39 44 24 78	 cmp	 DWORD PTR bufferBytes$[rsp], eax
  01f84	7f 05		 jg	 SHORT $LN57@probeDevic
  01f86	c6 44 24 50 00	 mov	 BYTE PTR makeBuffer$2[rsp], 0
$LN57@probeDevic:

; 5838 :       }
; 5839 :     }
; 5840 : 
; 5841 :     if ( makeBuffer ) {

  01f8b	0f b6 44 24 50	 movzx	 eax, BYTE PTR makeBuffer$2[rsp]
  01f90	85 c0		 test	 eax, eax
  01f92	0f 84 90 00 00
	00		 je	 $LN56@probeDevic

; 5842 :       bufferBytes *= *bufferSize;

  01f98	48 8b 84 24 98
	06 00 00	 mov	 rax, QWORD PTR bufferSize$[rsp]
  01fa0	8b 4c 24 78	 mov	 ecx, DWORD PTR bufferBytes$[rsp]
  01fa4	0f af 08	 imul	 ecx, DWORD PTR [rax]
  01fa7	8b c1		 mov	 eax, ecx
  01fa9	89 44 24 78	 mov	 DWORD PTR bufferBytes$[rsp], eax

; 5843 :       if ( stream_.deviceBuffer ) free( stream_.deviceBuffer );

  01fad	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01fb5	48 83 b8 40 01
	00 00 00	 cmp	 QWORD PTR [rax+320], 0
  01fbd	74 14		 je	 SHORT $LN61@probeDevic
  01fbf	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01fc7	48 8b 88 40 01
	00 00		 mov	 rcx, QWORD PTR [rax+320]
  01fce	e8 00 00 00 00	 call	 free
$LN61@probeDevic:

; 5844 :       stream_.deviceBuffer = (char *) calloc( bufferBytes, 1 );

  01fd3	48 63 44 24 78	 movsxd	 rax, DWORD PTR bufferBytes$[rsp]
  01fd8	ba 01 00 00 00	 mov	 edx, 1
  01fdd	48 8b c8	 mov	 rcx, rax
  01fe0	e8 00 00 00 00	 call	 calloc
  01fe5	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01fed	48 89 81 40 01
	00 00		 mov	 QWORD PTR [rcx+320], rax

; 5845 :       if ( stream_.deviceBuffer == NULL ) {

  01ff4	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01ffc	48 83 b8 40 01
	00 00 00	 cmp	 QWORD PTR [rax+320], 0
  02004	75 22		 jne	 SHORT $LN56@probeDevic

; 5846 :         errorText_ = "RtApiDs::probeDeviceOpen: error allocating device buffer memory.";

  02006	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0200e	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  02014	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129015
  0201b	48 8b c8	 mov	 rcx, rax
  0201e	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 5847 :         goto error;

  02023	e9 ea 02 00 00	 jmp	 $error$111
$LN56@probeDevic:

; 5848 :       }
; 5849 :     }
; 5850 :   }
; 5851 : 
; 5852 :   // Allocate our DsHandle structures for the stream.
; 5853 :   if ( stream_.apiHandle == 0 ) {

  02028	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  02030	48 83 b8 20 01
	00 00 00	 cmp	 QWORD PTR [rax+288], 0
  02038	0f 85 b8 00 00
	00		 jne	 $LN64@probeDevic

; 5854 :     try {
; 5855 :       handle = new DsHandle;

  0203e	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  02043	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  02048	48 89 84 24 d0
	02 00 00	 mov	 QWORD PTR tv2212[rsp], rax
  02050	48 8b 84 24 d0
	02 00 00	 mov	 rax, QWORD PTR tv2212[rsp]
  02058	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR $T16[rsp], rax
  02060	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR $T16[rsp], 0
  02069	74 27		 je	 SHORT $LN82@probeDevic
  0206b	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR $T16[rsp]
  02073	e8 00 00 00 00	 call	 ??0DsHandle@@QEAA@XZ	; DsHandle::DsHandle
  02078	48 89 84 24 d8
	02 00 00	 mov	 QWORD PTR tv2214[rsp], rax
  02080	48 8b 84 24 d8
	02 00 00	 mov	 rax, QWORD PTR tv2214[rsp]
  02088	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv1881[rsp], rax
  02090	eb 0c		 jmp	 SHORT $LN83@probeDevic
$LN82@probeDevic:
  02092	48 c7 84 24 e8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv1881[rsp], 0
$LN83@probeDevic:
  0209e	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR tv1881[rsp]
  020a6	48 89 84 24 e0
	02 00 00	 mov	 QWORD PTR $T19[rsp], rax
  020ae	48 8b 84 24 e0
	02 00 00	 mov	 rax, QWORD PTR $T19[rsp]
  020b6	48 89 44 24 60	 mov	 QWORD PTR handle$[rsp], rax
  020bb	eb 00		 jmp	 SHORT $LN107@probeDevic
$LN108@probeDevic:
$LN107@probeDevic:
  020bd	eb 05		 jmp	 SHORT $LN105@probeDevic
$LN106@probeDevic:

; 5856 :     }
; 5857 :     catch ( std::bad_alloc& ) {
; 5858 :       errorText_ = "RtApiDs::probeDeviceOpen: error allocating AsioHandle memory.";
; 5859 :       goto error;

  020bf	e9 4e 02 00 00	 jmp	 $error$111
$LN105@probeDevic:

; 5860 :     }
; 5861 : 
; 5862 :     // Create a manual-reset event.
; 5863 :     handle->condition = CreateEvent( NULL,   // no security

  020c4	45 33 c9	 xor	 r9d, r9d
  020c7	45 33 c0	 xor	 r8d, r8d
  020ca	ba 01 00 00 00	 mov	 edx, 1
  020cf	33 c9		 xor	 ecx, ecx
  020d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateEventA
  020d7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR handle$[rsp]
  020dc	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 5864 :                                      TRUE,   // manual-reset
; 5865 :                                      FALSE,  // non-signaled initially
; 5866 :                                      NULL ); // unnamed
; 5867 :     stream_.apiHandle = (void *) handle;

  020e0	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  020e8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR handle$[rsp]
  020ed	48 89 88 20 01
	00 00		 mov	 QWORD PTR [rax+288], rcx

; 5868 :   }
; 5869 :   else

  020f4	eb 14		 jmp	 SHORT $LN65@probeDevic
$LN64@probeDevic:

; 5870 :     handle = (DsHandle *) stream_.apiHandle;

  020f6	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  020fe	48 8b 80 20 01
	00 00		 mov	 rax, QWORD PTR [rax+288]
  02105	48 89 44 24 60	 mov	 QWORD PTR handle$[rsp], rax
$LN65@probeDevic:

; 5871 :   handle->id[mode] = ohandle;

  0210a	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  02112	48 8b 4c 24 60	 mov	 rcx, QWORD PTR handle$[rsp]
  02117	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR ohandle$[rsp]
  0211f	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx

; 5872 :   handle->buffer[mode] = bhandle;

  02124	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  0212c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR handle$[rsp]
  02131	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR bhandle$[rsp]
  02139	48 89 54 c1 18	 mov	 QWORD PTR [rcx+rax*8+24], rdx

; 5873 :   handle->dsBufferSize[mode] = dsBufferSize;

  0213e	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  02146	48 8b 4c 24 60	 mov	 rcx, QWORD PTR handle$[rsp]
  0214b	8b 54 24 44	 mov	 edx, DWORD PTR dsBufferSize$[rsp]
  0214f	89 54 81 34	 mov	 DWORD PTR [rcx+rax*4+52], edx

; 5874 :   handle->dsPointerLeadTime[mode] = dsPointerLeadTime;

  02153	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  0215b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR handle$[rsp]
  02160	8b 94 24 88 00
	00 00		 mov	 edx, DWORD PTR dsPointerLeadTime$[rsp]
  02167	89 54 81 3c	 mov	 DWORD PTR [rcx+rax*4+60], edx

; 5875 : 
; 5876 :   stream_.device[mode] = device;

  0216b	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  02173	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0217b	8b 94 24 68 06
	00 00		 mov	 edx, DWORD PTR device$[rsp]
  02182	89 94 81 18 01
	00 00		 mov	 DWORD PTR [rcx+rax*4+280], edx

; 5877 :   stream_.state = STREAM_STOPPED;

  02189	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  02191	c7 80 2c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+300], 0

; 5878 :   if ( stream_.mode == OUTPUT && mode == INPUT )

  0219b	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  021a3	83 b8 28 01 00
	00 00		 cmp	 DWORD PTR [rax+296], 0
  021aa	75 1e		 jne	 SHORT $LN68@probeDevic
  021ac	83 bc 24 70 06
	00 00 01	 cmp	 DWORD PTR mode$[rsp], 1
  021b4	75 14		 jne	 SHORT $LN68@probeDevic

; 5879 :     // We had already set up an output stream.
; 5880 :     stream_.mode = DUPLEX;

  021b6	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  021be	c7 80 28 01 00
	00 02 00 00 00	 mov	 DWORD PTR [rax+296], 2

; 5881 :   else

  021c8	eb 15		 jmp	 SHORT $LN69@probeDevic
$LN68@probeDevic:

; 5882 :     stream_.mode = mode;

  021ca	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  021d2	8b 8c 24 70 06
	00 00		 mov	 ecx, DWORD PTR mode$[rsp]
  021d9	89 88 28 01 00
	00		 mov	 DWORD PTR [rax+296], ecx
$LN69@probeDevic:

; 5883 :   stream_.nBuffers = nBuffers;

  021df	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  021e7	8b 4c 24 68	 mov	 ecx, DWORD PTR nBuffers$[rsp]
  021eb	89 88 58 01 00
	00		 mov	 DWORD PTR [rax+344], ecx

; 5884 :   stream_.sampleRate = sampleRate;

  021f1	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  021f9	8b 8c 24 88 06
	00 00		 mov	 ecx, DWORD PTR sampleRate$[rsp]
  02200	89 88 50 01 00
	00		 mov	 DWORD PTR [rax+336], ecx

; 5885 : 
; 5886 :   // Setup the buffer conversion information structure.
; 5887 :   if ( stream_.doConvertBuffer[mode] ) setConvertInfo( mode, firstChannel );

  02206	48 63 84 24 70
	06 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  0220e	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  02216	0f b6 84 01 48
	01 00 00	 movzx	 eax, BYTE PTR [rcx+rax+328]
  0221e	85 c0		 test	 eax, eax
  02220	74 1c		 je	 SHORT $LN70@probeDevic
  02222	44 8b 84 24 80
	06 00 00	 mov	 r8d, DWORD PTR firstChannel$[rsp]
  0222a	8b 94 24 70 06
	00 00		 mov	 edx, DWORD PTR mode$[rsp]
  02231	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  02239	e8 00 00 00 00	 call	 ?setConvertInfo@RtApi@@IEAAXW4StreamMode@1@I@Z ; RtApi::setConvertInfo
$LN70@probeDevic:

; 5888 : 
; 5889 :   // Setup the callback thread.
; 5890 :   if ( stream_.callbackInfo.isRunning == false ) {

  0223e	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  02246	0f b6 80 e0 01
	00 00		 movzx	 eax, BYTE PTR [rax+480]
  0224d	85 c0		 test	 eax, eax
  0224f	0f 85 b6 00 00
	00		 jne	 $LN71@probeDevic

; 5891 :     unsigned threadId;
; 5892 :     stream_.callbackInfo.isRunning = true;

  02255	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0225d	c6 80 e0 01 00
	00 01		 mov	 BYTE PTR [rax+480], 1

; 5893 :     stream_.callbackInfo.object = (void *) this;

  02264	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0226c	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  02274	48 89 88 b0 01
	00 00		 mov	 QWORD PTR [rax+432], rcx

; 5894 :     stream_.callbackInfo.thread = _beginthreadex( NULL, 0, &callbackHandler,

  0227b	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  02283	48 05 b0 01 00
	00		 add	 rax, 432		; 000001b0H
  02289	48 8d 8c 24 f8
	00 00 00	 lea	 rcx, QWORD PTR threadId$18[rsp]
  02291	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02296	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  0229e	4c 8b c8	 mov	 r9, rax
  022a1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?callbackHandler@@YAIPEAX@Z ; callbackHandler
  022a8	33 d2		 xor	 edx, edx
  022aa	33 c9		 xor	 ecx, ecx
  022ac	e8 00 00 00 00	 call	 _beginthreadex
  022b1	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  022b9	48 89 81 b8 01
	00 00		 mov	 QWORD PTR [rcx+440], rax

; 5895 :                                                   &stream_.callbackInfo, 0, &threadId );
; 5896 :     if ( stream_.callbackInfo.thread == 0 ) {

  022c0	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  022c8	48 83 b8 b8 01
	00 00 00	 cmp	 QWORD PTR [rax+440], 0
  022d0	75 1f		 jne	 SHORT $LN72@probeDevic

; 5897 :       errorText_ = "RtApiDs::probeDeviceOpen: error creating callback thread!";

  022d2	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  022da	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  022e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129029
  022e7	48 8b c8	 mov	 rcx, rax
  022ea	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 5898 :       goto error;

  022ef	eb 21		 jmp	 SHORT $error$111
$LN72@probeDevic:

; 5899 :     }
; 5900 : 
; 5901 :     // Boost DS thread priority
; 5902 :     SetThreadPriority( (HANDLE) stream_.callbackInfo.thread, THREAD_PRIORITY_HIGHEST );

  022f1	ba 02 00 00 00	 mov	 edx, 2
  022f6	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  022fe	48 8b 88 b8 01
	00 00		 mov	 rcx, QWORD PTR [rax+440]
  02305	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetThreadPriority
$LN71@probeDevic:

; 5903 :   }
; 5904 :   return SUCCESS;

  0230b	b0 01		 mov	 al, 1
  0230d	e9 08 02 00 00	 jmp	 $LN1@probeDevic
$error$111:

; 5905 : 
; 5906 :  error:
; 5907 :   if ( handle ) {

  02312	48 83 7c 24 60
	00		 cmp	 QWORD PTR handle$[rsp], 0
  02318	0f 84 47 01 00
	00		 je	 $LN74@probeDevic

; 5908 :     if ( handle->buffer[0] ) { // the object pointer can be NULL and valid

  0231e	b8 08 00 00 00	 mov	 eax, 8
  02323	48 6b c0 00	 imul	 rax, rax, 0
  02327	48 8b 4c 24 60	 mov	 rcx, QWORD PTR handle$[rsp]
  0232c	48 83 7c 01 18
	00		 cmp	 QWORD PTR [rcx+rax+24], 0
  02332	74 6d		 je	 SHORT $LN75@probeDevic

; 5909 :       LPDIRECTSOUND object = (LPDIRECTSOUND) handle->id[0];

  02334	b8 08 00 00 00	 mov	 eax, 8
  02339	48 6b c0 00	 imul	 rax, rax, 0
  0233d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR handle$[rsp]
  02342	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  02347	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR object$17[rsp], rax

; 5910 :       LPDIRECTSOUNDBUFFER buffer = (LPDIRECTSOUNDBUFFER) handle->buffer[0];

  0234f	b8 08 00 00 00	 mov	 eax, 8
  02354	48 6b c0 00	 imul	 rax, rax, 0
  02358	48 8b 4c 24 60	 mov	 rcx, QWORD PTR handle$[rsp]
  0235d	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  02362	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR buffer$11[rsp], rax

; 5911 :       if ( buffer ) buffer->Release();

  0236a	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR buffer$11[rsp], 0
  02373	74 16		 je	 SHORT $LN76@probeDevic
  02375	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR buffer$11[rsp]
  0237d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02380	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR buffer$11[rsp]
  02388	ff 50 10	 call	 QWORD PTR [rax+16]
$LN76@probeDevic:

; 5912 :       object->Release();

  0238b	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR object$17[rsp]
  02393	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02396	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR object$17[rsp]
  0239e	ff 50 10	 call	 QWORD PTR [rax+16]
$LN75@probeDevic:

; 5913 :     }
; 5914 :     if ( handle->buffer[1] ) {

  023a1	b8 08 00 00 00	 mov	 eax, 8
  023a6	48 6b c0 01	 imul	 rax, rax, 1
  023aa	48 8b 4c 24 60	 mov	 rcx, QWORD PTR handle$[rsp]
  023af	48 83 7c 01 18
	00		 cmp	 QWORD PTR [rcx+rax+24], 0
  023b5	74 6d		 je	 SHORT $LN77@probeDevic

; 5915 :       LPDIRECTSOUNDCAPTURE object = (LPDIRECTSOUNDCAPTURE) handle->id[1];

  023b7	b8 08 00 00 00	 mov	 eax, 8
  023bc	48 6b c0 01	 imul	 rax, rax, 1
  023c0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR handle$[rsp]
  023c5	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  023ca	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR object$13[rsp], rax

; 5916 :       LPDIRECTSOUNDCAPTUREBUFFER buffer = (LPDIRECTSOUNDCAPTUREBUFFER) handle->buffer[1];

  023d2	b8 08 00 00 00	 mov	 eax, 8
  023d7	48 6b c0 01	 imul	 rax, rax, 1
  023db	48 8b 4c 24 60	 mov	 rcx, QWORD PTR handle$[rsp]
  023e0	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  023e5	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR buffer$12[rsp], rax

; 5917 :       if ( buffer ) buffer->Release();

  023ed	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR buffer$12[rsp], 0
  023f6	74 16		 je	 SHORT $LN78@probeDevic
  023f8	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR buffer$12[rsp]
  02400	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02403	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR buffer$12[rsp]
  0240b	ff 50 10	 call	 QWORD PTR [rax+16]
$LN78@probeDevic:

; 5918 :       object->Release();

  0240e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR object$13[rsp]
  02416	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02419	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR object$13[rsp]
  02421	ff 50 10	 call	 QWORD PTR [rax+16]
$LN77@probeDevic:

; 5919 :     }
; 5920 :     CloseHandle( handle->condition );

  02424	48 8b 44 24 60	 mov	 rax, QWORD PTR handle$[rsp]
  02429	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  0242d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 5921 :     delete handle;

  02433	48 8b 44 24 60	 mov	 rax, QWORD PTR handle$[rsp]
  02438	48 89 84 24 e8
	02 00 00	 mov	 QWORD PTR $T20[rsp], rax
  02440	ba 50 00 00 00	 mov	 edx, 80			; 00000050H
  02445	48 8b 8c 24 e8
	02 00 00	 mov	 rcx, QWORD PTR $T20[rsp]
  0244d	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete

; 5922 :     stream_.apiHandle = 0;

  02452	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0245a	48 c7 80 20 01
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+288], 0
$LN74@probeDevic:

; 5923 :   }
; 5924 : 
; 5925 :   for ( int i=0; i<2; i++ ) {

  02465	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR i$5[rsp], 0
  0246d	eb 0a		 jmp	 SHORT $LN8@probeDevic
$LN6@probeDevic:
  0246f	8b 44 24 7c	 mov	 eax, DWORD PTR i$5[rsp]
  02473	ff c0		 inc	 eax
  02475	89 44 24 7c	 mov	 DWORD PTR i$5[rsp], eax
$LN8@probeDevic:
  02479	83 7c 24 7c 02	 cmp	 DWORD PTR i$5[rsp], 2
  0247e	7d 4d		 jge	 SHORT $LN7@probeDevic

; 5926 :     if ( stream_.userBuffer[i] ) {

  02480	48 63 44 24 7c	 movsxd	 rax, DWORD PTR i$5[rsp]
  02485	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0248d	48 83 bc c1 30
	01 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+304], 0
  02496	74 33		 je	 SHORT $LN79@probeDevic

; 5927 :       free( stream_.userBuffer[i] );

  02498	48 63 44 24 7c	 movsxd	 rax, DWORD PTR i$5[rsp]
  0249d	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  024a5	48 8b 8c c1 30
	01 00 00	 mov	 rcx, QWORD PTR [rcx+rax*8+304]
  024ad	e8 00 00 00 00	 call	 free

; 5928 :       stream_.userBuffer[i] = 0;

  024b2	48 63 44 24 7c	 movsxd	 rax, DWORD PTR i$5[rsp]
  024b7	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  024bf	48 c7 84 c1 30
	01 00 00 00 00
	00 00		 mov	 QWORD PTR [rcx+rax*8+304], 0
$LN79@probeDevic:

; 5929 :     }
; 5930 :   }

  024cb	eb a2		 jmp	 SHORT $LN6@probeDevic
$LN7@probeDevic:

; 5931 : 
; 5932 :   if ( stream_.deviceBuffer ) {

  024cd	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  024d5	48 83 b8 40 01
	00 00 00	 cmp	 QWORD PTR [rax+320], 0
  024dd	74 27		 je	 SHORT $LN80@probeDevic

; 5933 :     free( stream_.deviceBuffer );

  024df	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  024e7	48 8b 88 40 01
	00 00		 mov	 rcx, QWORD PTR [rax+320]
  024ee	e8 00 00 00 00	 call	 free

; 5934 :     stream_.deviceBuffer = 0;

  024f3	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  024fb	48 c7 80 40 01
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+320], 0
$LN80@probeDevic:

; 5935 :   }
; 5936 : 
; 5937 :   stream_.state = STREAM_CLOSED;

  02506	48 8b 84 24 60
	06 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0250e	c7 80 2c 01 00
	00 ce ff ff ff	 mov	 DWORD PTR [rax+300], -50 ; ffffffffffffffceH

; 5938 :   return FAILURE;

  02518	32 c0		 xor	 al, al
$LN1@probeDevic:

; 5939 : }

  0251a	48 8b 8c 24 40
	06 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  02522	48 33 cc	 xor	 rcx, rsp
  02525	e8 00 00 00 00	 call	 __security_check_cookie
  0252a	48 81 c4 58 06
	00 00		 add	 rsp, 1624		; 00000658H
  02531	c3		 ret	 0
?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z ENDP ; RtApiDs::probeDeviceOpen
_TEXT	ENDS
text$x	SEGMENT
result$ = 64
dsBufferSize$ = 68
output$1 = 72
makeBuffer$2 = 80
buffer$3 = 88
handle$ = 96
nBuffers$ = 104
input$4 = 112
bufferBytes$ = 120
i$5 = 124
buffer$6 = 128
dsPointerLeadTime$ = 136
deviceFormats$7 = 140
dataLen$8 = 144
dataLen$9 = 148
bytesOut$10 = 152
ohandle$ = 160
bhandle$ = 168
buffer$11 = 176
buffer$12 = 184
object$13 = 192
nDevices$ = 200
audioPtr$14 = 208
audioPtr$15 = 216
$T16 = 224
tv1881 = 232
object$17 = 240
threadId$18 = 248
tv94 = 256
tv132 = 264
tv2173 = 272
tv159 = 280
tv176 = 288
tv2175 = 296
tv232 = 304
tv238 = 312
tv255 = 320
tv250 = 328
tv2177 = 336
tv316 = 344
tv311 = 352
tv2179 = 360
tv363 = 368
tv2181 = 376
hWnd$ = 384
tv498 = 392
tv493 = 400
tv2183 = 408
tv564 = 416
tv559 = 424
tv2185 = 432
tv625 = 440
tv620 = 448
tv2187 = 456
tv699 = 464
tv694 = 472
tv2189 = 480
tv767 = 488
tv762 = 496
tv2191 = 504
tv841 = 512
tv836 = 520
tv2193 = 528
tv948 = 536
tv943 = 544
tv2195 = 552
tv987 = 560
tv993 = 568
tv1010 = 576
tv1005 = 584
tv2197 = 592
tv1103 = 600
tv1098 = 608
tv2199 = 616
tv1243 = 624
tv1238 = 632
tv2201 = 640
tv1311 = 648
tv1306 = 656
tv2203 = 664
tv1385 = 672
tv1380 = 680
tv2205 = 688
tv1460 = 696
tv1455 = 704
tv2207 = 712
tv2212 = 720
tv2214 = 728
$T19 = 736
$T20 = 744
bufferDescription$21 = 752
$T22 = 792
bufferDescription$23 = 800
waveFormat$ = 840
inCaps$24 = 864
dscbcaps$25 = 880
dsbcaps$26 = 896
$T27 = 920
$T28 = 952
$T29 = 984
$T30 = 1016
$T31 = 1048
$T32 = 1080
$T33 = 1112
$T34 = 1144
$T35 = 1176
$T36 = 1208
$T37 = 1240
$T38 = 1272
$T39 = 1304
$T40 = 1336
$T41 = 1368
$T42 = 1400
$T43 = 1432
$T44 = 1464
outCaps$45 = 1504
__$ArrayPad$ = 1600
this$ = 1632
device$ = 1640
mode$ = 1648
channels$ = 1656
firstChannel$ = 1664
sampleRate$ = 1672
format$ = 1680
bufferSize$ = 1688
options$ = 1696
?dtor$18@?0??probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z@4HA PROC ; `RtApiDs::probeDeviceOpen'::`1'::dtor$18
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	ba 50 00 00 00	 mov	 edx, 80			; 00000050H
  0000e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR $T16[rbp]
  00015	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  0001a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001e	5d		 pop	 rbp
  0001f	c3		 ret	 0
?dtor$18@?0??probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z@4HA ENDP ; `RtApiDs::probeDeviceOpen'::`1'::dtor$18
result$ = 64
dsBufferSize$ = 68
output$1 = 72
makeBuffer$2 = 80
buffer$3 = 88
handle$ = 96
nBuffers$ = 104
input$4 = 112
bufferBytes$ = 120
i$5 = 124
buffer$6 = 128
dsPointerLeadTime$ = 136
deviceFormats$7 = 140
dataLen$8 = 144
dataLen$9 = 148
bytesOut$10 = 152
ohandle$ = 160
bhandle$ = 168
buffer$11 = 176
buffer$12 = 184
object$13 = 192
nDevices$ = 200
audioPtr$14 = 208
audioPtr$15 = 216
$T16 = 224
tv1881 = 232
object$17 = 240
threadId$18 = 248
tv94 = 256
tv132 = 264
tv2173 = 272
tv159 = 280
tv176 = 288
tv2175 = 296
tv232 = 304
tv238 = 312
tv255 = 320
tv250 = 328
tv2177 = 336
tv316 = 344
tv311 = 352
tv2179 = 360
tv363 = 368
tv2181 = 376
hWnd$ = 384
tv498 = 392
tv493 = 400
tv2183 = 408
tv564 = 416
tv559 = 424
tv2185 = 432
tv625 = 440
tv620 = 448
tv2187 = 456
tv699 = 464
tv694 = 472
tv2189 = 480
tv767 = 488
tv762 = 496
tv2191 = 504
tv841 = 512
tv836 = 520
tv2193 = 528
tv948 = 536
tv943 = 544
tv2195 = 552
tv987 = 560
tv993 = 568
tv1010 = 576
tv1005 = 584
tv2197 = 592
tv1103 = 600
tv1098 = 608
tv2199 = 616
tv1243 = 624
tv1238 = 632
tv2201 = 640
tv1311 = 648
tv1306 = 656
tv2203 = 664
tv1385 = 672
tv1380 = 680
tv2205 = 688
tv1460 = 696
tv1455 = 704
tv2207 = 712
tv2212 = 720
tv2214 = 728
$T19 = 736
$T20 = 744
bufferDescription$21 = 752
$T22 = 792
bufferDescription$23 = 800
waveFormat$ = 840
inCaps$24 = 864
dscbcaps$25 = 880
dsbcaps$26 = 896
$T27 = 920
$T28 = 952
$T29 = 984
$T30 = 1016
$T31 = 1048
$T32 = 1080
$T33 = 1112
$T34 = 1144
$T35 = 1176
$T36 = 1208
$T37 = 1240
$T38 = 1272
$T39 = 1304
$T40 = 1336
$T41 = 1368
$T42 = 1400
$T43 = 1432
$T44 = 1464
outCaps$45 = 1504
__$ArrayPad$ = 1600
this$ = 1632
device$ = 1640
mode$ = 1648
channels$ = 1656
firstChannel$ = 1664
sampleRate$ = 1672
format$ = 1680
bufferSize$ = 1688
options$ = 1696
?catch$19@?0??probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z@4HA PROC ; `RtApiDs::probeDeviceOpen'::`1'::catch$19

; 5856 :     }
; 5857 :     catch ( std::bad_alloc& ) {

  00020	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00025	55		 push	 rbp
  00026	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0002a	48 8b ea	 mov	 rbp, rdx
__catch$?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z$2:

; 5856 :     }
; 5857 :     catch ( std::bad_alloc& ) {
; 5858 :       errorText_ = "RtApiDs::probeDeviceOpen: error allocating AsioHandle memory.";

  0002d	48 8b 85 60 06
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129022
  00041	48 8b c8	 mov	 rcx, rax
  00044	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00049	90		 npad	 1

; 5905 : 
; 5906 :  error:

  0004a	48 8d 05 00 00
	00 00		 lea	 rax, $LN106@catch$19
  00051	eb 07		 jmp	 SHORT $LN109@catch$19

; 5860 :     }

  00053	48 8d 05 00 00
	00 00		 lea	 rax, $LN108@catch$19
$LN109@catch$19:
  0005a	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0005e	5d		 pop	 rbp
  0005f	c3		 ret	 0
  00060	cc		 int	 3
?catch$19@?0??probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z@4HA ENDP ; `RtApiDs::probeDeviceOpen'::`1'::catch$19
text$x	ENDS
; Function compile flags: /Odtp
text$x	SEGMENT
result$ = 64
dsBufferSize$ = 68
output$1 = 72
makeBuffer$2 = 80
buffer$3 = 88
handle$ = 96
nBuffers$ = 104
input$4 = 112
bufferBytes$ = 120
i$5 = 124
buffer$6 = 128
dsPointerLeadTime$ = 136
deviceFormats$7 = 140
dataLen$8 = 144
dataLen$9 = 148
bytesOut$10 = 152
ohandle$ = 160
bhandle$ = 168
buffer$11 = 176
buffer$12 = 184
object$13 = 192
nDevices$ = 200
audioPtr$14 = 208
audioPtr$15 = 216
$T16 = 224
tv1881 = 232
object$17 = 240
threadId$18 = 248
tv94 = 256
tv132 = 264
tv2173 = 272
tv159 = 280
tv176 = 288
tv2175 = 296
tv232 = 304
tv238 = 312
tv255 = 320
tv250 = 328
tv2177 = 336
tv316 = 344
tv311 = 352
tv2179 = 360
tv363 = 368
tv2181 = 376
hWnd$ = 384
tv498 = 392
tv493 = 400
tv2183 = 408
tv564 = 416
tv559 = 424
tv2185 = 432
tv625 = 440
tv620 = 448
tv2187 = 456
tv699 = 464
tv694 = 472
tv2189 = 480
tv767 = 488
tv762 = 496
tv2191 = 504
tv841 = 512
tv836 = 520
tv2193 = 528
tv948 = 536
tv943 = 544
tv2195 = 552
tv987 = 560
tv993 = 568
tv1010 = 576
tv1005 = 584
tv2197 = 592
tv1103 = 600
tv1098 = 608
tv2199 = 616
tv1243 = 624
tv1238 = 632
tv2201 = 640
tv1311 = 648
tv1306 = 656
tv2203 = 664
tv1385 = 672
tv1380 = 680
tv2205 = 688
tv1460 = 696
tv1455 = 704
tv2207 = 712
tv2212 = 720
tv2214 = 728
$T19 = 736
$T20 = 744
bufferDescription$21 = 752
$T22 = 792
bufferDescription$23 = 800
waveFormat$ = 840
inCaps$24 = 864
dscbcaps$25 = 880
dsbcaps$26 = 896
$T27 = 920
$T28 = 952
$T29 = 984
$T30 = 1016
$T31 = 1048
$T32 = 1080
$T33 = 1112
$T34 = 1144
$T35 = 1176
$T36 = 1208
$T37 = 1240
$T38 = 1272
$T39 = 1304
$T40 = 1336
$T41 = 1368
$T42 = 1400
$T43 = 1432
$T44 = 1464
outCaps$45 = 1504
__$ArrayPad$ = 1600
this$ = 1632
device$ = 1640
mode$ = 1648
channels$ = 1656
firstChannel$ = 1664
sampleRate$ = 1672
format$ = 1680
bufferSize$ = 1688
options$ = 1696
?dtor$18@?0??probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z@4HA PROC ; `RtApiDs::probeDeviceOpen'::`1'::dtor$18
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	ba 50 00 00 00	 mov	 edx, 80			; 00000050H
  0000e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR $T16[rbp]
  00015	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  0001a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001e	5d		 pop	 rbp
  0001f	c3		 ret	 0
?dtor$18@?0??probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z@4HA ENDP ; `RtApiDs::probeDeviceOpen'::`1'::dtor$18
text$x	ENDS
; Function compile flags: /Odtp
text$x	SEGMENT
result$ = 64
dsBufferSize$ = 68
output$1 = 72
makeBuffer$2 = 80
buffer$3 = 88
handle$ = 96
nBuffers$ = 104
input$4 = 112
bufferBytes$ = 120
i$5 = 124
buffer$6 = 128
dsPointerLeadTime$ = 136
deviceFormats$7 = 140
dataLen$8 = 144
dataLen$9 = 148
bytesOut$10 = 152
ohandle$ = 160
bhandle$ = 168
buffer$11 = 176
buffer$12 = 184
object$13 = 192
nDevices$ = 200
audioPtr$14 = 208
audioPtr$15 = 216
$T16 = 224
tv1881 = 232
object$17 = 240
threadId$18 = 248
tv94 = 256
tv132 = 264
tv2173 = 272
tv159 = 280
tv176 = 288
tv2175 = 296
tv232 = 304
tv238 = 312
tv255 = 320
tv250 = 328
tv2177 = 336
tv316 = 344
tv311 = 352
tv2179 = 360
tv363 = 368
tv2181 = 376
hWnd$ = 384
tv498 = 392
tv493 = 400
tv2183 = 408
tv564 = 416
tv559 = 424
tv2185 = 432
tv625 = 440
tv620 = 448
tv2187 = 456
tv699 = 464
tv694 = 472
tv2189 = 480
tv767 = 488
tv762 = 496
tv2191 = 504
tv841 = 512
tv836 = 520
tv2193 = 528
tv948 = 536
tv943 = 544
tv2195 = 552
tv987 = 560
tv993 = 568
tv1010 = 576
tv1005 = 584
tv2197 = 592
tv1103 = 600
tv1098 = 608
tv2199 = 616
tv1243 = 624
tv1238 = 632
tv2201 = 640
tv1311 = 648
tv1306 = 656
tv2203 = 664
tv1385 = 672
tv1380 = 680
tv2205 = 688
tv1460 = 696
tv1455 = 704
tv2207 = 712
tv2212 = 720
tv2214 = 728
$T19 = 736
$T20 = 744
bufferDescription$21 = 752
$T22 = 792
bufferDescription$23 = 800
waveFormat$ = 840
inCaps$24 = 864
dscbcaps$25 = 880
dsbcaps$26 = 896
$T27 = 920
$T28 = 952
$T29 = 984
$T30 = 1016
$T31 = 1048
$T32 = 1080
$T33 = 1112
$T34 = 1144
$T35 = 1176
$T36 = 1208
$T37 = 1240
$T38 = 1272
$T39 = 1304
$T40 = 1336
$T41 = 1368
$T42 = 1400
$T43 = 1432
$T44 = 1464
outCaps$45 = 1504
__$ArrayPad$ = 1600
this$ = 1632
device$ = 1640
mode$ = 1648
channels$ = 1656
firstChannel$ = 1664
sampleRate$ = 1672
format$ = 1680
bufferSize$ = 1688
options$ = 1696
?catch$19@?0??probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z@4HA PROC ; `RtApiDs::probeDeviceOpen'::`1'::catch$19

; 5857 :     catch ( std::bad_alloc& ) {

  00020	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00025	55		 push	 rbp
  00026	48 83 ec 40	 sub	 rsp, 64			; 00000040H
  0002a	48 8b ea	 mov	 rbp, rdx
__catch$?probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z$2:

; 5858 :       errorText_ = "RtApiDs::probeDeviceOpen: error allocating AsioHandle memory.";

  0002d	48 8b 85 60 06
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129022
  00041	48 8b c8	 mov	 rcx, rax
  00044	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00049	90		 npad	 1

; 5861 : 
; 5862 :     // Create a manual-reset event.
; 5863 :     handle->condition = CreateEvent( NULL,   // no security
; 5864 :                                      TRUE,   // manual-reset
; 5865 :                                      FALSE,  // non-signaled initially
; 5866 :                                      NULL ); // unnamed
; 5867 :     stream_.apiHandle = (void *) handle;
; 5868 :   }
; 5869 :   else
; 5870 :     handle = (DsHandle *) stream_.apiHandle;
; 5871 :   handle->id[mode] = ohandle;
; 5872 :   handle->buffer[mode] = bhandle;
; 5873 :   handle->dsBufferSize[mode] = dsBufferSize;
; 5874 :   handle->dsPointerLeadTime[mode] = dsPointerLeadTime;
; 5875 : 
; 5876 :   stream_.device[mode] = device;
; 5877 :   stream_.state = STREAM_STOPPED;
; 5878 :   if ( stream_.mode == OUTPUT && mode == INPUT )
; 5879 :     // We had already set up an output stream.
; 5880 :     stream_.mode = DUPLEX;
; 5881 :   else
; 5882 :     stream_.mode = mode;
; 5883 :   stream_.nBuffers = nBuffers;
; 5884 :   stream_.sampleRate = sampleRate;
; 5885 : 
; 5886 :   // Setup the buffer conversion information structure.
; 5887 :   if ( stream_.doConvertBuffer[mode] ) setConvertInfo( mode, firstChannel );
; 5888 : 
; 5889 :   // Setup the callback thread.
; 5890 :   if ( stream_.callbackInfo.isRunning == false ) {
; 5891 :     unsigned threadId;
; 5892 :     stream_.callbackInfo.isRunning = true;
; 5893 :     stream_.callbackInfo.object = (void *) this;
; 5894 :     stream_.callbackInfo.thread = _beginthreadex( NULL, 0, &callbackHandler,
; 5895 :                                                   &stream_.callbackInfo, 0, &threadId );
; 5896 :     if ( stream_.callbackInfo.thread == 0 ) {
; 5897 :       errorText_ = "RtApiDs::probeDeviceOpen: error creating callback thread!";
; 5898 :       goto error;
; 5899 :     }
; 5900 : 
; 5901 :     // Boost DS thread priority
; 5902 :     SetThreadPriority( (HANDLE) stream_.callbackInfo.thread, THREAD_PRIORITY_HIGHEST );
; 5903 :   }
; 5904 :   return SUCCESS;
; 5905 : 
; 5906 :  error:

  0004a	48 8d 05 00 00
	00 00		 lea	 rax, $LN106@catch$19
  00051	eb 07		 jmp	 SHORT $LN109@catch$19

; 5859 :       goto error;
; 5860 :     }

  00053	48 8d 05 00 00
	00 00		 lea	 rax, $LN108@catch$19
$LN109@catch$19:
  0005a	48 83 c4 40	 add	 rsp, 64			; 00000040H
  0005e	5d		 pop	 rbp
  0005f	c3		 ret	 0
  00060	cc		 int	 3
?catch$19@?0??probeDeviceOpen@RtApiDs@@EEAA_NIW4StreamMode@RtApi@@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z@4HA ENDP ; `RtApiDs::probeDeviceOpen'::`1'::catch$19
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBAXPEAUDsDevice@@0@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
__formal$ = 24
?_Orphan_range@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBAXPEAUDsDevice@@0@Z PROC ; std::vector<DsDevice,std::allocator<DsDevice> >::_Orphan_range, COMDAT

; 1793 : 		{	// orphan iterators within specified (inclusive) range

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1794 : 		}

  0000f	c3		 ret	 0
?_Orphan_range@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBAXPEAUDsDevice@@0@Z ENDP ; std::vector<DsDevice,std::allocator<DsDevice> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBAXXZ
_TEXT	SEGMENT
this$ = 48
?_Xlen@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBAXXZ PROC ; std::vector<DsDevice,std::allocator<DsDevice> >::_Xlen, COMDAT

; 1764 : 		{	// report a length_error

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1765 : 		_Xlength_error("vector<T> too long");

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00010	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 1766 : 		}

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
?_Xlen@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBAXXZ ENDP ; std::vector<DsDevice,std::allocator<DsDevice> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAXXZ
_TEXT	SEGMENT
tv82 = 32
tv135 = 40
tv143 = 48
tv150 = 56
this$ = 80
?_Tidy@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAXXZ PROC ; std::vector<DsDevice,std::allocator<DsDevice> >::_Tidy, COMDAT

; 1636 : 		{	// free all storage

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1637 : 		if (this->_Myfirst() != pointer())

  00009	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myfirst
  00013	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00017	0f 84 d5 00 00
	00		 je	 $LN2@Tidy

; 1638 : 			{	// something to free, destroy and deallocate it
; 1639 : 			this->_Orphan_all();

  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAXXZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Orphan_all

; 1640 : 			_Destroy(this->_Myfirst(), this->_Mylast());

  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
  00031	48 89 44 24 20	 mov	 QWORD PTR tv82[rsp], rax
  00036	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0003b	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myfirst
  00040	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv82[rsp]
  00045	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  00048	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0004b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00050	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAXPEAUDsDevice@@0@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::_Destroy

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

  00055	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0005a	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myend
  0005f	48 89 44 24 28	 mov	 QWORD PTR tv135[rsp], rax
  00064	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00069	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myfirst
  0006e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00071	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv135[rsp]
  00076	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00079	48 2b c8	 sub	 rcx, rax
  0007c	48 8b c1	 mov	 rax, rcx
  0007f	48 99		 cdq
  00081	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00086	48 f7 f9	 idiv	 rcx
  00089	48 89 44 24 30	 mov	 QWORD PTR tv143[rsp], rax
  0008e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00093	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myfirst
  00098	48 89 44 24 38	 mov	 QWORD PTR tv150[rsp], rax
  0009d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000a2	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Getal
  000a7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv143[rsp]
  000ac	4c 8b c1	 mov	 r8, rcx
  000af	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv150[rsp]
  000b4	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  000b7	48 8b c8	 mov	 rcx, rax
  000ba	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@_K@Z ; std::_Wrap_alloc<std::allocator<DsDevice> >::deallocate

; 1642 : 				this->_Myend() - this->_Myfirst());
; 1643 : 			this->_Myfirst() = pointer();

  000bf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000c4	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myfirst
  000c9	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1644 : 			this->_Mylast() = pointer();

  000d0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000d5	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
  000da	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1645 : 			this->_Myend() = pointer();

  000e1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000e6	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myend
  000eb	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN2@Tidy:

; 1646 : 			}
; 1647 : 		}

  000f2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f6	c3		 ret	 0
?_Tidy@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAXXZ ENDP ; std::vector<DsDevice,std::allocator<DsDevice> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z
_TEXT	SEGMENT
tv68 = 32
this$ = 64
_Count$ = 72
?_Reserve@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z PROC ; std::vector<DsDevice,std::allocator<DsDevice> >::_Reserve, COMDAT

; 1626 : 		{	// ensure room for _Count new elements, grow exponentially

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1627 : 		if (_Unused_capacity() < _Count)

  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?_Unused_capacity@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ ; std::vector<DsDevice,std::allocator<DsDevice> >::_Unused_capacity
  00018	48 3b 44 24 48	 cmp	 rax, QWORD PTR _Count$[rsp]
  0001d	73 5e		 jae	 SHORT $LN2@Reserve

; 1628 : 			{	// need more room, try to get it
; 1629 : 			if (max_size() - size() < _Count)

  0001f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00024	e8 00 00 00 00	 call	 ?max_size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ ; std::vector<DsDevice,std::allocator<DsDevice> >::max_size
  00029	48 89 44 24 20	 mov	 QWORD PTR tv68[rsp], rax
  0002e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00033	e8 00 00 00 00	 call	 ?size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ ; std::vector<DsDevice,std::allocator<DsDevice> >::size
  00038	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv68[rsp]
  0003d	48 2b c8	 sub	 rcx, rax
  00040	48 8b c1	 mov	 rax, rcx
  00043	48 3b 44 24 48	 cmp	 rax, QWORD PTR _Count$[rsp]
  00048	73 0a		 jae	 SHORT $LN3@Reserve

; 1630 : 				_Xlen();

  0004a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0004f	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBAXXZ ; std::vector<DsDevice,std::allocator<DsDevice> >::_Xlen
$LN3@Reserve:

; 1631 : 			_Reallocate(_Grow_to(size() + _Count));

  00054	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00059	e8 00 00 00 00	 call	 ?size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ ; std::vector<DsDevice,std::allocator<DsDevice> >::size
  0005e	48 03 44 24 48	 add	 rax, QWORD PTR _Count$[rsp]
  00063	48 8b d0	 mov	 rdx, rax
  00066	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0006b	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBA_K_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::_Grow_to
  00070	48 8b d0	 mov	 rdx, rax
  00073	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00078	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::_Reallocate
$LN2@Reserve:
$LN4@Reserve:

; 1632 : 			}
; 1633 : 		}

  0007d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00081	c3		 ret	 0
?_Reserve@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z ENDP ; std::vector<DsDevice,std::allocator<DsDevice> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 32
tv84 = 40
tv150 = 48
tv177 = 56
tv179 = 64
tv186 = 72
tv200 = 80
_Size$ = 88
tv208 = 96
$T1 = 104
this$ = 128
_Count$ = 136
?_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z PROC ; std::vector<DsDevice,std::allocator<DsDevice> >::_Reallocate, COMDAT

; 1601 : 		{	// move to array of exactly _Count elements

$LN11:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  0000e	48 c7 44 24 68
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 1602 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  00017	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0001f	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Getal
  00024	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR _Count$[rsp]
  0002c	48 8b c8	 mov	 rcx, rax
  0002f	e8 00 00 00 00	 call	 ?allocate@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAPEAUDsDevice@@_K@Z ; std::_Wrap_alloc<std::allocator<DsDevice> >::allocate
  00034	48 89 44 24 20	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1603 : 
; 1604 : 		_TRY_BEGIN
; 1605 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);

  00039	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00041	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
  00046	48 89 44 24 28	 mov	 QWORD PTR tv84[rsp], rax
  0004b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00053	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myfirst
  00058	4c 8b 4c 24 20	 mov	 r9, QWORD PTR _Ptr$[rsp]
  0005d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv84[rsp]
  00062	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  00065	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00068	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00070	e8 00 00 00 00	 call	 ??$_Umove@PEAUDsDevice@@@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAPEAUDsDevice@@PEAU2@00@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::_Umove<DsDevice * __ptr64>
  00075	90		 npad	 1
  00076	eb 00		 jmp	 SHORT $LN7@Reallocate
$LN8@Reallocate:
$LN7@Reallocate:

; 1606 : 		_CATCH_ALL
; 1607 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1608 : 		_RERAISE;
; 1609 : 		_CATCH_END
; 1610 : 
; 1611 : 		size_type _Size = size();

  00078	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00080	e8 00 00 00 00	 call	 ?size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ ; std::vector<DsDevice,std::allocator<DsDevice> >::size
  00085	48 89 44 24 58	 mov	 QWORD PTR _Size$[rsp], rax

; 1612 : 		if (this->_Myfirst() != pointer())

  0008a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00092	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myfirst
  00097	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0009b	0f 84 aa 00 00
	00		 je	 $LN3@Reallocate

; 1613 : 			{	// destroy and deallocate old array
; 1614 : 			_Destroy(this->_Myfirst(), this->_Mylast());

  000a1	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000a9	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
  000ae	48 89 44 24 30	 mov	 QWORD PTR tv150[rsp], rax
  000b3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000bb	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myfirst
  000c0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv150[rsp]
  000c5	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  000c8	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000cb	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000d3	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAXPEAUDsDevice@@0@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::_Destroy

; 1615 : 			this->_Getal().deallocate(this->_Myfirst(),

  000d8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000e0	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myfirst
  000e5	48 89 44 24 38	 mov	 QWORD PTR tv177[rsp], rax
  000ea	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000f2	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myend
  000f7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv177[rsp]
  000fc	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ff	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00102	48 2b c1	 sub	 rax, rcx
  00105	48 99		 cdq
  00107	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  0010c	48 f7 f9	 idiv	 rcx
  0010f	48 89 44 24 40	 mov	 QWORD PTR tv179[rsp], rax
  00114	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0011c	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myfirst
  00121	48 89 44 24 48	 mov	 QWORD PTR tv186[rsp], rax
  00126	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0012e	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Getal
  00133	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv179[rsp]
  00138	4c 8b c1	 mov	 r8, rcx
  0013b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv186[rsp]
  00140	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00143	48 8b c8	 mov	 rcx, rax
  00146	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@_K@Z ; std::_Wrap_alloc<std::allocator<DsDevice> >::deallocate
$LN3@Reallocate:

; 1616 : 				this->_Myend() - this->_Myfirst());
; 1617 : 			}
; 1618 : 
; 1619 : 		this->_Orphan_all();

  0014b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00153	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAXXZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Orphan_all

; 1620 : 		this->_Myend() = _Ptr + _Count;

  00158	48 6b 84 24 88
	00 00 00 38	 imul	 rax, QWORD PTR _Count$[rsp], 56 ; 00000038H
  00161	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00166	48 03 c8	 add	 rcx, rax
  00169	48 8b c1	 mov	 rax, rcx
  0016c	48 89 44 24 50	 mov	 QWORD PTR tv200[rsp], rax
  00171	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00179	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myend
  0017e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv200[rsp]
  00183	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1621 : 		this->_Mylast() = _Ptr + _Size;

  00186	48 6b 44 24 58
	38		 imul	 rax, QWORD PTR _Size$[rsp], 56 ; 00000038H
  0018c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00191	48 03 c8	 add	 rcx, rax
  00194	48 8b c1	 mov	 rax, rcx
  00197	48 89 44 24 60	 mov	 QWORD PTR tv208[rsp], rax
  0019c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001a4	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
  001a9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv208[rsp]
  001ae	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1622 : 		this->_Myfirst() = _Ptr;

  001b1	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001b9	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myfirst
  001be	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  001c3	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1623 : 		}

  001c6	48 83 c4 78	 add	 rsp, 120		; 00000078H
  001ca	c3		 ret	 0
$LN9@Reallocate:
?_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z ENDP ; std::vector<DsDevice,std::allocator<DsDevice> >::_Reallocate
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Ptr$ = 32
tv84 = 40
tv150 = 48
tv177 = 56
tv179 = 64
tv186 = 72
tv200 = 80
_Size$ = 88
tv208 = 96
$T1 = 104
this$ = 128
_Count$ = 136
?catch$0@?0??_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z@4HA PROC ; `std::vector<DsDevice,std::allocator<DsDevice> >::_Reallocate'::`1'::catch$0

; 1606 : 		_CATCH_ALL

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$?_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z$0:

; 1606 : 		_CATCH_ALL
; 1607 : 		this->_Getal().deallocate(_Ptr, _Count);

  0000d	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00014	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Getal
  00019	4c 8b 85 88 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00020	48 8b 55 20	 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00024	48 8b c8	 mov	 rcx, rax
  00027	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@_K@Z ; std::_Wrap_alloc<std::allocator<DsDevice> >::deallocate

; 1606 : 		_CATCH_ALL
; 1607 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1608 : 		_RERAISE;

  0002c	33 d2		 xor	 edx, edx
  0002e	33 c9		 xor	 ecx, ecx
  00030	e8 00 00 00 00	 call	 _CxxThrowException
  00035	90		 npad	 1

; 1606 : 		_CATCH_ALL
; 1607 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1608 : 		_RERAISE;
; 1609 : 		_CATCH_END

  00036	48 8d 05 00 00
	00 00		 lea	 rax, $LN8@catch$0
  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
  00043	cc		 int	 3
?catch$0@?0??_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z@4HA ENDP ; `std::vector<DsDevice,std::allocator<DsDevice> >::_Reallocate'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_Ptr$ = 32
tv84 = 40
tv150 = 48
tv177 = 56
tv179 = 64
tv186 = 72
tv200 = 80
_Size$ = 88
tv208 = 96
$T1 = 104
this$ = 128
_Count$ = 136
?catch$0@?0??_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z@4HA PROC ; `std::vector<DsDevice,std::allocator<DsDevice> >::_Reallocate'::`1'::catch$0

; 1606 : 		_CATCH_ALL

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$?_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z$0:

; 1607 : 		this->_Getal().deallocate(_Ptr, _Count);

  0000d	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00014	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Getal
  00019	4c 8b 85 88 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00020	48 8b 55 20	 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00024	48 8b c8	 mov	 rcx, rax
  00027	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@_K@Z ; std::_Wrap_alloc<std::allocator<DsDevice> >::deallocate

; 1608 : 		_RERAISE;

  0002c	33 d2		 xor	 edx, edx
  0002e	33 c9		 xor	 ecx, ecx
  00030	e8 00 00 00 00	 call	 _CxxThrowException
  00035	90		 npad	 1

; 1609 : 		_CATCH_END

  00036	48 8d 05 00 00
	00 00		 lea	 rax, $LN8@catch$0
  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
  00043	cc		 int	 3
?catch$0@?0??_Reallocate@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z@4HA ENDP ; `std::vector<DsDevice,std::allocator<DsDevice> >::_Reallocate'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBA_NPEBUDsDevice@@@Z
_TEXT	SEGMENT
tv82 = 32
this$ = 64
_Ptr$ = 72
?_Inside@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBA_NPEBUDsDevice@@@Z PROC ; std::vector<DsDevice,std::allocator<DsDevice> >::_Inside, COMDAT

; 1596 : 		{	// test if _Ptr points inside vector

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
  00018	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0001b	e8 00 00 00 00	 call	 ??$_Unfancy@UDsDevice@@@std@@YAPEAUDsDevice@@PEAU1@@Z ; std::_Unfancy<DsDevice>
  00020	48 39 44 24 48	 cmp	 QWORD PTR _Ptr$[rsp], rax
  00025	73 23		 jae	 SHORT $LN3@Inside
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myfirst
  00031	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00034	e8 00 00 00 00	 call	 ??$_Unfancy@UDsDevice@@@std@@YAPEAUDsDevice@@PEAU1@@Z ; std::_Unfancy<DsDevice>
  00039	48 3b 44 24 48	 cmp	 rax, QWORD PTR _Ptr$[rsp]
  0003e	77 0a		 ja	 SHORT $LN3@Inside
  00040	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
  00048	eb 08		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  0004a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
$LN4@Inside:
  00052	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv82[rsp]

; 1598 : 		}

  00057	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005b	c3		 ret	 0
?_Inside@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBA_NPEBUDsDevice@@@Z ENDP ; std::vector<DsDevice,std::allocator<DsDevice> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBA_K_K@Z
_TEXT	SEGMENT
_Capacity$ = 32
tv73 = 40
tv67 = 48
this$ = 80
_Count$ = 88
?_Grow_to@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBA_K_K@Z PROC ; std::vector<DsDevice,std::allocator<DsDevice> >::_Grow_to, COMDAT

; 1585 : 		{	// grow by 50% or at least to _Count

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1586 : 		size_type _Capacity = capacity();

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?capacity@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ ; std::vector<DsDevice,std::allocator<DsDevice> >::capacity
  00018	48 89 44 24 20	 mov	 QWORD PTR _Capacity$[rsp], rax

; 1587 : 
; 1588 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ?max_size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ ; std::vector<DsDevice,std::allocator<DsDevice> >::max_size
  00027	48 89 44 24 30	 mov	 QWORD PTR tv67[rsp], rax
  0002c	33 d2		 xor	 edx, edx
  0002e	48 8b 44 24 20	 mov	 rax, QWORD PTR _Capacity$[rsp]
  00033	b9 02 00 00 00	 mov	 ecx, 2
  00038	48 f7 f1	 div	 rcx
  0003b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv67[rsp]
  00040	48 2b c8	 sub	 rcx, rax
  00043	48 8b c1	 mov	 rax, rcx
  00046	48 3b 44 24 20	 cmp	 rax, QWORD PTR _Capacity$[rsp]
  0004b	73 0b		 jae	 SHORT $LN4@Grow_to
  0004d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv73[rsp], 0
  00056	eb 1f		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00058	33 d2		 xor	 edx, edx
  0005a	48 8b 44 24 20	 mov	 rax, QWORD PTR _Capacity$[rsp]
  0005f	b9 02 00 00 00	 mov	 ecx, 2
  00064	48 f7 f1	 div	 rcx
  00067	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Capacity$[rsp]
  0006c	48 03 c8	 add	 rcx, rax
  0006f	48 8b c1	 mov	 rax, rcx
  00072	48 89 44 24 28	 mov	 QWORD PTR tv73[rsp], rax
$LN5@Grow_to:
  00077	48 8b 44 24 28	 mov	 rax, QWORD PTR tv73[rsp]
  0007c	48 89 44 24 20	 mov	 QWORD PTR _Capacity$[rsp], rax

; 1589 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1590 : 		if (_Capacity < _Count)

  00081	48 8b 44 24 58	 mov	 rax, QWORD PTR _Count$[rsp]
  00086	48 39 44 24 20	 cmp	 QWORD PTR _Capacity$[rsp], rax
  0008b	73 0a		 jae	 SHORT $LN2@Grow_to

; 1591 : 			_Capacity = _Count;

  0008d	48 8b 44 24 58	 mov	 rax, QWORD PTR _Count$[rsp]
  00092	48 89 44 24 20	 mov	 QWORD PTR _Capacity$[rsp], rax
$LN2@Grow_to:

; 1592 : 		return (_Capacity);

  00097	48 8b 44 24 20	 mov	 rax, QWORD PTR _Capacity$[rsp]

; 1593 : 		}

  0009c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a0	c3		 ret	 0
?_Grow_to@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBA_K_K@Z ENDP ; std::vector<DsDevice,std::allocator<DsDevice> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAXPEAUDsDevice@@0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Destroy@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAXPEAUDsDevice@@0@Z PROC ; std::vector<DsDevice,std::allocator<DsDevice> >::_Destroy, COMDAT

; 1580 : 		{	// destroy [_First, _Last) using allocator

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1581 : 		_Destroy_range(_First, _Last, this->_Getal());

  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Getal
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Last$[rsp]
  00025	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _First$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@UDsDevice@@@std@@PEAUDsDevice@@@std@@YAXPEAUDsDevice@@0AEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<DsDevice>,DsDevice * __ptr64>

; 1582 : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
?_Destroy@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAXPEAUDsDevice@@0@Z ENDP ; std::vector<DsDevice,std::allocator<DsDevice> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?erase@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
tv128 = 32
tv80 = 40
this$ = 64
__$ReturnUdt$ = 72
_Where$ = 80
?erase@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@@Z PROC ; std::vector<DsDevice,std::allocator<DsDevice> >::erase, COMDAT

; 1484 : 		{	// erase element at where

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1485 : 		_Move_unchecked(_VIPTR(_Where) + 1, this->_Mylast(),

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Where$[rsp]
  00022	48 83 c1 38	 add	 rcx, 56			; 00000038H
  00026	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Where$[rsp]
  0002b	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0002e	e8 00 00 00 00	 call	 ??$_Move_unchecked@PEAUDsDevice@@PEAU1@@std@@YAPEAUDsDevice@@PEAU1@00@Z ; std::_Move_unchecked<DsDevice * __ptr64,DsDevice * __ptr64>

; 1486 : 			_VIPTR(_Where));
; 1487 : 		_Destroy(this->_Mylast() - 1, this->_Mylast());

  00033	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00038	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
  0003d	48 89 44 24 28	 mov	 QWORD PTR tv80[rsp], rax
  00042	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00047	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
  0004c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004f	48 83 e8 38	 sub	 rax, 56			; 00000038H
  00053	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv80[rsp]
  00058	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  0005b	48 8b d0	 mov	 rdx, rax
  0005e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00063	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAXPEAUDsDevice@@0@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::_Destroy

; 1488 : 		--this->_Mylast();

  00068	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0006d	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
  00072	48 89 44 24 20	 mov	 QWORD PTR tv128[rsp], rax
  00077	48 8b 44 24 20	 mov	 rax, QWORD PTR tv128[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 83 e8 38	 sub	 rax, 56			; 00000038H
  00083	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv128[rsp]
  00088	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1489 : 		return (_Make_iter(_Where));

  0008b	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Where$[rsp]
  00090	48 8b 54 24 48	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  00095	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0009a	e8 00 00 00 00	 call	 ?_Make_iter@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::_Make_iter
  0009f	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1490 : 		}

  000a4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a8	c3		 ret	 0
?erase@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@@Z ENDP ; std::vector<DsDevice,std::allocator<DsDevice> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAXAEBUDsDevice@@@Z
_TEXT	SEGMENT
tv176 = 32
tv231 = 40
tv71 = 48
tv88 = 56
tv136 = 64
_Idx$1 = 72
tv159 = 80
tv161 = 88
tv183 = 96
tv199 = 104
tv216 = 112
this$ = 144
_Val$ = 152
?push_back@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAXAEBUDsDevice@@@Z PROC ; std::vector<DsDevice,std::allocator<DsDevice> >::push_back, COMDAT

; 1276 : 		{	// insert element at end

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1277 : 		if (_Inside(_STD addressof(_Val)))

  00011	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Val$[rsp]
  00019	e8 00 00 00 00	 call	 ??$addressof@$$CBUDsDevice@@@std@@YAPEBUDsDevice@@AEBU1@@Z ; std::addressof<DsDevice const >
  0001e	48 8b d0	 mov	 rdx, rax
  00021	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00029	e8 00 00 00 00	 call	 ?_Inside@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBA_NPEBUDsDevice@@@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::_Inside
  0002e	0f b6 c0	 movzx	 eax, al
  00031	85 c0		 test	 eax, eax
  00033	0f 84 3e 01 00
	00		 je	 $LN2@push_back

; 1278 : 			{	// push back an element
; 1279 : 			size_type _Idx = _STD addressof(_Val) - _Unfancy(this->_Myfirst());

  00039	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Val$[rsp]
  00041	e8 00 00 00 00	 call	 ??$addressof@$$CBUDsDevice@@@std@@YAPEBUDsDevice@@AEBU1@@Z ; std::addressof<DsDevice const >
  00046	48 89 44 24 30	 mov	 QWORD PTR tv71[rsp], rax
  0004b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00053	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myfirst
  00058	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0005b	e8 00 00 00 00	 call	 ??$_Unfancy@UDsDevice@@@std@@YAPEAUDsDevice@@PEAU1@@Z ; std::_Unfancy<DsDevice>
  00060	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv71[rsp]
  00065	48 2b c8	 sub	 rcx, rax
  00068	48 8b c1	 mov	 rax, rcx
  0006b	48 99		 cdq
  0006d	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00072	48 f7 f9	 idiv	 rcx
  00075	48 89 44 24 48	 mov	 QWORD PTR _Idx$1[rsp], rax

; 1280 : 			if (this->_Mylast() == this->_Myend())

  0007a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00082	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
  00087	48 89 44 24 38	 mov	 QWORD PTR tv88[rsp], rax
  0008c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00094	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myend
  00099	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv88[rsp]
  000a1	48 39 01	 cmp	 QWORD PTR [rcx], rax
  000a4	75 12		 jne	 SHORT $LN4@push_back

; 1281 : 				_Reserve(1);

  000a6	ba 01 00 00 00	 mov	 edx, 1
  000ab	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000b3	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::_Reserve
$LN4@push_back:

; 1282 : 			_Orphan_range(this->_Mylast(), this->_Mylast());

  000b8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000c0	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
  000c5	48 89 44 24 40	 mov	 QWORD PTR tv136[rsp], rax
  000ca	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000d2	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
  000d7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv136[rsp]
  000dc	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  000df	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000e2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000ea	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBAXPEAUDsDevice@@0@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::_Orphan_range

; 1283 : 			this->_Getal().construct(_Unfancy(this->_Mylast()),

  000ef	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000f7	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myfirst
  000fc	48 6b 4c 24 48
	38		 imul	 rcx, QWORD PTR _Idx$1[rsp], 56 ; 00000038H
  00102	48 03 08	 add	 rcx, QWORD PTR [rax]
  00105	48 8b c1	 mov	 rax, rcx
  00108	48 89 44 24 50	 mov	 QWORD PTR tv159[rsp], rax
  0010d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00115	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
  0011a	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0011d	e8 00 00 00 00	 call	 ??$_Unfancy@UDsDevice@@@std@@YAPEAUDsDevice@@PEAU1@@Z ; std::_Unfancy<DsDevice>
  00122	48 89 44 24 58	 mov	 QWORD PTR tv161[rsp], rax
  00127	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0012f	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Getal
  00134	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv159[rsp]
  00139	4c 8b c1	 mov	 r8, rcx
  0013c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv161[rsp]
  00141	48 8b d1	 mov	 rdx, rcx
  00144	48 8b c8	 mov	 rcx, rax
  00147	e8 00 00 00 00	 call	 ??$construct@UDsDevice@@AEAU1@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@AEAU2@@Z ; std::_Wrap_alloc<std::allocator<DsDevice> >::construct<DsDevice,DsDevice & __ptr64>

; 1284 : 				this->_Myfirst()[_Idx]);
; 1285 : 			++this->_Mylast();

  0014c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00154	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
  00159	48 89 44 24 20	 mov	 QWORD PTR tv176[rsp], rax
  0015e	48 8b 44 24 20	 mov	 rax, QWORD PTR tv176[rsp]
  00163	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00166	48 83 c0 38	 add	 rax, 56			; 00000038H
  0016a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv176[rsp]
  0016f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1286 : 			}
; 1287 : 		else

  00172	e9 da 00 00 00	 jmp	 $LN3@push_back
$LN2@push_back:

; 1288 : 			{	// push back a non-element
; 1289 : 			if (this->_Mylast() == this->_Myend())

  00177	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0017f	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
  00184	48 89 44 24 60	 mov	 QWORD PTR tv183[rsp], rax
  00189	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00191	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myend
  00196	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00199	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv183[rsp]
  0019e	48 39 01	 cmp	 QWORD PTR [rcx], rax
  001a1	75 12		 jne	 SHORT $LN5@push_back

; 1290 : 				_Reserve(1);

  001a3	ba 01 00 00 00	 mov	 edx, 1
  001a8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001b0	e8 00 00 00 00	 call	 ?_Reserve@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAX_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::_Reserve
$LN5@push_back:

; 1291 : 			_Orphan_range(this->_Mylast(), this->_Mylast());

  001b5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001bd	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
  001c2	48 89 44 24 68	 mov	 QWORD PTR tv199[rsp], rax
  001c7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001cf	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
  001d4	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv199[rsp]
  001d9	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  001dc	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  001df	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001e7	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEBAXPEAUDsDevice@@0@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::_Orphan_range

; 1292 : 			this->_Getal().construct(_Unfancy(this->_Mylast()),

  001ec	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001f4	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
  001f9	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  001fc	e8 00 00 00 00	 call	 ??$_Unfancy@UDsDevice@@@std@@YAPEAUDsDevice@@PEAU1@@Z ; std::_Unfancy<DsDevice>
  00201	48 89 44 24 70	 mov	 QWORD PTR tv216[rsp], rax
  00206	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0020e	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Getal
  00213	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR _Val$[rsp]
  0021b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv216[rsp]
  00220	48 8b d1	 mov	 rdx, rcx
  00223	48 8b c8	 mov	 rcx, rax
  00226	e8 00 00 00 00	 call	 ??$construct@UDsDevice@@AEBU1@@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@AEBU2@@Z ; std::_Wrap_alloc<std::allocator<DsDevice> >::construct<DsDevice,DsDevice const & __ptr64>

; 1293 : 				_Val);
; 1294 : 			++this->_Mylast();

  0022b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00233	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
  00238	48 89 44 24 28	 mov	 QWORD PTR tv231[rsp], rax
  0023d	48 8b 44 24 28	 mov	 rax, QWORD PTR tv231[rsp]
  00242	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00245	48 83 c0 38	 add	 rax, 56			; 00000038H
  00249	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv231[rsp]
  0024e	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN3@push_back:

; 1295 : 			}
; 1296 : 		}

  00251	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00258	c3		 ret	 0
?push_back@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAXAEBUDsDevice@@@Z ENDP ; std::vector<DsDevice,std::allocator<DsDevice> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Pos$ = 56
??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z PROC ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[], COMDAT

; 1230 : 		{	// subscript mutable sequence

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1231 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1232 : 		if (size() <= _Pos)
; 1233 : 			{	// report error
; 1234 : 			_DEBUG_ERROR("vector subscript out of range");
; 1235 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1236 : 			}
; 1237 : 
; 1238 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1239 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1240 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1241 : 
; 1242 : 		return (*(this->_Myfirst() + _Pos));

  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myfirst
  00018	48 6b 4c 24 38
	38		 imul	 rcx, QWORD PTR _Pos$[rsp], 56 ; 00000038H
  0001e	48 03 08	 add	 rcx, QWORD PTR [rax]
  00021	48 8b c1	 mov	 rax, rcx

; 1243 : 		}

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ENDP ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
?max_size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ PROC ; std::vector<DsDevice,std::allocator<DsDevice> >::max_size, COMDAT

; 1184 : 		{	// return maximum possible length of sequence

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1185 : 		return (this->_Getal().max_size());

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Getal
  00013	0f b6 54 24 20	 movzx	 edx, BYTE PTR $T1[rsp]
  00018	48 8b c8	 mov	 rcx, rax
  0001b	e8 00 00 00 00	 call	 ?max_size@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<DsDevice> >::max_size

; 1186 : 		}

  00020	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00024	c3		 ret	 0
?max_size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<DsDevice,std::allocator<DsDevice> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
tv69 = 32
this$ = 64
?size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ PROC ; std::vector<DsDevice,std::allocator<DsDevice> >::size, COMDAT

; 1179 : 		{	// return length of sequence

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
  00013	48 89 44 24 20	 mov	 QWORD PTR tv69[rsp], rax
  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myfirst
  00022	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00025	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv69[rsp]
  0002a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0002d	48 2b c8	 sub	 rcx, rax
  00030	48 8b c1	 mov	 rax, rcx
  00033	48 99		 cdq
  00035	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  0003a	48 f7 f9	 idiv	 rcx

; 1181 : 		}

  0003d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00041	c3		 ret	 0
?size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<DsDevice,std::allocator<DsDevice> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Make_iter@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
_Where$ = 64
?_Make_iter@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@@Z PROC ; std::vector<DsDevice,std::allocator<DsDevice> >::_Make_iter, COMDAT

; 1077 : 		{	// make iterator from const_iterator

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1078 : 		return (iterator(_Where._Ptr, &this->_Get_data()));

  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Get_data
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Where$[rsp]
  00025	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0002a	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAA@PEAUDsDevice@@PEBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >
  0002f	48 8b 44 24 38	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1079 : 		}

  00034	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00038	c3		 ret	 0
?_Make_iter@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@@Z ENDP ; std::vector<DsDevice,std::allocator<DsDevice> >::_Make_iter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?begin@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
tv74 = 32
$T1 = 40
this$ = 64
__$ReturnUdt$ = 72
?begin@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@XZ PROC ; std::vector<DsDevice,std::allocator<DsDevice> >::begin, COMDAT

; 1057 : 		{	// return iterator for beginning of mutable sequence

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 c7 44 24 28
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 1058 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));

  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001c	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Get_data
  00021	90		 npad	 1
  00022	48 89 44 24 20	 mov	 QWORD PTR tv74[rsp], rax
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myfirst
  00031	90		 npad	 1
  00032	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv74[rsp]
  00037	4c 8b c1	 mov	 r8, rcx
  0003a	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0003d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00042	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEAA@PEAUDsDevice@@PEBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >
  00047	90		 npad	 1
  00048	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1059 : 		}

  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
?begin@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@XZ ENDP ; std::vector<DsDevice,std::allocator<DsDevice> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
tv69 = 32
this$ = 64
?_Unused_capacity@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ PROC ; std::vector<DsDevice,std::allocator<DsDevice> >::_Unused_capacity, COMDAT

; 1047 : 		{	// micro-optimization for capacity() - size()

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1048 : 		return (this->_Myend() - this->_Mylast());

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myend
  00013	48 89 44 24 20	 mov	 QWORD PTR tv69[rsp], rax
  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
  00022	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00025	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv69[rsp]
  0002a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0002d	48 2b c8	 sub	 rcx, rax
  00030	48 8b c1	 mov	 rax, rcx
  00033	48 99		 cdq
  00035	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  0003a	48 f7 f9	 idiv	 rcx

; 1049 : 		}

  0003d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00041	c3		 ret	 0
?_Unused_capacity@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<DsDevice,std::allocator<DsDevice> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
tv69 = 32
this$ = 64
?capacity@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ PROC ; std::vector<DsDevice,std::allocator<DsDevice> >::capacity, COMDAT

; 1042 : 		{	// return current length of allocated storage

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1043 : 		return (this->_Myend() - this->_Myfirst());

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myend
  00013	48 89 44 24 20	 mov	 QWORD PTR tv69[rsp], rax
  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myfirst
  00022	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00025	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv69[rsp]
  0002a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0002d	48 2b c8	 sub	 rcx, rax
  00030	48 8b c1	 mov	 rax, rcx
  00033	48 99		 cdq
  00035	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  0003a	48 f7 f9	 idiv	 rcx

; 1044 : 		}

  0003d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00041	c3		 ret	 0
?capacity@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ ENDP ; std::vector<DsDevice,std::allocator<DsDevice> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ PROC ; std::vector<DsDevice,std::allocator<DsDevice> >::~vector<DsDevice,std::allocator<DsDevice> >, COMDAT

; 975  : 		{	// destroy the object

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 976  : 		_Tidy();

  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00017	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@IEAAXXZ ; std::vector<DsDevice,std::allocator<DsDevice> >::_Tidy
  0001c	90		 npad	 1

; 977  : 		}

  0001d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00021	c3		 ret	 0
??1?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ ENDP ; std::vector<DsDevice,std::allocator<DsDevice> >::~vector<DsDevice,std::allocator<DsDevice> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??0?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ PROC ; std::vector<DsDevice,std::allocator<DsDevice> >::vector<DsDevice,std::allocator<DsDevice> >, COMDAT

; 707  : 		{	// construct empty vector

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 706  : 		: _Mybase()

  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAA@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >
  0001c	90		 npad	 1

; 708  : 		}

  0001d	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00026	c3		 ret	 0
??0?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ ENDP ; std::vector<DsDevice,std::allocator<DsDevice> >::vector<DsDevice,std::allocator<DsDevice> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<DsDevice> >,std::_Vector_val<std::_Simple_types<DsDevice> >,1>::_Get_second, COMDAT

; 319  : 		{	// return const reference to second

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 320  : 		return (_Myval2);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 321  : 		}

  0000a	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<DsDevice> >,std::_Vector_val<std::_Simple_types<DsDevice> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<DsDevice> >,std::_Vector_val<std::_Simple_types<DsDevice> >,1>::_Get_second, COMDAT

; 314  : 		{	// return reference to second

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 315  : 		return (_Myval2);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 316  : 		}

  0000a	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<DsDevice> >,std::_Vector_val<std::_Simple_types<DsDevice> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<DsDevice> >,std::_Vector_val<std::_Simple_types<DsDevice> >,1>::_Get_first, COMDAT

; 299  : 		{	// return const reference to first

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 300  : 		return (*this);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 301  : 		}

  0000a	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<DsDevice> >,std::_Vector_val<std::_Simple_types<DsDevice> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<DsDevice> >,std::_Vector_val<std::_Simple_types<DsDevice> >,1>::_Get_first, COMDAT

; 294  : 		{	// return reference to first

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 295  : 		return (*this);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 296  : 		}

  0000a	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<DsDevice> >,std::_Vector_val<std::_Simple_types<DsDevice> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<DsDevice> >::_Vector_val<std::_Simple_types<DsDevice> >, COMDAT

; 488  : 		{	// initialize values

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 485  : 		: _Myfirst(),

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 486  : 		_Mylast(),

  00011	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00016	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 487  : 		_Myend()

  0001e	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 489  : 		}

  0002b	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00030	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<DsDevice> >::_Vector_val<std::_Simple_types<DsDevice> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ
_TEXT	SEGMENT
this$ = 48
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myend, COMDAT

; 667  : 		{	// return const reference to _Myend

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 668  : 		return (_Get_data()._Myend);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Get_data
  00013	48 83 c0 10	 add	 rax, 16

; 669  : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ
_TEXT	SEGMENT
this$ = 48
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myend, COMDAT

; 662  : 		{	// return reference to _Myend

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 663  : 		return (_Get_data()._Myend);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Get_data
  00013	48 83 c0 10	 add	 rax, 16

; 664  : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ
_TEXT	SEGMENT
this$ = 48
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast, COMDAT

; 657  : 		{	// return const reference to _Mylast

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 658  : 		return (_Get_data()._Mylast);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Get_data
  00013	48 83 c0 08	 add	 rax, 8

; 659  : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ
_TEXT	SEGMENT
this$ = 48
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast, COMDAT

; 652  : 		{	// return reference to _Mylast

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 653  : 		return (_Get_data()._Mylast);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Get_data
  00013	48 83 c0 08	 add	 rax, 8

; 654  : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ
_TEXT	SEGMENT
this$ = 48
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myfirst, COMDAT

; 647  : 		{	// return const reference to _Myfirst

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 648  : 		return (_Get_data()._Myfirst);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Get_data

; 649  : 		}

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBQEAUDsDevice@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ
_TEXT	SEGMENT
this$ = 48
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myfirst, COMDAT

; 642  : 		{	// return reference to _Myfirst

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 643  : 		return (_Get_data()._Myfirst);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Get_data

; 644  : 		}

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAPEAUDsDevice@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Get_data, COMDAT

; 637  : 		{	// return const reference to _Vector_val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 638  : 		return (_Mypair._Get_second());

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<DsDevice> >,std::_Vector_val<std::_Simple_types<DsDevice> >,1>::_Get_second

; 639  : 		}

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Get_data, COMDAT

; 632  : 		{	// return reference to _Vector_val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 633  : 		return (_Mypair._Get_second());

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<DsDevice> >,std::_Vector_val<std::_Simple_types<DsDevice> >,1>::_Get_second

; 634  : 		}

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Getal, COMDAT

; 627  : 		{	// return const reference to allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 628  : 		return (_Mypair._Get_first());

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<DsDevice> >,std::_Vector_val<std::_Simple_types<DsDevice> >,1>::_Get_first

; 629  : 		}

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Getal, COMDAT

; 622  : 		{	// return reference to allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 623  : 		return (_Mypair._Get_first());

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<DsDevice> >,std::_Vector_val<std::_Simple_types<DsDevice> >,1>::_Get_first

; 624  : 		}

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Orphan_all, COMDAT

; 612  : 		{	// orphan all iterators

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 613  : 		_Get_data()._Orphan_all();

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Get_data
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 614  : 		}

  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAAXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??0?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >, COMDAT

; 520  : 		{	// default construct allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 519  : 		: _Mypair(_Zero_then_variadic_args_t())

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	0f b6 54 24 20	 movzx	 edx, BYTE PTR $T1[rsp]
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<DsDevice> >,std::_Vector_val<std::_Simple_types<DsDevice> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<DsDevice> >,std::_Vector_val<std::_Simple_types<DsDevice> >,1><>

; 521  : 		}

  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00020	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00024	c3		 ret	 0
??0?$_Vector_alloc@U?$_Vec_base_types@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >::_Vector_alloc<std::_Vec_base_types<DsDevice,std::allocator<DsDevice> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KU_Nil@2@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
?max_size@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<DsDevice> >::max_size, COMDAT

; 1007 : 		{	// get maximum size

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1008 : 		return (_Mytraits::max_size(*this));

  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ?max_size@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SA_KAEBV?$allocator@UDsDevice@@@2@@Z ; std::allocator_traits<std::allocator<DsDevice> >::max_size

; 1009 : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<DsDevice> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@_K@Z PROC ; std::_Wrap_alloc<std::allocator<DsDevice> >::deallocate, COMDAT

; 986  : 		{	// deallocate object at _Ptr, ignore size

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 987  : 		_Mybase::deallocate(_Ptr, _Count);

  00013	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Count$[rsp]
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ?deallocate@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@_K@Z ; std::allocator<DsDevice>::deallocate

; 988  : 		}

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
?deallocate@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAXPEAUDsDevice@@_K@Z ENDP ; std::_Wrap_alloc<std::allocator<DsDevice> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAPEAUDsDevice@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAPEAUDsDevice@@_K@Z PROC ; std::_Wrap_alloc<std::allocator<DsDevice> >::allocate, COMDAT

; 975  : 		{	// allocate array of _Count elements

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 976  : 		return (_Mybase::allocate(_Count));

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Count$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ?allocate@?$allocator@UDsDevice@@@std@@QEAAPEAUDsDevice@@_K@Z ; std::allocator<DsDevice>::allocate

; 977  : 		}

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
?allocate@?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAAPEAUDsDevice@@_K@Z ENDP ; std::_Wrap_alloc<std::allocator<DsDevice> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ PROC ; std::_Wrap_alloc<std::allocator<DsDevice> >::_Wrap_alloc<std::allocator<DsDevice> >, COMDAT

; 936  : 		{	// construct default allocator (do nothing)

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 935  : 		: _Mybase()

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??0?$allocator@UDsDevice@@@std@@QEAA@XZ ; std::allocator<DsDevice>::allocator<DsDevice>

; 937  : 		}

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ ENDP ; std::_Wrap_alloc<std::allocator<DsDevice> >::_Wrap_alloc<std::allocator<DsDevice> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SA_KAEBV?$allocator@UDsDevice@@@2@@Z
_TEXT	SEGMENT
_Al$ = 48
?max_size@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SA_KAEBV?$allocator@UDsDevice@@@2@@Z PROC ; std::allocator_traits<std::allocator<DsDevice> >::max_size, COMDAT

; 868  : 		{	// get maximum size

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 869  : 		return (_Al.max_size());

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  0000e	e8 00 00 00 00	 call	 ?max_size@?$allocator@UDsDevice@@@std@@QEBA_KXZ ; std::allocator<DsDevice>::max_size

; 870  : 		}

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@UDsDevice@@@std@@@std@@SA_KAEBV?$allocator@UDsDevice@@@2@@Z ENDP ; std::allocator_traits<std::allocator<DsDevice> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@UDsDevice@@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 8
?max_size@?$allocator@UDsDevice@@@std@@QEBA_KXZ PROC	; std::allocator<DsDevice>::max_size, COMDAT

; 748  : 		{	// estimate maximum array size

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 749  : 		return ((size_t)(-1) / sizeof (_Ty));

  00005	48 b8 92 24 49
	92 24 49 92 04	 mov	 rax, 329406144173384850	; 0492492492492492H

; 750  : 		}

  0000f	c3		 ret	 0
?max_size@?$allocator@UDsDevice@@@std@@QEBA_KXZ ENDP	; std::allocator<DsDevice>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@UDsDevice@@@std@@QEAAPEAUDsDevice@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@UDsDevice@@@std@@QEAAPEAUDsDevice@@_K@Z PROC ; std::allocator<DsDevice>::allocate, COMDAT

; 724  : 		{	// allocate array of _Count elements

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

  0000e	41 b0 01	 mov	 r8b, 1
  00011	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  00016	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Count$[rsp]
  0001b	e8 00 00 00 00	 call	 ?_Allocate@std@@YAPEAX_K0_N@Z ; std::_Allocate

; 726  : 		}

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
?allocate@?$allocator@UDsDevice@@@std@@QEAAPEAUDsDevice@@_K@Z ENDP ; std::allocator<DsDevice>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@_K@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@_K@Z PROC ; std::allocator<DsDevice>::deallocate, COMDAT

; 719  : 		{	// deallocate object at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00013	41 b8 38 00 00
	00		 mov	 r8d, 56			; 00000038H
  00019	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Count$[rsp]
  0001e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00023	e8 00 00 00 00	 call	 ?_Deallocate@std@@YAXPEAX_K1@Z ; std::_Deallocate

; 721  : 		}

  00028	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002c	c3		 ret	 0
?deallocate@?$allocator@UDsDevice@@@std@@QEAAXPEAUDsDevice@@_K@Z ENDP ; std::allocator<DsDevice>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@UDsDevice@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$allocator@UDsDevice@@@std@@QEAA@XZ PROC		; std::allocator<DsDevice>::allocator<DsDevice>, COMDAT

; 699  : 	allocator() _THROW0()

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	c3		 ret	 0
??0?$allocator@UDsDevice@@@std@@QEAA@XZ ENDP		; std::allocator<DsDevice>::allocator<DsDevice>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
result$ = 64
bufferBytes$ = 68
handle$ = 72
safeReadPointer$ = 80
nextReadPointer$1 = 84
nextWritePointer$ = 88
bufferSize1$ = 92
bufferSize2$ = 96
safeWritePointer$ = 100
leadPointer$2 = 104
dsBufferSize$3 = 108
buffer$ = 112
status$4 = 120
i$5 = 124
endRead$6 = 128
dsBufferSize$7 = 132
j$8 = 136
endWrite$9 = 140
buffer2$ = 144
dsBuffer$10 = 152
currentWritePointer$ = 160
dsBuffer$11 = 168
buffer1$ = 176
cbReturnValue$12 = 184
adjustment$13 = 188
millis$14 = 192
millis$15 = 200
dsWriteBuffer$16 = 208
dsCaptureBuffer$17 = 216
currentReadPointer$ = 224
startSafeWritePointer$18 = 228
startSafeReadPointer$19 = 232
info$ = 240
dsWriteBuffer$20 = 248
streamTime$21 = 256
callback$22 = 264
tv308 = 272
tv1667 = 280
tv364 = 288
tv1669 = 296
tv421 = 304
tv1671 = 312
tv477 = 320
tv1673 = 328
tv573 = 336
tv1675 = 344
tv849 = 352
tv1677 = 360
tv1017 = 368
tv1679 = 376
tv1085 = 384
tv1681 = 392
tv1260 = 400
tv1683 = 408
tv1394 = 416
tv1685 = 424
tv1457 = 432
tv1687 = 440
tv1545 = 448
tv1689 = 456
$T23 = 464
$T24 = 496
$T25 = 528
$T26 = 560
$T27 = 592
$T28 = 624
$T29 = 656
$T30 = 688
$T31 = 720
$T32 = 752
$T33 = 784
$T34 = 816
__$ArrayPad$ = 848
this$ = 880
?callbackEvent@RtApiDs@@QEAAXXZ PROC			; RtApiDs::callbackEvent

; 6171 : {

$LN98:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 68 03
	00 00		 sub	 rsp, 872		; 00000368H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 50
	03 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 6172 :   if ( stream_.state == STREAM_STOPPED || stream_.state == STREAM_STOPPING ) {

  0001e	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00026	83 b8 2c 01 00
	00 00		 cmp	 DWORD PTR [rax+300], 0
  0002d	74 11		 je	 SHORT $LN17@callbackEv
  0002f	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00037	83 b8 2c 01 00
	00 01		 cmp	 DWORD PTR [rax+300], 1
  0003e	75 10		 jne	 SHORT $LN16@callbackEv
$LN17@callbackEv:

; 6173 :     Sleep( 50 ); // sleep 50 milliseconds

  00040	b9 32 00 00 00	 mov	 ecx, 50			; 00000032H
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep

; 6174 :     return;

  0004b	e9 f7 1b 00 00	 jmp	 $LN1@callbackEv
$LN16@callbackEv:

; 6175 :   }
; 6176 : 
; 6177 :   if ( stream_.state == STREAM_CLOSED ) {

  00050	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00058	83 b8 2c 01 00
	00 ce		 cmp	 DWORD PTR [rax+300], -50 ; ffffffffffffffceH
  0005f	75 31		 jne	 SHORT $LN18@callbackEv

; 6178 :     errorText_ = "RtApiDs::callbackEvent(): the stream is closed ... this shouldn't happen!";

  00061	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00069	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129381
  00076	48 8b c8	 mov	 rcx, rax
  00079	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 6179 :     error( RtAudioError::WARNING );

  0007e	33 d2		 xor	 edx, edx
  00080	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00088	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 6180 :     return;

  0008d	e9 b5 1b 00 00	 jmp	 $LN1@callbackEv
$LN18@callbackEv:

; 6181 :   }
; 6182 : 
; 6183 :   CallbackInfo *info = (CallbackInfo *) &stream_.callbackInfo;

  00092	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0009a	48 05 b0 01 00
	00		 add	 rax, 432		; 000001b0H
  000a0	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR info$[rsp], rax

; 6184 :   DsHandle *handle = (DsHandle *) stream_.apiHandle;

  000a8	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000b0	48 8b 80 20 01
	00 00		 mov	 rax, QWORD PTR [rax+288]
  000b7	48 89 44 24 48	 mov	 QWORD PTR handle$[rsp], rax

; 6185 : 
; 6186 :   // Check if we were draining the stream and signal is finished.
; 6187 :   if ( handle->drainCounter > stream_.nBuffers + 2 ) {

  000bc	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000c4	8b 80 58 01 00
	00		 mov	 eax, DWORD PTR [rax+344]
  000ca	83 c0 02	 add	 eax, 2
  000cd	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  000d2	39 01		 cmp	 DWORD PTR [rcx], eax
  000d4	76 4b		 jbe	 SHORT $LN19@callbackEv

; 6188 : 
; 6189 :     stream_.state = STREAM_STOPPING;

  000d6	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000de	c7 80 2c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+300], 1

; 6190 :     if ( handle->internalDrain == false )

  000e8	48 8b 44 24 48	 mov	 rax, QWORD PTR handle$[rsp]
  000ed	0f b6 40 04	 movzx	 eax, BYTE PTR [rax+4]
  000f1	85 c0		 test	 eax, eax
  000f3	75 11		 jne	 SHORT $LN20@callbackEv

; 6191 :       SetEvent( handle->condition );

  000f5	48 8b 44 24 48	 mov	 rax, QWORD PTR handle$[rsp]
  000fa	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  000fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEvent

; 6192 :     else

  00104	eb 16		 jmp	 SHORT $LN21@callbackEv
$LN20@callbackEv:

; 6193 :       stopStream();

  00106	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0010e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00111	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00119	ff 50 40	 call	 QWORD PTR [rax+64]
$LN21@callbackEv:

; 6194 :     return;

  0011c	e9 26 1b 00 00	 jmp	 $LN1@callbackEv
$LN19@callbackEv:

; 6195 :   }
; 6196 : 
; 6197 :   // Invoke user callback to get fresh output data UNLESS we are
; 6198 :   // draining stream.
; 6199 :   if ( handle->drainCounter == 0 ) {

  00121	48 8b 44 24 48	 mov	 rax, QWORD PTR handle$[rsp]
  00126	83 38 00	 cmp	 DWORD PTR [rax], 0
  00129	0f 85 9c 01 00
	00		 jne	 $LN22@callbackEv

; 6200 :     RtAudioCallback callback = (RtAudioCallback) info->callback;

  0012f	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00137	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0013b	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR callback$22[rsp], rax

; 6201 :     double streamTime = getStreamTime();

  00143	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0014b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0014e	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00156	ff 50 50	 call	 QWORD PTR [rax+80]
  00159	f2 0f 11 84 24
	00 01 00 00	 movsd	 QWORD PTR streamTime$21[rsp], xmm0

; 6202 :     RtAudioStreamStatus status = 0;

  00162	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR status$4[rsp], 0

; 6203 :     if ( stream_.mode != INPUT && handle->xrun[0] == true ) {

  0016a	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00172	83 b8 28 01 00
	00 01		 cmp	 DWORD PTR [rax+296], 1
  00179	74 36		 je	 SHORT $LN23@callbackEv
  0017b	b8 01 00 00 00	 mov	 eax, 1
  00180	48 6b c0 00	 imul	 rax, rax, 0
  00184	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  00189	0f b6 44 01 28	 movzx	 eax, BYTE PTR [rcx+rax+40]
  0018e	83 f8 01	 cmp	 eax, 1
  00191	75 1e		 jne	 SHORT $LN23@callbackEv

; 6204 :       status |= RTAUDIO_OUTPUT_UNDERFLOW;

  00193	8b 44 24 78	 mov	 eax, DWORD PTR status$4[rsp]
  00197	83 c8 02	 or	 eax, 2
  0019a	89 44 24 78	 mov	 DWORD PTR status$4[rsp], eax

; 6205 :       handle->xrun[0] = false;

  0019e	b8 01 00 00 00	 mov	 eax, 1
  001a3	48 6b c0 00	 imul	 rax, rax, 0
  001a7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  001ac	c6 44 01 28 00	 mov	 BYTE PTR [rcx+rax+40], 0
$LN23@callbackEv:

; 6206 :     }
; 6207 :     if ( stream_.mode != OUTPUT && handle->xrun[1] == true ) {

  001b1	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001b9	83 b8 28 01 00
	00 00		 cmp	 DWORD PTR [rax+296], 0
  001c0	74 36		 je	 SHORT $LN24@callbackEv
  001c2	b8 01 00 00 00	 mov	 eax, 1
  001c7	48 6b c0 01	 imul	 rax, rax, 1
  001cb	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  001d0	0f b6 44 01 28	 movzx	 eax, BYTE PTR [rcx+rax+40]
  001d5	83 f8 01	 cmp	 eax, 1
  001d8	75 1e		 jne	 SHORT $LN24@callbackEv

; 6208 :       status |= RTAUDIO_INPUT_OVERFLOW;

  001da	8b 44 24 78	 mov	 eax, DWORD PTR status$4[rsp]
  001de	83 c8 01	 or	 eax, 1
  001e1	89 44 24 78	 mov	 DWORD PTR status$4[rsp], eax

; 6209 :       handle->xrun[1] = false;

  001e5	b8 01 00 00 00	 mov	 eax, 1
  001ea	48 6b c0 01	 imul	 rax, rax, 1
  001ee	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  001f3	c6 44 01 28 00	 mov	 BYTE PTR [rcx+rax+40], 0
$LN24@callbackEv:

; 6210 :     }
; 6211 :     int cbReturnValue = callback( stream_.userBuffer[0], stream_.userBuffer[1],

  001f8	b8 08 00 00 00	 mov	 eax, 8
  001fd	48 6b c0 01	 imul	 rax, rax, 1
  00201	b9 08 00 00 00	 mov	 ecx, 8
  00206	48 6b c9 00	 imul	 rcx, rcx, 0
  0020a	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR info$[rsp]
  00212	48 8b 52 18	 mov	 rdx, QWORD PTR [rdx+24]
  00216	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  0021b	8b 54 24 78	 mov	 edx, DWORD PTR status$4[rsp]
  0021f	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  00223	f2 0f 10 9c 24
	00 01 00 00	 movsd	 xmm3, QWORD PTR streamTime$21[rsp]
  0022c	48 8b 94 24 70
	03 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  00234	44 8b 82 54 01
	00 00		 mov	 r8d, DWORD PTR [rdx+340]
  0023b	48 8b 94 24 70
	03 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  00243	48 8b 94 02 30
	01 00 00	 mov	 rdx, QWORD PTR [rdx+rax+304]
  0024b	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00253	48 8b 8c 08 30
	01 00 00	 mov	 rcx, QWORD PTR [rax+rcx+304]
  0025b	ff 94 24 08 01
	00 00		 call	 QWORD PTR callback$22[rsp]
  00262	89 84 24 b8 00
	00 00		 mov	 DWORD PTR cbReturnValue$12[rsp], eax

; 6212 :                                   stream_.bufferSize, streamTime, status, info->userData );
; 6213 :     if ( cbReturnValue == 2 ) {

  00269	83 bc 24 b8 00
	00 00 02	 cmp	 DWORD PTR cbReturnValue$12[rsp], 2
  00271	75 3a		 jne	 SHORT $LN25@callbackEv

; 6214 :       stream_.state = STREAM_STOPPING;

  00273	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0027b	c7 80 2c 01 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+300], 1

; 6215 :       handle->drainCounter = 2;

  00285	48 8b 44 24 48	 mov	 rax, QWORD PTR handle$[rsp]
  0028a	c7 00 02 00 00
	00		 mov	 DWORD PTR [rax], 2

; 6216 :       abortStream();

  00290	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00298	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0029b	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  002a3	ff 50 48	 call	 QWORD PTR [rax+72]

; 6217 :       return;

  002a6	e9 9c 19 00 00	 jmp	 $LN1@callbackEv
  002ab	eb 1e		 jmp	 SHORT $LN22@callbackEv
$LN25@callbackEv:

; 6218 :     }
; 6219 :     else if ( cbReturnValue == 1 ) {

  002ad	83 bc 24 b8 00
	00 00 01	 cmp	 DWORD PTR cbReturnValue$12[rsp], 1
  002b5	75 14		 jne	 SHORT $LN22@callbackEv

; 6220 :       handle->drainCounter = 1;

  002b7	48 8b 44 24 48	 mov	 rax, QWORD PTR handle$[rsp]
  002bc	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 6221 :       handle->internalDrain = true;

  002c2	48 8b 44 24 48	 mov	 rax, QWORD PTR handle$[rsp]
  002c7	c6 40 04 01	 mov	 BYTE PTR [rax+4], 1
$LN22@callbackEv:

; 6222 :     }
; 6223 :   }
; 6224 : 
; 6225 :   HRESULT result;
; 6226 :   DWORD currentWritePointer, safeWritePointer;
; 6227 :   DWORD currentReadPointer, safeReadPointer;
; 6228 :   UINT nextWritePointer;
; 6229 : 
; 6230 :   LPVOID buffer1 = NULL;

  002cb	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR buffer1$[rsp], 0

; 6231 :   LPVOID buffer2 = NULL;

  002d7	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR buffer2$[rsp], 0

; 6232 :   DWORD bufferSize1 = 0;

  002e3	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR bufferSize1$[rsp], 0

; 6233 :   DWORD bufferSize2 = 0;

  002eb	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR bufferSize2$[rsp], 0

; 6234 : 
; 6235 :   char *buffer;
; 6236 :   long bufferBytes;
; 6237 : 
; 6238 :   MUTEX_LOCK( &stream_.mutex );

  002f3	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  002fb	48 05 88 01 00
	00		 add	 rax, 392		; 00000188H
  00301	48 8b c8	 mov	 rcx, rax
  00304	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EnterCriticalSection

; 6239 :   if ( stream_.state == STREAM_STOPPED ) {

  0030a	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00312	83 b8 2c 01 00
	00 00		 cmp	 DWORD PTR [rax+300], 0
  00319	75 1c		 jne	 SHORT $LN28@callbackEv

; 6240 :     MUTEX_UNLOCK( &stream_.mutex );

  0031b	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00323	48 05 88 01 00
	00		 add	 rax, 392		; 00000188H
  00329	48 8b c8	 mov	 rcx, rax
  0032c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 6241 :     return;

  00332	e9 10 19 00 00	 jmp	 $LN1@callbackEv
$LN28@callbackEv:

; 6242 :   }
; 6243 : 
; 6244 :   if ( buffersRolling == false ) {

  00337	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0033f	0f b6 80 89 02
	00 00		 movzx	 eax, BYTE PTR [rax+649]
  00346	85 c0		 test	 eax, eax
  00348	0f 85 c4 06 00
	00		 jne	 $LN29@callbackEv

; 6245 :     if ( stream_.mode == DUPLEX ) {

  0034e	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00356	83 b8 28 01 00
	00 02		 cmp	 DWORD PTR [rax+296], 2
  0035d	0f 85 ea 04 00
	00		 jne	 $LN30@callbackEv

; 6246 :       //assert( handle->dsBufferSize[0] == handle->dsBufferSize[1] );
; 6247 : 
; 6248 :       // It takes a while for the devices to get rolling. As a result,
; 6249 :       // there's no guarantee that the capture and write device pointers
; 6250 :       // will move in lockstep.  Wait here for both devices to start
; 6251 :       // rolling, and then set our buffer pointers accordingly.
; 6252 :       // e.g. Crystal Drivers: the capture buffer starts up 5700 to 9600
; 6253 :       // bytes later than the write buffer.
; 6254 : 
; 6255 :       // Stub: a serious risk of having a pre-emptive scheduling round
; 6256 :       // take place between the two GetCurrentPosition calls... but I'm
; 6257 :       // really not sure how to solve the problem.  Temporarily boost to
; 6258 :       // Realtime priority, maybe; but I'm not sure what priority the
; 6259 :       // DirectSound service threads run at. We *should* be roughly
; 6260 :       // within a ms or so of correct.
; 6261 : 
; 6262 :       LPDIRECTSOUNDBUFFER dsWriteBuffer = (LPDIRECTSOUNDBUFFER) handle->buffer[0];

  00363	b8 08 00 00 00	 mov	 eax, 8
  00368	48 6b c0 00	 imul	 rax, rax, 0
  0036c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  00371	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  00376	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR dsWriteBuffer$16[rsp], rax

; 6263 :       LPDIRECTSOUNDCAPTUREBUFFER dsCaptureBuffer = (LPDIRECTSOUNDCAPTUREBUFFER) handle->buffer[1];

  0037e	b8 08 00 00 00	 mov	 eax, 8
  00383	48 6b c0 01	 imul	 rax, rax, 1
  00387	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  0038c	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  00391	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR dsCaptureBuffer$17[rsp], rax

; 6264 : 
; 6265 :       DWORD startSafeWritePointer, startSafeReadPointer;
; 6266 : 
; 6267 :       result = dsWriteBuffer->GetCurrentPosition( NULL, &startSafeWritePointer );

  00399	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dsWriteBuffer$16[rsp]
  003a1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003a4	4c 8d 84 24 e4
	00 00 00	 lea	 r8, QWORD PTR startSafeWritePointer$18[rsp]
  003ac	33 d2		 xor	 edx, edx
  003ae	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR dsWriteBuffer$16[rsp]
  003b6	ff 50 20	 call	 QWORD PTR [rax+32]
  003b9	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 6268 :       if ( FAILED( result ) ) {

  003bd	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  003c2	0f 8d c8 00 00
	00		 jge	 $LN32@callbackEv

; 6269 :         errorStream_ << "RtApiDs::callbackEvent: error (" << getErrorString( result ) << ") getting current write position!";

  003c8	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  003cc	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  003d1	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv308[rsp], rax
  003d9	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  003e1	48 83 c1 08	 add	 rcx, 8
  003e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129397
  003ec	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  003f1	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR tv308[rsp]
  003f9	48 8b d1	 mov	 rdx, rcx
  003fc	48 8b c8	 mov	 rcx, rax
  003ff	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00404	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129396
  0040b	48 8b c8	 mov	 rcx, rax
  0040e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 6270 :         errorText_ = errorStream_.str();

  00413	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0041b	48 83 c0 08	 add	 rax, 8
  0041f	48 8d 94 24 d0
	01 00 00	 lea	 rdx, QWORD PTR $T23[rsp]
  00427	48 8b c8	 mov	 rcx, rax
  0042a	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  0042f	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv1667[rsp], rax
  00437	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0043f	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00445	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR tv1667[rsp]
  0044d	48 8b c8	 mov	 rcx, rax
  00450	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00455	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR $T23[rsp]
  0045d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 6271 :         MUTEX_UNLOCK( &stream_.mutex );

  00462	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0046a	48 05 88 01 00
	00		 add	 rax, 392		; 00000188H
  00470	48 8b c8	 mov	 rcx, rax
  00473	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 6272 :         error( RtAudioError::SYSTEM_ERROR );

  00479	ba 09 00 00 00	 mov	 edx, 9
  0047e	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00486	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 6273 :         return;

  0048b	e9 b7 17 00 00	 jmp	 $LN1@callbackEv
$LN32@callbackEv:

; 6274 :       }
; 6275 :       result = dsCaptureBuffer->GetCurrentPosition( NULL, &startSafeReadPointer );

  00490	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR dsCaptureBuffer$17[rsp]
  00498	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0049b	4c 8d 84 24 e8
	00 00 00	 lea	 r8, QWORD PTR startSafeReadPointer$19[rsp]
  004a3	33 d2		 xor	 edx, edx
  004a5	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR dsCaptureBuffer$17[rsp]
  004ad	ff 50 20	 call	 QWORD PTR [rax+32]
  004b0	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 6276 :       if ( FAILED( result ) ) {

  004b4	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  004b9	0f 8d c8 00 00
	00		 jge	 $LN2@callbackEv

; 6277 :         errorStream_ << "RtApiDs::callbackEvent: error (" << getErrorString( result ) << ") getting current read position!";

  004bf	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  004c3	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  004c8	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv364[rsp], rax
  004d0	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  004d8	48 83 c1 08	 add	 rcx, 8
  004dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129400
  004e3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  004e8	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR tv364[rsp]
  004f0	48 8b d1	 mov	 rdx, rcx
  004f3	48 8b c8	 mov	 rcx, rax
  004f6	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  004fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129399
  00502	48 8b c8	 mov	 rcx, rax
  00505	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 6278 :         errorText_ = errorStream_.str();

  0050a	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00512	48 83 c0 08	 add	 rax, 8
  00516	48 8d 94 24 f0
	01 00 00	 lea	 rdx, QWORD PTR $T24[rsp]
  0051e	48 8b c8	 mov	 rcx, rax
  00521	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00526	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv1669[rsp], rax
  0052e	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00536	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  0053c	48 8b 94 24 28
	01 00 00	 mov	 rdx, QWORD PTR tv1669[rsp]
  00544	48 8b c8	 mov	 rcx, rax
  00547	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  0054c	48 8d 8c 24 f0
	01 00 00	 lea	 rcx, QWORD PTR $T24[rsp]
  00554	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 6279 :         MUTEX_UNLOCK( &stream_.mutex );

  00559	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00561	48 05 88 01 00
	00		 add	 rax, 392		; 00000188H
  00567	48 8b c8	 mov	 rcx, rax
  0056a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 6280 :         error( RtAudioError::SYSTEM_ERROR );

  00570	ba 09 00 00 00	 mov	 edx, 9
  00575	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0057d	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 6281 :         return;

  00582	e9 c0 16 00 00	 jmp	 $LN1@callbackEv
$LN2@callbackEv:

; 6282 :       }
; 6283 :       while ( true ) {

  00587	33 c0		 xor	 eax, eax
  00589	83 f8 01	 cmp	 eax, 1
  0058c	0f 84 14 02 00
	00		 je	 $LN3@callbackEv

; 6284 :         result = dsWriteBuffer->GetCurrentPosition( NULL, &safeWritePointer );

  00592	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR dsWriteBuffer$16[rsp]
  0059a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0059d	4c 8d 44 24 64	 lea	 r8, QWORD PTR safeWritePointer$[rsp]
  005a2	33 d2		 xor	 edx, edx
  005a4	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR dsWriteBuffer$16[rsp]
  005ac	ff 50 20	 call	 QWORD PTR [rax+32]
  005af	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 6285 :         if ( FAILED( result ) ) {

  005b3	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  005b8	0f 8d c8 00 00
	00		 jge	 $LN34@callbackEv

; 6286 :           errorStream_ << "RtApiDs::callbackEvent: error (" << getErrorString( result ) << ") getting current write position!";

  005be	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  005c2	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  005c7	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv421[rsp], rax
  005cf	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  005d7	48 83 c1 08	 add	 rcx, 8
  005db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129403
  005e2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  005e7	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR tv421[rsp]
  005ef	48 8b d1	 mov	 rdx, rcx
  005f2	48 8b c8	 mov	 rcx, rax
  005f5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  005fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129402
  00601	48 8b c8	 mov	 rcx, rax
  00604	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 6287 :           errorText_ = errorStream_.str();

  00609	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00611	48 83 c0 08	 add	 rax, 8
  00615	48 8d 94 24 10
	02 00 00	 lea	 rdx, QWORD PTR $T25[rsp]
  0061d	48 8b c8	 mov	 rcx, rax
  00620	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00625	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv1671[rsp], rax
  0062d	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00635	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  0063b	48 8b 94 24 38
	01 00 00	 mov	 rdx, QWORD PTR tv1671[rsp]
  00643	48 8b c8	 mov	 rcx, rax
  00646	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  0064b	48 8d 8c 24 10
	02 00 00	 lea	 rcx, QWORD PTR $T25[rsp]
  00653	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 6288 :           MUTEX_UNLOCK( &stream_.mutex );

  00658	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00660	48 05 88 01 00
	00		 add	 rax, 392		; 00000188H
  00666	48 8b c8	 mov	 rcx, rax
  00669	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 6289 :           error( RtAudioError::SYSTEM_ERROR );

  0066f	ba 09 00 00 00	 mov	 edx, 9
  00674	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0067c	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 6290 :           return;

  00681	e9 c1 15 00 00	 jmp	 $LN1@callbackEv
$LN34@callbackEv:

; 6291 :         }
; 6292 :         result = dsCaptureBuffer->GetCurrentPosition( NULL, &safeReadPointer );

  00686	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR dsCaptureBuffer$17[rsp]
  0068e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00691	4c 8d 44 24 50	 lea	 r8, QWORD PTR safeReadPointer$[rsp]
  00696	33 d2		 xor	 edx, edx
  00698	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR dsCaptureBuffer$17[rsp]
  006a0	ff 50 20	 call	 QWORD PTR [rax+32]
  006a3	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 6293 :         if ( FAILED( result ) ) {

  006a7	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  006ac	0f 8d c8 00 00
	00		 jge	 $LN35@callbackEv

; 6294 :           errorStream_ << "RtApiDs::callbackEvent: error (" << getErrorString( result ) << ") getting current read position!";

  006b2	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  006b6	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  006bb	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR tv477[rsp], rax
  006c3	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  006cb	48 83 c1 08	 add	 rcx, 8
  006cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129406
  006d6	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  006db	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR tv477[rsp]
  006e3	48 8b d1	 mov	 rdx, rcx
  006e6	48 8b c8	 mov	 rcx, rax
  006e9	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  006ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129405
  006f5	48 8b c8	 mov	 rcx, rax
  006f8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 6295 :           errorText_ = errorStream_.str();

  006fd	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00705	48 83 c0 08	 add	 rax, 8
  00709	48 8d 94 24 30
	02 00 00	 lea	 rdx, QWORD PTR $T26[rsp]
  00711	48 8b c8	 mov	 rcx, rax
  00714	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00719	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv1673[rsp], rax
  00721	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00729	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  0072f	48 8b 94 24 48
	01 00 00	 mov	 rdx, QWORD PTR tv1673[rsp]
  00737	48 8b c8	 mov	 rcx, rax
  0073a	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  0073f	48 8d 8c 24 30
	02 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  00747	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 6296 :           MUTEX_UNLOCK( &stream_.mutex );

  0074c	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00754	48 05 88 01 00
	00		 add	 rax, 392		; 00000188H
  0075a	48 8b c8	 mov	 rcx, rax
  0075d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 6297 :           error( RtAudioError::SYSTEM_ERROR );

  00763	ba 09 00 00 00	 mov	 edx, 9
  00768	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00770	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 6298 :           return;

  00775	e9 cd 14 00 00	 jmp	 $LN1@callbackEv
$LN35@callbackEv:

; 6299 :         }
; 6300 :         if ( safeWritePointer != startSafeWritePointer && safeReadPointer != startSafeReadPointer ) break;

  0077a	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR startSafeWritePointer$18[rsp]
  00781	39 44 24 64	 cmp	 DWORD PTR safeWritePointer$[rsp], eax
  00785	74 0f		 je	 SHORT $LN36@callbackEv
  00787	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR startSafeReadPointer$19[rsp]
  0078e	39 44 24 50	 cmp	 DWORD PTR safeReadPointer$[rsp], eax
  00792	74 02		 je	 SHORT $LN36@callbackEv
  00794	eb 10		 jmp	 SHORT $LN3@callbackEv
$LN36@callbackEv:

; 6301 :         Sleep( 1 );

  00796	b9 01 00 00 00	 mov	 ecx, 1
  0079b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep

; 6302 :       }

  007a1	e9 e1 fd ff ff	 jmp	 $LN2@callbackEv
$LN3@callbackEv:

; 6303 : 
; 6304 :       //assert( handle->dsBufferSize[0] == handle->dsBufferSize[1] );
; 6305 : 
; 6306 :       handle->bufferPointer[0] = safeWritePointer + handle->dsPointerLeadTime[0];

  007a6	b8 04 00 00 00	 mov	 eax, 4
  007ab	48 6b c0 00	 imul	 rax, rax, 0
  007af	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  007b4	8b 44 01 3c	 mov	 eax, DWORD PTR [rcx+rax+60]
  007b8	8b 4c 24 64	 mov	 ecx, DWORD PTR safeWritePointer$[rsp]
  007bc	03 c8		 add	 ecx, eax
  007be	8b c1		 mov	 eax, ecx
  007c0	b9 04 00 00 00	 mov	 ecx, 4
  007c5	48 6b c9 00	 imul	 rcx, rcx, 0
  007c9	48 8b 54 24 48	 mov	 rdx, QWORD PTR handle$[rsp]
  007ce	89 44 0a 2c	 mov	 DWORD PTR [rdx+rcx+44], eax

; 6307 :       if ( handle->bufferPointer[0] >= handle->dsBufferSize[0] ) handle->bufferPointer[0] -= handle->dsBufferSize[0];

  007d2	b8 04 00 00 00	 mov	 eax, 4
  007d7	48 6b c0 00	 imul	 rax, rax, 0
  007db	b9 04 00 00 00	 mov	 ecx, 4
  007e0	48 6b c9 00	 imul	 rcx, rcx, 0
  007e4	48 8b 54 24 48	 mov	 rdx, QWORD PTR handle$[rsp]
  007e9	4c 8b 44 24 48	 mov	 r8, QWORD PTR handle$[rsp]
  007ee	41 8b 4c 08 34	 mov	 ecx, DWORD PTR [r8+rcx+52]
  007f3	39 4c 02 2c	 cmp	 DWORD PTR [rdx+rax+44], ecx
  007f7	72 39		 jb	 SHORT $LN37@callbackEv
  007f9	b8 04 00 00 00	 mov	 eax, 4
  007fe	48 6b c0 00	 imul	 rax, rax, 0
  00802	b9 04 00 00 00	 mov	 ecx, 4
  00807	48 6b c9 00	 imul	 rcx, rcx, 0
  0080b	48 8b 54 24 48	 mov	 rdx, QWORD PTR handle$[rsp]
  00810	4c 8b 44 24 48	 mov	 r8, QWORD PTR handle$[rsp]
  00815	41 8b 4c 08 34	 mov	 ecx, DWORD PTR [r8+rcx+52]
  0081a	8b 44 02 2c	 mov	 eax, DWORD PTR [rdx+rax+44]
  0081e	2b c1		 sub	 eax, ecx
  00820	b9 04 00 00 00	 mov	 ecx, 4
  00825	48 6b c9 00	 imul	 rcx, rcx, 0
  00829	48 8b 54 24 48	 mov	 rdx, QWORD PTR handle$[rsp]
  0082e	89 44 0a 2c	 mov	 DWORD PTR [rdx+rcx+44], eax
$LN37@callbackEv:

; 6308 :       handle->bufferPointer[1] = safeReadPointer;

  00832	b8 04 00 00 00	 mov	 eax, 4
  00837	48 6b c0 01	 imul	 rax, rax, 1
  0083b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  00840	8b 54 24 50	 mov	 edx, DWORD PTR safeReadPointer$[rsp]
  00844	89 54 01 2c	 mov	 DWORD PTR [rcx+rax+44], edx
  00848	e9 b6 01 00 00	 jmp	 $LN31@callbackEv
$LN30@callbackEv:

; 6309 :     }
; 6310 :     else if ( stream_.mode == OUTPUT ) {

  0084d	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00855	83 b8 28 01 00
	00 00		 cmp	 DWORD PTR [rax+296], 0
  0085c	0f 85 a1 01 00
	00		 jne	 $LN31@callbackEv

; 6311 : 
; 6312 :       // Set the proper nextWritePosition after initial startup.
; 6313 :       LPDIRECTSOUNDBUFFER dsWriteBuffer = (LPDIRECTSOUNDBUFFER) handle->buffer[0];

  00862	b8 08 00 00 00	 mov	 eax, 8
  00867	48 6b c0 00	 imul	 rax, rax, 0
  0086b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  00870	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  00875	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR dsWriteBuffer$20[rsp], rax

; 6314 :       result = dsWriteBuffer->GetCurrentPosition( &currentWritePointer, &safeWritePointer );

  0087d	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR dsWriteBuffer$20[rsp]
  00885	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00888	4c 8d 44 24 64	 lea	 r8, QWORD PTR safeWritePointer$[rsp]
  0088d	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR currentWritePointer$[rsp]
  00895	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR dsWriteBuffer$20[rsp]
  0089d	ff 50 20	 call	 QWORD PTR [rax+32]
  008a0	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 6315 :       if ( FAILED( result ) ) {

  008a4	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  008a9	0f 8d c8 00 00
	00		 jge	 $LN39@callbackEv

; 6316 :         errorStream_ << "RtApiDs::callbackEvent: error (" << getErrorString( result ) << ") getting current write position!";

  008af	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  008b3	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  008b8	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR tv573[rsp], rax
  008c0	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  008c8	48 83 c1 08	 add	 rcx, 8
  008cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129412
  008d3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  008d8	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR tv573[rsp]
  008e0	48 8b d1	 mov	 rdx, rcx
  008e3	48 8b c8	 mov	 rcx, rax
  008e6	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  008eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129411
  008f2	48 8b c8	 mov	 rcx, rax
  008f5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 6317 :         errorText_ = errorStream_.str();

  008fa	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00902	48 83 c0 08	 add	 rax, 8
  00906	48 8d 94 24 50
	02 00 00	 lea	 rdx, QWORD PTR $T27[rsp]
  0090e	48 8b c8	 mov	 rcx, rax
  00911	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00916	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR tv1675[rsp], rax
  0091e	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00926	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  0092c	48 8b 94 24 58
	01 00 00	 mov	 rdx, QWORD PTR tv1675[rsp]
  00934	48 8b c8	 mov	 rcx, rax
  00937	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  0093c	48 8d 8c 24 50
	02 00 00	 lea	 rcx, QWORD PTR $T27[rsp]
  00944	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 6318 :         MUTEX_UNLOCK( &stream_.mutex );

  00949	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00951	48 05 88 01 00
	00		 add	 rax, 392		; 00000188H
  00957	48 8b c8	 mov	 rcx, rax
  0095a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 6319 :         error( RtAudioError::SYSTEM_ERROR );

  00960	ba 09 00 00 00	 mov	 edx, 9
  00965	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0096d	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 6320 :         return;

  00972	e9 d0 12 00 00	 jmp	 $LN1@callbackEv
$LN39@callbackEv:

; 6321 :       }
; 6322 :       handle->bufferPointer[0] = safeWritePointer + handle->dsPointerLeadTime[0];

  00977	b8 04 00 00 00	 mov	 eax, 4
  0097c	48 6b c0 00	 imul	 rax, rax, 0
  00980	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  00985	8b 44 01 3c	 mov	 eax, DWORD PTR [rcx+rax+60]
  00989	8b 4c 24 64	 mov	 ecx, DWORD PTR safeWritePointer$[rsp]
  0098d	03 c8		 add	 ecx, eax
  0098f	8b c1		 mov	 eax, ecx
  00991	b9 04 00 00 00	 mov	 ecx, 4
  00996	48 6b c9 00	 imul	 rcx, rcx, 0
  0099a	48 8b 54 24 48	 mov	 rdx, QWORD PTR handle$[rsp]
  0099f	89 44 0a 2c	 mov	 DWORD PTR [rdx+rcx+44], eax

; 6323 :       if ( handle->bufferPointer[0] >= handle->dsBufferSize[0] ) handle->bufferPointer[0] -= handle->dsBufferSize[0];

  009a3	b8 04 00 00 00	 mov	 eax, 4
  009a8	48 6b c0 00	 imul	 rax, rax, 0
  009ac	b9 04 00 00 00	 mov	 ecx, 4
  009b1	48 6b c9 00	 imul	 rcx, rcx, 0
  009b5	48 8b 54 24 48	 mov	 rdx, QWORD PTR handle$[rsp]
  009ba	4c 8b 44 24 48	 mov	 r8, QWORD PTR handle$[rsp]
  009bf	41 8b 4c 08 34	 mov	 ecx, DWORD PTR [r8+rcx+52]
  009c4	39 4c 02 2c	 cmp	 DWORD PTR [rdx+rax+44], ecx
  009c8	72 39		 jb	 SHORT $LN31@callbackEv
  009ca	b8 04 00 00 00	 mov	 eax, 4
  009cf	48 6b c0 00	 imul	 rax, rax, 0
  009d3	b9 04 00 00 00	 mov	 ecx, 4
  009d8	48 6b c9 00	 imul	 rcx, rcx, 0
  009dc	48 8b 54 24 48	 mov	 rdx, QWORD PTR handle$[rsp]
  009e1	4c 8b 44 24 48	 mov	 r8, QWORD PTR handle$[rsp]
  009e6	41 8b 4c 08 34	 mov	 ecx, DWORD PTR [r8+rcx+52]
  009eb	8b 44 02 2c	 mov	 eax, DWORD PTR [rdx+rax+44]
  009ef	2b c1		 sub	 eax, ecx
  009f1	b9 04 00 00 00	 mov	 ecx, 4
  009f6	48 6b c9 00	 imul	 rcx, rcx, 0
  009fa	48 8b 54 24 48	 mov	 rdx, QWORD PTR handle$[rsp]
  009ff	89 44 0a 2c	 mov	 DWORD PTR [rdx+rcx+44], eax
$LN31@callbackEv:

; 6324 :     }
; 6325 : 
; 6326 :     buffersRolling = true;

  00a03	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00a0b	c6 80 89 02 00
	00 01		 mov	 BYTE PTR [rax+649], 1
$LN29@callbackEv:

; 6327 :   }
; 6328 : 
; 6329 :   if ( stream_.mode == OUTPUT || stream_.mode == DUPLEX ) {

  00a12	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00a1a	83 b8 28 01 00
	00 00		 cmp	 DWORD PTR [rax+296], 0
  00a21	74 15		 je	 SHORT $LN42@callbackEv
  00a23	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00a2b	83 b8 28 01 00
	00 02		 cmp	 DWORD PTR [rax+296], 2
  00a32	0f 85 27 08 00
	00		 jne	 $LN41@callbackEv
$LN42@callbackEv:

; 6330 :     
; 6331 :     LPDIRECTSOUNDBUFFER dsBuffer = (LPDIRECTSOUNDBUFFER) handle->buffer[0];

  00a38	b8 08 00 00 00	 mov	 eax, 8
  00a3d	48 6b c0 00	 imul	 rax, rax, 0
  00a41	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  00a46	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  00a4b	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR dsBuffer$11[rsp], rax

; 6332 : 
; 6333 :     if ( handle->drainCounter > 1 ) { // write zeros to the output stream

  00a53	48 8b 44 24 48	 mov	 rax, QWORD PTR handle$[rsp]
  00a58	83 38 01	 cmp	 DWORD PTR [rax], 1
  00a5b	76 7d		 jbe	 SHORT $LN43@callbackEv

; 6334 :       bufferBytes = stream_.bufferSize * stream_.nUserChannels[0];

  00a5d	b8 04 00 00 00	 mov	 eax, 4
  00a62	48 6b c0 00	 imul	 rax, rax, 0
  00a66	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00a6e	48 8b 94 24 70
	03 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  00a76	8b 89 54 01 00
	00		 mov	 ecx, DWORD PTR [rcx+340]
  00a7c	0f af 8c 02 5c
	01 00 00	 imul	 ecx, DWORD PTR [rdx+rax+348]
  00a84	8b c1		 mov	 eax, ecx
  00a86	89 44 24 44	 mov	 DWORD PTR bufferBytes$[rsp], eax

; 6335 :       bufferBytes *= formatBytes( stream_.userFormat );

  00a8a	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00a92	8b 90 7c 01 00
	00		 mov	 edx, DWORD PTR [rax+380]
  00a98	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00aa0	e8 00 00 00 00	 call	 ?formatBytes@RtApi@@IEAAIK@Z ; RtApi::formatBytes
  00aa5	8b 4c 24 44	 mov	 ecx, DWORD PTR bufferBytes$[rsp]
  00aa9	0f af c8	 imul	 ecx, eax
  00aac	8b c1		 mov	 eax, ecx
  00aae	89 44 24 44	 mov	 DWORD PTR bufferBytes$[rsp], eax

; 6336 :       memset( stream_.userBuffer[0], 0, bufferBytes );

  00ab2	48 63 44 24 44	 movsxd	 rax, DWORD PTR bufferBytes$[rsp]
  00ab7	b9 08 00 00 00	 mov	 ecx, 8
  00abc	48 6b c9 00	 imul	 rcx, rcx, 0
  00ac0	4c 8b c0	 mov	 r8, rax
  00ac3	33 d2		 xor	 edx, edx
  00ac5	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00acd	48 8b 8c 08 30
	01 00 00	 mov	 rcx, QWORD PTR [rax+rcx+304]
  00ad5	e8 00 00 00 00	 call	 memset
$LN43@callbackEv:

; 6337 :     }
; 6338 : 
; 6339 :     // Setup parameters and do buffer conversion if necessary.
; 6340 :     if ( stream_.doConvertBuffer[0] ) {

  00ada	b8 01 00 00 00	 mov	 eax, 1
  00adf	48 6b c0 00	 imul	 rax, rax, 0
  00ae3	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00aeb	0f b6 84 01 48
	01 00 00	 movzx	 eax, BYTE PTR [rcx+rax+328]
  00af3	85 c0		 test	 eax, eax
  00af5	0f 84 bc 00 00
	00		 je	 $LN44@callbackEv

; 6341 :       buffer = stream_.deviceBuffer;

  00afb	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00b03	48 8b 80 40 01
	00 00		 mov	 rax, QWORD PTR [rax+320]
  00b0a	48 89 44 24 70	 mov	 QWORD PTR buffer$[rsp], rax

; 6342 :       convertBuffer( buffer, stream_.userBuffer[0], stream_.convertInfo[0] );

  00b0f	b8 48 00 00 00	 mov	 eax, 72			; 00000048H
  00b14	48 6b c0 00	 imul	 rax, rax, 0
  00b18	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00b20	48 8d 84 01 e8
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax+488]
  00b28	b9 08 00 00 00	 mov	 ecx, 8
  00b2d	48 6b c9 00	 imul	 rcx, rcx, 0
  00b31	4c 8b c8	 mov	 r9, rax
  00b34	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00b3c	4c 8b 84 08 30
	01 00 00	 mov	 r8, QWORD PTR [rax+rcx+304]
  00b44	48 8b 54 24 70	 mov	 rdx, QWORD PTR buffer$[rsp]
  00b49	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00b51	e8 00 00 00 00	 call	 ?convertBuffer@RtApi@@IEAAXPEAD0AEAUConvertInfo@1@@Z ; RtApi::convertBuffer

; 6343 :       bufferBytes = stream_.bufferSize * stream_.nDeviceChannels[0];

  00b56	b8 04 00 00 00	 mov	 eax, 4
  00b5b	48 6b c0 00	 imul	 rax, rax, 0
  00b5f	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00b67	48 8b 94 24 70
	03 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  00b6f	8b 89 54 01 00
	00		 mov	 ecx, DWORD PTR [rcx+340]
  00b75	0f af 8c 02 64
	01 00 00	 imul	 ecx, DWORD PTR [rdx+rax+356]
  00b7d	8b c1		 mov	 eax, ecx
  00b7f	89 44 24 44	 mov	 DWORD PTR bufferBytes$[rsp], eax

; 6344 :       bufferBytes *= formatBytes( stream_.deviceFormat[0] );

  00b83	b8 04 00 00 00	 mov	 eax, 4
  00b88	48 6b c0 00	 imul	 rax, rax, 0
  00b8c	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00b94	8b 94 01 80 01
	00 00		 mov	 edx, DWORD PTR [rcx+rax+384]
  00b9b	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00ba3	e8 00 00 00 00	 call	 ?formatBytes@RtApi@@IEAAIK@Z ; RtApi::formatBytes
  00ba8	8b 4c 24 44	 mov	 ecx, DWORD PTR bufferBytes$[rsp]
  00bac	0f af c8	 imul	 ecx, eax
  00baf	8b c1		 mov	 eax, ecx
  00bb1	89 44 24 44	 mov	 DWORD PTR bufferBytes$[rsp], eax

; 6345 :     }
; 6346 :     else {

  00bb5	eb 73		 jmp	 SHORT $LN45@callbackEv
$LN44@callbackEv:

; 6347 :       buffer = stream_.userBuffer[0];

  00bb7	b8 08 00 00 00	 mov	 eax, 8
  00bbc	48 6b c0 00	 imul	 rax, rax, 0
  00bc0	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00bc8	48 8b 84 01 30
	01 00 00	 mov	 rax, QWORD PTR [rcx+rax+304]
  00bd0	48 89 44 24 70	 mov	 QWORD PTR buffer$[rsp], rax

; 6348 :       bufferBytes = stream_.bufferSize * stream_.nUserChannels[0];

  00bd5	b8 04 00 00 00	 mov	 eax, 4
  00bda	48 6b c0 00	 imul	 rax, rax, 0
  00bde	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00be6	48 8b 94 24 70
	03 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  00bee	8b 89 54 01 00
	00		 mov	 ecx, DWORD PTR [rcx+340]
  00bf4	0f af 8c 02 5c
	01 00 00	 imul	 ecx, DWORD PTR [rdx+rax+348]
  00bfc	8b c1		 mov	 eax, ecx
  00bfe	89 44 24 44	 mov	 DWORD PTR bufferBytes$[rsp], eax

; 6349 :       bufferBytes *= formatBytes( stream_.userFormat );

  00c02	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00c0a	8b 90 7c 01 00
	00		 mov	 edx, DWORD PTR [rax+380]
  00c10	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00c18	e8 00 00 00 00	 call	 ?formatBytes@RtApi@@IEAAIK@Z ; RtApi::formatBytes
  00c1d	8b 4c 24 44	 mov	 ecx, DWORD PTR bufferBytes$[rsp]
  00c21	0f af c8	 imul	 ecx, eax
  00c24	8b c1		 mov	 eax, ecx
  00c26	89 44 24 44	 mov	 DWORD PTR bufferBytes$[rsp], eax
$LN45@callbackEv:

; 6350 :     }
; 6351 : 
; 6352 :     // No byte swapping necessary in DirectSound implementation.
; 6353 : 
; 6354 :     // Ahhh ... windoze.  16-bit data is signed but 8-bit data is
; 6355 :     // unsigned.  So, we need to convert our signed 8-bit data here to
; 6356 :     // unsigned.
; 6357 :     if ( stream_.deviceFormat[0] == RTAUDIO_SINT8 )

  00c2a	b8 04 00 00 00	 mov	 eax, 4
  00c2f	48 6b c0 00	 imul	 rax, rax, 0
  00c33	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00c3b	83 bc 01 80 01
	00 00 01	 cmp	 DWORD PTR [rcx+rax+384], 1
  00c43	75 40		 jne	 SHORT $LN46@callbackEv

; 6358 :       for ( int i=0; i<bufferBytes; i++ ) buffer[i] = (unsigned char) ( buffer[i] + 128 );

  00c45	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR i$5[rsp], 0
  00c4d	eb 0a		 jmp	 SHORT $LN6@callbackEv
$LN4@callbackEv:
  00c4f	8b 44 24 7c	 mov	 eax, DWORD PTR i$5[rsp]
  00c53	ff c0		 inc	 eax
  00c55	89 44 24 7c	 mov	 DWORD PTR i$5[rsp], eax
$LN6@callbackEv:
  00c59	8b 44 24 44	 mov	 eax, DWORD PTR bufferBytes$[rsp]
  00c5d	39 44 24 7c	 cmp	 DWORD PTR i$5[rsp], eax
  00c61	7d 22		 jge	 SHORT $LN46@callbackEv
  00c63	48 63 44 24 7c	 movsxd	 rax, DWORD PTR i$5[rsp]
  00c68	48 8b 4c 24 70	 mov	 rcx, QWORD PTR buffer$[rsp]
  00c6d	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00c71	05 80 00 00 00	 add	 eax, 128		; 00000080H
  00c76	48 63 4c 24 7c	 movsxd	 rcx, DWORD PTR i$5[rsp]
  00c7b	48 8b 54 24 70	 mov	 rdx, QWORD PTR buffer$[rsp]
  00c80	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  00c83	eb ca		 jmp	 SHORT $LN4@callbackEv
$LN46@callbackEv:

; 6359 : 
; 6360 :     DWORD dsBufferSize = handle->dsBufferSize[0];

  00c85	b8 04 00 00 00	 mov	 eax, 4
  00c8a	48 6b c0 00	 imul	 rax, rax, 0
  00c8e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  00c93	8b 44 01 34	 mov	 eax, DWORD PTR [rcx+rax+52]
  00c97	89 44 24 6c	 mov	 DWORD PTR dsBufferSize$3[rsp], eax

; 6361 :     nextWritePointer = handle->bufferPointer[0];

  00c9b	b8 04 00 00 00	 mov	 eax, 4
  00ca0	48 6b c0 00	 imul	 rax, rax, 0
  00ca4	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  00ca9	8b 44 01 2c	 mov	 eax, DWORD PTR [rcx+rax+44]
  00cad	89 44 24 58	 mov	 DWORD PTR nextWritePointer$[rsp], eax
$LN7@callbackEv:

; 6362 : 
; 6363 :     DWORD endWrite, leadPointer;
; 6364 :     while ( true ) {

  00cb1	33 c0		 xor	 eax, eax
  00cb3	83 f8 01	 cmp	 eax, 1
  00cb6	0f 84 40 02 00
	00		 je	 $LN8@callbackEv

; 6365 :       // Find out where the read and "safe write" pointers are.
; 6366 :       result = dsBuffer->GetCurrentPosition( &currentWritePointer, &safeWritePointer );

  00cbc	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dsBuffer$11[rsp]
  00cc4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00cc7	4c 8d 44 24 64	 lea	 r8, QWORD PTR safeWritePointer$[rsp]
  00ccc	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR currentWritePointer$[rsp]
  00cd4	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR dsBuffer$11[rsp]
  00cdc	ff 50 20	 call	 QWORD PTR [rax+32]
  00cdf	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 6367 :       if ( FAILED( result ) ) {

  00ce3	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  00ce8	0f 8d c8 00 00
	00		 jge	 $LN47@callbackEv

; 6368 :         errorStream_ << "RtApiDs::callbackEvent: error (" << getErrorString( result ) << ") getting current write position!";

  00cee	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  00cf2	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  00cf7	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv849[rsp], rax
  00cff	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00d07	48 83 c1 08	 add	 rcx, 8
  00d0b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129422
  00d12	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00d17	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR tv849[rsp]
  00d1f	48 8b d1	 mov	 rdx, rcx
  00d22	48 8b c8	 mov	 rcx, rax
  00d25	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00d2a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129421
  00d31	48 8b c8	 mov	 rcx, rax
  00d34	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 6369 :         errorText_ = errorStream_.str();

  00d39	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00d41	48 83 c0 08	 add	 rax, 8
  00d45	48 8d 94 24 70
	02 00 00	 lea	 rdx, QWORD PTR $T28[rsp]
  00d4d	48 8b c8	 mov	 rcx, rax
  00d50	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00d55	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR tv1677[rsp], rax
  00d5d	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00d65	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00d6b	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR tv1677[rsp]
  00d73	48 8b c8	 mov	 rcx, rax
  00d76	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00d7b	48 8d 8c 24 70
	02 00 00	 lea	 rcx, QWORD PTR $T28[rsp]
  00d83	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 6370 :         MUTEX_UNLOCK( &stream_.mutex );

  00d88	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00d90	48 05 88 01 00
	00		 add	 rax, 392		; 00000188H
  00d96	48 8b c8	 mov	 rcx, rax
  00d99	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 6371 :         error( RtAudioError::SYSTEM_ERROR );

  00d9f	ba 09 00 00 00	 mov	 edx, 9
  00da4	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00dac	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 6372 :         return;

  00db1	e9 91 0e 00 00	 jmp	 $LN1@callbackEv
$LN47@callbackEv:

; 6373 :       }
; 6374 : 
; 6375 :       // We will copy our output buffer into the region between
; 6376 :       // safeWritePointer and leadPointer.  If leadPointer is not
; 6377 :       // beyond the next endWrite position, wait until it is.
; 6378 :       leadPointer = safeWritePointer + handle->dsPointerLeadTime[0];

  00db6	b8 04 00 00 00	 mov	 eax, 4
  00dbb	48 6b c0 00	 imul	 rax, rax, 0
  00dbf	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  00dc4	8b 44 01 3c	 mov	 eax, DWORD PTR [rcx+rax+60]
  00dc8	8b 4c 24 64	 mov	 ecx, DWORD PTR safeWritePointer$[rsp]
  00dcc	03 c8		 add	 ecx, eax
  00dce	8b c1		 mov	 eax, ecx
  00dd0	89 44 24 68	 mov	 DWORD PTR leadPointer$2[rsp], eax

; 6379 :       //std::cout << "safeWritePointer = " << safeWritePointer << ", leadPointer = " << leadPointer << ", nextWritePointer = " << nextWritePointer << std::endl;
; 6380 :       if ( leadPointer > dsBufferSize ) leadPointer -= dsBufferSize;

  00dd4	8b 44 24 6c	 mov	 eax, DWORD PTR dsBufferSize$3[rsp]
  00dd8	39 44 24 68	 cmp	 DWORD PTR leadPointer$2[rsp], eax
  00ddc	76 10		 jbe	 SHORT $LN48@callbackEv
  00dde	8b 44 24 6c	 mov	 eax, DWORD PTR dsBufferSize$3[rsp]
  00de2	8b 4c 24 68	 mov	 ecx, DWORD PTR leadPointer$2[rsp]
  00de6	2b c8		 sub	 ecx, eax
  00de8	8b c1		 mov	 eax, ecx
  00dea	89 44 24 68	 mov	 DWORD PTR leadPointer$2[rsp], eax
$LN48@callbackEv:

; 6381 :       if ( leadPointer < nextWritePointer ) leadPointer += dsBufferSize; // unwrap offset

  00dee	8b 44 24 58	 mov	 eax, DWORD PTR nextWritePointer$[rsp]
  00df2	39 44 24 68	 cmp	 DWORD PTR leadPointer$2[rsp], eax
  00df6	73 10		 jae	 SHORT $LN49@callbackEv
  00df8	8b 44 24 6c	 mov	 eax, DWORD PTR dsBufferSize$3[rsp]
  00dfc	8b 4c 24 68	 mov	 ecx, DWORD PTR leadPointer$2[rsp]
  00e00	03 c8		 add	 ecx, eax
  00e02	8b c1		 mov	 eax, ecx
  00e04	89 44 24 68	 mov	 DWORD PTR leadPointer$2[rsp], eax
$LN49@callbackEv:

; 6382 :       endWrite = nextWritePointer + bufferBytes;

  00e08	8b 44 24 44	 mov	 eax, DWORD PTR bufferBytes$[rsp]
  00e0c	8b 4c 24 58	 mov	 ecx, DWORD PTR nextWritePointer$[rsp]
  00e10	03 c8		 add	 ecx, eax
  00e12	8b c1		 mov	 eax, ecx
  00e14	89 84 24 8c 00
	00 00		 mov	 DWORD PTR endWrite$9[rsp], eax

; 6383 : 
; 6384 :       // Check whether the entire write region is behind the play pointer.
; 6385 :       if ( leadPointer >= endWrite ) break;

  00e1b	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR endWrite$9[rsp]
  00e22	39 44 24 68	 cmp	 DWORD PTR leadPointer$2[rsp], eax
  00e26	72 05		 jb	 SHORT $LN50@callbackEv
  00e28	e9 cf 00 00 00	 jmp	 $LN8@callbackEv
$LN50@callbackEv:

; 6386 : 
; 6387 :       // If we are here, then we must wait until the leadPointer advances
; 6388 :       // beyond the end of our next write region. We use the
; 6389 :       // Sleep() function to suspend operation until that happens.
; 6390 :       double millis = ( endWrite - leadPointer ) * 1000.0;

  00e2d	8b 44 24 68	 mov	 eax, DWORD PTR leadPointer$2[rsp]
  00e31	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR endWrite$9[rsp]
  00e38	2b c8		 sub	 ecx, eax
  00e3a	8b c1		 mov	 eax, ecx
  00e3c	8b c0		 mov	 eax, eax
  00e3e	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  00e43	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@408f400000000000
  00e4b	f2 0f 11 84 24
	c0 00 00 00	 movsd	 QWORD PTR millis$14[rsp], xmm0

; 6391 :       millis /= ( formatBytes( stream_.deviceFormat[0]) * stream_.nDeviceChannels[0] * stream_.sampleRate);

  00e54	b8 04 00 00 00	 mov	 eax, 4
  00e59	48 6b c0 00	 imul	 rax, rax, 0
  00e5d	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00e65	8b 94 01 80 01
	00 00		 mov	 edx, DWORD PTR [rcx+rax+384]
  00e6c	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00e74	e8 00 00 00 00	 call	 ?formatBytes@RtApi@@IEAAIK@Z ; RtApi::formatBytes
  00e79	b9 04 00 00 00	 mov	 ecx, 4
  00e7e	48 6b c9 00	 imul	 rcx, rcx, 0
  00e82	48 8b 94 24 70
	03 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  00e8a	0f af 84 0a 64
	01 00 00	 imul	 eax, DWORD PTR [rdx+rcx+356]
  00e92	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00e9a	0f af 81 50 01
	00 00		 imul	 eax, DWORD PTR [rcx+336]
  00ea1	8b c0		 mov	 eax, eax
  00ea3	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  00ea8	f2 0f 10 8c 24
	c0 00 00 00	 movsd	 xmm1, QWORD PTR millis$14[rsp]
  00eb1	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00eb5	0f 28 c1	 movaps	 xmm0, xmm1
  00eb8	f2 0f 11 84 24
	c0 00 00 00	 movsd	 QWORD PTR millis$14[rsp], xmm0

; 6392 :       if ( millis < 1.0 ) millis = 1.0;

  00ec1	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00ec9	66 0f 2f 84 24
	c0 00 00 00	 comisd	 xmm0, QWORD PTR millis$14[rsp]
  00ed2	76 11		 jbe	 SHORT $LN51@callbackEv
  00ed4	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00edc	f2 0f 11 84 24
	c0 00 00 00	 movsd	 QWORD PTR millis$14[rsp], xmm0
$LN51@callbackEv:

; 6393 :       Sleep( (DWORD) millis );

  00ee5	f2 48 0f 2c 84
	24 c0 00 00 00	 cvttsd2si rax, QWORD PTR millis$14[rsp]
  00eef	8b c8		 mov	 ecx, eax
  00ef1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep

; 6394 :     }

  00ef7	e9 b5 fd ff ff	 jmp	 $LN7@callbackEv
$LN8@callbackEv:

; 6395 : 
; 6396 :     if ( dsPointerBetween( nextWritePointer, safeWritePointer, currentWritePointer, dsBufferSize )
; 6397 :          || dsPointerBetween( endWrite, safeWritePointer, currentWritePointer, dsBufferSize ) ) { 

  00efc	44 8b 4c 24 6c	 mov	 r9d, DWORD PTR dsBufferSize$3[rsp]
  00f01	44 8b 84 24 a0
	00 00 00	 mov	 r8d, DWORD PTR currentWritePointer$[rsp]
  00f09	8b 54 24 64	 mov	 edx, DWORD PTR safeWritePointer$[rsp]
  00f0d	8b 4c 24 58	 mov	 ecx, DWORD PTR nextWritePointer$[rsp]
  00f11	e8 00 00 00 00	 call	 ?dsPointerBetween@@YAKKKKK@Z ; dsPointerBetween
  00f16	85 c0		 test	 eax, eax
  00f18	75 21		 jne	 SHORT $LN53@callbackEv
  00f1a	44 8b 4c 24 6c	 mov	 r9d, DWORD PTR dsBufferSize$3[rsp]
  00f1f	44 8b 84 24 a0
	00 00 00	 mov	 r8d, DWORD PTR currentWritePointer$[rsp]
  00f27	8b 54 24 64	 mov	 edx, DWORD PTR safeWritePointer$[rsp]
  00f2b	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR endWrite$9[rsp]
  00f32	e8 00 00 00 00	 call	 ?dsPointerBetween@@YAKKKKK@Z ; dsPointerBetween
  00f37	85 c0		 test	 eax, eax
  00f39	74 78		 je	 SHORT $LN52@callbackEv
$LN53@callbackEv:

; 6398 :       // We've strayed into the forbidden zone ... resync the read pointer.
; 6399 :       handle->xrun[0] = true;

  00f3b	b8 01 00 00 00	 mov	 eax, 1
  00f40	48 6b c0 00	 imul	 rax, rax, 0
  00f44	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  00f49	c6 44 01 28 01	 mov	 BYTE PTR [rcx+rax+40], 1

; 6400 :       nextWritePointer = safeWritePointer + handle->dsPointerLeadTime[0] - bufferBytes;

  00f4e	b8 04 00 00 00	 mov	 eax, 4
  00f53	48 6b c0 00	 imul	 rax, rax, 0
  00f57	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  00f5c	8b 44 01 3c	 mov	 eax, DWORD PTR [rcx+rax+60]
  00f60	8b 4c 24 64	 mov	 ecx, DWORD PTR safeWritePointer$[rsp]
  00f64	03 c8		 add	 ecx, eax
  00f66	8b c1		 mov	 eax, ecx
  00f68	2b 44 24 44	 sub	 eax, DWORD PTR bufferBytes$[rsp]
  00f6c	89 44 24 58	 mov	 DWORD PTR nextWritePointer$[rsp], eax

; 6401 :       if ( nextWritePointer >= dsBufferSize ) nextWritePointer -= dsBufferSize;

  00f70	8b 44 24 6c	 mov	 eax, DWORD PTR dsBufferSize$3[rsp]
  00f74	39 44 24 58	 cmp	 DWORD PTR nextWritePointer$[rsp], eax
  00f78	72 10		 jb	 SHORT $LN54@callbackEv
  00f7a	8b 44 24 6c	 mov	 eax, DWORD PTR dsBufferSize$3[rsp]
  00f7e	8b 4c 24 58	 mov	 ecx, DWORD PTR nextWritePointer$[rsp]
  00f82	2b c8		 sub	 ecx, eax
  00f84	8b c1		 mov	 eax, ecx
  00f86	89 44 24 58	 mov	 DWORD PTR nextWritePointer$[rsp], eax
$LN54@callbackEv:

; 6402 :       handle->bufferPointer[0] = nextWritePointer;

  00f8a	b8 04 00 00 00	 mov	 eax, 4
  00f8f	48 6b c0 00	 imul	 rax, rax, 0
  00f93	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  00f98	8b 54 24 58	 mov	 edx, DWORD PTR nextWritePointer$[rsp]
  00f9c	89 54 01 2c	 mov	 DWORD PTR [rcx+rax+44], edx

; 6403 :       endWrite = nextWritePointer + bufferBytes;

  00fa0	8b 44 24 44	 mov	 eax, DWORD PTR bufferBytes$[rsp]
  00fa4	8b 4c 24 58	 mov	 ecx, DWORD PTR nextWritePointer$[rsp]
  00fa8	03 c8		 add	 ecx, eax
  00faa	8b c1		 mov	 eax, ecx
  00fac	89 84 24 8c 00
	00 00		 mov	 DWORD PTR endWrite$9[rsp], eax
$LN52@callbackEv:

; 6404 :     }
; 6405 : 
; 6406 :     // Lock free space in the buffer
; 6407 :     result = dsBuffer->Lock( nextWritePointer, bufferBytes, &buffer1,

  00fb3	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dsBuffer$11[rsp]
  00fbb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00fbe	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  00fc6	48 8d 4c 24 60	 lea	 rcx, QWORD PTR bufferSize2$[rsp]
  00fcb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00fd0	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buffer2$[rsp]
  00fd8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00fdd	48 8d 4c 24 5c	 lea	 rcx, QWORD PTR bufferSize1$[rsp]
  00fe2	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00fe7	4c 8d 8c 24 b0
	00 00 00	 lea	 r9, QWORD PTR buffer1$[rsp]
  00fef	44 8b 44 24 44	 mov	 r8d, DWORD PTR bufferBytes$[rsp]
  00ff4	8b 54 24 58	 mov	 edx, DWORD PTR nextWritePointer$[rsp]
  00ff8	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR dsBuffer$11[rsp]
  01000	ff 50 58	 call	 QWORD PTR [rax+88]
  01003	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 6408 :                              &bufferSize1, &buffer2, &bufferSize2, 0 );
; 6409 :     if ( FAILED( result ) ) {

  01007	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  0100c	0f 8d c8 00 00
	00		 jge	 $LN55@callbackEv

; 6410 :       errorStream_ << "RtApiDs::callbackEvent: error (" << getErrorString( result ) << ") locking buffer during playback!";

  01012	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  01016	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  0101b	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR tv1017[rsp], rax
  01023	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0102b	48 83 c1 08	 add	 rcx, 8
  0102f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129432
  01036	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0103b	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR tv1017[rsp]
  01043	48 8b d1	 mov	 rdx, rcx
  01046	48 8b c8	 mov	 rcx, rax
  01049	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0104e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129431
  01055	48 8b c8	 mov	 rcx, rax
  01058	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 6411 :       errorText_ = errorStream_.str();

  0105d	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01065	48 83 c0 08	 add	 rax, 8
  01069	48 8d 94 24 90
	02 00 00	 lea	 rdx, QWORD PTR $T29[rsp]
  01071	48 8b c8	 mov	 rcx, rax
  01074	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  01079	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR tv1679[rsp], rax
  01081	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01089	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  0108f	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR tv1679[rsp]
  01097	48 8b c8	 mov	 rcx, rax
  0109a	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  0109f	48 8d 8c 24 90
	02 00 00	 lea	 rcx, QWORD PTR $T29[rsp]
  010a7	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 6412 :       MUTEX_UNLOCK( &stream_.mutex );

  010ac	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  010b4	48 05 88 01 00
	00		 add	 rax, 392		; 00000188H
  010ba	48 8b c8	 mov	 rcx, rax
  010bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 6413 :       error( RtAudioError::SYSTEM_ERROR );

  010c3	ba 09 00 00 00	 mov	 edx, 9
  010c8	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  010d0	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 6414 :       return;

  010d5	e9 6d 0b 00 00	 jmp	 $LN1@callbackEv
$LN55@callbackEv:

; 6415 :     }
; 6416 : 
; 6417 :     // Copy our buffer into the DS buffer
; 6418 :     CopyMemory( buffer1, buffer, bufferSize1 );

  010da	8b 44 24 5c	 mov	 eax, DWORD PTR bufferSize1$[rsp]
  010de	44 8b c0	 mov	 r8d, eax
  010e1	48 8b 54 24 70	 mov	 rdx, QWORD PTR buffer$[rsp]
  010e6	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR buffer1$[rsp]
  010ee	e8 00 00 00 00	 call	 memcpy

; 6419 :     if ( buffer2 != NULL ) CopyMemory( buffer2, buffer+bufferSize1, bufferSize2 );

  010f3	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR buffer2$[rsp], 0
  010fc	74 26		 je	 SHORT $LN56@callbackEv
  010fe	8b 44 24 60	 mov	 eax, DWORD PTR bufferSize2$[rsp]
  01102	8b 4c 24 5c	 mov	 ecx, DWORD PTR bufferSize1$[rsp]
  01106	48 8b 54 24 70	 mov	 rdx, QWORD PTR buffer$[rsp]
  0110b	48 03 d1	 add	 rdx, rcx
  0110e	48 8b ca	 mov	 rcx, rdx
  01111	44 8b c0	 mov	 r8d, eax
  01114	48 8b d1	 mov	 rdx, rcx
  01117	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR buffer2$[rsp]
  0111f	e8 00 00 00 00	 call	 memcpy
$LN56@callbackEv:

; 6420 : 
; 6421 :     // Update our buffer offset and unlock sound buffer
; 6422 :     dsBuffer->Unlock( buffer1, bufferSize1, buffer2, bufferSize2 );

  01124	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dsBuffer$11[rsp]
  0112c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0112f	8b 4c 24 60	 mov	 ecx, DWORD PTR bufferSize2$[rsp]
  01133	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  01137	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR buffer2$[rsp]
  0113f	44 8b 44 24 5c	 mov	 r8d, DWORD PTR bufferSize1$[rsp]
  01144	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR buffer1$[rsp]
  0114c	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR dsBuffer$11[rsp]
  01154	ff 90 98 00 00
	00		 call	 QWORD PTR [rax+152]

; 6423 :     if ( FAILED( result ) ) {

  0115a	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  0115f	0f 8d c8 00 00
	00		 jge	 $LN57@callbackEv

; 6424 :       errorStream_ << "RtApiDs::callbackEvent: error (" << getErrorString( result ) << ") unlocking buffer during playback!";

  01165	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  01169	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  0116e	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR tv1085[rsp], rax
  01176	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0117e	48 83 c1 08	 add	 rcx, 8
  01182	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129436
  01189	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0118e	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR tv1085[rsp]
  01196	48 8b d1	 mov	 rdx, rcx
  01199	48 8b c8	 mov	 rcx, rax
  0119c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  011a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129435
  011a8	48 8b c8	 mov	 rcx, rax
  011ab	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 6425 :       errorText_ = errorStream_.str();

  011b0	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  011b8	48 83 c0 08	 add	 rax, 8
  011bc	48 8d 94 24 b0
	02 00 00	 lea	 rdx, QWORD PTR $T30[rsp]
  011c4	48 8b c8	 mov	 rcx, rax
  011c7	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  011cc	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR tv1681[rsp], rax
  011d4	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  011dc	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  011e2	48 8b 94 24 88
	01 00 00	 mov	 rdx, QWORD PTR tv1681[rsp]
  011ea	48 8b c8	 mov	 rcx, rax
  011ed	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  011f2	48 8d 8c 24 b0
	02 00 00	 lea	 rcx, QWORD PTR $T30[rsp]
  011fa	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 6426 :       MUTEX_UNLOCK( &stream_.mutex );

  011ff	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01207	48 05 88 01 00
	00		 add	 rax, 392		; 00000188H
  0120d	48 8b c8	 mov	 rcx, rax
  01210	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 6427 :       error( RtAudioError::SYSTEM_ERROR );

  01216	ba 09 00 00 00	 mov	 edx, 9
  0121b	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01223	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 6428 :       return;

  01228	e9 1a 0a 00 00	 jmp	 $LN1@callbackEv
$LN57@callbackEv:

; 6429 :     }
; 6430 :     nextWritePointer = ( nextWritePointer + bufferSize1 + bufferSize2 ) % dsBufferSize;

  0122d	8b 44 24 5c	 mov	 eax, DWORD PTR bufferSize1$[rsp]
  01231	8b 4c 24 58	 mov	 ecx, DWORD PTR nextWritePointer$[rsp]
  01235	03 c8		 add	 ecx, eax
  01237	8b c1		 mov	 eax, ecx
  01239	03 44 24 60	 add	 eax, DWORD PTR bufferSize2$[rsp]
  0123d	33 d2		 xor	 edx, edx
  0123f	f7 74 24 6c	 div	 DWORD PTR dsBufferSize$3[rsp]
  01243	8b c2		 mov	 eax, edx
  01245	89 44 24 58	 mov	 DWORD PTR nextWritePointer$[rsp], eax

; 6431 :     handle->bufferPointer[0] = nextWritePointer;

  01249	b8 04 00 00 00	 mov	 eax, 4
  0124e	48 6b c0 00	 imul	 rax, rax, 0
  01252	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  01257	8b 54 24 58	 mov	 edx, DWORD PTR nextWritePointer$[rsp]
  0125b	89 54 01 2c	 mov	 DWORD PTR [rcx+rax+44], edx
$LN41@callbackEv:

; 6432 :   }
; 6433 : 
; 6434 :   // Don't bother draining input
; 6435 :   if ( handle->drainCounter ) {

  0125f	48 8b 44 24 48	 mov	 rax, QWORD PTR handle$[rsp]
  01264	83 38 00	 cmp	 DWORD PTR [rax], 0
  01267	74 15		 je	 SHORT $LN58@callbackEv

; 6436 :     handle->drainCounter++;

  01269	48 8b 44 24 48	 mov	 rax, QWORD PTR handle$[rsp]
  0126e	8b 00		 mov	 eax, DWORD PTR [rax]
  01270	ff c0		 inc	 eax
  01272	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  01277	89 01		 mov	 DWORD PTR [rcx], eax

; 6437 :     goto unlock;

  01279	e9 a5 09 00 00	 jmp	 $unlock$99
$LN58@callbackEv:

; 6438 :   }
; 6439 : 
; 6440 :   if ( stream_.mode == INPUT || stream_.mode == DUPLEX ) {

  0127e	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01286	83 b8 28 01 00
	00 01		 cmp	 DWORD PTR [rax+296], 1
  0128d	74 15		 je	 SHORT $LN61@callbackEv
  0128f	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01297	83 b8 28 01 00
	00 02		 cmp	 DWORD PTR [rax+296], 2
  0129e	0f 85 7f 09 00
	00		 jne	 $unlock$99
$LN61@callbackEv:

; 6441 : 
; 6442 :     // Setup parameters.
; 6443 :     if ( stream_.doConvertBuffer[1] ) {

  012a4	b8 01 00 00 00	 mov	 eax, 1
  012a9	48 6b c0 01	 imul	 rax, rax, 1
  012ad	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  012b5	0f b6 84 01 48
	01 00 00	 movzx	 eax, BYTE PTR [rcx+rax+328]
  012bd	85 c0		 test	 eax, eax
  012bf	74 75		 je	 SHORT $LN62@callbackEv

; 6444 :       buffer = stream_.deviceBuffer;

  012c1	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  012c9	48 8b 80 40 01
	00 00		 mov	 rax, QWORD PTR [rax+320]
  012d0	48 89 44 24 70	 mov	 QWORD PTR buffer$[rsp], rax

; 6445 :       bufferBytes = stream_.bufferSize * stream_.nDeviceChannels[1];

  012d5	b8 04 00 00 00	 mov	 eax, 4
  012da	48 6b c0 01	 imul	 rax, rax, 1
  012de	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  012e6	48 8b 94 24 70
	03 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  012ee	8b 89 54 01 00
	00		 mov	 ecx, DWORD PTR [rcx+340]
  012f4	0f af 8c 02 64
	01 00 00	 imul	 ecx, DWORD PTR [rdx+rax+356]
  012fc	8b c1		 mov	 eax, ecx
  012fe	89 44 24 44	 mov	 DWORD PTR bufferBytes$[rsp], eax

; 6446 :       bufferBytes *= formatBytes( stream_.deviceFormat[1] );

  01302	b8 04 00 00 00	 mov	 eax, 4
  01307	48 6b c0 01	 imul	 rax, rax, 1
  0130b	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01313	8b 94 01 80 01
	00 00		 mov	 edx, DWORD PTR [rcx+rax+384]
  0131a	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01322	e8 00 00 00 00	 call	 ?formatBytes@RtApi@@IEAAIK@Z ; RtApi::formatBytes
  01327	8b 4c 24 44	 mov	 ecx, DWORD PTR bufferBytes$[rsp]
  0132b	0f af c8	 imul	 ecx, eax
  0132e	8b c1		 mov	 eax, ecx
  01330	89 44 24 44	 mov	 DWORD PTR bufferBytes$[rsp], eax

; 6447 :     }
; 6448 :     else {

  01334	eb 73		 jmp	 SHORT $LN63@callbackEv
$LN62@callbackEv:

; 6449 :       buffer = stream_.userBuffer[1];

  01336	b8 08 00 00 00	 mov	 eax, 8
  0133b	48 6b c0 01	 imul	 rax, rax, 1
  0133f	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01347	48 8b 84 01 30
	01 00 00	 mov	 rax, QWORD PTR [rcx+rax+304]
  0134f	48 89 44 24 70	 mov	 QWORD PTR buffer$[rsp], rax

; 6450 :       bufferBytes = stream_.bufferSize * stream_.nUserChannels[1];

  01354	b8 04 00 00 00	 mov	 eax, 4
  01359	48 6b c0 01	 imul	 rax, rax, 1
  0135d	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01365	48 8b 94 24 70
	03 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  0136d	8b 89 54 01 00
	00		 mov	 ecx, DWORD PTR [rcx+340]
  01373	0f af 8c 02 5c
	01 00 00	 imul	 ecx, DWORD PTR [rdx+rax+348]
  0137b	8b c1		 mov	 eax, ecx
  0137d	89 44 24 44	 mov	 DWORD PTR bufferBytes$[rsp], eax

; 6451 :       bufferBytes *= formatBytes( stream_.userFormat );

  01381	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01389	8b 90 7c 01 00
	00		 mov	 edx, DWORD PTR [rax+380]
  0138f	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01397	e8 00 00 00 00	 call	 ?formatBytes@RtApi@@IEAAIK@Z ; RtApi::formatBytes
  0139c	8b 4c 24 44	 mov	 ecx, DWORD PTR bufferBytes$[rsp]
  013a0	0f af c8	 imul	 ecx, eax
  013a3	8b c1		 mov	 eax, ecx
  013a5	89 44 24 44	 mov	 DWORD PTR bufferBytes$[rsp], eax
$LN63@callbackEv:

; 6452 :     }
; 6453 : 
; 6454 :     LPDIRECTSOUNDCAPTUREBUFFER dsBuffer = (LPDIRECTSOUNDCAPTUREBUFFER) handle->buffer[1];

  013a9	b8 08 00 00 00	 mov	 eax, 8
  013ae	48 6b c0 01	 imul	 rax, rax, 1
  013b2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  013b7	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  013bc	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR dsBuffer$10[rsp], rax

; 6455 :     long nextReadPointer = handle->bufferPointer[1];

  013c4	b8 04 00 00 00	 mov	 eax, 4
  013c9	48 6b c0 01	 imul	 rax, rax, 1
  013cd	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  013d2	8b 44 01 2c	 mov	 eax, DWORD PTR [rcx+rax+44]
  013d6	89 44 24 54	 mov	 DWORD PTR nextReadPointer$1[rsp], eax

; 6456 :     DWORD dsBufferSize = handle->dsBufferSize[1];

  013da	b8 04 00 00 00	 mov	 eax, 4
  013df	48 6b c0 01	 imul	 rax, rax, 1
  013e3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  013e8	8b 44 01 34	 mov	 eax, DWORD PTR [rcx+rax+52]
  013ec	89 84 24 84 00
	00 00		 mov	 DWORD PTR dsBufferSize$7[rsp], eax

; 6457 : 
; 6458 :     // Find out where the write and "safe read" pointers are.
; 6459 :     result = dsBuffer->GetCurrentPosition( &currentReadPointer, &safeReadPointer );

  013f3	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR dsBuffer$10[rsp]
  013fb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  013fe	4c 8d 44 24 50	 lea	 r8, QWORD PTR safeReadPointer$[rsp]
  01403	48 8d 94 24 e0
	00 00 00	 lea	 rdx, QWORD PTR currentReadPointer$[rsp]
  0140b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR dsBuffer$10[rsp]
  01413	ff 50 20	 call	 QWORD PTR [rax+32]
  01416	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 6460 :     if ( FAILED( result ) ) {

  0141a	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  0141f	0f 8d c8 00 00
	00		 jge	 $LN64@callbackEv

; 6461 :       errorStream_ << "RtApiDs::callbackEvent: error (" << getErrorString( result ) << ") getting current read position!";

  01425	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  01429	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  0142e	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR tv1260[rsp], rax
  01436	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0143e	48 83 c1 08	 add	 rcx, 8
  01442	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129445
  01449	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0144e	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR tv1260[rsp]
  01456	48 8b d1	 mov	 rdx, rcx
  01459	48 8b c8	 mov	 rcx, rax
  0145c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  01461	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129444
  01468	48 8b c8	 mov	 rcx, rax
  0146b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 6462 :       errorText_ = errorStream_.str();

  01470	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01478	48 83 c0 08	 add	 rax, 8
  0147c	48 8d 94 24 d0
	02 00 00	 lea	 rdx, QWORD PTR $T31[rsp]
  01484	48 8b c8	 mov	 rcx, rax
  01487	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  0148c	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR tv1683[rsp], rax
  01494	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0149c	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  014a2	48 8b 94 24 98
	01 00 00	 mov	 rdx, QWORD PTR tv1683[rsp]
  014aa	48 8b c8	 mov	 rcx, rax
  014ad	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  014b2	48 8d 8c 24 d0
	02 00 00	 lea	 rcx, QWORD PTR $T31[rsp]
  014ba	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 6463 :       MUTEX_UNLOCK( &stream_.mutex );

  014bf	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  014c7	48 05 88 01 00
	00		 add	 rax, 392		; 00000188H
  014cd	48 8b c8	 mov	 rcx, rax
  014d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 6464 :       error( RtAudioError::SYSTEM_ERROR );

  014d6	ba 09 00 00 00	 mov	 edx, 9
  014db	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  014e3	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 6465 :       return;

  014e8	e9 5a 07 00 00	 jmp	 $LN1@callbackEv
$LN64@callbackEv:

; 6466 :     }
; 6467 : 
; 6468 :     if ( safeReadPointer < (DWORD)nextReadPointer ) safeReadPointer += dsBufferSize; // unwrap offset

  014ed	8b 44 24 54	 mov	 eax, DWORD PTR nextReadPointer$1[rsp]
  014f1	39 44 24 50	 cmp	 DWORD PTR safeReadPointer$[rsp], eax
  014f5	73 13		 jae	 SHORT $LN65@callbackEv
  014f7	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR dsBufferSize$7[rsp]
  014fe	8b 4c 24 50	 mov	 ecx, DWORD PTR safeReadPointer$[rsp]
  01502	03 c8		 add	 ecx, eax
  01504	8b c1		 mov	 eax, ecx
  01506	89 44 24 50	 mov	 DWORD PTR safeReadPointer$[rsp], eax
$LN65@callbackEv:

; 6469 :     DWORD endRead = nextReadPointer + bufferBytes;

  0150a	8b 44 24 44	 mov	 eax, DWORD PTR bufferBytes$[rsp]
  0150e	8b 4c 24 54	 mov	 ecx, DWORD PTR nextReadPointer$1[rsp]
  01512	03 c8		 add	 ecx, eax
  01514	8b c1		 mov	 eax, ecx
  01516	89 84 24 80 00
	00 00		 mov	 DWORD PTR endRead$6[rsp], eax

; 6470 : 
; 6471 :     // Handling depends on whether we are INPUT or DUPLEX. 
; 6472 :     // If we're in INPUT mode then waiting is a good thing. If we're in DUPLEX mode,
; 6473 :     // then a wait here will drag the write pointers into the forbidden zone.
; 6474 :     // 
; 6475 :     // In DUPLEX mode, rather than wait, we will back off the read pointer until 
; 6476 :     // it's in a safe position. This causes dropouts, but it seems to be the only 
; 6477 :     // practical way to sync up the read and write pointers reliably, given the 
; 6478 :     // the very complex relationship between phase and increment of the read and write 
; 6479 :     // pointers.
; 6480 :     //
; 6481 :     // In order to minimize audible dropouts in DUPLEX mode, we will
; 6482 :     // provide a pre-roll period of 0.5 seconds in which we return
; 6483 :     // zeros from the read buffer while the pointers sync up.
; 6484 : 
; 6485 :     if ( stream_.mode == DUPLEX ) {

  0151d	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01525	83 b8 28 01 00
	00 02		 cmp	 DWORD PTR [rax+296], 2
  0152c	0f 85 e5 00 00
	00		 jne	 $LN11@callbackEv

; 6486 :       if ( safeReadPointer < endRead ) {

  01532	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR endRead$6[rsp]
  01539	39 44 24 50	 cmp	 DWORD PTR safeReadPointer$[rsp], eax
  0153d	0f 83 cf 00 00
	00		 jae	 $LN68@callbackEv

; 6487 :         if ( duplexPrerollBytes <= 0 ) {

  01543	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0154b	83 b8 8c 02 00
	00 00		 cmp	 DWORD PTR [rax+652], 0
  01552	7f 7f		 jg	 SHORT $LN69@callbackEv

; 6488 :           // Pre-roll time over. Be more agressive.
; 6489 :           int adjustment = endRead-safeReadPointer;

  01554	8b 44 24 50	 mov	 eax, DWORD PTR safeReadPointer$[rsp]
  01558	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR endRead$6[rsp]
  0155f	2b c8		 sub	 ecx, eax
  01561	8b c1		 mov	 eax, ecx
  01563	89 84 24 bc 00
	00 00		 mov	 DWORD PTR adjustment$13[rsp], eax

; 6490 : 
; 6491 :           handle->xrun[1] = true;

  0156a	b8 01 00 00 00	 mov	 eax, 1
  0156f	48 6b c0 01	 imul	 rax, rax, 1
  01573	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  01578	c6 44 01 28 01	 mov	 BYTE PTR [rcx+rax+40], 1

; 6492 :           // Two cases:
; 6493 :           //   - large adjustments: we've probably run out of CPU cycles, so just resync exactly,
; 6494 :           //     and perform fine adjustments later.
; 6495 :           //   - small adjustments: back off by twice as much.
; 6496 :           if ( adjustment >= 2*bufferBytes )

  0157d	8b 44 24 44	 mov	 eax, DWORD PTR bufferBytes$[rsp]
  01581	d1 e0		 shl	 eax, 1
  01583	39 84 24 bc 00
	00 00		 cmp	 DWORD PTR adjustment$13[rsp], eax
  0158a	7c 14		 jl	 SHORT $LN71@callbackEv

; 6497 :             nextReadPointer = safeReadPointer-2*bufferBytes;

  0158c	8b 44 24 44	 mov	 eax, DWORD PTR bufferBytes$[rsp]
  01590	d1 e0		 shl	 eax, 1
  01592	8b 4c 24 50	 mov	 ecx, DWORD PTR safeReadPointer$[rsp]
  01596	2b c8		 sub	 ecx, eax
  01598	8b c1		 mov	 eax, ecx
  0159a	89 44 24 54	 mov	 DWORD PTR nextReadPointer$1[rsp], eax

; 6498 :           else

  0159e	eb 17		 jmp	 SHORT $LN72@callbackEv
$LN71@callbackEv:

; 6499 :             nextReadPointer = safeReadPointer-bufferBytes-adjustment;

  015a0	8b 44 24 44	 mov	 eax, DWORD PTR bufferBytes$[rsp]
  015a4	8b 4c 24 50	 mov	 ecx, DWORD PTR safeReadPointer$[rsp]
  015a8	2b c8		 sub	 ecx, eax
  015aa	8b c1		 mov	 eax, ecx
  015ac	2b 84 24 bc 00
	00 00		 sub	 eax, DWORD PTR adjustment$13[rsp]
  015b3	89 44 24 54	 mov	 DWORD PTR nextReadPointer$1[rsp], eax
$LN72@callbackEv:

; 6500 : 
; 6501 :           if ( nextReadPointer < 0 ) nextReadPointer += dsBufferSize;

  015b7	83 7c 24 54 00	 cmp	 DWORD PTR nextReadPointer$1[rsp], 0
  015bc	7d 13		 jge	 SHORT $LN73@callbackEv
  015be	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR dsBufferSize$7[rsp]
  015c5	8b 4c 24 54	 mov	 ecx, DWORD PTR nextReadPointer$1[rsp]
  015c9	03 c8		 add	 ecx, eax
  015cb	8b c1		 mov	 eax, ecx
  015cd	89 44 24 54	 mov	 DWORD PTR nextReadPointer$1[rsp], eax
$LN73@callbackEv:

; 6502 : 
; 6503 :         }
; 6504 :         else {

  015d1	eb 2c		 jmp	 SHORT $LN70@callbackEv
$LN69@callbackEv:

; 6505 :           // In pre=roll time. Just do it.
; 6506 :           nextReadPointer = safeReadPointer - bufferBytes;

  015d3	8b 44 24 44	 mov	 eax, DWORD PTR bufferBytes$[rsp]
  015d7	8b 4c 24 50	 mov	 ecx, DWORD PTR safeReadPointer$[rsp]
  015db	2b c8		 sub	 ecx, eax
  015dd	8b c1		 mov	 eax, ecx
  015df	89 44 24 54	 mov	 DWORD PTR nextReadPointer$1[rsp], eax
$LN9@callbackEv:

; 6507 :           while ( nextReadPointer < 0 ) nextReadPointer += dsBufferSize;

  015e3	83 7c 24 54 00	 cmp	 DWORD PTR nextReadPointer$1[rsp], 0
  015e8	7d 15		 jge	 SHORT $LN70@callbackEv
  015ea	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR dsBufferSize$7[rsp]
  015f1	8b 4c 24 54	 mov	 ecx, DWORD PTR nextReadPointer$1[rsp]
  015f5	03 c8		 add	 ecx, eax
  015f7	8b c1		 mov	 eax, ecx
  015f9	89 44 24 54	 mov	 DWORD PTR nextReadPointer$1[rsp], eax
  015fd	eb e4		 jmp	 SHORT $LN9@callbackEv
$LN70@callbackEv:

; 6508 :         }
; 6509 :         endRead = nextReadPointer + bufferBytes;

  015ff	8b 44 24 44	 mov	 eax, DWORD PTR bufferBytes$[rsp]
  01603	8b 4c 24 54	 mov	 ecx, DWORD PTR nextReadPointer$1[rsp]
  01607	03 c8		 add	 ecx, eax
  01609	8b c1		 mov	 eax, ecx
  0160b	89 84 24 80 00
	00 00		 mov	 DWORD PTR endRead$6[rsp], eax
$LN68@callbackEv:

; 6510 :       }
; 6511 :     }
; 6512 :     else { // mode == INPUT

  01612	e9 0e 02 00 00	 jmp	 $LN67@callbackEv
$LN11@callbackEv:

; 6513 :       while ( safeReadPointer < endRead && stream_.callbackInfo.isRunning ) {

  01617	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR endRead$6[rsp]
  0161e	39 44 24 50	 cmp	 DWORD PTR safeReadPointer$[rsp], eax
  01622	0f 83 fd 01 00
	00		 jae	 $LN67@callbackEv
  01628	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01630	0f b6 80 e0 01
	00 00		 movzx	 eax, BYTE PTR [rax+480]
  01637	85 c0		 test	 eax, eax
  01639	0f 84 e6 01 00
	00		 je	 $LN67@callbackEv

; 6514 :         // See comments for playback.
; 6515 :         double millis = (endRead - safeReadPointer) * 1000.0;

  0163f	8b 44 24 50	 mov	 eax, DWORD PTR safeReadPointer$[rsp]
  01643	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR endRead$6[rsp]
  0164a	2b c8		 sub	 ecx, eax
  0164c	8b c1		 mov	 eax, ecx
  0164e	8b c0		 mov	 eax, eax
  01650	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  01655	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@408f400000000000
  0165d	f2 0f 11 84 24
	c8 00 00 00	 movsd	 QWORD PTR millis$15[rsp], xmm0

; 6516 :         millis /= ( formatBytes(stream_.deviceFormat[1]) * stream_.nDeviceChannels[1] * stream_.sampleRate);

  01666	b8 04 00 00 00	 mov	 eax, 4
  0166b	48 6b c0 01	 imul	 rax, rax, 1
  0166f	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01677	8b 94 01 80 01
	00 00		 mov	 edx, DWORD PTR [rcx+rax+384]
  0167e	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01686	e8 00 00 00 00	 call	 ?formatBytes@RtApi@@IEAAIK@Z ; RtApi::formatBytes
  0168b	b9 04 00 00 00	 mov	 ecx, 4
  01690	48 6b c9 01	 imul	 rcx, rcx, 1
  01694	48 8b 94 24 70
	03 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  0169c	0f af 84 0a 64
	01 00 00	 imul	 eax, DWORD PTR [rdx+rcx+356]
  016a4	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  016ac	0f af 81 50 01
	00 00		 imul	 eax, DWORD PTR [rcx+336]
  016b3	8b c0		 mov	 eax, eax
  016b5	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  016ba	f2 0f 10 8c 24
	c8 00 00 00	 movsd	 xmm1, QWORD PTR millis$15[rsp]
  016c3	f2 0f 5e c8	 divsd	 xmm1, xmm0
  016c7	0f 28 c1	 movaps	 xmm0, xmm1
  016ca	f2 0f 11 84 24
	c8 00 00 00	 movsd	 QWORD PTR millis$15[rsp], xmm0

; 6517 :         if ( millis < 1.0 ) millis = 1.0;

  016d3	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  016db	66 0f 2f 84 24
	c8 00 00 00	 comisd	 xmm0, QWORD PTR millis$15[rsp]
  016e4	76 11		 jbe	 SHORT $LN74@callbackEv
  016e6	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  016ee	f2 0f 11 84 24
	c8 00 00 00	 movsd	 QWORD PTR millis$15[rsp], xmm0
$LN74@callbackEv:

; 6518 :         Sleep( (DWORD) millis );

  016f7	f2 48 0f 2c 84
	24 c8 00 00 00	 cvttsd2si rax, QWORD PTR millis$15[rsp]
  01701	8b c8		 mov	 ecx, eax
  01703	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep

; 6519 : 
; 6520 :         // Wake up and find out where we are now.
; 6521 :         result = dsBuffer->GetCurrentPosition( &currentReadPointer, &safeReadPointer );

  01709	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR dsBuffer$10[rsp]
  01711	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01714	4c 8d 44 24 50	 lea	 r8, QWORD PTR safeReadPointer$[rsp]
  01719	48 8d 94 24 e0
	00 00 00	 lea	 rdx, QWORD PTR currentReadPointer$[rsp]
  01721	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR dsBuffer$10[rsp]
  01729	ff 50 20	 call	 QWORD PTR [rax+32]
  0172c	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 6522 :         if ( FAILED( result ) ) {

  01730	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  01735	0f 8d c8 00 00
	00		 jge	 $LN75@callbackEv

; 6523 :           errorStream_ << "RtApiDs::callbackEvent: error (" << getErrorString( result ) << ") getting current read position!";

  0173b	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  0173f	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  01744	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR tv1394[rsp], rax
  0174c	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01754	48 83 c1 08	 add	 rcx, 8
  01758	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129458
  0175f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  01764	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR tv1394[rsp]
  0176c	48 8b d1	 mov	 rdx, rcx
  0176f	48 8b c8	 mov	 rcx, rax
  01772	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  01777	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129457
  0177e	48 8b c8	 mov	 rcx, rax
  01781	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 6524 :           errorText_ = errorStream_.str();

  01786	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0178e	48 83 c0 08	 add	 rax, 8
  01792	48 8d 94 24 f0
	02 00 00	 lea	 rdx, QWORD PTR $T32[rsp]
  0179a	48 8b c8	 mov	 rcx, rax
  0179d	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  017a2	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR tv1685[rsp], rax
  017aa	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  017b2	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  017b8	48 8b 94 24 a8
	01 00 00	 mov	 rdx, QWORD PTR tv1685[rsp]
  017c0	48 8b c8	 mov	 rcx, rax
  017c3	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  017c8	48 8d 8c 24 f0
	02 00 00	 lea	 rcx, QWORD PTR $T32[rsp]
  017d0	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 6525 :           MUTEX_UNLOCK( &stream_.mutex );

  017d5	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  017dd	48 05 88 01 00
	00		 add	 rax, 392		; 00000188H
  017e3	48 8b c8	 mov	 rcx, rax
  017e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 6526 :           error( RtAudioError::SYSTEM_ERROR );

  017ec	ba 09 00 00 00	 mov	 edx, 9
  017f1	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  017f9	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 6527 :           return;

  017fe	e9 44 04 00 00	 jmp	 $LN1@callbackEv
$LN75@callbackEv:

; 6528 :         }
; 6529 :       
; 6530 :         if ( safeReadPointer < (DWORD)nextReadPointer ) safeReadPointer += dsBufferSize; // unwrap offset

  01803	8b 44 24 54	 mov	 eax, DWORD PTR nextReadPointer$1[rsp]
  01807	39 44 24 50	 cmp	 DWORD PTR safeReadPointer$[rsp], eax
  0180b	73 13		 jae	 SHORT $LN76@callbackEv
  0180d	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR dsBufferSize$7[rsp]
  01814	8b 4c 24 50	 mov	 ecx, DWORD PTR safeReadPointer$[rsp]
  01818	03 c8		 add	 ecx, eax
  0181a	8b c1		 mov	 eax, ecx
  0181c	89 44 24 50	 mov	 DWORD PTR safeReadPointer$[rsp], eax
$LN76@callbackEv:

; 6531 :       }

  01820	e9 f2 fd ff ff	 jmp	 $LN11@callbackEv
$LN67@callbackEv:

; 6532 :     }
; 6533 : 
; 6534 :     // Lock free space in the buffer
; 6535 :     result = dsBuffer->Lock( nextReadPointer, bufferBytes, &buffer1,

  01825	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR dsBuffer$10[rsp]
  0182d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01830	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  01838	48 8d 4c 24 60	 lea	 rcx, QWORD PTR bufferSize2$[rsp]
  0183d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01842	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buffer2$[rsp]
  0184a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0184f	48 8d 4c 24 5c	 lea	 rcx, QWORD PTR bufferSize1$[rsp]
  01854	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  01859	4c 8d 8c 24 b0
	00 00 00	 lea	 r9, QWORD PTR buffer1$[rsp]
  01861	44 8b 44 24 44	 mov	 r8d, DWORD PTR bufferBytes$[rsp]
  01866	8b 54 24 54	 mov	 edx, DWORD PTR nextReadPointer$1[rsp]
  0186a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR dsBuffer$10[rsp]
  01872	ff 50 40	 call	 QWORD PTR [rax+64]
  01875	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 6536 :                              &bufferSize1, &buffer2, &bufferSize2, 0 );
; 6537 :     if ( FAILED( result ) ) {

  01879	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  0187e	0f 8d c8 00 00
	00		 jge	 $LN77@callbackEv

; 6538 :       errorStream_ << "RtApiDs::callbackEvent: error (" << getErrorString( result ) << ") locking capture buffer!";

  01884	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  01888	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  0188d	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR tv1457[rsp], rax
  01895	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0189d	48 83 c1 08	 add	 rcx, 8
  018a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129462
  018a8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  018ad	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR tv1457[rsp]
  018b5	48 8b d1	 mov	 rdx, rcx
  018b8	48 8b c8	 mov	 rcx, rax
  018bb	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  018c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129461
  018c7	48 8b c8	 mov	 rcx, rax
  018ca	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 6539 :       errorText_ = errorStream_.str();

  018cf	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  018d7	48 83 c0 08	 add	 rax, 8
  018db	48 8d 94 24 10
	03 00 00	 lea	 rdx, QWORD PTR $T33[rsp]
  018e3	48 8b c8	 mov	 rcx, rax
  018e6	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  018eb	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR tv1687[rsp], rax
  018f3	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  018fb	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01901	48 8b 94 24 b8
	01 00 00	 mov	 rdx, QWORD PTR tv1687[rsp]
  01909	48 8b c8	 mov	 rcx, rax
  0190c	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  01911	48 8d 8c 24 10
	03 00 00	 lea	 rcx, QWORD PTR $T33[rsp]
  01919	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 6540 :       MUTEX_UNLOCK( &stream_.mutex );

  0191e	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01926	48 05 88 01 00
	00		 add	 rax, 392		; 00000188H
  0192c	48 8b c8	 mov	 rcx, rax
  0192f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 6541 :       error( RtAudioError::SYSTEM_ERROR );

  01935	ba 09 00 00 00	 mov	 edx, 9
  0193a	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01942	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 6542 :       return;

  01947	e9 fb 02 00 00	 jmp	 $LN1@callbackEv
$LN77@callbackEv:

; 6543 :     }
; 6544 : 
; 6545 :     if ( duplexPrerollBytes <= 0 ) {

  0194c	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01954	83 b8 8c 02 00
	00 00		 cmp	 DWORD PTR [rax+652], 0
  0195b	7f 49		 jg	 SHORT $LN78@callbackEv

; 6546 :       // Copy our buffer into the DS buffer
; 6547 :       CopyMemory( buffer, buffer1, bufferSize1 );

  0195d	8b 44 24 5c	 mov	 eax, DWORD PTR bufferSize1$[rsp]
  01961	44 8b c0	 mov	 r8d, eax
  01964	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR buffer1$[rsp]
  0196c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR buffer$[rsp]
  01971	e8 00 00 00 00	 call	 memcpy

; 6548 :       if ( buffer2 != NULL ) CopyMemory( buffer+bufferSize1, buffer2, bufferSize2 );

  01976	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR buffer2$[rsp], 0
  0197f	74 23		 je	 SHORT $LN80@callbackEv
  01981	8b 44 24 60	 mov	 eax, DWORD PTR bufferSize2$[rsp]
  01985	8b 4c 24 5c	 mov	 ecx, DWORD PTR bufferSize1$[rsp]
  01989	48 8b 54 24 70	 mov	 rdx, QWORD PTR buffer$[rsp]
  0198e	48 03 d1	 add	 rdx, rcx
  01991	48 8b ca	 mov	 rcx, rdx
  01994	44 8b c0	 mov	 r8d, eax
  01997	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR buffer2$[rsp]
  0199f	e8 00 00 00 00	 call	 memcpy
$LN80@callbackEv:

; 6549 :     }
; 6550 :     else {

  019a4	eb 67		 jmp	 SHORT $LN79@callbackEv
$LN78@callbackEv:

; 6551 :       memset( buffer, 0, bufferSize1 );

  019a6	8b 44 24 5c	 mov	 eax, DWORD PTR bufferSize1$[rsp]
  019aa	44 8b c0	 mov	 r8d, eax
  019ad	33 d2		 xor	 edx, edx
  019af	48 8b 4c 24 70	 mov	 rcx, QWORD PTR buffer$[rsp]
  019b4	e8 00 00 00 00	 call	 memset

; 6552 :       if ( buffer2 != NULL ) memset( buffer + bufferSize1, 0, bufferSize2 );

  019b9	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR buffer2$[rsp], 0
  019c2	74 1d		 je	 SHORT $LN81@callbackEv
  019c4	8b 44 24 60	 mov	 eax, DWORD PTR bufferSize2$[rsp]
  019c8	8b 4c 24 5c	 mov	 ecx, DWORD PTR bufferSize1$[rsp]
  019cc	48 8b 54 24 70	 mov	 rdx, QWORD PTR buffer$[rsp]
  019d1	48 03 d1	 add	 rdx, rcx
  019d4	48 8b ca	 mov	 rcx, rdx
  019d7	44 8b c0	 mov	 r8d, eax
  019da	33 d2		 xor	 edx, edx
  019dc	e8 00 00 00 00	 call	 memset
$LN81@callbackEv:

; 6553 :       duplexPrerollBytes -= bufferSize1 + bufferSize2;

  019e1	8b 44 24 60	 mov	 eax, DWORD PTR bufferSize2$[rsp]
  019e5	8b 4c 24 5c	 mov	 ecx, DWORD PTR bufferSize1$[rsp]
  019e9	03 c8		 add	 ecx, eax
  019eb	8b c1		 mov	 eax, ecx
  019ed	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  019f5	8b 89 8c 02 00
	00		 mov	 ecx, DWORD PTR [rcx+652]
  019fb	2b c8		 sub	 ecx, eax
  019fd	8b c1		 mov	 eax, ecx
  019ff	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01a07	89 81 8c 02 00
	00		 mov	 DWORD PTR [rcx+652], eax
$LN79@callbackEv:

; 6554 :     }
; 6555 : 
; 6556 :     // Update our buffer offset and unlock sound buffer
; 6557 :     nextReadPointer = ( nextReadPointer + bufferSize1 + bufferSize2 ) % dsBufferSize;

  01a0d	8b 44 24 5c	 mov	 eax, DWORD PTR bufferSize1$[rsp]
  01a11	8b 4c 24 54	 mov	 ecx, DWORD PTR nextReadPointer$1[rsp]
  01a15	03 c8		 add	 ecx, eax
  01a17	8b c1		 mov	 eax, ecx
  01a19	03 44 24 60	 add	 eax, DWORD PTR bufferSize2$[rsp]
  01a1d	33 d2		 xor	 edx, edx
  01a1f	f7 b4 24 84 00
	00 00		 div	 DWORD PTR dsBufferSize$7[rsp]
  01a26	8b c2		 mov	 eax, edx
  01a28	89 44 24 54	 mov	 DWORD PTR nextReadPointer$1[rsp], eax

; 6558 :     dsBuffer->Unlock( buffer1, bufferSize1, buffer2, bufferSize2 );

  01a2c	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR dsBuffer$10[rsp]
  01a34	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01a37	8b 4c 24 60	 mov	 ecx, DWORD PTR bufferSize2$[rsp]
  01a3b	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  01a3f	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR buffer2$[rsp]
  01a47	44 8b 44 24 5c	 mov	 r8d, DWORD PTR bufferSize1$[rsp]
  01a4c	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR buffer1$[rsp]
  01a54	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR dsBuffer$10[rsp]
  01a5c	ff 50 58	 call	 QWORD PTR [rax+88]

; 6559 :     if ( FAILED( result ) ) {

  01a5f	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  01a64	0f 8d c8 00 00
	00		 jge	 $LN82@callbackEv

; 6560 :       errorStream_ << "RtApiDs::callbackEvent: error (" << getErrorString( result ) << ") unlocking capture buffer!";

  01a6a	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  01a6e	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  01a73	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR tv1545[rsp], rax
  01a7b	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01a83	48 83 c1 08	 add	 rcx, 8
  01a87	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129469
  01a8e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  01a93	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR tv1545[rsp]
  01a9b	48 8b d1	 mov	 rdx, rcx
  01a9e	48 8b c8	 mov	 rcx, rax
  01aa1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  01aa6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129468
  01aad	48 8b c8	 mov	 rcx, rax
  01ab0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 6561 :       errorText_ = errorStream_.str();

  01ab5	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01abd	48 83 c0 08	 add	 rax, 8
  01ac1	48 8d 94 24 30
	03 00 00	 lea	 rdx, QWORD PTR $T34[rsp]
  01ac9	48 8b c8	 mov	 rcx, rax
  01acc	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  01ad1	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR tv1689[rsp], rax
  01ad9	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01ae1	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  01ae7	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR tv1689[rsp]
  01aef	48 8b c8	 mov	 rcx, rax
  01af2	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  01af7	48 8d 8c 24 30
	03 00 00	 lea	 rcx, QWORD PTR $T34[rsp]
  01aff	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 6562 :       MUTEX_UNLOCK( &stream_.mutex );

  01b04	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01b0c	48 05 88 01 00
	00		 add	 rax, 392		; 00000188H
  01b12	48 8b c8	 mov	 rcx, rax
  01b15	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 6563 :       error( RtAudioError::SYSTEM_ERROR );

  01b1b	ba 09 00 00 00	 mov	 edx, 9
  01b20	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01b28	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 6564 :       return;

  01b2d	e9 15 01 00 00	 jmp	 $LN1@callbackEv
$LN82@callbackEv:

; 6565 :     }
; 6566 :     handle->bufferPointer[1] = nextReadPointer;

  01b32	b8 04 00 00 00	 mov	 eax, 4
  01b37	48 6b c0 01	 imul	 rax, rax, 1
  01b3b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  01b40	8b 54 24 54	 mov	 edx, DWORD PTR nextReadPointer$1[rsp]
  01b44	89 54 01 2c	 mov	 DWORD PTR [rcx+rax+44], edx

; 6567 : 
; 6568 :     // No byte swapping necessary in DirectSound implementation.
; 6569 : 
; 6570 :     // If necessary, convert 8-bit data from unsigned to signed.
; 6571 :     if ( stream_.deviceFormat[1] == RTAUDIO_SINT8 )

  01b48	b8 04 00 00 00	 mov	 eax, 4
  01b4d	48 6b c0 01	 imul	 rax, rax, 1
  01b51	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01b59	83 bc 01 80 01
	00 00 01	 cmp	 DWORD PTR [rcx+rax+384], 1
  01b61	75 52		 jne	 SHORT $LN83@callbackEv

; 6572 :       for ( int j=0; j<bufferBytes; j++ ) buffer[j] = (signed char) ( buffer[j] - 128 );

  01b63	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR j$8[rsp], 0
  01b6e	eb 10		 jmp	 SHORT $LN15@callbackEv
$LN13@callbackEv:
  01b70	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR j$8[rsp]
  01b77	ff c0		 inc	 eax
  01b79	89 84 24 88 00
	00 00		 mov	 DWORD PTR j$8[rsp], eax
$LN15@callbackEv:
  01b80	8b 44 24 44	 mov	 eax, DWORD PTR bufferBytes$[rsp]
  01b84	39 84 24 88 00
	00 00		 cmp	 DWORD PTR j$8[rsp], eax
  01b8b	7d 28		 jge	 SHORT $LN83@callbackEv
  01b8d	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR j$8[rsp]
  01b95	48 8b 4c 24 70	 mov	 rcx, QWORD PTR buffer$[rsp]
  01b9a	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  01b9e	2d 80 00 00 00	 sub	 eax, 128		; 00000080H
  01ba3	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR j$8[rsp]
  01bab	48 8b 54 24 70	 mov	 rdx, QWORD PTR buffer$[rsp]
  01bb0	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  01bb3	eb bb		 jmp	 SHORT $LN13@callbackEv
$LN83@callbackEv:

; 6573 : 
; 6574 :     // Do buffer conversion if necessary.
; 6575 :     if ( stream_.doConvertBuffer[1] )

  01bb5	b8 01 00 00 00	 mov	 eax, 1
  01bba	48 6b c0 01	 imul	 rax, rax, 1
  01bbe	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01bc6	0f b6 84 01 48
	01 00 00	 movzx	 eax, BYTE PTR [rcx+rax+328]
  01bce	85 c0		 test	 eax, eax
  01bd0	74 51		 je	 SHORT $unlock$99

; 6576 :       convertBuffer( stream_.userBuffer[1], stream_.deviceBuffer, stream_.convertInfo[1] );

  01bd2	b8 48 00 00 00	 mov	 eax, 72			; 00000048H
  01bd7	48 6b c0 01	 imul	 rax, rax, 1
  01bdb	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01be3	48 8d 84 01 e8
	01 00 00	 lea	 rax, QWORD PTR [rcx+rax+488]
  01beb	b9 08 00 00 00	 mov	 ecx, 8
  01bf0	48 6b c9 01	 imul	 rcx, rcx, 1
  01bf4	4c 8b c8	 mov	 r9, rax
  01bf7	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01bff	4c 8b 80 40 01
	00 00		 mov	 r8, QWORD PTR [rax+320]
  01c06	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01c0e	48 8b 94 08 30
	01 00 00	 mov	 rdx, QWORD PTR [rax+rcx+304]
  01c16	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01c1e	e8 00 00 00 00	 call	 ?convertBuffer@RtApi@@IEAAXPEAD0AEAUConvertInfo@1@@Z ; RtApi::convertBuffer
$unlock$99:

; 6577 :   }
; 6578 : 
; 6579 :  unlock:
; 6580 :   MUTEX_UNLOCK( &stream_.mutex );

  01c23	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01c2b	48 05 88 01 00
	00		 add	 rax, 392		; 00000188H
  01c31	48 8b c8	 mov	 rcx, rax
  01c34	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 6581 :   RtApi::tickStreamTime();

  01c3a	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01c42	e8 00 00 00 00	 call	 ?tickStreamTime@RtApi@@IEAAXXZ ; RtApi::tickStreamTime
$LN1@callbackEv:

; 6582 : }

  01c47	48 8b 8c 24 50
	03 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  01c4f	48 33 cc	 xor	 rcx, rsp
  01c52	e8 00 00 00 00	 call	 __security_check_cookie
  01c57	48 81 c4 68 03
	00 00		 add	 rsp, 872		; 00000368H
  01c5e	c3		 ret	 0
?callbackEvent@RtApiDs@@QEAAXXZ ENDP			; RtApiDs::callbackEvent
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
handle$ = 32
this$ = 64
?abortStream@RtApiDs@@UEAAXXZ PROC			; RtApiDs::abortStream

; 6156 : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 6157 :   verifyStream();

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?verifyStream@RtApi@@IEAAXXZ ; RtApi::verifyStream

; 6158 :   if ( stream_.state == STREAM_STOPPED ) {

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00018	83 b8 2c 01 00
	00 00		 cmp	 DWORD PTR [rax+300], 0
  0001f	75 28		 jne	 SHORT $LN2@abortStrea

; 6159 :     errorText_ = "RtApiDs::abortStream(): the stream is already stopped!";

  00021	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00026	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129213
  00033	48 8b c8	 mov	 rcx, rax
  00036	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 6160 :     error( RtAudioError::WARNING );

  0003b	33 d2		 xor	 edx, edx
  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00042	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 6161 :     return;

  00047	eb 2c		 jmp	 SHORT $LN1@abortStrea
$LN2@abortStrea:

; 6162 :   }
; 6163 : 
; 6164 :   DsHandle *handle = (DsHandle *) stream_.apiHandle;

  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0004e	48 8b 80 20 01
	00 00		 mov	 rax, QWORD PTR [rax+288]
  00055	48 89 44 24 20	 mov	 QWORD PTR handle$[rsp], rax

; 6165 :   handle->drainCounter = 2;

  0005a	48 8b 44 24 20	 mov	 rax, QWORD PTR handle$[rsp]
  0005f	c7 00 02 00 00
	00		 mov	 DWORD PTR [rax], 2

; 6166 : 
; 6167 :   stopStream();

  00065	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0006a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00072	ff 50 40	 call	 QWORD PTR [rax+64]
$LN1@abortStrea:

; 6168 : }

  00075	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00079	c3		 ret	 0
?abortStream@RtApiDs@@UEAAXXZ ENDP			; RtApiDs::abortStream
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
result$ = 64
dataLen$ = 68
handle$ = 72
buffer$1 = 80
audioPtr$ = 88
buffer$2 = 96
tv171 = 104
tv504 = 112
tv519 = 120
tv222 = 128
tv506 = 136
tv271 = 144
tv508 = 152
tv352 = 160
tv510 = 168
tv516 = 176
tv403 = 184
tv512 = 192
tv452 = 200
tv514 = 208
$T3 = 216
$T4 = 248
$T5 = 280
$T6 = 312
$T7 = 344
$T8 = 376
__$ArrayPad$ = 408
this$ = 432
?stopStream@RtApiDs@@UEAAXXZ PROC			; RtApiDs::stopStream

; 6052 : {

$LN29:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 6053 :   verifyStream();

  0001e	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00026	e8 00 00 00 00	 call	 ?verifyStream@RtApi@@IEAAXXZ ; RtApi::verifyStream

; 6054 :   if ( stream_.state == STREAM_STOPPED ) {

  0002b	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00033	83 b8 2c 01 00
	00 00		 cmp	 DWORD PTR [rax+300], 0
  0003a	75 31		 jne	 SHORT $LN2@stopStream

; 6055 :     errorText_ = "RtApiDs::stopStream(): the stream is already stopped!";

  0003c	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00044	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129175
  00051	48 8b c8	 mov	 rcx, rax
  00054	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 6056 :     error( RtAudioError::WARNING );

  00059	33 d2		 xor	 edx, edx
  0005b	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00063	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 6057 :     return;

  00068	e9 ed 06 00 00	 jmp	 $LN1@stopStream
$LN2@stopStream:

; 6058 :   }
; 6059 : 
; 6060 :   HRESULT result = 0;

  0006d	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0

; 6061 :   LPVOID audioPtr;
; 6062 :   DWORD dataLen;
; 6063 :   DsHandle *handle = (DsHandle *) stream_.apiHandle;

  00075	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0007d	48 8b 80 20 01
	00 00		 mov	 rax, QWORD PTR [rax+288]
  00084	48 89 44 24 48	 mov	 QWORD PTR handle$[rsp], rax

; 6064 :   if ( stream_.mode == OUTPUT || stream_.mode == DUPLEX ) {

  00089	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00091	83 b8 28 01 00
	00 00		 cmp	 DWORD PTR [rax+296], 0
  00098	74 15		 je	 SHORT $LN4@stopStream
  0009a	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000a2	83 b8 28 01 00
	00 02		 cmp	 DWORD PTR [rax+296], 2
  000a9	0f 85 24 03 00
	00		 jne	 $LN3@stopStream
$LN4@stopStream:

; 6065 :     if ( handle->drainCounter == 0 ) {

  000af	48 8b 44 24 48	 mov	 rax, QWORD PTR handle$[rsp]
  000b4	83 38 00	 cmp	 DWORD PTR [rax], 0
  000b7	75 1f		 jne	 SHORT $LN5@stopStream

; 6066 :       handle->drainCounter = 2;

  000b9	48 8b 44 24 48	 mov	 rax, QWORD PTR handle$[rsp]
  000be	c7 00 02 00 00
	00		 mov	 DWORD PTR [rax], 2

; 6067 :       WaitForSingleObject( handle->condition, INFINITE );  // block until signaled

  000c4	ba ff ff ff ff	 mov	 edx, -1			; ffffffffH
  000c9	48 8b 44 24 48	 mov	 rax, QWORD PTR handle$[rsp]
  000ce	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  000d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WaitForSingleObject
$LN5@stopStream:

; 6068 :     }
; 6069 : 
; 6070 :     stream_.state = STREAM_STOPPED;

  000d8	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000e0	c7 80 2c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+300], 0

; 6071 : 
; 6072 :     MUTEX_LOCK( &stream_.mutex );

  000ea	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000f2	48 05 88 01 00
	00		 add	 rax, 392		; 00000188H
  000f8	48 8b c8	 mov	 rcx, rax
  000fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EnterCriticalSection

; 6073 : 
; 6074 :     // Stop the buffer and clear memory
; 6075 :     LPDIRECTSOUNDBUFFER buffer = (LPDIRECTSOUNDBUFFER) handle->buffer[0];

  00101	b8 08 00 00 00	 mov	 eax, 8
  00106	48 6b c0 00	 imul	 rax, rax, 0
  0010a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  0010f	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  00114	48 89 44 24 50	 mov	 QWORD PTR buffer$1[rsp], rax

; 6076 :     result = buffer->Stop();

  00119	48 8b 44 24 50	 mov	 rax, QWORD PTR buffer$1[rsp]
  0011e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00121	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buffer$1[rsp]
  00126	ff 90 90 00 00
	00		 call	 QWORD PTR [rax+144]
  0012c	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 6077 :     if ( FAILED( result ) ) {

  00130	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  00135	0f 8d 93 00 00
	00		 jge	 $LN6@stopStream

; 6078 :       errorStream_ << "RtApiDs::stopStream: error (" << getErrorString( result ) << ") stopping output buffer!";

  0013b	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  0013f	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  00144	48 89 44 24 68	 mov	 QWORD PTR tv171[rsp], rax
  00149	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00151	48 83 c1 08	 add	 rcx, 8
  00155	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129181
  0015c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00161	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv171[rsp]
  00166	48 8b d1	 mov	 rdx, rcx
  00169	48 8b c8	 mov	 rcx, rax
  0016c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00171	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129180
  00178	48 8b c8	 mov	 rcx, rax
  0017b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 6079 :       errorText_ = errorStream_.str();

  00180	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00188	48 83 c0 08	 add	 rax, 8
  0018c	48 8d 94 24 d8
	00 00 00	 lea	 rdx, QWORD PTR $T3[rsp]
  00194	48 8b c8	 mov	 rcx, rax
  00197	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  0019c	48 89 44 24 70	 mov	 QWORD PTR tv504[rsp], rax
  001a1	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001a9	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  001af	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv504[rsp]
  001b4	48 8b c8	 mov	 rcx, rax
  001b7	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  001bc	48 8d 8c 24 d8
	00 00 00	 lea	 rcx, QWORD PTR $T3[rsp]
  001c4	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 6080 :       goto unlock;

  001c9	e9 51 05 00 00	 jmp	 $unlock$30
$LN6@stopStream:

; 6081 :     }
; 6082 : 
; 6083 :     // Lock the buffer and clear it so that if we start to play again,
; 6084 :     // we won't have old data playing.
; 6085 :     result = buffer->Lock( 0, handle->dsBufferSize[0], &audioPtr, &dataLen, NULL, NULL, 0 );

  001ce	b8 04 00 00 00	 mov	 eax, 4
  001d3	48 6b c0 00	 imul	 rax, rax, 0
  001d7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buffer$1[rsp]
  001dc	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001df	48 89 4c 24 78	 mov	 QWORD PTR tv519[rsp], rcx
  001e4	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  001ec	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  001f5	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  001fe	48 8d 54 24 44	 lea	 rdx, QWORD PTR dataLen$[rsp]
  00203	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  00208	4c 8d 4c 24 58	 lea	 r9, QWORD PTR audioPtr$[rsp]
  0020d	48 8b 54 24 48	 mov	 rdx, QWORD PTR handle$[rsp]
  00212	44 8b 44 02 34	 mov	 r8d, DWORD PTR [rdx+rax+52]
  00217	33 d2		 xor	 edx, edx
  00219	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buffer$1[rsp]
  0021e	48 8b 44 24 78	 mov	 rax, QWORD PTR tv519[rsp]
  00223	ff 50 58	 call	 QWORD PTR [rax+88]
  00226	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 6086 :     if ( FAILED( result ) ) {

  0022a	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  0022f	0f 8d 9f 00 00
	00		 jge	 $LN8@stopStream

; 6087 :       errorStream_ << "RtApiDs::stopStream: error (" << getErrorString( result ) << ") locking output buffer!";

  00235	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  00239	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  0023e	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv222[rsp], rax
  00246	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0024e	48 83 c1 08	 add	 rcx, 8
  00252	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129185
  00259	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0025e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv222[rsp]
  00266	48 8b d1	 mov	 rdx, rcx
  00269	48 8b c8	 mov	 rcx, rax
  0026c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00271	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129184
  00278	48 8b c8	 mov	 rcx, rax
  0027b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 6088 :       errorText_ = errorStream_.str();

  00280	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00288	48 83 c0 08	 add	 rax, 8
  0028c	48 8d 94 24 f8
	00 00 00	 lea	 rdx, QWORD PTR $T4[rsp]
  00294	48 8b c8	 mov	 rcx, rax
  00297	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  0029c	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv506[rsp], rax
  002a4	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  002ac	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  002b2	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR tv506[rsp]
  002ba	48 8b c8	 mov	 rcx, rax
  002bd	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  002c2	48 8d 8c 24 f8
	00 00 00	 lea	 rcx, QWORD PTR $T4[rsp]
  002ca	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 6089 :       goto unlock;

  002cf	e9 4b 04 00 00	 jmp	 $unlock$30
$LN8@stopStream:

; 6090 :     }
; 6091 : 
; 6092 :     // Zero the DS buffer
; 6093 :     ZeroMemory( audioPtr, dataLen );

  002d4	8b 44 24 44	 mov	 eax, DWORD PTR dataLen$[rsp]
  002d8	44 8b c0	 mov	 r8d, eax
  002db	33 d2		 xor	 edx, edx
  002dd	48 8b 4c 24 58	 mov	 rcx, QWORD PTR audioPtr$[rsp]
  002e2	e8 00 00 00 00	 call	 memset

; 6094 : 
; 6095 :     // Unlock the DS buffer
; 6096 :     result = buffer->Unlock( audioPtr, dataLen, NULL, 0 );

  002e7	48 8b 44 24 50	 mov	 rax, QWORD PTR buffer$1[rsp]
  002ec	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002ef	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  002f7	45 33 c9	 xor	 r9d, r9d
  002fa	44 8b 44 24 44	 mov	 r8d, DWORD PTR dataLen$[rsp]
  002ff	48 8b 54 24 58	 mov	 rdx, QWORD PTR audioPtr$[rsp]
  00304	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buffer$1[rsp]
  00309	ff 90 98 00 00
	00		 call	 QWORD PTR [rax+152]
  0030f	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 6097 :     if ( FAILED( result ) ) {

  00313	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  00318	0f 8d 9f 00 00
	00		 jge	 $LN10@stopStream

; 6098 :       errorStream_ << "RtApiDs::stopStream: error (" << getErrorString( result ) << ") unlocking output buffer!";

  0031e	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  00322	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  00327	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv271[rsp], rax
  0032f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00337	48 83 c1 08	 add	 rcx, 8
  0033b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129189
  00342	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00347	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv271[rsp]
  0034f	48 8b d1	 mov	 rdx, rcx
  00352	48 8b c8	 mov	 rcx, rax
  00355	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0035a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129188
  00361	48 8b c8	 mov	 rcx, rax
  00364	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 6099 :       errorText_ = errorStream_.str();

  00369	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00371	48 83 c0 08	 add	 rax, 8
  00375	48 8d 94 24 18
	01 00 00	 lea	 rdx, QWORD PTR $T5[rsp]
  0037d	48 8b c8	 mov	 rcx, rax
  00380	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00385	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv508[rsp], rax
  0038d	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00395	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  0039b	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR tv508[rsp]
  003a3	48 8b c8	 mov	 rcx, rax
  003a6	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  003ab	48 8d 8c 24 18
	01 00 00	 lea	 rcx, QWORD PTR $T5[rsp]
  003b3	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 6100 :       goto unlock;

  003b8	e9 62 03 00 00	 jmp	 $unlock$30
$LN10@stopStream:

; 6101 :     }
; 6102 : 
; 6103 :     // If we start playing again, we must begin at beginning of buffer.
; 6104 :     handle->bufferPointer[0] = 0;

  003bd	b8 04 00 00 00	 mov	 eax, 4
  003c2	48 6b c0 00	 imul	 rax, rax, 0
  003c6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  003cb	c7 44 01 2c 00
	00 00 00	 mov	 DWORD PTR [rcx+rax+44], 0
$LN3@stopStream:

; 6105 :   }
; 6106 : 
; 6107 :   if ( stream_.mode == INPUT || stream_.mode == DUPLEX ) {

  003d3	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  003db	83 b8 28 01 00
	00 01		 cmp	 DWORD PTR [rax+296], 1
  003e2	74 15		 je	 SHORT $LN13@stopStream
  003e4	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  003ec	83 b8 28 01 00
	00 02		 cmp	 DWORD PTR [rax+296], 2
  003f3	0f 85 26 03 00
	00		 jne	 $unlock$30
$LN13@stopStream:

; 6108 :     LPDIRECTSOUNDCAPTUREBUFFER buffer = (LPDIRECTSOUNDCAPTUREBUFFER) handle->buffer[1];

  003f9	b8 08 00 00 00	 mov	 eax, 8
  003fe	48 6b c0 01	 imul	 rax, rax, 1
  00402	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  00407	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  0040c	48 89 44 24 60	 mov	 QWORD PTR buffer$2[rsp], rax

; 6109 :     audioPtr = NULL;

  00411	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR audioPtr$[rsp], 0

; 6110 :     dataLen = 0;

  0041a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR dataLen$[rsp], 0

; 6111 : 
; 6112 :     stream_.state = STREAM_STOPPED;

  00422	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0042a	c7 80 2c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+300], 0

; 6113 : 
; 6114 :     if ( stream_.mode != DUPLEX )

  00434	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0043c	83 b8 28 01 00
	00 02		 cmp	 DWORD PTR [rax+296], 2
  00443	74 17		 je	 SHORT $LN14@stopStream

; 6115 :       MUTEX_LOCK( &stream_.mutex );

  00445	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0044d	48 05 88 01 00
	00		 add	 rax, 392		; 00000188H
  00453	48 8b c8	 mov	 rcx, rax
  00456	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EnterCriticalSection
$LN14@stopStream:

; 6116 : 
; 6117 :     result = buffer->Stop();

  0045c	48 8b 44 24 60	 mov	 rax, QWORD PTR buffer$2[rsp]
  00461	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00464	48 8b 4c 24 60	 mov	 rcx, QWORD PTR buffer$2[rsp]
  00469	ff 50 50	 call	 QWORD PTR [rax+80]
  0046c	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 6118 :     if ( FAILED( result ) ) {

  00470	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  00475	0f 8d 9f 00 00
	00		 jge	 $LN15@stopStream

; 6119 :       errorStream_ << "RtApiDs::stopStream: error (" << getErrorString( result ) << ") stopping input buffer!";

  0047b	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  0047f	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  00484	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv352[rsp], rax
  0048c	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00494	48 83 c1 08	 add	 rcx, 8
  00498	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129196
  0049f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  004a4	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv352[rsp]
  004ac	48 8b d1	 mov	 rdx, rcx
  004af	48 8b c8	 mov	 rcx, rax
  004b2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  004b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129195
  004be	48 8b c8	 mov	 rcx, rax
  004c1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 6120 :       errorText_ = errorStream_.str();

  004c6	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  004ce	48 83 c0 08	 add	 rax, 8
  004d2	48 8d 94 24 38
	01 00 00	 lea	 rdx, QWORD PTR $T6[rsp]
  004da	48 8b c8	 mov	 rcx, rax
  004dd	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  004e2	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv510[rsp], rax
  004ea	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  004f2	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  004f8	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR tv510[rsp]
  00500	48 8b c8	 mov	 rcx, rax
  00503	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00508	48 8d 8c 24 38
	01 00 00	 lea	 rcx, QWORD PTR $T6[rsp]
  00510	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 6121 :       goto unlock;

  00515	e9 05 02 00 00	 jmp	 $unlock$30
$LN15@stopStream:

; 6122 :     }
; 6123 : 
; 6124 :     // Lock the buffer and clear it so that if we start to play again,
; 6125 :     // we won't have old data playing.
; 6126 :     result = buffer->Lock( 0, handle->dsBufferSize[1], &audioPtr, &dataLen, NULL, NULL, 0 );

  0051a	b8 04 00 00 00	 mov	 eax, 4
  0051f	48 6b c0 01	 imul	 rax, rax, 1
  00523	48 8b 4c 24 60	 mov	 rcx, QWORD PTR buffer$2[rsp]
  00528	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0052b	48 89 8c 24 b0
	00 00 00	 mov	 QWORD PTR tv516[rsp], rcx
  00533	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  0053b	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00544	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  0054d	48 8d 54 24 44	 lea	 rdx, QWORD PTR dataLen$[rsp]
  00552	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  00557	4c 8d 4c 24 58	 lea	 r9, QWORD PTR audioPtr$[rsp]
  0055c	48 8b 54 24 48	 mov	 rdx, QWORD PTR handle$[rsp]
  00561	44 8b 44 02 34	 mov	 r8d, DWORD PTR [rdx+rax+52]
  00566	33 d2		 xor	 edx, edx
  00568	48 8b 4c 24 60	 mov	 rcx, QWORD PTR buffer$2[rsp]
  0056d	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv516[rsp]
  00575	ff 50 40	 call	 QWORD PTR [rax+64]
  00578	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 6127 :     if ( FAILED( result ) ) {

  0057c	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  00581	0f 8d 9f 00 00
	00		 jge	 $LN17@stopStream

; 6128 :       errorStream_ << "RtApiDs::stopStream: error (" << getErrorString( result ) << ") locking input buffer!";

  00587	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  0058b	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  00590	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv403[rsp], rax
  00598	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  005a0	48 83 c1 08	 add	 rcx, 8
  005a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129200
  005ab	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  005b0	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv403[rsp]
  005b8	48 8b d1	 mov	 rdx, rcx
  005bb	48 8b c8	 mov	 rcx, rax
  005be	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  005c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129199
  005ca	48 8b c8	 mov	 rcx, rax
  005cd	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 6129 :       errorText_ = errorStream_.str();

  005d2	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  005da	48 83 c0 08	 add	 rax, 8
  005de	48 8d 94 24 58
	01 00 00	 lea	 rdx, QWORD PTR $T7[rsp]
  005e6	48 8b c8	 mov	 rcx, rax
  005e9	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  005ee	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv512[rsp], rax
  005f6	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  005fe	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00604	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR tv512[rsp]
  0060c	48 8b c8	 mov	 rcx, rax
  0060f	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00614	48 8d 8c 24 58
	01 00 00	 lea	 rcx, QWORD PTR $T7[rsp]
  0061c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 6130 :       goto unlock;

  00621	e9 f9 00 00 00	 jmp	 $unlock$30
$LN17@stopStream:

; 6131 :     }
; 6132 : 
; 6133 :     // Zero the DS buffer
; 6134 :     ZeroMemory( audioPtr, dataLen );

  00626	8b 44 24 44	 mov	 eax, DWORD PTR dataLen$[rsp]
  0062a	44 8b c0	 mov	 r8d, eax
  0062d	33 d2		 xor	 edx, edx
  0062f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR audioPtr$[rsp]
  00634	e8 00 00 00 00	 call	 memset

; 6135 : 
; 6136 :     // Unlock the DS buffer
; 6137 :     result = buffer->Unlock( audioPtr, dataLen, NULL, 0 );

  00639	48 8b 44 24 60	 mov	 rax, QWORD PTR buffer$2[rsp]
  0063e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00641	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00649	45 33 c9	 xor	 r9d, r9d
  0064c	44 8b 44 24 44	 mov	 r8d, DWORD PTR dataLen$[rsp]
  00651	48 8b 54 24 58	 mov	 rdx, QWORD PTR audioPtr$[rsp]
  00656	48 8b 4c 24 60	 mov	 rcx, QWORD PTR buffer$2[rsp]
  0065b	ff 50 58	 call	 QWORD PTR [rax+88]
  0065e	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 6138 :     if ( FAILED( result ) ) {

  00662	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  00667	0f 8d 9c 00 00
	00		 jge	 $LN19@stopStream

; 6139 :       errorStream_ << "RtApiDs::stopStream: error (" << getErrorString( result ) << ") unlocking input buffer!";

  0066d	8b 4c 24 40	 mov	 ecx, DWORD PTR result$[rsp]
  00671	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  00676	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv452[rsp], rax
  0067e	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00686	48 83 c1 08	 add	 rcx, 8
  0068a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129204
  00691	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00696	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR tv452[rsp]
  0069e	48 8b d1	 mov	 rdx, rcx
  006a1	48 8b c8	 mov	 rcx, rax
  006a4	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  006a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129203
  006b0	48 8b c8	 mov	 rcx, rax
  006b3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 6140 :       errorText_ = errorStream_.str();

  006b8	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  006c0	48 83 c0 08	 add	 rax, 8
  006c4	48 8d 94 24 78
	01 00 00	 lea	 rdx, QWORD PTR $T8[rsp]
  006cc	48 8b c8	 mov	 rcx, rax
  006cf	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  006d4	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv514[rsp], rax
  006dc	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  006e4	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  006ea	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR tv514[rsp]
  006f2	48 8b c8	 mov	 rcx, rax
  006f5	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  006fa	48 8d 8c 24 78
	01 00 00	 lea	 rcx, QWORD PTR $T8[rsp]
  00702	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 6141 :       goto unlock;

  00707	eb 16		 jmp	 SHORT $unlock$30
$LN19@stopStream:

; 6142 :     }
; 6143 : 
; 6144 :     // If we start recording again, we must begin at beginning of buffer.
; 6145 :     handle->bufferPointer[1] = 0;

  00709	b8 04 00 00 00	 mov	 eax, 4
  0070e	48 6b c0 01	 imul	 rax, rax, 1
  00712	48 8b 4c 24 48	 mov	 rcx, QWORD PTR handle$[rsp]
  00717	c7 44 01 2c 00
	00 00 00	 mov	 DWORD PTR [rcx+rax+44], 0
$unlock$30:

; 6146 :   }
; 6147 : 
; 6148 :  unlock:
; 6149 :   timeEndPeriod( 1 ); // revert to normal scheduler frequency on lesser windows.

  0071f	b9 01 00 00 00	 mov	 ecx, 1
  00724	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_timeEndPeriod

; 6150 :   MUTEX_UNLOCK( &stream_.mutex );

  0072a	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00732	48 05 88 01 00
	00		 add	 rax, 392		; 00000188H
  00738	48 8b c8	 mov	 rcx, rax
  0073b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 6151 : 
; 6152 :   if ( FAILED( result ) ) error( RtAudioError::SYSTEM_ERROR );

  00741	83 7c 24 40 00	 cmp	 DWORD PTR result$[rsp], 0
  00746	7d 12		 jge	 SHORT $LN1@stopStream
  00748	ba 09 00 00 00	 mov	 edx, 9
  0074d	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00755	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error
$LN1@stopStream:

; 6153 : }

  0075a	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00762	48 33 cc	 xor	 rcx, rsp
  00765	e8 00 00 00 00	 call	 __security_check_cookie
  0076a	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  00771	c3		 ret	 0
?stopStream@RtApiDs@@UEAAXXZ ENDP			; RtApiDs::stopStream
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
result$ = 32
handle$ = 40
buffer$1 = 48
buffer$2 = 56
tv145 = 64
tv203 = 72
tv313 = 80
tv262 = 88
tv315 = 96
$T3 = 104
$T4 = 136
__$ArrayPad$ = 168
this$ = 192
?startStream@RtApiDs@@UEAAXXZ PROC			; RtApiDs::startStream

; 5996 : {

$LN16:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 5997 :   verifyStream();

  0001e	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00026	e8 00 00 00 00	 call	 ?verifyStream@RtApi@@IEAAXXZ ; RtApi::verifyStream

; 5998 :   if ( stream_.state == STREAM_RUNNING ) {

  0002b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00033	83 b8 2c 01 00
	00 02		 cmp	 DWORD PTR [rax+300], 2
  0003a	75 31		 jne	 SHORT $LN2@startStrea

; 5999 :     errorText_ = "RtApiDs::startStream(): the stream is already running!";

  0003c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00044	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129097
  00051	48 8b c8	 mov	 rcx, rax
  00054	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 6000 :     error( RtAudioError::WARNING );

  00059	33 d2		 xor	 edx, edx
  0005b	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00063	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 6001 :     return;

  00068	e9 26 03 00 00	 jmp	 $LN1@startStrea
$LN2@startStrea:

; 6002 :   }
; 6003 : 
; 6004 :   DsHandle *handle = (DsHandle *) stream_.apiHandle;

  0006d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00075	48 8b 80 20 01
	00 00		 mov	 rax, QWORD PTR [rax+288]
  0007c	48 89 44 24 28	 mov	 QWORD PTR handle$[rsp], rax

; 6005 : 
; 6006 :   // Increase scheduler frequency on lesser windows (a side-effect of
; 6007 :   // increasing timer accuracy).  On greater windows (Win2K or later),
; 6008 :   // this is already in effect.
; 6009 :   timeBeginPeriod( 1 ); 

  00081	b9 01 00 00 00	 mov	 ecx, 1
  00086	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_timeBeginPeriod

; 6010 : 
; 6011 :   buffersRolling = false;

  0008c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00094	c6 80 89 02 00
	00 00		 mov	 BYTE PTR [rax+649], 0

; 6012 :   duplexPrerollBytes = 0;

  0009b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000a3	c7 80 8c 02 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+652], 0

; 6013 : 
; 6014 :   if ( stream_.mode == DUPLEX ) {

  000ad	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000b5	83 b8 28 01 00
	00 02		 cmp	 DWORD PTR [rax+296], 2
  000bc	0f 85 94 00 00
	00		 jne	 $LN3@startStrea

; 6015 :     // 0.5 seconds of silence in DUPLEX mode while the devices spin up and synchronize.
; 6016 :     duplexPrerollBytes = (int) ( 0.5 * stream_.sampleRate * formatBytes( stream_.deviceFormat[1] ) * stream_.nDeviceChannels[1] );

  000c2	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000ca	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  000d0	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  000d5	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3fe0000000000000
  000dd	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  000e1	0f 28 c1	 movaps	 xmm0, xmm1
  000e4	f2 0f 11 44 24
	40		 movsd	 QWORD PTR tv145[rsp], xmm0
  000ea	b8 04 00 00 00	 mov	 eax, 4
  000ef	48 6b c0 01	 imul	 rax, rax, 1
  000f3	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000fb	8b 94 01 80 01
	00 00		 mov	 edx, DWORD PTR [rcx+rax+384]
  00102	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0010a	e8 00 00 00 00	 call	 ?formatBytes@RtApi@@IEAAIK@Z ; RtApi::formatBytes
  0010f	8b c0		 mov	 eax, eax
  00111	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  00116	f2 0f 10 4c 24
	40		 movsd	 xmm1, QWORD PTR tv145[rsp]
  0011c	f2 0f 59 c8	 mulsd	 xmm1, xmm0
  00120	0f 28 c1	 movaps	 xmm0, xmm1
  00123	b8 04 00 00 00	 mov	 eax, 4
  00128	48 6b c0 01	 imul	 rax, rax, 1
  0012c	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00134	8b 84 01 64 01
	00 00		 mov	 eax, DWORD PTR [rcx+rax+356]
  0013b	f2 48 0f 2a c8	 cvtsi2sd xmm1, rax
  00140	f2 0f 59 c1	 mulsd	 xmm0, xmm1
  00144	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00148	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00150	89 81 8c 02 00
	00		 mov	 DWORD PTR [rcx+652], eax
$LN3@startStrea:

; 6017 :   }
; 6018 : 
; 6019 :   HRESULT result = 0;

  00156	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0

; 6020 :   if ( stream_.mode == OUTPUT || stream_.mode == DUPLEX ) {

  0015e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00166	83 b8 28 01 00
	00 00		 cmp	 DWORD PTR [rax+296], 0
  0016d	74 15		 je	 SHORT $LN5@startStrea
  0016f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00177	83 b8 28 01 00
	00 02		 cmp	 DWORD PTR [rax+296], 2
  0017e	0f 85 cf 00 00
	00		 jne	 $LN4@startStrea
$LN5@startStrea:

; 6021 : 
; 6022 :     LPDIRECTSOUNDBUFFER buffer = (LPDIRECTSOUNDBUFFER) handle->buffer[0];

  00184	b8 08 00 00 00	 mov	 eax, 8
  00189	48 6b c0 00	 imul	 rax, rax, 0
  0018d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR handle$[rsp]
  00192	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  00197	48 89 44 24 30	 mov	 QWORD PTR buffer$1[rsp], rax

; 6023 :     result = buffer->Play( 0, 0, DSBPLAY_LOOPING );

  0019c	48 8b 44 24 30	 mov	 rax, QWORD PTR buffer$1[rsp]
  001a1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001a4	41 b9 01 00 00
	00		 mov	 r9d, 1
  001aa	45 33 c0	 xor	 r8d, r8d
  001ad	33 d2		 xor	 edx, edx
  001af	48 8b 4c 24 30	 mov	 rcx, QWORD PTR buffer$1[rsp]
  001b4	ff 50 60	 call	 QWORD PTR [rax+96]
  001b7	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 6024 :     if ( FAILED( result ) ) {

  001bb	83 7c 24 20 00	 cmp	 DWORD PTR result$[rsp], 0
  001c0	0f 8d 8d 00 00
	00		 jge	 $LN4@startStrea

; 6025 :       errorStream_ << "RtApiDs::startStream: error (" << getErrorString( result ) << ") starting output buffer!";

  001c6	8b 4c 24 20	 mov	 ecx, DWORD PTR result$[rsp]
  001ca	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  001cf	48 89 44 24 48	 mov	 QWORD PTR tv203[rsp], rax
  001d4	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001dc	48 83 c1 08	 add	 rcx, 8
  001e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129103
  001e7	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  001ec	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv203[rsp]
  001f1	48 8b d1	 mov	 rdx, rcx
  001f4	48 8b c8	 mov	 rcx, rax
  001f7	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  001fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129102
  00203	48 8b c8	 mov	 rcx, rax
  00206	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 6026 :       errorText_ = errorStream_.str();

  0020b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00213	48 83 c0 08	 add	 rax, 8
  00217	48 8d 54 24 68	 lea	 rdx, QWORD PTR $T3[rsp]
  0021c	48 8b c8	 mov	 rcx, rax
  0021f	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00224	48 89 44 24 50	 mov	 QWORD PTR tv313[rsp], rax
  00229	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00231	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00237	48 8b 54 24 50	 mov	 rdx, QWORD PTR tv313[rsp]
  0023c	48 8b c8	 mov	 rcx, rax
  0023f	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00244	48 8d 4c 24 68	 lea	 rcx, QWORD PTR $T3[rsp]
  00249	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 6027 :       goto unlock;

  0024e	e9 27 01 00 00	 jmp	 $unlock$17
$LN4@startStrea:

; 6028 :     }
; 6029 :   }
; 6030 : 
; 6031 :   if ( stream_.mode == INPUT || stream_.mode == DUPLEX ) {

  00253	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0025b	83 b8 28 01 00
	00 01		 cmp	 DWORD PTR [rax+296], 1
  00262	74 15		 je	 SHORT $LN9@startStrea
  00264	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0026c	83 b8 28 01 00
	00 02		 cmp	 DWORD PTR [rax+296], 2
  00273	0f 85 cc 00 00
	00		 jne	 $LN8@startStrea
$LN9@startStrea:

; 6032 : 
; 6033 :     LPDIRECTSOUNDCAPTUREBUFFER buffer = (LPDIRECTSOUNDCAPTUREBUFFER) handle->buffer[1];

  00279	b8 08 00 00 00	 mov	 eax, 8
  0027e	48 6b c0 01	 imul	 rax, rax, 1
  00282	48 8b 4c 24 28	 mov	 rcx, QWORD PTR handle$[rsp]
  00287	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  0028c	48 89 44 24 38	 mov	 QWORD PTR buffer$2[rsp], rax

; 6034 :     result = buffer->Start( DSCBSTART_LOOPING );

  00291	48 8b 44 24 38	 mov	 rax, QWORD PTR buffer$2[rsp]
  00296	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00299	ba 01 00 00 00	 mov	 edx, 1
  0029e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR buffer$2[rsp]
  002a3	ff 50 48	 call	 QWORD PTR [rax+72]
  002a6	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 6035 :     if ( FAILED( result ) ) {

  002aa	83 7c 24 20 00	 cmp	 DWORD PTR result$[rsp], 0
  002af	0f 8d 90 00 00
	00		 jge	 $LN8@startStrea

; 6036 :       errorStream_ << "RtApiDs::startStream: error (" << getErrorString( result ) << ") starting input buffer!";

  002b5	8b 4c 24 20	 mov	 ecx, DWORD PTR result$[rsp]
  002b9	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  002be	48 89 44 24 58	 mov	 QWORD PTR tv262[rsp], rax
  002c3	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  002cb	48 83 c1 08	 add	 rcx, 8
  002cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129109
  002d6	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  002db	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv262[rsp]
  002e0	48 8b d1	 mov	 rdx, rcx
  002e3	48 8b c8	 mov	 rcx, rax
  002e6	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  002eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129108
  002f2	48 8b c8	 mov	 rcx, rax
  002f5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 6037 :       errorText_ = errorStream_.str();

  002fa	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00302	48 83 c0 08	 add	 rax, 8
  00306	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR $T4[rsp]
  0030e	48 8b c8	 mov	 rcx, rax
  00311	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00316	48 89 44 24 60	 mov	 QWORD PTR tv315[rsp], rax
  0031b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00323	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00329	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv315[rsp]
  0032e	48 8b c8	 mov	 rcx, rax
  00331	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00336	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR $T4[rsp]
  0033e	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 6038 :       goto unlock;

  00343	eb 35		 jmp	 SHORT $unlock$17
$LN8@startStrea:

; 6039 :     }
; 6040 :   }
; 6041 : 
; 6042 :   handle->drainCounter = 0;

  00345	48 8b 44 24 28	 mov	 rax, QWORD PTR handle$[rsp]
  0034a	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 6043 :   handle->internalDrain = false;

  00350	48 8b 44 24 28	 mov	 rax, QWORD PTR handle$[rsp]
  00355	c6 40 04 00	 mov	 BYTE PTR [rax+4], 0

; 6044 :   ResetEvent( handle->condition );

  00359	48 8b 44 24 28	 mov	 rax, QWORD PTR handle$[rsp]
  0035e	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  00362	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ResetEvent

; 6045 :   stream_.state = STREAM_RUNNING;

  00368	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00370	c7 80 2c 01 00
	00 02 00 00 00	 mov	 DWORD PTR [rax+300], 2
$unlock$17:

; 6046 : 
; 6047 :  unlock:
; 6048 :   if ( FAILED( result ) ) error( RtAudioError::SYSTEM_ERROR );

  0037a	83 7c 24 20 00	 cmp	 DWORD PTR result$[rsp], 0
  0037f	7d 12		 jge	 SHORT $LN1@startStrea
  00381	ba 09 00 00 00	 mov	 edx, 9
  00386	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0038e	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error
$LN1@startStrea:

; 6049 : }

  00393	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0039b	48 33 cc	 xor	 rcx, rsp
  0039e	e8 00 00 00 00	 call	 __security_check_cookie
  003a3	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  003aa	c3		 ret	 0
?startStream@RtApiDs@@UEAAXXZ ENDP			; RtApiDs::startStream
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
i$1 = 32
handle$ = 40
buffer$2 = 48
buffer$3 = 56
object$4 = 64
object$5 = 72
$T6 = 80
this$ = 112
?closeStream@RtApiDs@@UEAAXXZ PROC			; RtApiDs::closeStream

; 5942 : {

$LN14:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 5943 :   if ( stream_.state == STREAM_CLOSED ) {

  00009	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0000e	83 b8 2c 01 00
	00 ce		 cmp	 DWORD PTR [rax+300], -50 ; ffffffffffffffceH
  00015	75 2b		 jne	 SHORT $LN5@closeStrea

; 5944 :     errorText_ = "RtApiDs::closeStream(): no open stream to close!";

  00017	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0001c	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00022	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129059
  00029	48 8b c8	 mov	 rcx, rax
  0002c	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 5945 :     error( RtAudioError::WARNING );

  00031	33 d2		 xor	 edx, edx
  00033	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00038	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 5946 :     return;

  0003d	e9 36 02 00 00	 jmp	 $LN1@closeStrea
$LN5@closeStrea:

; 5947 :   }
; 5948 : 
; 5949 :   // Stop the callback thread.
; 5950 :   stream_.callbackInfo.isRunning = false;

  00042	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00047	c6 80 e0 01 00
	00 00		 mov	 BYTE PTR [rax+480], 0

; 5951 :   WaitForSingleObject( (HANDLE) stream_.callbackInfo.thread, INFINITE );

  0004e	ba ff ff ff ff	 mov	 edx, -1			; ffffffffH
  00053	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00058	48 8b 88 b8 01
	00 00		 mov	 rcx, QWORD PTR [rax+440]
  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WaitForSingleObject

; 5952 :   CloseHandle( (HANDLE) stream_.callbackInfo.thread );

  00065	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0006a	48 8b 88 b8 01
	00 00		 mov	 rcx, QWORD PTR [rax+440]
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 5953 : 
; 5954 :   DsHandle *handle = (DsHandle *) stream_.apiHandle;

  00077	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0007c	48 8b 80 20 01
	00 00		 mov	 rax, QWORD PTR [rax+288]
  00083	48 89 44 24 28	 mov	 QWORD PTR handle$[rsp], rax

; 5955 :   if ( handle ) {

  00088	48 83 7c 24 28
	00		 cmp	 QWORD PTR handle$[rsp], 0
  0008e	0f 84 37 01 00
	00		 je	 $LN6@closeStrea

; 5956 :     if ( handle->buffer[0] ) { // the object pointer can be NULL and valid

  00094	b8 08 00 00 00	 mov	 eax, 8
  00099	48 6b c0 00	 imul	 rax, rax, 0
  0009d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR handle$[rsp]
  000a2	48 83 7c 01 18
	00		 cmp	 QWORD PTR [rcx+rax+24], 0
  000a8	74 6b		 je	 SHORT $LN7@closeStrea

; 5957 :       LPDIRECTSOUND object = (LPDIRECTSOUND) handle->id[0];

  000aa	b8 08 00 00 00	 mov	 eax, 8
  000af	48 6b c0 00	 imul	 rax, rax, 0
  000b3	48 8b 4c 24 28	 mov	 rcx, QWORD PTR handle$[rsp]
  000b8	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  000bd	48 89 44 24 40	 mov	 QWORD PTR object$4[rsp], rax

; 5958 :       LPDIRECTSOUNDBUFFER buffer = (LPDIRECTSOUNDBUFFER) handle->buffer[0];

  000c2	b8 08 00 00 00	 mov	 eax, 8
  000c7	48 6b c0 00	 imul	 rax, rax, 0
  000cb	48 8b 4c 24 28	 mov	 rcx, QWORD PTR handle$[rsp]
  000d0	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  000d5	48 89 44 24 30	 mov	 QWORD PTR buffer$2[rsp], rax

; 5959 :       if ( buffer ) {

  000da	48 83 7c 24 30
	00		 cmp	 QWORD PTR buffer$2[rsp], 0
  000e0	74 23		 je	 SHORT $LN8@closeStrea

; 5960 :         buffer->Stop();

  000e2	48 8b 44 24 30	 mov	 rax, QWORD PTR buffer$2[rsp]
  000e7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ea	48 8b 4c 24 30	 mov	 rcx, QWORD PTR buffer$2[rsp]
  000ef	ff 90 90 00 00
	00		 call	 QWORD PTR [rax+144]

; 5961 :         buffer->Release();

  000f5	48 8b 44 24 30	 mov	 rax, QWORD PTR buffer$2[rsp]
  000fa	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000fd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR buffer$2[rsp]
  00102	ff 50 10	 call	 QWORD PTR [rax+16]
$LN8@closeStrea:

; 5962 :       }
; 5963 :       object->Release();

  00105	48 8b 44 24 40	 mov	 rax, QWORD PTR object$4[rsp]
  0010a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0010d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR object$4[rsp]
  00112	ff 50 10	 call	 QWORD PTR [rax+16]
$LN7@closeStrea:

; 5964 :     }
; 5965 :     if ( handle->buffer[1] ) {

  00115	b8 08 00 00 00	 mov	 eax, 8
  0011a	48 6b c0 01	 imul	 rax, rax, 1
  0011e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR handle$[rsp]
  00123	48 83 7c 01 18
	00		 cmp	 QWORD PTR [rcx+rax+24], 0
  00129	74 68		 je	 SHORT $LN9@closeStrea

; 5966 :       LPDIRECTSOUNDCAPTURE object = (LPDIRECTSOUNDCAPTURE) handle->id[1];

  0012b	b8 08 00 00 00	 mov	 eax, 8
  00130	48 6b c0 01	 imul	 rax, rax, 1
  00134	48 8b 4c 24 28	 mov	 rcx, QWORD PTR handle$[rsp]
  00139	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  0013e	48 89 44 24 48	 mov	 QWORD PTR object$5[rsp], rax

; 5967 :       LPDIRECTSOUNDCAPTUREBUFFER buffer = (LPDIRECTSOUNDCAPTUREBUFFER) handle->buffer[1];

  00143	b8 08 00 00 00	 mov	 eax, 8
  00148	48 6b c0 01	 imul	 rax, rax, 1
  0014c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR handle$[rsp]
  00151	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  00156	48 89 44 24 38	 mov	 QWORD PTR buffer$3[rsp], rax

; 5968 :       if ( buffer ) {

  0015b	48 83 7c 24 38
	00		 cmp	 QWORD PTR buffer$3[rsp], 0
  00161	74 20		 je	 SHORT $LN10@closeStrea

; 5969 :         buffer->Stop();

  00163	48 8b 44 24 38	 mov	 rax, QWORD PTR buffer$3[rsp]
  00168	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0016b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR buffer$3[rsp]
  00170	ff 50 50	 call	 QWORD PTR [rax+80]

; 5970 :         buffer->Release();

  00173	48 8b 44 24 38	 mov	 rax, QWORD PTR buffer$3[rsp]
  00178	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0017b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR buffer$3[rsp]
  00180	ff 50 10	 call	 QWORD PTR [rax+16]
$LN10@closeStrea:

; 5971 :       }
; 5972 :       object->Release();

  00183	48 8b 44 24 48	 mov	 rax, QWORD PTR object$5[rsp]
  00188	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0018b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR object$5[rsp]
  00190	ff 50 10	 call	 QWORD PTR [rax+16]
$LN9@closeStrea:

; 5973 :     }
; 5974 :     CloseHandle( handle->condition );

  00193	48 8b 44 24 28	 mov	 rax, QWORD PTR handle$[rsp]
  00198	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  0019c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 5975 :     delete handle;

  001a2	48 8b 44 24 28	 mov	 rax, QWORD PTR handle$[rsp]
  001a7	48 89 44 24 50	 mov	 QWORD PTR $T6[rsp], rax
  001ac	ba 50 00 00 00	 mov	 edx, 80			; 00000050H
  001b1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR $T6[rsp]
  001b6	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete

; 5976 :     stream_.apiHandle = 0;

  001bb	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  001c0	48 c7 80 20 01
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+288], 0
$LN6@closeStrea:

; 5977 :   }
; 5978 : 
; 5979 :   for ( int i=0; i<2; i++ ) {

  001cb	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0
  001d3	eb 0a		 jmp	 SHORT $LN4@closeStrea
$LN2@closeStrea:
  001d5	8b 44 24 20	 mov	 eax, DWORD PTR i$1[rsp]
  001d9	ff c0		 inc	 eax
  001db	89 44 24 20	 mov	 DWORD PTR i$1[rsp], eax
$LN4@closeStrea:
  001df	83 7c 24 20 02	 cmp	 DWORD PTR i$1[rsp], 2
  001e4	7d 44		 jge	 SHORT $LN3@closeStrea

; 5980 :     if ( stream_.userBuffer[i] ) {

  001e6	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$1[rsp]
  001eb	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  001f0	48 83 bc c1 30
	01 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+304], 0
  001f9	74 2d		 je	 SHORT $LN11@closeStrea

; 5981 :       free( stream_.userBuffer[i] );

  001fb	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$1[rsp]
  00200	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00205	48 8b 8c c1 30
	01 00 00	 mov	 rcx, QWORD PTR [rcx+rax*8+304]
  0020d	e8 00 00 00 00	 call	 free

; 5982 :       stream_.userBuffer[i] = 0;

  00212	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$1[rsp]
  00217	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  0021c	48 c7 84 c1 30
	01 00 00 00 00
	00 00		 mov	 QWORD PTR [rcx+rax*8+304], 0
$LN11@closeStrea:

; 5983 :     }
; 5984 :   }

  00228	eb ab		 jmp	 SHORT $LN2@closeStrea
$LN3@closeStrea:

; 5985 : 
; 5986 :   if ( stream_.deviceBuffer ) {

  0022a	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0022f	48 83 b8 40 01
	00 00 00	 cmp	 QWORD PTR [rax+320], 0
  00237	74 21		 je	 SHORT $LN12@closeStrea

; 5987 :     free( stream_.deviceBuffer );

  00239	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0023e	48 8b 88 40 01
	00 00		 mov	 rcx, QWORD PTR [rax+320]
  00245	e8 00 00 00 00	 call	 free

; 5988 :     stream_.deviceBuffer = 0;

  0024a	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0024f	48 c7 80 40 01
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+320], 0
$LN12@closeStrea:

; 5989 :   }
; 5990 : 
; 5991 :   stream_.mode = UNINITIALIZED;

  0025a	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0025f	c7 80 28 01 00
	00 b5 ff ff ff	 mov	 DWORD PTR [rax+296], -75 ; ffffffffffffffb5H

; 5992 :   stream_.state = STREAM_CLOSED;

  00269	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0026e	c7 80 2c 01 00
	00 ce ff ff ff	 mov	 DWORD PTR [rax+300], -50 ; ffffffffffffffceH
$LN1@closeStrea:

; 5993 : }

  00278	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0027c	c3		 ret	 0
?closeStream@RtApiDs@@UEAAXXZ ENDP			; RtApiDs::closeStream
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
$T1 = 32
found$ = 36
result$ = 40
k$2 = 44
i$3 = 48
j$4 = 52
rates$ = 56
output$ = 80
input$ = 88
tv287 = 96
tv709 = 100
$T5 = 104
$T6 = 108
$T7 = 112
$T8 = 116
$T9 = 120
$T10 = 124
$T11 = 128
$T12 = 132
$T13 = 136
$T14 = 140
$T15 = 144
$T16 = 148
$T17 = 152
$T18 = 156
$T19 = 160
$T20 = 164
tv189 = 168
tv184 = 176
tv732 = 184
tv246 = 192
tv734 = 200
tv386 = 208
tv381 = 216
tv770 = 224
tv489 = 232
tv484 = 240
tv774 = 248
tv672 = 256
tv677 = 264
tv131 = 272
tv699 = 280
tv682 = 288
$T21 = 296
$T22 = 304
$T23 = 312
inCaps$ = 320
info$ = 336
outCaps$ = 432
$T24 = 528
$T25 = 560
$T26 = 592
$T27 = 624
__$ArrayPad$ = 656
this$ = 688
__$ReturnUdt$ = 696
device$ = 704
?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z PROC ; RtApiDs::getDeviceInfo

; 5261 : {

$LN89:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec a8 02
	00 00		 sub	 rsp, 680		; 000002a8H
  00016	48 c7 84 24 38
	01 00 00 fe ff
	ff ff		 mov	 QWORD PTR $T23[rsp], -2
  00022	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00029	48 33 c4	 xor	 rax, rsp
  0002c	48 89 84 24 90
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00034	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 5262 :   RtAudio::DeviceInfo info;

  0003c	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR info$[rsp]
  00044	e8 00 00 00 00	 call	 ??0DeviceInfo@RtAudio@@QEAA@XZ ; RtAudio::DeviceInfo::DeviceInfo
  00049	90		 npad	 1

; 5263 :   info.probed = false;

  0004a	c6 84 24 50 01
	00 00 00	 mov	 BYTE PTR info$[rsp], 0

; 5264 : 
; 5265 :   if ( dsDevices.size() == 0 ) {

  00052	48 8b 84 24 b0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0005a	48 05 90 02 00
	00		 add	 rax, 656		; 00000290H
  00060	48 8b c8	 mov	 rcx, rax
  00063	e8 00 00 00 00	 call	 ?size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ ; std::vector<DsDevice,std::allocator<DsDevice> >::size
  00068	48 85 c0	 test	 rax, rax
  0006b	0f 85 9a 00 00
	00		 jne	 $LN11@getDeviceI

; 5266 :     // Force a query of all devices
; 5267 :     getDeviceCount();

  00071	48 8b 84 24 b0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00079	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007c	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00084	ff 50 10	 call	 QWORD PTR [rax+16]

; 5268 :     if ( dsDevices.size() == 0 ) {

  00087	48 8b 84 24 b0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0008f	48 05 90 02 00
	00		 add	 rax, 656		; 00000290H
  00095	48 8b c8	 mov	 rcx, rax
  00098	e8 00 00 00 00	 call	 ?size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ ; std::vector<DsDevice,std::allocator<DsDevice> >::size
  0009d	48 85 c0	 test	 rax, rax
  000a0	75 69		 jne	 SHORT $LN11@getDeviceI

; 5269 :       errorText_ = "RtApiDs::getDeviceInfo: no devices found!";

  000a2	48 8b 84 24 b0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000aa	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  000b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128446
  000b7	48 8b c8	 mov	 rcx, rax
  000ba	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 5270 :       error( RtAudioError::INVALID_USE );

  000bf	ba 07 00 00 00	 mov	 edx, 7
  000c4	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000cc	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 5271 :       return info;

  000d1	48 8d 94 24 50
	01 00 00	 lea	 rdx, QWORD PTR info$[rsp]
  000d9	48 8b 8c 24 b8
	02 00 00	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  000e1	e8 00 00 00 00	 call	 ??0DeviceInfo@RtAudio@@QEAA@$$QEAU01@@Z
  000e6	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  000ea	83 c8 01	 or	 eax, 1
  000ed	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  000f1	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR info$[rsp]
  000f9	e8 00 00 00 00	 call	 ??1DeviceInfo@RtAudio@@QEAA@XZ
  000fe	48 8b 84 24 b8
	02 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
  00106	e9 87 0f 00 00	 jmp	 $LN1@getDeviceI
$LN11@getDeviceI:

; 5272 :     }
; 5273 :   }
; 5274 : 
; 5275 :   if ( device >= dsDevices.size() ) {

  0010b	8b 84 24 c0 02
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  00112	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv131[rsp], rax
  0011a	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00122	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  00129	e8 00 00 00 00	 call	 ?size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ ; std::vector<DsDevice,std::allocator<DsDevice> >::size
  0012e	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR tv131[rsp]
  00136	48 3b c8	 cmp	 rcx, rax
  00139	72 69		 jb	 SHORT $LN13@getDeviceI

; 5276 :     errorText_ = "RtApiDs::getDeviceInfo: device ID is invalid!";

  0013b	48 8b 84 24 b0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00143	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00149	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128448
  00150	48 8b c8	 mov	 rcx, rax
  00153	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 5277 :     error( RtAudioError::INVALID_USE );

  00158	ba 07 00 00 00	 mov	 edx, 7
  0015d	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00165	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 5278 :     return info;

  0016a	48 8d 94 24 50
	01 00 00	 lea	 rdx, QWORD PTR info$[rsp]
  00172	48 8b 8c 24 b8
	02 00 00	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0017a	e8 00 00 00 00	 call	 ??0DeviceInfo@RtAudio@@QEAA@$$QEAU01@@Z
  0017f	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  00183	83 c8 01	 or	 eax, 1
  00186	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  0018a	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR info$[rsp]
  00192	e8 00 00 00 00	 call	 ??1DeviceInfo@RtAudio@@QEAA@XZ
  00197	48 8b 84 24 b8
	02 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
  0019f	e9 ee 0e 00 00	 jmp	 $LN1@getDeviceI
$LN13@getDeviceI:

; 5279 :   }
; 5280 : 
; 5281 :   HRESULT result;
; 5282 :   if ( dsDevices[ device ].validId[0] == false ) goto probeInput;

  001a4	8b 84 24 c0 02
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  001ab	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001b3	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  001ba	8b d0		 mov	 edx, eax
  001bc	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  001c1	b9 01 00 00 00	 mov	 ecx, 1
  001c6	48 6b c9 00	 imul	 rcx, rcx, 0
  001ca	0f b6 44 08 10	 movzx	 eax, BYTE PTR [rax+rcx+16]
  001cf	85 c0		 test	 eax, eax
  001d1	75 05		 jne	 SHORT $LN14@getDeviceI
  001d3	e9 3d 04 00 00	 jmp	 $probeInput$90
$LN14@getDeviceI:

; 5283 : 
; 5284 :   LPDIRECTSOUND output;
; 5285 :   DSCAPS outCaps;
; 5286 :   result = DirectSoundCreate( dsDevices[ device ].id[0], &output, NULL );

  001d8	8b 84 24 c0 02
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  001df	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001e7	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  001ee	8b d0		 mov	 edx, eax
  001f0	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  001f5	b9 08 00 00 00	 mov	 ecx, 8
  001fa	48 6b c9 00	 imul	 rcx, rcx, 0
  001fe	45 33 c0	 xor	 r8d, r8d
  00201	48 8d 54 24 50	 lea	 rdx, QWORD PTR output$[rsp]
  00206	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0020a	e8 00 00 00 00	 call	 DirectSoundCreate
  0020f	89 44 24 28	 mov	 DWORD PTR result$[rsp], eax

; 5287 :   if ( FAILED( result ) ) {

  00213	83 7c 24 28 00	 cmp	 DWORD PTR result$[rsp], 0
  00218	0f 8d f9 00 00
	00		 jge	 $LN16@getDeviceI

; 5288 :     errorStream_ << "RtApiDs::getDeviceInfo: error (" << getErrorString( result ) << ") opening output device (" << dsDevices[ device ].name << ")!";

  0021e	8b 84 24 c0 02
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  00225	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0022d	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  00234	8b d0		 mov	 edx, eax
  00236	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  0023b	48 83 c0 18	 add	 rax, 24
  0023f	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv184[rsp], rax
  00247	8b 4c 24 28	 mov	 ecx, DWORD PTR result$[rsp]
  0024b	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  00250	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv189[rsp], rax
  00258	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00260	48 83 c1 08	 add	 rcx, 8
  00264	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128454
  0026b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00270	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv189[rsp]
  00278	48 8b d1	 mov	 rdx, rcx
  0027b	48 8b c8	 mov	 rcx, rax
  0027e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00283	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128453
  0028a	48 8b c8	 mov	 rcx, rax
  0028d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00292	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv184[rsp]
  0029a	48 8b d1	 mov	 rdx, rcx
  0029d	48 8b c8	 mov	 rcx, rax
  002a0	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  002a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128452
  002ac	48 8b c8	 mov	 rcx, rax
  002af	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 5289 :     errorText_ = errorStream_.str();

  002b4	48 8b 84 24 b0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  002bc	48 83 c0 08	 add	 rax, 8
  002c0	48 8d 94 24 10
	02 00 00	 lea	 rdx, QWORD PTR $T24[rsp]
  002c8	48 8b c8	 mov	 rcx, rax
  002cb	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  002d0	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv732[rsp], rax
  002d8	48 8b 84 24 b0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  002e0	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  002e6	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR tv732[rsp]
  002ee	48 8b c8	 mov	 rcx, rax
  002f1	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  002f6	48 8d 8c 24 10
	02 00 00	 lea	 rcx, QWORD PTR $T24[rsp]
  002fe	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5290 :     error( RtAudioError::WARNING );

  00303	33 d2		 xor	 edx, edx
  00305	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0030d	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 5291 :     goto probeInput;

  00312	e9 fe 02 00 00	 jmp	 $probeInput$90
$LN16@getDeviceI:

; 5292 :   }
; 5293 : 
; 5294 :   outCaps.dwSize = sizeof( outCaps );

  00317	c7 84 24 b0 01
	00 00 60 00 00
	00		 mov	 DWORD PTR outCaps$[rsp], 96 ; 00000060H

; 5295 :   result = output->GetCaps( &outCaps );

  00322	48 8b 44 24 50	 mov	 rax, QWORD PTR output$[rsp]
  00327	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0032a	48 8d 94 24 b0
	01 00 00	 lea	 rdx, QWORD PTR outCaps$[rsp]
  00332	48 8b 4c 24 50	 mov	 rcx, QWORD PTR output$[rsp]
  00337	ff 50 20	 call	 QWORD PTR [rax+32]
  0033a	89 44 24 28	 mov	 DWORD PTR result$[rsp], eax

; 5296 :   if ( FAILED( result ) ) {

  0033e	83 7c 24 28 00	 cmp	 DWORD PTR result$[rsp], 0
  00343	0f 8d be 00 00
	00		 jge	 $LN18@getDeviceI

; 5297 :     output->Release();

  00349	48 8b 44 24 50	 mov	 rax, QWORD PTR output$[rsp]
  0034e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00351	48 8b 4c 24 50	 mov	 rcx, QWORD PTR output$[rsp]
  00356	ff 50 10	 call	 QWORD PTR [rax+16]

; 5298 :     errorStream_ << "RtApiDs::getDeviceInfo: error (" << getErrorString( result ) << ") getting capabilities!";

  00359	8b 4c 24 28	 mov	 ecx, DWORD PTR result$[rsp]
  0035d	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  00362	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv246[rsp], rax
  0036a	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00372	48 83 c1 08	 add	 rcx, 8
  00376	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128458
  0037d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00382	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tv246[rsp]
  0038a	48 8b d1	 mov	 rdx, rcx
  0038d	48 8b c8	 mov	 rcx, rax
  00390	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00395	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128457
  0039c	48 8b c8	 mov	 rcx, rax
  0039f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 5299 :     errorText_ = errorStream_.str();

  003a4	48 8b 84 24 b0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  003ac	48 83 c0 08	 add	 rax, 8
  003b0	48 8d 94 24 30
	02 00 00	 lea	 rdx, QWORD PTR $T25[rsp]
  003b8	48 8b c8	 mov	 rcx, rax
  003bb	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  003c0	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv734[rsp], rax
  003c8	48 8b 84 24 b0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  003d0	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  003d6	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR tv734[rsp]
  003de	48 8b c8	 mov	 rcx, rax
  003e1	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  003e6	48 8d 8c 24 30
	02 00 00	 lea	 rcx, QWORD PTR $T25[rsp]
  003ee	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5300 :     error( RtAudioError::WARNING );

  003f3	33 d2		 xor	 edx, edx
  003f5	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  003fd	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 5301 :     goto probeInput;

  00402	e9 0e 02 00 00	 jmp	 $probeInput$90
$LN18@getDeviceI:

; 5302 :   }
; 5303 : 
; 5304 :   // Get output channel information.
; 5305 :   info.outputChannels = ( outCaps.dwFlags & DSCAPS_PRIMARYSTEREO ) ? 2 : 1;

  00407	8b 84 24 b4 01
	00 00		 mov	 eax, DWORD PTR outCaps$[rsp+4]
  0040e	83 e0 02	 and	 eax, 2
  00411	85 c0		 test	 eax, eax
  00413	74 0a		 je	 SHORT $LN77@getDeviceI
  00415	c7 44 24 60 02
	00 00 00	 mov	 DWORD PTR tv287[rsp], 2
  0041d	eb 08		 jmp	 SHORT $LN78@getDeviceI
$LN77@getDeviceI:
  0041f	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv287[rsp], 1
$LN78@getDeviceI:
  00427	8b 44 24 60	 mov	 eax, DWORD PTR tv287[rsp]
  0042b	89 84 24 78 01
	00 00		 mov	 DWORD PTR info$[rsp+40], eax

; 5306 : 
; 5307 :   // Get sample rate information.
; 5308 :   info.sampleRates.clear();

  00432	48 8d 8c 24 88
	01 00 00	 lea	 rcx, QWORD PTR info$[rsp+56]
  0043a	e8 00 00 00 00	 call	 ?clear@?$vector@IV?$allocator@I@std@@@std@@QEAAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::clear

; 5309 :   for ( unsigned int k=0; k<MAX_SAMPLE_RATES; k++ ) {

  0043f	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR k$2[rsp], 0
  00447	eb 0a		 jmp	 SHORT $LN4@getDeviceI
$LN2@getDeviceI:
  00449	8b 44 24 2c	 mov	 eax, DWORD PTR k$2[rsp]
  0044d	ff c0		 inc	 eax
  0044f	89 44 24 2c	 mov	 DWORD PTR k$2[rsp], eax
$LN4@getDeviceI:
  00453	83 7c 24 2c 0e	 cmp	 DWORD PTR k$2[rsp], 14
  00458	0f 83 a0 00 00
	00		 jae	 $LN3@getDeviceI

; 5310 :     if ( SAMPLE_RATES[k] >= (unsigned int) outCaps.dwMinSecondarySampleRate &&

  0045e	8b 44 24 2c	 mov	 eax, DWORD PTR k$2[rsp]
  00462	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?SAMPLE_RATES@RtApi@@1QBIB ; RtApi::SAMPLE_RATES
  00469	8b 94 24 b8 01
	00 00		 mov	 edx, DWORD PTR outCaps$[rsp+8]
  00470	39 14 81	 cmp	 DWORD PTR [rcx+rax*4], edx
  00473	0f 82 80 00 00
	00		 jb	 $LN20@getDeviceI
  00479	8b 44 24 2c	 mov	 eax, DWORD PTR k$2[rsp]
  0047d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?SAMPLE_RATES@RtApi@@1QBIB ; RtApi::SAMPLE_RATES
  00484	8b 94 24 bc 01
	00 00		 mov	 edx, DWORD PTR outCaps$[rsp+12]
  0048b	39 14 81	 cmp	 DWORD PTR [rcx+rax*4], edx
  0048e	77 69		 ja	 SHORT $LN20@getDeviceI

; 5311 :          SAMPLE_RATES[k] <= (unsigned int) outCaps.dwMaxSecondarySampleRate ) {
; 5312 :       info.sampleRates.push_back( SAMPLE_RATES[k] );

  00490	8b 44 24 2c	 mov	 eax, DWORD PTR k$2[rsp]
  00494	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?SAMPLE_RATES@RtApi@@1QBIB ; RtApi::SAMPLE_RATES
  0049b	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  0049f	48 8b d0	 mov	 rdx, rax
  004a2	48 8d 8c 24 88
	01 00 00	 lea	 rcx, QWORD PTR info$[rsp+56]
  004aa	e8 00 00 00 00	 call	 ?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAXAEBI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::push_back

; 5313 : 
; 5314 :       if ( !info.preferredSampleRate || ( SAMPLE_RATES[k] <= 48000 && SAMPLE_RATES[k] > info.preferredSampleRate ) )

  004af	83 bc 24 a0 01
	00 00 00	 cmp	 DWORD PTR info$[rsp+80], 0
  004b7	74 2b		 je	 SHORT $LN22@getDeviceI
  004b9	8b 44 24 2c	 mov	 eax, DWORD PTR k$2[rsp]
  004bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?SAMPLE_RATES@RtApi@@1QBIB ; RtApi::SAMPLE_RATES
  004c4	81 3c 81 80 bb
	00 00		 cmp	 DWORD PTR [rcx+rax*4], 48000 ; 0000bb80H
  004cb	77 2c		 ja	 SHORT $LN20@getDeviceI
  004cd	8b 44 24 2c	 mov	 eax, DWORD PTR k$2[rsp]
  004d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?SAMPLE_RATES@RtApi@@1QBIB ; RtApi::SAMPLE_RATES
  004d8	8b 94 24 a0 01
	00 00		 mov	 edx, DWORD PTR info$[rsp+80]
  004df	39 14 81	 cmp	 DWORD PTR [rcx+rax*4], edx
  004e2	76 15		 jbe	 SHORT $LN20@getDeviceI
$LN22@getDeviceI:

; 5315 :         info.preferredSampleRate = SAMPLE_RATES[k];

  004e4	8b 44 24 2c	 mov	 eax, DWORD PTR k$2[rsp]
  004e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?SAMPLE_RATES@RtApi@@1QBIB ; RtApi::SAMPLE_RATES
  004ef	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  004f2	89 84 24 a0 01
	00 00		 mov	 DWORD PTR info$[rsp+80], eax
$LN20@getDeviceI:

; 5316 :     }
; 5317 :   }

  004f9	e9 4b ff ff ff	 jmp	 $LN2@getDeviceI
$LN3@getDeviceI:

; 5318 : 
; 5319 :   // Get format information.
; 5320 :   if ( outCaps.dwFlags & DSCAPS_PRIMARY16BIT ) info.nativeFormats |= RTAUDIO_SINT16;

  004fe	8b 84 24 b4 01
	00 00		 mov	 eax, DWORD PTR outCaps$[rsp+4]
  00505	83 e0 08	 and	 eax, 8
  00508	85 c0		 test	 eax, eax
  0050a	74 11		 je	 SHORT $LN23@getDeviceI
  0050c	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+84]
  00513	83 c8 02	 or	 eax, 2
  00516	89 84 24 a4 01
	00 00		 mov	 DWORD PTR info$[rsp+84], eax
$LN23@getDeviceI:

; 5321 :   if ( outCaps.dwFlags & DSCAPS_PRIMARY8BIT ) info.nativeFormats |= RTAUDIO_SINT8;

  0051d	8b 84 24 b4 01
	00 00		 mov	 eax, DWORD PTR outCaps$[rsp+4]
  00524	83 e0 04	 and	 eax, 4
  00527	85 c0		 test	 eax, eax
  00529	74 11		 je	 SHORT $LN24@getDeviceI
  0052b	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+84]
  00532	83 c8 01	 or	 eax, 1
  00535	89 84 24 a4 01
	00 00		 mov	 DWORD PTR info$[rsp+84], eax
$LN24@getDeviceI:

; 5322 : 
; 5323 :   output->Release();

  0053c	48 8b 44 24 50	 mov	 rax, QWORD PTR output$[rsp]
  00541	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00544	48 8b 4c 24 50	 mov	 rcx, QWORD PTR output$[rsp]
  00549	ff 50 10	 call	 QWORD PTR [rax+16]

; 5324 : 
; 5325 :   if ( getDefaultOutputDevice() == device )

  0054c	48 8b 84 24 b0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00554	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00557	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0055f	ff 50 28	 call	 QWORD PTR [rax+40]
  00562	3b 84 24 c0 02
	00 00		 cmp	 eax, DWORD PTR device$[rsp]
  00569	75 08		 jne	 SHORT $LN25@getDeviceI

; 5326 :     info.isDefaultOutput = true;

  0056b	c6 84 24 84 01
	00 00 01	 mov	 BYTE PTR info$[rsp+52], 1
$LN25@getDeviceI:

; 5327 : 
; 5328 :   if ( dsDevices[ device ].validId[1] == false ) {

  00573	8b 84 24 c0 02
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  0057a	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00582	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  00589	8b d0		 mov	 edx, eax
  0058b	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  00590	b9 01 00 00 00	 mov	 ecx, 1
  00595	48 6b c9 01	 imul	 rcx, rcx, 1
  00599	0f b6 44 08 10	 movzx	 eax, BYTE PTR [rax+rcx+16]
  0059e	85 c0		 test	 eax, eax
  005a0	75 73		 jne	 SHORT $probeInput$90

; 5329 :     info.name = dsDevices[ device ].name;

  005a2	8b 84 24 c0 02
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  005a9	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  005b1	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  005b8	8b d0		 mov	 edx, eax
  005ba	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  005bf	48 83 c0 18	 add	 rax, 24
  005c3	48 8b d0	 mov	 rdx, rax
  005c6	48 8d 8c 24 58
	01 00 00	 lea	 rcx, QWORD PTR info$[rsp+8]
  005ce	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 5330 :     info.probed = true;

  005d3	c6 84 24 50 01
	00 00 01	 mov	 BYTE PTR info$[rsp], 1

; 5331 :     return info;

  005db	48 8d 94 24 50
	01 00 00	 lea	 rdx, QWORD PTR info$[rsp]
  005e3	48 8b 8c 24 b8
	02 00 00	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  005eb	e8 00 00 00 00	 call	 ??0DeviceInfo@RtAudio@@QEAA@$$QEAU01@@Z
  005f0	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  005f4	83 c8 01	 or	 eax, 1
  005f7	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  005fb	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR info$[rsp]
  00603	e8 00 00 00 00	 call	 ??1DeviceInfo@RtAudio@@QEAA@XZ
  00608	48 8b 84 24 b8
	02 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
  00610	e9 7d 0a 00 00	 jmp	 $LN1@getDeviceI
$probeInput$90:

; 5332 :   }
; 5333 : 
; 5334 :  probeInput:
; 5335 : 
; 5336 :   LPDIRECTSOUNDCAPTURE input;
; 5337 :   result = DirectSoundCaptureCreate( dsDevices[ device ].id[1], &input, NULL );

  00615	8b 84 24 c0 02
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  0061c	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00624	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  0062b	8b d0		 mov	 edx, eax
  0062d	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  00632	b9 08 00 00 00	 mov	 ecx, 8
  00637	48 6b c9 01	 imul	 rcx, rcx, 1
  0063b	45 33 c0	 xor	 r8d, r8d
  0063e	48 8d 54 24 58	 lea	 rdx, QWORD PTR input$[rsp]
  00643	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00647	e8 00 00 00 00	 call	 DirectSoundCaptureCreate
  0064c	89 44 24 28	 mov	 DWORD PTR result$[rsp], eax

; 5338 :   if ( FAILED( result ) ) {

  00650	83 7c 24 28 00	 cmp	 DWORD PTR result$[rsp], 0
  00655	0f 8d 2e 01 00
	00		 jge	 $LN27@getDeviceI

; 5339 :     errorStream_ << "RtApiDs::getDeviceInfo: error (" << getErrorString( result ) << ") opening input device (" << dsDevices[ device ].name << ")!";

  0065b	8b 84 24 c0 02
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  00662	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0066a	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  00671	8b d0		 mov	 edx, eax
  00673	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  00678	48 83 c0 18	 add	 rax, 24
  0067c	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv381[rsp], rax
  00684	8b 4c 24 28	 mov	 ecx, DWORD PTR result$[rsp]
  00688	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  0068d	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv386[rsp], rax
  00695	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0069d	48 83 c1 08	 add	 rcx, 8
  006a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128470
  006a8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  006ad	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR tv386[rsp]
  006b5	48 8b d1	 mov	 rdx, rcx
  006b8	48 8b c8	 mov	 rcx, rax
  006bb	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  006c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128469
  006c7	48 8b c8	 mov	 rcx, rax
  006ca	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  006cf	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tv381[rsp]
  006d7	48 8b d1	 mov	 rdx, rcx
  006da	48 8b c8	 mov	 rcx, rax
  006dd	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  006e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128468
  006e9	48 8b c8	 mov	 rcx, rax
  006ec	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 5340 :     errorText_ = errorStream_.str();

  006f1	48 8b 84 24 b0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  006f9	48 83 c0 08	 add	 rax, 8
  006fd	48 8d 94 24 50
	02 00 00	 lea	 rdx, QWORD PTR $T26[rsp]
  00705	48 8b c8	 mov	 rcx, rax
  00708	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  0070d	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv770[rsp], rax
  00715	48 8b 84 24 b0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0071d	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00723	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR tv770[rsp]
  0072b	48 8b c8	 mov	 rcx, rax
  0072e	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00733	48 8d 8c 24 50
	02 00 00	 lea	 rcx, QWORD PTR $T26[rsp]
  0073b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5341 :     error( RtAudioError::WARNING );

  00740	33 d2		 xor	 edx, edx
  00742	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0074a	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 5342 :     return info;

  0074f	48 8d 94 24 50
	01 00 00	 lea	 rdx, QWORD PTR info$[rsp]
  00757	48 8b 8c 24 b8
	02 00 00	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0075f	e8 00 00 00 00	 call	 ??0DeviceInfo@RtAudio@@QEAA@$$QEAU01@@Z
  00764	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  00768	83 c8 01	 or	 eax, 1
  0076b	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  0076f	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR info$[rsp]
  00777	e8 00 00 00 00	 call	 ??1DeviceInfo@RtAudio@@QEAA@XZ
  0077c	48 8b 84 24 b8
	02 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
  00784	e9 09 09 00 00	 jmp	 $LN1@getDeviceI
$LN27@getDeviceI:

; 5343 :   }
; 5344 : 
; 5345 :   DSCCAPS inCaps;
; 5346 :   inCaps.dwSize = sizeof( inCaps );

  00789	c7 84 24 40 01
	00 00 10 00 00
	00		 mov	 DWORD PTR inCaps$[rsp], 16

; 5347 :   result = input->GetCaps( &inCaps );

  00794	48 8b 44 24 58	 mov	 rax, QWORD PTR input$[rsp]
  00799	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0079c	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR inCaps$[rsp]
  007a4	48 8b 4c 24 58	 mov	 rcx, QWORD PTR input$[rsp]
  007a9	ff 50 20	 call	 QWORD PTR [rax+32]
  007ac	89 44 24 28	 mov	 DWORD PTR result$[rsp], eax

; 5348 :   if ( FAILED( result ) ) {

  007b0	83 7c 24 28 00	 cmp	 DWORD PTR result$[rsp], 0
  007b5	0f 8d 3e 01 00
	00		 jge	 $LN28@getDeviceI

; 5349 :     input->Release();

  007bb	48 8b 44 24 58	 mov	 rax, QWORD PTR input$[rsp]
  007c0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  007c3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR input$[rsp]
  007c8	ff 50 10	 call	 QWORD PTR [rax+16]

; 5350 :     errorStream_ << "RtApiDs::getDeviceInfo: error (" << getErrorString( result ) << ") getting object capabilities (" << dsDevices[ device ].name << ")!";

  007cb	8b 84 24 c0 02
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  007d2	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  007da	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  007e1	8b d0		 mov	 edx, eax
  007e3	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  007e8	48 83 c0 18	 add	 rax, 24
  007ec	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv484[rsp], rax
  007f4	8b 4c 24 28	 mov	 ecx, DWORD PTR result$[rsp]
  007f8	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  007fd	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv489[rsp], rax
  00805	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0080d	48 83 c1 08	 add	 rcx, 8
  00811	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128474
  00818	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0081d	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR tv489[rsp]
  00825	48 8b d1	 mov	 rdx, rcx
  00828	48 8b c8	 mov	 rcx, rax
  0082b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00830	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128473
  00837	48 8b c8	 mov	 rcx, rax
  0083a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0083f	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR tv484[rsp]
  00847	48 8b d1	 mov	 rdx, rcx
  0084a	48 8b c8	 mov	 rcx, rax
  0084d	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  00852	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128472
  00859	48 8b c8	 mov	 rcx, rax
  0085c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 5351 :     errorText_ = errorStream_.str();

  00861	48 8b 84 24 b0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00869	48 83 c0 08	 add	 rax, 8
  0086d	48 8d 94 24 70
	02 00 00	 lea	 rdx, QWORD PTR $T27[rsp]
  00875	48 8b c8	 mov	 rcx, rax
  00878	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  0087d	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv774[rsp], rax
  00885	48 8b 84 24 b0
	02 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0088d	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00893	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR tv774[rsp]
  0089b	48 8b c8	 mov	 rcx, rax
  0089e	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  008a3	48 8d 8c 24 70
	02 00 00	 lea	 rcx, QWORD PTR $T27[rsp]
  008ab	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5352 :     error( RtAudioError::WARNING );

  008b0	33 d2		 xor	 edx, edx
  008b2	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  008ba	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 5353 :     return info;

  008bf	48 8d 94 24 50
	01 00 00	 lea	 rdx, QWORD PTR info$[rsp]
  008c7	48 8b 8c 24 b8
	02 00 00	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  008cf	e8 00 00 00 00	 call	 ??0DeviceInfo@RtAudio@@QEAA@$$QEAU01@@Z
  008d4	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  008d8	83 c8 01	 or	 eax, 1
  008db	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  008df	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR info$[rsp]
  008e7	e8 00 00 00 00	 call	 ??1DeviceInfo@RtAudio@@QEAA@XZ
  008ec	48 8b 84 24 b8
	02 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
  008f4	e9 99 07 00 00	 jmp	 $LN1@getDeviceI
$LN28@getDeviceI:

; 5354 :   }
; 5355 : 
; 5356 :   // Get input channel information.
; 5357 :   info.inputChannels = inCaps.dwChannels;

  008f9	8b 84 24 4c 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+12]
  00900	89 84 24 7c 01
	00 00		 mov	 DWORD PTR info$[rsp+44], eax

; 5358 : 
; 5359 :   // Get sample rate and format information.
; 5360 :   std::vector<unsigned int> rates;

  00907	48 8d 4c 24 38	 lea	 rcx, QWORD PTR rates$[rsp]
  0090c	e8 00 00 00 00	 call	 ??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >
  00911	90		 npad	 1

; 5361 :   if ( inCaps.dwChannels >= 2 ) {

  00912	83 bc 24 4c 01
	00 00 02	 cmp	 DWORD PTR inCaps$[rsp+12], 2
  0091a	0f 82 6e 02 00
	00		 jb	 $LN29@getDeviceI

; 5362 :     if ( inCaps.dwFormats & WAVE_FORMAT_1S16 ) info.nativeFormats |= RTAUDIO_SINT16;

  00920	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00927	83 e0 08	 and	 eax, 8
  0092a	85 c0		 test	 eax, eax
  0092c	74 11		 je	 SHORT $LN31@getDeviceI
  0092e	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+84]
  00935	83 c8 02	 or	 eax, 2
  00938	89 84 24 a4 01
	00 00		 mov	 DWORD PTR info$[rsp+84], eax
$LN31@getDeviceI:

; 5363 :     if ( inCaps.dwFormats & WAVE_FORMAT_2S16 ) info.nativeFormats |= RTAUDIO_SINT16;

  0093f	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00946	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0094b	85 c0		 test	 eax, eax
  0094d	74 11		 je	 SHORT $LN32@getDeviceI
  0094f	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+84]
  00956	83 c8 02	 or	 eax, 2
  00959	89 84 24 a4 01
	00 00		 mov	 DWORD PTR info$[rsp+84], eax
$LN32@getDeviceI:

; 5364 :     if ( inCaps.dwFormats & WAVE_FORMAT_4S16 ) info.nativeFormats |= RTAUDIO_SINT16;

  00960	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00967	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  0096c	85 c0		 test	 eax, eax
  0096e	74 11		 je	 SHORT $LN33@getDeviceI
  00970	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+84]
  00977	83 c8 02	 or	 eax, 2
  0097a	89 84 24 a4 01
	00 00		 mov	 DWORD PTR info$[rsp+84], eax
$LN33@getDeviceI:

; 5365 :     if ( inCaps.dwFormats & WAVE_FORMAT_96S16 ) info.nativeFormats |= RTAUDIO_SINT16;

  00981	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00988	25 00 00 08 00	 and	 eax, 524288		; 00080000H
  0098d	85 c0		 test	 eax, eax
  0098f	74 11		 je	 SHORT $LN34@getDeviceI
  00991	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+84]
  00998	83 c8 02	 or	 eax, 2
  0099b	89 84 24 a4 01
	00 00		 mov	 DWORD PTR info$[rsp+84], eax
$LN34@getDeviceI:

; 5366 :     if ( inCaps.dwFormats & WAVE_FORMAT_1S08 ) info.nativeFormats |= RTAUDIO_SINT8;

  009a2	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  009a9	83 e0 02	 and	 eax, 2
  009ac	85 c0		 test	 eax, eax
  009ae	74 11		 je	 SHORT $LN35@getDeviceI
  009b0	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+84]
  009b7	83 c8 01	 or	 eax, 1
  009ba	89 84 24 a4 01
	00 00		 mov	 DWORD PTR info$[rsp+84], eax
$LN35@getDeviceI:

; 5367 :     if ( inCaps.dwFormats & WAVE_FORMAT_2S08 ) info.nativeFormats |= RTAUDIO_SINT8;

  009c1	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  009c8	83 e0 20	 and	 eax, 32			; 00000020H
  009cb	85 c0		 test	 eax, eax
  009cd	74 11		 je	 SHORT $LN36@getDeviceI
  009cf	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+84]
  009d6	83 c8 01	 or	 eax, 1
  009d9	89 84 24 a4 01
	00 00		 mov	 DWORD PTR info$[rsp+84], eax
$LN36@getDeviceI:

; 5368 :     if ( inCaps.dwFormats & WAVE_FORMAT_4S08 ) info.nativeFormats |= RTAUDIO_SINT8;

  009e0	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  009e7	25 00 02 00 00	 and	 eax, 512		; 00000200H
  009ec	85 c0		 test	 eax, eax
  009ee	74 11		 je	 SHORT $LN37@getDeviceI
  009f0	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+84]
  009f7	83 c8 01	 or	 eax, 1
  009fa	89 84 24 a4 01
	00 00		 mov	 DWORD PTR info$[rsp+84], eax
$LN37@getDeviceI:

; 5369 :     if ( inCaps.dwFormats & WAVE_FORMAT_96S08 ) info.nativeFormats |= RTAUDIO_SINT8;

  00a01	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00a08	25 00 00 02 00	 and	 eax, 131072		; 00020000H
  00a0d	85 c0		 test	 eax, eax
  00a0f	74 11		 je	 SHORT $LN38@getDeviceI
  00a11	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+84]
  00a18	83 c8 01	 or	 eax, 1
  00a1b	89 84 24 a4 01
	00 00		 mov	 DWORD PTR info$[rsp+84], eax
$LN38@getDeviceI:

; 5370 : 
; 5371 :     if ( info.nativeFormats & RTAUDIO_SINT16 ) {

  00a22	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+84]
  00a29	83 e0 02	 and	 eax, 2
  00a2c	85 c0		 test	 eax, eax
  00a2e	0f 84 9f 00 00
	00		 je	 $LN39@getDeviceI

; 5372 :       if ( inCaps.dwFormats & WAVE_FORMAT_1S16 ) rates.push_back( 11025 );

  00a34	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00a3b	83 e0 08	 and	 eax, 8
  00a3e	85 c0		 test	 eax, eax
  00a40	74 17		 je	 SHORT $LN41@getDeviceI
  00a42	c7 44 24 68 11
	2b 00 00	 mov	 DWORD PTR $T5[rsp], 11025 ; 00002b11H
  00a4a	48 8d 54 24 68	 lea	 rdx, QWORD PTR $T5[rsp]
  00a4f	48 8d 4c 24 38	 lea	 rcx, QWORD PTR rates$[rsp]
  00a54	e8 00 00 00 00	 call	 ?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::push_back
$LN41@getDeviceI:

; 5373 :       if ( inCaps.dwFormats & WAVE_FORMAT_2S16 ) rates.push_back( 22050 );

  00a59	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00a60	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00a65	85 c0		 test	 eax, eax
  00a67	74 17		 je	 SHORT $LN42@getDeviceI
  00a69	c7 44 24 6c 22
	56 00 00	 mov	 DWORD PTR $T6[rsp], 22050 ; 00005622H
  00a71	48 8d 54 24 6c	 lea	 rdx, QWORD PTR $T6[rsp]
  00a76	48 8d 4c 24 38	 lea	 rcx, QWORD PTR rates$[rsp]
  00a7b	e8 00 00 00 00	 call	 ?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::push_back
$LN42@getDeviceI:

; 5374 :       if ( inCaps.dwFormats & WAVE_FORMAT_4S16 ) rates.push_back( 44100 );

  00a80	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00a87	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00a8c	85 c0		 test	 eax, eax
  00a8e	74 17		 je	 SHORT $LN43@getDeviceI
  00a90	c7 44 24 70 44
	ac 00 00	 mov	 DWORD PTR $T7[rsp], 44100 ; 0000ac44H
  00a98	48 8d 54 24 70	 lea	 rdx, QWORD PTR $T7[rsp]
  00a9d	48 8d 4c 24 38	 lea	 rcx, QWORD PTR rates$[rsp]
  00aa2	e8 00 00 00 00	 call	 ?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::push_back
$LN43@getDeviceI:

; 5375 :       if ( inCaps.dwFormats & WAVE_FORMAT_96S16 ) rates.push_back( 96000 );

  00aa7	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00aae	25 00 00 08 00	 and	 eax, 524288		; 00080000H
  00ab3	85 c0		 test	 eax, eax
  00ab5	74 17		 je	 SHORT $LN44@getDeviceI
  00ab7	c7 44 24 74 00
	77 01 00	 mov	 DWORD PTR $T8[rsp], 96000 ; 00017700H
  00abf	48 8d 54 24 74	 lea	 rdx, QWORD PTR $T8[rsp]
  00ac4	48 8d 4c 24 38	 lea	 rcx, QWORD PTR rates$[rsp]
  00ac9	e8 00 00 00 00	 call	 ?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::push_back
$LN44@getDeviceI:

; 5376 :     }

  00ace	e9 b6 00 00 00	 jmp	 $LN40@getDeviceI
$LN39@getDeviceI:

; 5377 :     else if ( info.nativeFormats & RTAUDIO_SINT8 ) {

  00ad3	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+84]
  00ada	83 e0 01	 and	 eax, 1
  00add	85 c0		 test	 eax, eax
  00adf	0f 84 a4 00 00
	00		 je	 $LN40@getDeviceI

; 5378 :       if ( inCaps.dwFormats & WAVE_FORMAT_1S08 ) rates.push_back( 11025 );

  00ae5	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00aec	83 e0 02	 and	 eax, 2
  00aef	85 c0		 test	 eax, eax
  00af1	74 17		 je	 SHORT $LN46@getDeviceI
  00af3	c7 44 24 78 11
	2b 00 00	 mov	 DWORD PTR $T9[rsp], 11025 ; 00002b11H
  00afb	48 8d 54 24 78	 lea	 rdx, QWORD PTR $T9[rsp]
  00b00	48 8d 4c 24 38	 lea	 rcx, QWORD PTR rates$[rsp]
  00b05	e8 00 00 00 00	 call	 ?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::push_back
$LN46@getDeviceI:

; 5379 :       if ( inCaps.dwFormats & WAVE_FORMAT_2S08 ) rates.push_back( 22050 );

  00b0a	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00b11	83 e0 20	 and	 eax, 32			; 00000020H
  00b14	85 c0		 test	 eax, eax
  00b16	74 17		 je	 SHORT $LN47@getDeviceI
  00b18	c7 44 24 7c 22
	56 00 00	 mov	 DWORD PTR $T10[rsp], 22050 ; 00005622H
  00b20	48 8d 54 24 7c	 lea	 rdx, QWORD PTR $T10[rsp]
  00b25	48 8d 4c 24 38	 lea	 rcx, QWORD PTR rates$[rsp]
  00b2a	e8 00 00 00 00	 call	 ?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::push_back
$LN47@getDeviceI:

; 5380 :       if ( inCaps.dwFormats & WAVE_FORMAT_4S08 ) rates.push_back( 44100 );

  00b2f	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00b36	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00b3b	85 c0		 test	 eax, eax
  00b3d	74 1d		 je	 SHORT $LN48@getDeviceI
  00b3f	c7 84 24 80 00
	00 00 44 ac 00
	00		 mov	 DWORD PTR $T11[rsp], 44100 ; 0000ac44H
  00b4a	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR $T11[rsp]
  00b52	48 8d 4c 24 38	 lea	 rcx, QWORD PTR rates$[rsp]
  00b57	e8 00 00 00 00	 call	 ?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::push_back
$LN48@getDeviceI:

; 5381 :       if ( inCaps.dwFormats & WAVE_FORMAT_96S08 ) rates.push_back( 96000 );

  00b5c	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00b63	25 00 00 02 00	 and	 eax, 131072		; 00020000H
  00b68	85 c0		 test	 eax, eax
  00b6a	74 1d		 je	 SHORT $LN40@getDeviceI
  00b6c	c7 84 24 84 00
	00 00 00 77 01
	00		 mov	 DWORD PTR $T12[rsp], 96000 ; 00017700H
  00b77	48 8d 94 24 84
	00 00 00	 lea	 rdx, QWORD PTR $T12[rsp]
  00b7f	48 8d 4c 24 38	 lea	 rcx, QWORD PTR rates$[rsp]
  00b84	e8 00 00 00 00	 call	 ?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::push_back
$LN40@getDeviceI:

; 5382 :     }
; 5383 :   }

  00b89	e9 a4 02 00 00	 jmp	 $LN30@getDeviceI
$LN29@getDeviceI:

; 5384 :   else if ( inCaps.dwChannels == 1 ) {

  00b8e	83 bc 24 4c 01
	00 00 01	 cmp	 DWORD PTR inCaps$[rsp+12], 1
  00b96	0f 85 8b 02 00
	00		 jne	 $LN50@getDeviceI

; 5385 :     if ( inCaps.dwFormats & WAVE_FORMAT_1M16 ) info.nativeFormats |= RTAUDIO_SINT16;

  00b9c	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00ba3	83 e0 04	 and	 eax, 4
  00ba6	85 c0		 test	 eax, eax
  00ba8	74 11		 je	 SHORT $LN52@getDeviceI
  00baa	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+84]
  00bb1	83 c8 02	 or	 eax, 2
  00bb4	89 84 24 a4 01
	00 00		 mov	 DWORD PTR info$[rsp+84], eax
$LN52@getDeviceI:

; 5386 :     if ( inCaps.dwFormats & WAVE_FORMAT_2M16 ) info.nativeFormats |= RTAUDIO_SINT16;

  00bbb	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00bc2	83 e0 40	 and	 eax, 64			; 00000040H
  00bc5	85 c0		 test	 eax, eax
  00bc7	74 11		 je	 SHORT $LN53@getDeviceI
  00bc9	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+84]
  00bd0	83 c8 02	 or	 eax, 2
  00bd3	89 84 24 a4 01
	00 00		 mov	 DWORD PTR info$[rsp+84], eax
$LN53@getDeviceI:

; 5387 :     if ( inCaps.dwFormats & WAVE_FORMAT_4M16 ) info.nativeFormats |= RTAUDIO_SINT16;

  00bda	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00be1	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00be6	85 c0		 test	 eax, eax
  00be8	74 11		 je	 SHORT $LN54@getDeviceI
  00bea	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+84]
  00bf1	83 c8 02	 or	 eax, 2
  00bf4	89 84 24 a4 01
	00 00		 mov	 DWORD PTR info$[rsp+84], eax
$LN54@getDeviceI:

; 5388 :     if ( inCaps.dwFormats & WAVE_FORMAT_96M16 ) info.nativeFormats |= RTAUDIO_SINT16;

  00bfb	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00c02	25 00 00 04 00	 and	 eax, 262144		; 00040000H
  00c07	85 c0		 test	 eax, eax
  00c09	74 11		 je	 SHORT $LN55@getDeviceI
  00c0b	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+84]
  00c12	83 c8 02	 or	 eax, 2
  00c15	89 84 24 a4 01
	00 00		 mov	 DWORD PTR info$[rsp+84], eax
$LN55@getDeviceI:

; 5389 :     if ( inCaps.dwFormats & WAVE_FORMAT_1M08 ) info.nativeFormats |= RTAUDIO_SINT8;

  00c1c	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00c23	83 e0 01	 and	 eax, 1
  00c26	85 c0		 test	 eax, eax
  00c28	74 11		 je	 SHORT $LN56@getDeviceI
  00c2a	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+84]
  00c31	83 c8 01	 or	 eax, 1
  00c34	89 84 24 a4 01
	00 00		 mov	 DWORD PTR info$[rsp+84], eax
$LN56@getDeviceI:

; 5390 :     if ( inCaps.dwFormats & WAVE_FORMAT_2M08 ) info.nativeFormats |= RTAUDIO_SINT8;

  00c3b	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00c42	83 e0 10	 and	 eax, 16
  00c45	85 c0		 test	 eax, eax
  00c47	74 11		 je	 SHORT $LN57@getDeviceI
  00c49	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+84]
  00c50	83 c8 01	 or	 eax, 1
  00c53	89 84 24 a4 01
	00 00		 mov	 DWORD PTR info$[rsp+84], eax
$LN57@getDeviceI:

; 5391 :     if ( inCaps.dwFormats & WAVE_FORMAT_4M08 ) info.nativeFormats |= RTAUDIO_SINT8;

  00c5a	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00c61	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00c66	85 c0		 test	 eax, eax
  00c68	74 11		 je	 SHORT $LN58@getDeviceI
  00c6a	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+84]
  00c71	83 c8 01	 or	 eax, 1
  00c74	89 84 24 a4 01
	00 00		 mov	 DWORD PTR info$[rsp+84], eax
$LN58@getDeviceI:

; 5392 :     if ( inCaps.dwFormats & WAVE_FORMAT_96M08 ) info.nativeFormats |= RTAUDIO_SINT8;

  00c7b	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00c82	25 00 00 01 00	 and	 eax, 65536		; 00010000H
  00c87	85 c0		 test	 eax, eax
  00c89	74 11		 je	 SHORT $LN59@getDeviceI
  00c8b	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+84]
  00c92	83 c8 01	 or	 eax, 1
  00c95	89 84 24 a4 01
	00 00		 mov	 DWORD PTR info$[rsp+84], eax
$LN59@getDeviceI:

; 5393 : 
; 5394 :     if ( info.nativeFormats & RTAUDIO_SINT16 ) {

  00c9c	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+84]
  00ca3	83 e0 02	 and	 eax, 2
  00ca6	85 c0		 test	 eax, eax
  00ca8	0f 84 b5 00 00
	00		 je	 $LN60@getDeviceI

; 5395 :       if ( inCaps.dwFormats & WAVE_FORMAT_1M16 ) rates.push_back( 11025 );

  00cae	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00cb5	83 e0 04	 and	 eax, 4
  00cb8	85 c0		 test	 eax, eax
  00cba	74 1d		 je	 SHORT $LN62@getDeviceI
  00cbc	c7 84 24 88 00
	00 00 11 2b 00
	00		 mov	 DWORD PTR $T13[rsp], 11025 ; 00002b11H
  00cc7	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR $T13[rsp]
  00ccf	48 8d 4c 24 38	 lea	 rcx, QWORD PTR rates$[rsp]
  00cd4	e8 00 00 00 00	 call	 ?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::push_back
$LN62@getDeviceI:

; 5396 :       if ( inCaps.dwFormats & WAVE_FORMAT_2M16 ) rates.push_back( 22050 );

  00cd9	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00ce0	83 e0 40	 and	 eax, 64			; 00000040H
  00ce3	85 c0		 test	 eax, eax
  00ce5	74 1d		 je	 SHORT $LN63@getDeviceI
  00ce7	c7 84 24 8c 00
	00 00 22 56 00
	00		 mov	 DWORD PTR $T14[rsp], 22050 ; 00005622H
  00cf2	48 8d 94 24 8c
	00 00 00	 lea	 rdx, QWORD PTR $T14[rsp]
  00cfa	48 8d 4c 24 38	 lea	 rcx, QWORD PTR rates$[rsp]
  00cff	e8 00 00 00 00	 call	 ?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::push_back
$LN63@getDeviceI:

; 5397 :       if ( inCaps.dwFormats & WAVE_FORMAT_4M16 ) rates.push_back( 44100 );

  00d04	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00d0b	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00d10	85 c0		 test	 eax, eax
  00d12	74 1d		 je	 SHORT $LN64@getDeviceI
  00d14	c7 84 24 90 00
	00 00 44 ac 00
	00		 mov	 DWORD PTR $T15[rsp], 44100 ; 0000ac44H
  00d1f	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR $T15[rsp]
  00d27	48 8d 4c 24 38	 lea	 rcx, QWORD PTR rates$[rsp]
  00d2c	e8 00 00 00 00	 call	 ?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::push_back
$LN64@getDeviceI:

; 5398 :       if ( inCaps.dwFormats & WAVE_FORMAT_96M16 ) rates.push_back( 96000 );

  00d31	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00d38	25 00 00 04 00	 and	 eax, 262144		; 00040000H
  00d3d	85 c0		 test	 eax, eax
  00d3f	74 1d		 je	 SHORT $LN65@getDeviceI
  00d41	c7 84 24 94 00
	00 00 00 77 01
	00		 mov	 DWORD PTR $T16[rsp], 96000 ; 00017700H
  00d4c	48 8d 94 24 94
	00 00 00	 lea	 rdx, QWORD PTR $T16[rsp]
  00d54	48 8d 4c 24 38	 lea	 rcx, QWORD PTR rates$[rsp]
  00d59	e8 00 00 00 00	 call	 ?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::push_back
$LN65@getDeviceI:

; 5399 :     }

  00d5e	e9 c2 00 00 00	 jmp	 $LN61@getDeviceI
$LN60@getDeviceI:

; 5400 :     else if ( info.nativeFormats & RTAUDIO_SINT8 ) {

  00d63	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+84]
  00d6a	83 e0 01	 and	 eax, 1
  00d6d	85 c0		 test	 eax, eax
  00d6f	0f 84 b0 00 00
	00		 je	 $LN61@getDeviceI

; 5401 :       if ( inCaps.dwFormats & WAVE_FORMAT_1M08 ) rates.push_back( 11025 );

  00d75	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00d7c	83 e0 01	 and	 eax, 1
  00d7f	85 c0		 test	 eax, eax
  00d81	74 1d		 je	 SHORT $LN67@getDeviceI
  00d83	c7 84 24 98 00
	00 00 11 2b 00
	00		 mov	 DWORD PTR $T17[rsp], 11025 ; 00002b11H
  00d8e	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR $T17[rsp]
  00d96	48 8d 4c 24 38	 lea	 rcx, QWORD PTR rates$[rsp]
  00d9b	e8 00 00 00 00	 call	 ?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::push_back
$LN67@getDeviceI:

; 5402 :       if ( inCaps.dwFormats & WAVE_FORMAT_2M08 ) rates.push_back( 22050 );

  00da0	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00da7	83 e0 10	 and	 eax, 16
  00daa	85 c0		 test	 eax, eax
  00dac	74 1d		 je	 SHORT $LN68@getDeviceI
  00dae	c7 84 24 9c 00
	00 00 22 56 00
	00		 mov	 DWORD PTR $T18[rsp], 22050 ; 00005622H
  00db9	48 8d 94 24 9c
	00 00 00	 lea	 rdx, QWORD PTR $T18[rsp]
  00dc1	48 8d 4c 24 38	 lea	 rcx, QWORD PTR rates$[rsp]
  00dc6	e8 00 00 00 00	 call	 ?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::push_back
$LN68@getDeviceI:

; 5403 :       if ( inCaps.dwFormats & WAVE_FORMAT_4M08 ) rates.push_back( 44100 );

  00dcb	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00dd2	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00dd7	85 c0		 test	 eax, eax
  00dd9	74 1d		 je	 SHORT $LN69@getDeviceI
  00ddb	c7 84 24 a0 00
	00 00 44 ac 00
	00		 mov	 DWORD PTR $T19[rsp], 44100 ; 0000ac44H
  00de6	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR $T19[rsp]
  00dee	48 8d 4c 24 38	 lea	 rcx, QWORD PTR rates$[rsp]
  00df3	e8 00 00 00 00	 call	 ?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::push_back
$LN69@getDeviceI:

; 5404 :       if ( inCaps.dwFormats & WAVE_FORMAT_96M08 ) rates.push_back( 96000 );

  00df8	8b 84 24 48 01
	00 00		 mov	 eax, DWORD PTR inCaps$[rsp+8]
  00dff	25 00 00 01 00	 and	 eax, 65536		; 00010000H
  00e04	85 c0		 test	 eax, eax
  00e06	74 1d		 je	 SHORT $LN61@getDeviceI
  00e08	c7 84 24 a4 00
	00 00 00 77 01
	00		 mov	 DWORD PTR $T20[rsp], 96000 ; 00017700H
  00e13	48 8d 94 24 a4
	00 00 00	 lea	 rdx, QWORD PTR $T20[rsp]
  00e1b	48 8d 4c 24 38	 lea	 rcx, QWORD PTR rates$[rsp]
  00e20	e8 00 00 00 00	 call	 ?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::push_back
$LN61@getDeviceI:

; 5405 :     }
; 5406 :   }

  00e25	eb 0b		 jmp	 SHORT $LN30@getDeviceI
$LN50@getDeviceI:

; 5407 :   else info.inputChannels = 0; // technically, this would be an error

  00e27	c7 84 24 7c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR info$[rsp+44], 0
$LN30@getDeviceI:

; 5408 : 
; 5409 :   input->Release();

  00e32	48 8b 44 24 58	 mov	 rax, QWORD PTR input$[rsp]
  00e37	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00e3a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR input$[rsp]
  00e3f	ff 50 10	 call	 QWORD PTR [rax+16]

; 5410 : 
; 5411 :   if ( info.inputChannels == 0 ) return info;

  00e42	83 bc 24 7c 01
	00 00 00	 cmp	 DWORD PTR info$[rsp+44], 0
  00e4a	75 45		 jne	 SHORT $LN71@getDeviceI
  00e4c	48 8d 94 24 50
	01 00 00	 lea	 rdx, QWORD PTR info$[rsp]
  00e54	48 8b 8c 24 b8
	02 00 00	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00e5c	e8 00 00 00 00	 call	 ??0DeviceInfo@RtAudio@@QEAA@$$QEAU01@@Z
  00e61	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  00e65	83 c8 01	 or	 eax, 1
  00e68	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  00e6c	48 8d 4c 24 38	 lea	 rcx, QWORD PTR rates$[rsp]
  00e71	e8 00 00 00 00	 call	 ??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
  00e76	90		 npad	 1
  00e77	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR info$[rsp]
  00e7f	e8 00 00 00 00	 call	 ??1DeviceInfo@RtAudio@@QEAA@XZ
  00e84	48 8b 84 24 b8
	02 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
  00e8c	e9 01 02 00 00	 jmp	 $LN1@getDeviceI
$LN71@getDeviceI:

; 5412 : 
; 5413 :   // Copy the supported rates to the info structure but avoid duplication.
; 5414 :   bool found;
; 5415 :   for ( unsigned int i=0; i<rates.size(); i++ ) {

  00e91	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$3[rsp], 0
  00e99	eb 0a		 jmp	 SHORT $LN7@getDeviceI
$LN5@getDeviceI:
  00e9b	8b 44 24 30	 mov	 eax, DWORD PTR i$3[rsp]
  00e9f	ff c0		 inc	 eax
  00ea1	89 44 24 30	 mov	 DWORD PTR i$3[rsp], eax
$LN7@getDeviceI:
  00ea5	8b 44 24 30	 mov	 eax, DWORD PTR i$3[rsp]
  00ea9	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv672[rsp], rax
  00eb1	48 8d 4c 24 38	 lea	 rcx, QWORD PTR rates$[rsp]
  00eb6	e8 00 00 00 00	 call	 ?size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
  00ebb	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR tv672[rsp]
  00ec3	48 3b c8	 cmp	 rcx, rax
  00ec6	0f 83 af 00 00
	00		 jae	 $LN6@getDeviceI

; 5416 :     found = false;

  00ecc	c6 44 24 24 00	 mov	 BYTE PTR found$[rsp], 0

; 5417 :     for ( unsigned int j=0; j<info.sampleRates.size(); j++ ) {

  00ed1	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR j$4[rsp], 0
  00ed9	eb 0a		 jmp	 SHORT $LN10@getDeviceI
$LN8@getDeviceI:
  00edb	8b 44 24 34	 mov	 eax, DWORD PTR j$4[rsp]
  00edf	ff c0		 inc	 eax
  00ee1	89 44 24 34	 mov	 DWORD PTR j$4[rsp], eax
$LN10@getDeviceI:
  00ee5	8b 44 24 34	 mov	 eax, DWORD PTR j$4[rsp]
  00ee9	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv677[rsp], rax
  00ef1	48 8d 8c 24 88
	01 00 00	 lea	 rcx, QWORD PTR info$[rsp+56]
  00ef9	e8 00 00 00 00	 call	 ?size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
  00efe	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tv677[rsp]
  00f06	48 3b c8	 cmp	 rcx, rax
  00f09	73 42		 jae	 SHORT $LN9@getDeviceI

; 5418 :       if ( rates[i] == info.sampleRates[j] ) {

  00f0b	8b 44 24 30	 mov	 eax, DWORD PTR i$3[rsp]
  00f0f	8b d0		 mov	 edx, eax
  00f11	48 8d 4c 24 38	 lea	 rcx, QWORD PTR rates$[rsp]
  00f16	e8 00 00 00 00	 call	 ??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::operator[]
  00f1b	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv682[rsp], rax
  00f23	8b 4c 24 34	 mov	 ecx, DWORD PTR j$4[rsp]
  00f27	8b d1		 mov	 edx, ecx
  00f29	48 8d 8c 24 88
	01 00 00	 lea	 rcx, QWORD PTR info$[rsp+56]
  00f31	e8 00 00 00 00	 call	 ??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::operator[]
  00f36	8b 00		 mov	 eax, DWORD PTR [rax]
  00f38	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR tv682[rsp]
  00f40	39 01		 cmp	 DWORD PTR [rcx], eax
  00f42	75 07		 jne	 SHORT $LN72@getDeviceI

; 5419 :         found = true;

  00f44	c6 44 24 24 01	 mov	 BYTE PTR found$[rsp], 1

; 5420 :         break;

  00f49	eb 02		 jmp	 SHORT $LN9@getDeviceI
$LN72@getDeviceI:

; 5421 :       }
; 5422 :     }

  00f4b	eb 8e		 jmp	 SHORT $LN8@getDeviceI
$LN9@getDeviceI:

; 5423 :     if ( found == false ) info.sampleRates.push_back( rates[i] );

  00f4d	0f b6 44 24 24	 movzx	 eax, BYTE PTR found$[rsp]
  00f52	85 c0		 test	 eax, eax
  00f54	75 20		 jne	 SHORT $LN73@getDeviceI
  00f56	8b 44 24 30	 mov	 eax, DWORD PTR i$3[rsp]
  00f5a	8b d0		 mov	 edx, eax
  00f5c	48 8d 4c 24 38	 lea	 rcx, QWORD PTR rates$[rsp]
  00f61	e8 00 00 00 00	 call	 ??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::operator[]
  00f66	48 8b d0	 mov	 rdx, rax
  00f69	48 8d 8c 24 88
	01 00 00	 lea	 rcx, QWORD PTR info$[rsp+56]
  00f71	e8 00 00 00 00	 call	 ?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAXAEBI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::push_back
$LN73@getDeviceI:

; 5424 :   }

  00f76	e9 20 ff ff ff	 jmp	 $LN5@getDeviceI
$LN6@getDeviceI:

; 5425 :   std::sort( info.sampleRates.begin(), info.sampleRates.end() );

  00f7b	48 8d 94 24 28
	01 00 00	 lea	 rdx, QWORD PTR $T21[rsp]
  00f83	48 8d 8c 24 88
	01 00 00	 lea	 rcx, QWORD PTR info$[rsp+56]
  00f8b	e8 00 00 00 00	 call	 ?end@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::end
  00f90	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv699[rsp], rax
  00f98	48 8d 94 24 30
	01 00 00	 lea	 rdx, QWORD PTR $T22[rsp]
  00fa0	48 8d 8c 24 88
	01 00 00	 lea	 rcx, QWORD PTR info$[rsp+56]
  00fa8	e8 00 00 00 00	 call	 ?begin@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::begin
  00fad	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR tv699[rsp]
  00fb5	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00fb8	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00fbb	e8 00 00 00 00	 call	 ??$sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@0@0@Z ; std::sort<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > > >

; 5426 : 
; 5427 :   // If device opens for both playback and capture, we determine the channels.
; 5428 :   if ( info.outputChannels > 0 && info.inputChannels > 0 )

  00fc0	83 bc 24 78 01
	00 00 00	 cmp	 DWORD PTR info$[rsp+40], 0
  00fc8	76 3d		 jbe	 SHORT $LN74@getDeviceI
  00fca	83 bc 24 7c 01
	00 00 00	 cmp	 DWORD PTR info$[rsp+44], 0
  00fd2	76 33		 jbe	 SHORT $LN74@getDeviceI

; 5429 :     info.duplexChannels = (info.outputChannels > info.inputChannels) ? info.inputChannels : info.outputChannels;

  00fd4	8b 84 24 7c 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+44]
  00fdb	39 84 24 78 01
	00 00		 cmp	 DWORD PTR info$[rsp+40], eax
  00fe2	76 0d		 jbe	 SHORT $LN79@getDeviceI
  00fe4	8b 84 24 7c 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+44]
  00feb	89 44 24 64	 mov	 DWORD PTR tv709[rsp], eax
  00fef	eb 0b		 jmp	 SHORT $LN80@getDeviceI
$LN79@getDeviceI:
  00ff1	8b 84 24 78 01
	00 00		 mov	 eax, DWORD PTR info$[rsp+40]
  00ff8	89 44 24 64	 mov	 DWORD PTR tv709[rsp], eax
$LN80@getDeviceI:
  00ffc	8b 44 24 64	 mov	 eax, DWORD PTR tv709[rsp]
  01000	89 84 24 80 01
	00 00		 mov	 DWORD PTR info$[rsp+48], eax
$LN74@getDeviceI:

; 5430 : 
; 5431 :   if ( device == 0 ) info.isDefaultInput = true;

  01007	83 bc 24 c0 02
	00 00 00	 cmp	 DWORD PTR device$[rsp], 0
  0100f	75 08		 jne	 SHORT $LN75@getDeviceI
  01011	c6 84 24 85 01
	00 00 01	 mov	 BYTE PTR info$[rsp+53], 1
$LN75@getDeviceI:

; 5432 : 
; 5433 :   // Copy name and return.
; 5434 :   info.name = dsDevices[ device ].name;

  01019	8b 84 24 c0 02
	00 00		 mov	 eax, DWORD PTR device$[rsp]
  01020	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  01028	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  0102f	8b d0		 mov	 edx, eax
  01031	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  01036	48 83 c0 18	 add	 rax, 24
  0103a	48 8b d0	 mov	 rdx, rax
  0103d	48 8d 8c 24 58
	01 00 00	 lea	 rcx, QWORD PTR info$[rsp+8]
  01045	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 5435 :   info.probed = true;

  0104a	c6 84 24 50 01
	00 00 01	 mov	 BYTE PTR info$[rsp], 1

; 5436 :   return info;

  01052	48 8d 94 24 50
	01 00 00	 lea	 rdx, QWORD PTR info$[rsp]
  0105a	48 8b 8c 24 b8
	02 00 00	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  01062	e8 00 00 00 00	 call	 ??0DeviceInfo@RtAudio@@QEAA@$$QEAU01@@Z
  01067	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  0106b	83 c8 01	 or	 eax, 1
  0106e	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  01072	48 8d 4c 24 38	 lea	 rcx, QWORD PTR rates$[rsp]
  01077	e8 00 00 00 00	 call	 ??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
  0107c	90		 npad	 1
  0107d	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR info$[rsp]
  01085	e8 00 00 00 00	 call	 ??1DeviceInfo@RtAudio@@QEAA@XZ
  0108a	48 8b 84 24 b8
	02 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
$LN1@getDeviceI:

; 5437 : }

  01092	48 8b 8c 24 90
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0109a	48 33 cc	 xor	 rcx, rsp
  0109d	e8 00 00 00 00	 call	 __security_check_cookie
  010a2	48 81 c4 a8 02
	00 00		 add	 rsp, 680		; 000002a8H
  010a9	c3		 ret	 0
?getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z ENDP ; RtApiDs::getDeviceInfo
_TEXT	ENDS
text$x	SEGMENT
$T1 = 32
found$ = 36
result$ = 40
k$2 = 44
i$3 = 48
j$4 = 52
rates$ = 56
output$ = 80
input$ = 88
tv287 = 96
tv709 = 100
$T5 = 104
$T6 = 108
$T7 = 112
$T8 = 116
$T9 = 120
$T10 = 124
$T11 = 128
$T12 = 132
$T13 = 136
$T14 = 140
$T15 = 144
$T16 = 148
$T17 = 152
$T18 = 156
$T19 = 160
$T20 = 164
tv189 = 168
tv184 = 176
tv732 = 184
tv246 = 192
tv734 = 200
tv386 = 208
tv381 = 216
tv770 = 224
tv489 = 232
tv484 = 240
tv774 = 248
tv672 = 256
tv677 = 264
tv131 = 272
tv699 = 280
tv682 = 288
$T21 = 296
$T22 = 304
$T23 = 312
inCaps$ = 320
info$ = 336
outCaps$ = 432
$T24 = 528
$T25 = 560
$T26 = 592
$T27 = 624
__$ArrayPad$ = 656
this$ = 688
__$ReturnUdt$ = 696
device$ = 704
?dtor$0@?0??getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z@4HA PROC ; `RtApiDs::getDeviceInfo'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 8d 50 01
	00 00		 lea	 rcx, QWORD PTR info$[rbp]
  00010	e8 00 00 00 00	 call	 ??1DeviceInfo@RtAudio@@QEAA@XZ
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$0@?0??getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z@4HA ENDP ; `RtApiDs::getDeviceInfo'::`1'::dtor$0
$T1 = 32
found$ = 36
result$ = 40
k$2 = 44
i$3 = 48
j$4 = 52
rates$ = 56
output$ = 80
input$ = 88
tv287 = 96
tv709 = 100
$T5 = 104
$T6 = 108
$T7 = 112
$T8 = 116
$T9 = 120
$T10 = 124
$T11 = 128
$T12 = 132
$T13 = 136
$T14 = 140
$T15 = 144
$T16 = 148
$T17 = 152
$T18 = 156
$T19 = 160
$T20 = 164
tv189 = 168
tv184 = 176
tv732 = 184
tv246 = 192
tv734 = 200
tv386 = 208
tv381 = 216
tv770 = 224
tv489 = 232
tv484 = 240
tv774 = 248
tv672 = 256
tv677 = 264
tv131 = 272
tv699 = 280
tv682 = 288
$T21 = 296
$T22 = 304
$T23 = 312
inCaps$ = 320
info$ = 336
outCaps$ = 432
$T24 = 528
$T25 = 560
$T26 = 592
$T27 = 624
__$ArrayPad$ = 656
this$ = 688
__$ReturnUdt$ = 696
device$ = 704
?dtor$6@?0??getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z@4HA PROC ; `RtApiDs::getDeviceInfo'::`1'::dtor$6
  0001b	40 55		 push	 rbp
  0001d	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00021	48 8b ea	 mov	 rbp, rdx
  00024	48 8d 4d 38	 lea	 rcx, QWORD PTR rates$[rbp]
  00028	e8 00 00 00 00	 call	 ??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$6@?0??getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z@4HA ENDP ; `RtApiDs::getDeviceInfo'::`1'::dtor$6
text$x	ENDS
; Function compile flags: /Odtp
text$x	SEGMENT
$T1 = 32
found$ = 36
result$ = 40
k$2 = 44
i$3 = 48
j$4 = 52
rates$ = 56
output$ = 80
input$ = 88
tv287 = 96
tv709 = 100
$T5 = 104
$T6 = 108
$T7 = 112
$T8 = 116
$T9 = 120
$T10 = 124
$T11 = 128
$T12 = 132
$T13 = 136
$T14 = 140
$T15 = 144
$T16 = 148
$T17 = 152
$T18 = 156
$T19 = 160
$T20 = 164
tv189 = 168
tv184 = 176
tv732 = 184
tv246 = 192
tv734 = 200
tv386 = 208
tv381 = 216
tv770 = 224
tv489 = 232
tv484 = 240
tv774 = 248
tv672 = 256
tv677 = 264
tv131 = 272
tv699 = 280
tv682 = 288
$T21 = 296
$T22 = 304
$T23 = 312
inCaps$ = 320
info$ = 336
outCaps$ = 432
$T24 = 528
$T25 = 560
$T26 = 592
$T27 = 624
__$ArrayPad$ = 656
this$ = 688
__$ReturnUdt$ = 696
device$ = 704
?dtor$0@?0??getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z@4HA PROC ; `RtApiDs::getDeviceInfo'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 8d 50 01
	00 00		 lea	 rcx, QWORD PTR info$[rbp]
  00010	e8 00 00 00 00	 call	 ??1DeviceInfo@RtAudio@@QEAA@XZ
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$0@?0??getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z@4HA ENDP ; `RtApiDs::getDeviceInfo'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
text$x	SEGMENT
$T1 = 32
found$ = 36
result$ = 40
k$2 = 44
i$3 = 48
j$4 = 52
rates$ = 56
output$ = 80
input$ = 88
tv287 = 96
tv709 = 100
$T5 = 104
$T6 = 108
$T7 = 112
$T8 = 116
$T9 = 120
$T10 = 124
$T11 = 128
$T12 = 132
$T13 = 136
$T14 = 140
$T15 = 144
$T16 = 148
$T17 = 152
$T18 = 156
$T19 = 160
$T20 = 164
tv189 = 168
tv184 = 176
tv732 = 184
tv246 = 192
tv734 = 200
tv386 = 208
tv381 = 216
tv770 = 224
tv489 = 232
tv484 = 240
tv774 = 248
tv672 = 256
tv677 = 264
tv131 = 272
tv699 = 280
tv682 = 288
$T21 = 296
$T22 = 304
$T23 = 312
inCaps$ = 320
info$ = 336
outCaps$ = 432
$T24 = 528
$T25 = 560
$T26 = 592
$T27 = 624
__$ArrayPad$ = 656
this$ = 688
__$ReturnUdt$ = 696
device$ = 704
?dtor$6@?0??getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z@4HA PROC ; `RtApiDs::getDeviceInfo'::`1'::dtor$6
  0001b	40 55		 push	 rbp
  0001d	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00021	48 8b ea	 mov	 rbp, rdx
  00024	48 8d 4d 38	 lea	 rcx, QWORD PTR rates$[rbp]
  00028	e8 00 00 00 00	 call	 ??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$6@?0??getDeviceInfo@RtApiDs@@UEAA?AUDeviceInfo@RtAudio@@I@Z@4HA ENDP ; `RtApiDs::getDeviceInfo'::`1'::dtor$6
text$x	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
this$ = 8
?getDefaultInputDevice@RtApiDs@@UEAAIXZ PROC		; RtApiDs::getDefaultInputDevice

; 5220 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 5221 :   return 0;

  00005	33 c0		 xor	 eax, eax

; 5222 : }

  00007	c3		 ret	 0
?getDefaultInputDevice@RtApiDs@@UEAAIXZ ENDP		; RtApiDs::getDefaultInputDevice
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
this$ = 8
?getDefaultOutputDevice@RtApiDs@@UEAAIXZ PROC		; RtApiDs::getDefaultOutputDevice

; 5213 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 5214 :   return 0;

  00005	33 c0		 xor	 eax, eax

; 5215 : }

  00007	c3		 ret	 0
?getDefaultOutputDevice@RtApiDs@@UEAAIXZ ENDP		; RtApiDs::getDefaultOutputDevice
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
result$ = 32
i$1 = 36
i$2 = 40
probeInfo$ = 48
tv65 = 64
tv84 = 72
tv238 = 80
tv162 = 88
tv240 = 96
tv201 = 104
tv226 = 112
$T3 = 120
$T4 = 128
$T5 = 136
$T6 = 144
$T7 = 152
$T8 = 184
__$ArrayPad$ = 216
this$ = 240
?getDeviceCount@RtApiDs@@UEAAIXZ PROC			; RtApiDs::getDeviceCount

; 5225 : {

$LN15:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 5226 :   // Set query flag for previously found devices to false, so that we
; 5227 :   // can check for any devices that have disappeared.
; 5228 :   for ( unsigned int i=0; i<dsDevices.size(); i++ )

  0001e	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR i$2[rsp], 0
  00026	eb 0a		 jmp	 SHORT $LN4@getDeviceC
$LN2@getDeviceC:
  00028	8b 44 24 28	 mov	 eax, DWORD PTR i$2[rsp]
  0002c	ff c0		 inc	 eax
  0002e	89 44 24 28	 mov	 DWORD PTR i$2[rsp], eax
$LN4@getDeviceC:
  00032	8b 44 24 28	 mov	 eax, DWORD PTR i$2[rsp]
  00036	48 89 44 24 40	 mov	 QWORD PTR tv65[rsp], rax
  0003b	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00043	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  0004a	e8 00 00 00 00	 call	 ?size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ ; std::vector<DsDevice,std::allocator<DsDevice> >::size
  0004f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv65[rsp]
  00054	48 3b c8	 cmp	 rcx, rax
  00057	73 20		 jae	 SHORT $LN3@getDeviceC

; 5229 :     dsDevices[i].found = false;

  00059	8b 44 24 28	 mov	 eax, DWORD PTR i$2[rsp]
  0005d	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00065	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  0006c	8b d0		 mov	 edx, eax
  0006e	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  00073	c6 40 12 00	 mov	 BYTE PTR [rax+18], 0
  00077	eb af		 jmp	 SHORT $LN2@getDeviceC
$LN3@getDeviceC:

; 5230 : 
; 5231 :   // Query DirectSound devices.
; 5232 :   struct DsProbeData probeInfo;
; 5233 :   probeInfo.isInput = false;

  00079	c6 44 24 30 00	 mov	 BYTE PTR probeInfo$[rsp], 0

; 5234 :   probeInfo.dsDevices = &dsDevices;

  0007e	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00086	48 05 90 02 00
	00		 add	 rax, 656		; 00000290H
  0008c	48 89 44 24 38	 mov	 QWORD PTR probeInfo$[rsp+8], rax

; 5235 :   HRESULT result = DirectSoundEnumerate( (LPDSENUMCALLBACK) deviceQueryCallback, &probeInfo );

  00091	48 8d 54 24 30	 lea	 rdx, QWORD PTR probeInfo$[rsp]
  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z ; deviceQueryCallback
  0009d	e8 00 00 00 00	 call	 DirectSoundEnumerateA
  000a2	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 5236 :   if ( FAILED( result ) ) {

  000a6	83 7c 24 20 00	 cmp	 DWORD PTR result$[rsp], 0
  000ab	0f 8d 9d 00 00
	00		 jge	 $LN8@getDeviceC

; 5237 :     errorStream_ << "RtApiDs::getDeviceCount: error (" << getErrorString( result ) << ") enumerating output devices!";

  000b1	8b 4c 24 20	 mov	 ecx, DWORD PTR result$[rsp]
  000b5	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  000ba	48 89 44 24 48	 mov	 QWORD PTR tv84[rsp], rax
  000bf	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000c7	48 83 c1 08	 add	 rcx, 8
  000cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128161
  000d2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  000d7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv84[rsp]
  000dc	48 8b d1	 mov	 rdx, rcx
  000df	48 8b c8	 mov	 rcx, rax
  000e2	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  000e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128160
  000ee	48 8b c8	 mov	 rcx, rax
  000f1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 5238 :     errorText_ = errorStream_.str();

  000f6	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000fe	48 83 c0 08	 add	 rax, 8
  00102	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR $T7[rsp]
  0010a	48 8b c8	 mov	 rcx, rax
  0010d	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00112	48 89 44 24 50	 mov	 QWORD PTR tv238[rsp], rax
  00117	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0011f	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00125	48 8b 54 24 50	 mov	 rdx, QWORD PTR tv238[rsp]
  0012a	48 8b c8	 mov	 rcx, rax
  0012d	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00132	48 8d 8c 24 98
	00 00 00	 lea	 rcx, QWORD PTR $T7[rsp]
  0013a	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5239 :     error( RtAudioError::WARNING );

  0013f	33 d2		 xor	 edx, edx
  00141	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00149	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error
$LN8@getDeviceC:

; 5240 :   }
; 5241 : 
; 5242 :   // Query DirectSoundCapture devices.
; 5243 :   probeInfo.isInput = true;

  0014e	c6 44 24 30 01	 mov	 BYTE PTR probeInfo$[rsp], 1

; 5244 :   result = DirectSoundCaptureEnumerate( (LPDSENUMCALLBACK) deviceQueryCallback, &probeInfo );

  00153	48 8d 54 24 30	 lea	 rdx, QWORD PTR probeInfo$[rsp]
  00158	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?deviceQueryCallback@@YAHPEAU_GUID@@PEBD1PEAX@Z ; deviceQueryCallback
  0015f	e8 00 00 00 00	 call	 DirectSoundCaptureEnumerateA
  00164	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 5245 :   if ( FAILED( result ) ) {

  00168	83 7c 24 20 00	 cmp	 DWORD PTR result$[rsp], 0
  0016d	0f 8d 9d 00 00
	00		 jge	 $LN9@getDeviceC

; 5246 :     errorStream_ << "RtApiDs::getDeviceCount: error (" << getErrorString( result ) << ") enumerating input devices!";

  00173	8b 4c 24 20	 mov	 ecx, DWORD PTR result$[rsp]
  00177	e8 00 00 00 00	 call	 ?getErrorString@@YAPEBDH@Z ; getErrorString
  0017c	48 89 44 24 58	 mov	 QWORD PTR tv162[rsp], rax
  00181	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00189	48 83 c1 08	 add	 rcx, 8
  0018d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128164
  00194	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00199	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv162[rsp]
  0019e	48 8b d1	 mov	 rdx, rcx
  001a1	48 8b c8	 mov	 rcx, rax
  001a4	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  001a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG128163
  001b0	48 8b c8	 mov	 rcx, rax
  001b3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 5247 :     errorText_ = errorStream_.str();

  001b8	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001c0	48 83 c0 08	 add	 rax, 8
  001c4	48 8d 94 24 b8
	00 00 00	 lea	 rdx, QWORD PTR $T8[rsp]
  001cc	48 8b c8	 mov	 rcx, rax
  001cf	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  001d4	48 89 44 24 60	 mov	 QWORD PTR tv240[rsp], rax
  001d9	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001e1	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  001e7	48 8b 54 24 60	 mov	 rdx, QWORD PTR tv240[rsp]
  001ec	48 8b c8	 mov	 rcx, rax
  001ef	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  001f4	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR $T8[rsp]
  001fc	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 5248 :     error( RtAudioError::WARNING );

  00201	33 d2		 xor	 edx, edx
  00203	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0020b	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error
$LN9@getDeviceC:

; 5249 :   }
; 5250 : 
; 5251 :   // Clean out any devices that may have disappeared (code update submitted by Eli Zehngut).
; 5252 :   for ( unsigned int i=0; i<dsDevices.size(); ) {

  00210	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0
$LN5@getDeviceC:
  00218	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  0021c	48 89 44 24 68	 mov	 QWORD PTR tv201[rsp], rax
  00221	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00229	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  00230	e8 00 00 00 00	 call	 ?size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ ; std::vector<DsDevice,std::allocator<DsDevice> >::size
  00235	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv201[rsp]
  0023a	48 3b c8	 cmp	 rcx, rax
  0023d	0f 83 9b 00 00
	00		 jae	 $LN6@getDeviceC

; 5253 :     if ( dsDevices[i].found == false ) dsDevices.erase( dsDevices.begin() + i );

  00243	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  00247	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0024f	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  00256	8b d0		 mov	 edx, eax
  00258	e8 00 00 00 00	 call	 ??A?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAAAEAUDsDevice@@_K@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::operator[]
  0025d	0f b6 40 12	 movzx	 eax, BYTE PTR [rax+18]
  00261	85 c0		 test	 eax, eax
  00263	75 6a		 jne	 SHORT $LN10@getDeviceC
  00265	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  00269	48 89 44 24 70	 mov	 QWORD PTR tv226[rsp], rax
  0026e	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00276	48 81 c1 90 02
	00 00		 add	 rcx, 656		; 00000290H
  0027d	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR $T4[rsp]
  00285	e8 00 00 00 00	 call	 ?begin@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@XZ ; std::vector<DsDevice,std::allocator<DsDevice> >::begin
  0028a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv226[rsp]
  0028f	4c 8b c1	 mov	 r8, rcx
  00292	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR $T5[rsp]
  0029a	48 8b c8	 mov	 rcx, rax
  0029d	e8 00 00 00 00	 call	 ??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@std@@QEBA?AV01@_J@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<DsDevice> > >::operator+
  002a2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002a5	48 89 44 24 78	 mov	 QWORD PTR $T3[rsp], rax
  002aa	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  002b2	48 05 90 02 00
	00		 add	 rax, 656		; 00000290H
  002b8	4c 8b 44 24 78	 mov	 r8, QWORD PTR $T3[rsp]
  002bd	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR $T6[rsp]
  002c5	48 8b c8	 mov	 rcx, rax
  002c8	e8 00 00 00 00	 call	 ?erase@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UDsDevice@@@std@@@std@@@2@@Z ; std::vector<DsDevice,std::allocator<DsDevice> >::erase
  002cd	eb 0a		 jmp	 SHORT $LN11@getDeviceC
$LN10@getDeviceC:

; 5254 :     else i++;

  002cf	8b 44 24 24	 mov	 eax, DWORD PTR i$1[rsp]
  002d3	ff c0		 inc	 eax
  002d5	89 44 24 24	 mov	 DWORD PTR i$1[rsp], eax
$LN11@getDeviceC:

; 5255 :   }

  002d9	e9 3a ff ff ff	 jmp	 $LN5@getDeviceC
$LN6@getDeviceC:

; 5256 : 
; 5257 :   return static_cast<unsigned int>(dsDevices.size());

  002de	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  002e6	48 05 90 02 00
	00		 add	 rax, 656		; 00000290H
  002ec	48 8b c8	 mov	 rcx, rax
  002ef	e8 00 00 00 00	 call	 ?size@?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEBA_KXZ ; std::vector<DsDevice,std::allocator<DsDevice> >::size

; 5258 : }

  002f4	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  002fc	48 33 cc	 xor	 rcx, rsp
  002ff	e8 00 00 00 00	 call	 __security_check_cookie
  00304	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  0030b	c3		 ret	 0
?getDeviceCount@RtApiDs@@UEAAIXZ ENDP			; RtApiDs::getDeviceCount
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.h
;	COMDAT ?getCurrentApi@RtApiDs@@UEAA?AW4Api@RtAudio@@XZ
_TEXT	SEGMENT
this$ = 8
?getCurrentApi@RtApiDs@@UEAA?AW4Api@RtAudio@@XZ PROC	; RtApiDs::getCurrentApi, COMDAT

; 977  :   RtAudio::Api getCurrentApi( void ) { return RtAudio::WINDOWS_DS; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	b8 08 00 00 00	 mov	 eax, 8
  0000a	c3		 ret	 0
?getCurrentApi@RtApiDs@@UEAA?AW4Api@RtAudio@@XZ ENDP	; RtApiDs::getCurrentApi
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1RtApiDs@@UEAA@XZ PROC				; RtApiDs::~RtApiDs

; 5206 : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7RtApiDs@@6B@
  0001e	48 89 08	 mov	 QWORD PTR [rax], rcx

; 5207 :   if ( stream_.state != STREAM_CLOSED ) closeStream();

  00021	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00026	83 b8 2c 01 00
	00 ce		 cmp	 DWORD PTR [rax+300], -50 ; ffffffffffffffceH
  0002d	74 0b		 je	 SHORT $LN2@RtApiDs
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00034	e8 00 00 00 00	 call	 ?closeStream@RtApiDs@@UEAAXXZ ; RtApiDs::closeStream
  00039	90		 npad	 1
$LN2@RtApiDs:

; 5208 :   if ( coInitialized_ ) CoUninitialize(); // balanced call.

  0003a	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0003f	0f b6 80 88 02
	00 00		 movzx	 eax, BYTE PTR [rax+648]
  00046	85 c0		 test	 eax, eax
  00048	74 07		 je	 SHORT $LN3@RtApiDs
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CoUninitialize
  00050	90		 npad	 1
$LN3@RtApiDs:

; 5209 : }

  00051	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00056	48 05 90 02 00
	00		 add	 rax, 656		; 00000290H
  0005c	48 8b c8	 mov	 rcx, rax
  0005f	e8 00 00 00 00	 call	 ??1?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ ; std::vector<DsDevice,std::allocator<DsDevice> >::~vector<DsDevice,std::allocator<DsDevice> >
  00064	90		 npad	 1
  00065	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0006a	e8 00 00 00 00	 call	 ??1RtApi@@UEAA@XZ	; RtApi::~RtApi
  0006f	90		 npad	 1
  00070	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00074	c3		 ret	 0
??1RtApiDs@@UEAA@XZ ENDP				; RtApiDs::~RtApiDs
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
hr$ = 32
this$ = 64
??0RtApiDs@@QEAA@XZ PROC				; RtApiDs::RtApiDs

; 5197 : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??0RtApi@@QEAA@XZ	; RtApi::RtApi
  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7RtApiDs@@6B@
  0001f	48 89 08	 mov	 QWORD PTR [rax], rcx
  00022	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00027	48 05 90 02 00
	00		 add	 rax, 656		; 00000290H
  0002d	48 8b c8	 mov	 rcx, rax
  00030	e8 00 00 00 00	 call	 ??0?$vector@UDsDevice@@V?$allocator@UDsDevice@@@std@@@std@@QEAA@XZ ; std::vector<DsDevice,std::allocator<DsDevice> >::vector<DsDevice,std::allocator<DsDevice> >

; 5198 :   // Dsound will run both-threaded. If CoInitialize fails, then just
; 5199 :   // accept whatever the mainline chose for a threading model.
; 5200 :   coInitialized_ = false;

  00035	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0003a	c6 80 88 02 00
	00 00		 mov	 BYTE PTR [rax+648], 0

; 5201 :   HRESULT hr = CoInitialize( NULL );

  00041	33 c9		 xor	 ecx, ecx
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CoInitialize
  00049	89 44 24 20	 mov	 DWORD PTR hr$[rsp], eax

; 5202 :   if ( !FAILED( hr ) ) coInitialized_ = true;

  0004d	83 7c 24 20 00	 cmp	 DWORD PTR hr$[rsp], 0
  00052	7c 0c		 jl	 SHORT $LN2@RtApiDs
  00054	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00059	c6 80 88 02 00
	00 01		 mov	 BYTE PTR [rax+648], 1
$LN2@RtApiDs:

; 5203 : }

  00060	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00065	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00069	c3		 ret	 0
??0RtApiDs@@QEAA@XZ ENDP				; RtApiDs::RtApiDs
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GRtApi@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GRtApi@@UEAAPEAXI@Z PROC				; RtApi::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1RtApi@@UEAA@XZ	; RtApi::~RtApi
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 88 02 00 00	 mov	 edx, 648		; 00000288H
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_GRtApi@@UEAAPEAXI@Z ENDP				; RtApi::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
k$1 = 32
k$2 = 36
k$3 = 40
k$4 = 44
k$5 = 48
k$6 = 52
k$7 = 56
k$8 = 60
$T9 = 64
$T10 = 68
$T11 = 72
$T12 = 76
tv396 = 80
tv416 = 88
tv440 = 96
tv463 = 104
this$ = 128
mode$ = 136
firstChannel$ = 144
?setConvertInfo@RtApi@@IEAAXW4StreamMode@1@I@Z PROC	; RtApi::setConvertInfo

; 9559 : {

$LN46:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 9560 :   if ( mode == INPUT ) { // convert device to user buffer

  00012	83 bc 24 88 00
	00 00 01	 cmp	 DWORD PTR mode$[rsp], 1
  0001a	0f 85 ca 00 00
	00		 jne	 $LN26@setConvert

; 9561 :     stream_.convertInfo[mode].inJump = stream_.nDeviceChannels[1];

  00020	b8 04 00 00 00	 mov	 eax, 4
  00025	48 6b c0 01	 imul	 rax, rax, 1
  00029	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR mode$[rsp]
  00031	48 6b c9 48	 imul	 rcx, rcx, 72		; 00000048H
  00035	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  0003d	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR this$[rsp]
  00045	41 8b 84 00 64
	01 00 00	 mov	 eax, DWORD PTR [r8+rax+356]
  0004d	89 84 0a ec 01
	00 00		 mov	 DWORD PTR [rdx+rcx+492], eax

; 9562 :     stream_.convertInfo[mode].outJump = stream_.nUserChannels[1];

  00054	b8 04 00 00 00	 mov	 eax, 4
  00059	48 6b c0 01	 imul	 rax, rax, 1
  0005d	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR mode$[rsp]
  00065	48 6b c9 48	 imul	 rcx, rcx, 72		; 00000048H
  00069	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  00071	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR this$[rsp]
  00079	41 8b 84 00 5c
	01 00 00	 mov	 eax, DWORD PTR [r8+rax+348]
  00081	89 84 0a f0 01
	00 00		 mov	 DWORD PTR [rdx+rcx+496], eax

; 9563 :     stream_.convertInfo[mode].inFormat = stream_.deviceFormat[1];

  00088	b8 04 00 00 00	 mov	 eax, 4
  0008d	48 6b c0 01	 imul	 rax, rax, 1
  00091	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR mode$[rsp]
  00099	48 6b c9 48	 imul	 rcx, rcx, 72		; 00000048H
  0009d	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  000a5	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR this$[rsp]
  000ad	41 8b 84 00 80
	01 00 00	 mov	 eax, DWORD PTR [r8+rax+384]
  000b5	89 84 0a f4 01
	00 00		 mov	 DWORD PTR [rdx+rcx+500], eax

; 9564 :     stream_.convertInfo[mode].outFormat = stream_.userFormat;

  000bc	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  000c4	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  000c8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000d0	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  000d8	8b 92 7c 01 00
	00		 mov	 edx, DWORD PTR [rdx+380]
  000de	89 94 01 f8 01
	00 00		 mov	 DWORD PTR [rcx+rax+504], edx

; 9565 :   }
; 9566 :   else { // convert user to device buffer

  000e5	e9 c5 00 00 00	 jmp	 $LN27@setConvert
$LN26@setConvert:

; 9567 :     stream_.convertInfo[mode].inJump = stream_.nUserChannels[0];

  000ea	b8 04 00 00 00	 mov	 eax, 4
  000ef	48 6b c0 00	 imul	 rax, rax, 0
  000f3	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR mode$[rsp]
  000fb	48 6b c9 48	 imul	 rcx, rcx, 72		; 00000048H
  000ff	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  00107	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR this$[rsp]
  0010f	41 8b 84 00 5c
	01 00 00	 mov	 eax, DWORD PTR [r8+rax+348]
  00117	89 84 0a ec 01
	00 00		 mov	 DWORD PTR [rdx+rcx+492], eax

; 9568 :     stream_.convertInfo[mode].outJump = stream_.nDeviceChannels[0];

  0011e	b8 04 00 00 00	 mov	 eax, 4
  00123	48 6b c0 00	 imul	 rax, rax, 0
  00127	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR mode$[rsp]
  0012f	48 6b c9 48	 imul	 rcx, rcx, 72		; 00000048H
  00133	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  0013b	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR this$[rsp]
  00143	41 8b 84 00 64
	01 00 00	 mov	 eax, DWORD PTR [r8+rax+356]
  0014b	89 84 0a f0 01
	00 00		 mov	 DWORD PTR [rdx+rcx+496], eax

; 9569 :     stream_.convertInfo[mode].inFormat = stream_.userFormat;

  00152	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  0015a	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  0015e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00166	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  0016e	8b 92 7c 01 00
	00		 mov	 edx, DWORD PTR [rdx+380]
  00174	89 94 01 f4 01
	00 00		 mov	 DWORD PTR [rcx+rax+500], edx

; 9570 :     stream_.convertInfo[mode].outFormat = stream_.deviceFormat[0];

  0017b	b8 04 00 00 00	 mov	 eax, 4
  00180	48 6b c0 00	 imul	 rax, rax, 0
  00184	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR mode$[rsp]
  0018c	48 6b c9 48	 imul	 rcx, rcx, 72		; 00000048H
  00190	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  00198	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR this$[rsp]
  001a0	41 8b 84 00 80
	01 00 00	 mov	 eax, DWORD PTR [r8+rax+384]
  001a8	89 84 0a f8 01
	00 00		 mov	 DWORD PTR [rdx+rcx+504], eax
$LN27@setConvert:

; 9571 :   }
; 9572 : 
; 9573 :   if ( stream_.convertInfo[mode].inJump < stream_.convertInfo[mode].outJump )

  001af	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  001b7	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  001bb	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR mode$[rsp]
  001c3	48 6b c9 48	 imul	 rcx, rcx, 72		; 00000048H
  001c7	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  001cf	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR this$[rsp]
  001d7	41 8b 8c 08 f0
	01 00 00	 mov	 ecx, DWORD PTR [r8+rcx+496]
  001df	39 8c 02 ec 01
	00 00		 cmp	 DWORD PTR [rdx+rax+492], ecx
  001e6	7d 39		 jge	 SHORT $LN28@setConvert

; 9574 :     stream_.convertInfo[mode].channels = stream_.convertInfo[mode].inJump;

  001e8	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  001f0	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  001f4	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR mode$[rsp]
  001fc	48 6b c9 48	 imul	 rcx, rcx, 72		; 00000048H
  00200	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  00208	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR this$[rsp]
  00210	41 8b 84 00 ec
	01 00 00	 mov	 eax, DWORD PTR [r8+rax+492]
  00218	89 84 0a e8 01
	00 00		 mov	 DWORD PTR [rdx+rcx+488], eax

; 9575 :   else

  0021f	eb 37		 jmp	 SHORT $LN29@setConvert
$LN28@setConvert:

; 9576 :     stream_.convertInfo[mode].channels = stream_.convertInfo[mode].outJump;

  00221	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  00229	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  0022d	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR mode$[rsp]
  00235	48 6b c9 48	 imul	 rcx, rcx, 72		; 00000048H
  00239	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  00241	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR this$[rsp]
  00249	41 8b 84 00 f0
	01 00 00	 mov	 eax, DWORD PTR [r8+rax+496]
  00251	89 84 0a e8 01
	00 00		 mov	 DWORD PTR [rdx+rcx+488], eax
$LN29@setConvert:

; 9577 : 
; 9578 :   // Set up the interleave/deinterleave offsets.
; 9579 :   if ( stream_.deviceInterleaved[mode] != stream_.userInterleaved ) {

  00258	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  00260	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00268	0f b6 84 01 4b
	01 00 00	 movzx	 eax, BYTE PTR [rcx+rax+331]
  00270	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00278	0f b6 89 4a 01
	00 00		 movzx	 ecx, BYTE PTR [rcx+330]
  0027f	3b c1		 cmp	 eax, ecx
  00281	0f 84 e5 01 00
	00		 je	 $LN30@setConvert

; 9580 :     if ( ( mode == OUTPUT && stream_.deviceInterleaved[mode] ) ||

  00287	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR mode$[rsp], 0
  0028f	75 1c		 jne	 SHORT $LN35@setConvert
  00291	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  00299	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  002a1	0f b6 84 01 4b
	01 00 00	 movzx	 eax, BYTE PTR [rcx+rax+331]
  002a9	85 c0		 test	 eax, eax
  002ab	75 25		 jne	 SHORT $LN34@setConvert
$LN35@setConvert:
  002ad	83 bc 24 88 00
	00 00 01	 cmp	 DWORD PTR mode$[rsp], 1
  002b5	0f 85 e4 00 00
	00		 jne	 $LN32@setConvert
  002bb	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  002c3	0f b6 80 4a 01
	00 00		 movzx	 eax, BYTE PTR [rax+330]
  002ca	85 c0		 test	 eax, eax
  002cc	0f 84 cd 00 00
	00		 je	 $LN32@setConvert
$LN34@setConvert:

; 9581 :          ( mode == INPUT && stream_.userInterleaved ) ) {
; 9582 :       for ( int k=0; k<stream_.convertInfo[mode].channels; k++ ) {

  002d2	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR k$1[rsp], 0
  002da	eb 0a		 jmp	 SHORT $LN4@setConvert
$LN2@setConvert:
  002dc	8b 44 24 20	 mov	 eax, DWORD PTR k$1[rsp]
  002e0	ff c0		 inc	 eax
  002e2	89 44 24 20	 mov	 DWORD PTR k$1[rsp], eax
$LN4@setConvert:
  002e6	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  002ee	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  002f2	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  002fa	8b 84 01 e8 01
	00 00		 mov	 eax, DWORD PTR [rcx+rax+488]
  00301	39 44 24 20	 cmp	 DWORD PTR k$1[rsp], eax
  00305	0f 8d 8f 00 00
	00		 jge	 $LN3@setConvert

; 9583 :         stream_.convertInfo[mode].inOffset.push_back( k * stream_.bufferSize );

  0030b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00313	8b 4c 24 20	 mov	 ecx, DWORD PTR k$1[rsp]
  00317	0f af 88 54 01
	00 00		 imul	 ecx, DWORD PTR [rax+340]
  0031e	8b c1		 mov	 eax, ecx
  00320	89 44 24 40	 mov	 DWORD PTR $T9[rsp], eax
  00324	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  0032c	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  00330	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00338	48 8d 84 01 00
	02 00 00	 lea	 rax, QWORD PTR [rcx+rax+512]
  00340	48 8d 54 24 40	 lea	 rdx, QWORD PTR $T9[rsp]
  00345	48 8b c8	 mov	 rcx, rax
  00348	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QEAAX$$QEAH@Z ; std::vector<int,std::allocator<int> >::push_back

; 9584 :         stream_.convertInfo[mode].outOffset.push_back( k );

  0034d	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  00355	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  00359	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00361	48 8d 84 01 18
	02 00 00	 lea	 rax, QWORD PTR [rcx+rax+536]
  00369	48 8d 54 24 20	 lea	 rdx, QWORD PTR k$1[rsp]
  0036e	48 8b c8	 mov	 rcx, rax
  00371	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QEAAXAEBH@Z ; std::vector<int,std::allocator<int> >::push_back

; 9585 :         stream_.convertInfo[mode].inJump = 1;

  00376	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  0037e	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  00382	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0038a	c7 84 01 ec 01
	00 00 01 00 00
	00		 mov	 DWORD PTR [rcx+rax+492], 1

; 9586 :       }

  00395	e9 42 ff ff ff	 jmp	 $LN2@setConvert
$LN3@setConvert:

; 9587 :     }
; 9588 :     else {

  0039a	e9 c8 00 00 00	 jmp	 $LN33@setConvert
$LN32@setConvert:

; 9589 :       for ( int k=0; k<stream_.convertInfo[mode].channels; k++ ) {

  0039f	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR k$2[rsp], 0
  003a7	eb 0a		 jmp	 SHORT $LN7@setConvert
$LN5@setConvert:
  003a9	8b 44 24 24	 mov	 eax, DWORD PTR k$2[rsp]
  003ad	ff c0		 inc	 eax
  003af	89 44 24 24	 mov	 DWORD PTR k$2[rsp], eax
$LN7@setConvert:
  003b3	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  003bb	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  003bf	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  003c7	8b 84 01 e8 01
	00 00		 mov	 eax, DWORD PTR [rcx+rax+488]
  003ce	39 44 24 24	 cmp	 DWORD PTR k$2[rsp], eax
  003d2	0f 8d 8f 00 00
	00		 jge	 $LN6@setConvert

; 9590 :         stream_.convertInfo[mode].inOffset.push_back( k );

  003d8	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  003e0	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  003e4	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  003ec	48 8d 84 01 00
	02 00 00	 lea	 rax, QWORD PTR [rcx+rax+512]
  003f4	48 8d 54 24 24	 lea	 rdx, QWORD PTR k$2[rsp]
  003f9	48 8b c8	 mov	 rcx, rax
  003fc	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QEAAXAEBH@Z ; std::vector<int,std::allocator<int> >::push_back

; 9591 :         stream_.convertInfo[mode].outOffset.push_back( k * stream_.bufferSize );

  00401	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00409	8b 4c 24 24	 mov	 ecx, DWORD PTR k$2[rsp]
  0040d	0f af 88 54 01
	00 00		 imul	 ecx, DWORD PTR [rax+340]
  00414	8b c1		 mov	 eax, ecx
  00416	89 44 24 44	 mov	 DWORD PTR $T10[rsp], eax
  0041a	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  00422	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  00426	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0042e	48 8d 84 01 18
	02 00 00	 lea	 rax, QWORD PTR [rcx+rax+536]
  00436	48 8d 54 24 44	 lea	 rdx, QWORD PTR $T10[rsp]
  0043b	48 8b c8	 mov	 rcx, rax
  0043e	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QEAAX$$QEAH@Z ; std::vector<int,std::allocator<int> >::push_back

; 9592 :         stream_.convertInfo[mode].outJump = 1;

  00443	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  0044b	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  0044f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00457	c7 84 01 f0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR [rcx+rax+496], 1

; 9593 :       }

  00462	e9 42 ff ff ff	 jmp	 $LN5@setConvert
$LN6@setConvert:
$LN33@setConvert:

; 9594 :     }
; 9595 :   }
; 9596 :   else { // no (de)interleaving

  00467	e9 a5 01 00 00	 jmp	 $LN31@setConvert
$LN30@setConvert:

; 9597 :     if ( stream_.userInterleaved ) {

  0046c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00474	0f b6 80 4a 01
	00 00		 movzx	 eax, BYTE PTR [rax+330]
  0047b	85 c0		 test	 eax, eax
  0047d	0f 84 8e 00 00
	00		 je	 $LN36@setConvert

; 9598 :       for ( int k=0; k<stream_.convertInfo[mode].channels; k++ ) {

  00483	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR k$3[rsp], 0
  0048b	eb 0a		 jmp	 SHORT $LN10@setConvert
$LN8@setConvert:
  0048d	8b 44 24 28	 mov	 eax, DWORD PTR k$3[rsp]
  00491	ff c0		 inc	 eax
  00493	89 44 24 28	 mov	 DWORD PTR k$3[rsp], eax
$LN10@setConvert:
  00497	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  0049f	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  004a3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  004ab	8b 84 01 e8 01
	00 00		 mov	 eax, DWORD PTR [rcx+rax+488]
  004b2	39 44 24 28	 cmp	 DWORD PTR k$3[rsp], eax
  004b6	7d 54		 jge	 SHORT $LN9@setConvert

; 9599 :         stream_.convertInfo[mode].inOffset.push_back( k );

  004b8	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  004c0	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  004c4	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  004cc	48 8d 84 01 00
	02 00 00	 lea	 rax, QWORD PTR [rcx+rax+512]
  004d4	48 8d 54 24 28	 lea	 rdx, QWORD PTR k$3[rsp]
  004d9	48 8b c8	 mov	 rcx, rax
  004dc	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QEAAXAEBH@Z ; std::vector<int,std::allocator<int> >::push_back

; 9600 :         stream_.convertInfo[mode].outOffset.push_back( k );

  004e1	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  004e9	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  004ed	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  004f5	48 8d 84 01 18
	02 00 00	 lea	 rax, QWORD PTR [rcx+rax+536]
  004fd	48 8d 54 24 28	 lea	 rdx, QWORD PTR k$3[rsp]
  00502	48 8b c8	 mov	 rcx, rax
  00505	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QEAAXAEBH@Z ; std::vector<int,std::allocator<int> >::push_back

; 9601 :       }

  0050a	eb 81		 jmp	 SHORT $LN8@setConvert
$LN9@setConvert:

; 9602 :     }
; 9603 :     else {

  0050c	e9 00 01 00 00	 jmp	 $LN37@setConvert
$LN36@setConvert:

; 9604 :       for ( int k=0; k<stream_.convertInfo[mode].channels; k++ ) {

  00511	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR k$4[rsp], 0
  00519	eb 0a		 jmp	 SHORT $LN13@setConvert
$LN11@setConvert:
  0051b	8b 44 24 2c	 mov	 eax, DWORD PTR k$4[rsp]
  0051f	ff c0		 inc	 eax
  00521	89 44 24 2c	 mov	 DWORD PTR k$4[rsp], eax
$LN13@setConvert:
  00525	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  0052d	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  00531	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00539	8b 84 01 e8 01
	00 00		 mov	 eax, DWORD PTR [rcx+rax+488]
  00540	39 44 24 2c	 cmp	 DWORD PTR k$4[rsp], eax
  00544	0f 8d c7 00 00
	00		 jge	 $LN12@setConvert

; 9605 :         stream_.convertInfo[mode].inOffset.push_back( k * stream_.bufferSize );

  0054a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00552	8b 4c 24 2c	 mov	 ecx, DWORD PTR k$4[rsp]
  00556	0f af 88 54 01
	00 00		 imul	 ecx, DWORD PTR [rax+340]
  0055d	8b c1		 mov	 eax, ecx
  0055f	89 44 24 48	 mov	 DWORD PTR $T11[rsp], eax
  00563	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  0056b	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  0056f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00577	48 8d 84 01 00
	02 00 00	 lea	 rax, QWORD PTR [rcx+rax+512]
  0057f	48 8d 54 24 48	 lea	 rdx, QWORD PTR $T11[rsp]
  00584	48 8b c8	 mov	 rcx, rax
  00587	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QEAAX$$QEAH@Z ; std::vector<int,std::allocator<int> >::push_back

; 9606 :         stream_.convertInfo[mode].outOffset.push_back( k * stream_.bufferSize );

  0058c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00594	8b 4c 24 2c	 mov	 ecx, DWORD PTR k$4[rsp]
  00598	0f af 88 54 01
	00 00		 imul	 ecx, DWORD PTR [rax+340]
  0059f	8b c1		 mov	 eax, ecx
  005a1	89 44 24 4c	 mov	 DWORD PTR $T12[rsp], eax
  005a5	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  005ad	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  005b1	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  005b9	48 8d 84 01 18
	02 00 00	 lea	 rax, QWORD PTR [rcx+rax+536]
  005c1	48 8d 54 24 4c	 lea	 rdx, QWORD PTR $T12[rsp]
  005c6	48 8b c8	 mov	 rcx, rax
  005c9	e8 00 00 00 00	 call	 ?push_back@?$vector@HV?$allocator@H@std@@@std@@QEAAX$$QEAH@Z ; std::vector<int,std::allocator<int> >::push_back

; 9607 :         stream_.convertInfo[mode].inJump = 1;

  005ce	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  005d6	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  005da	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  005e2	c7 84 01 ec 01
	00 00 01 00 00
	00		 mov	 DWORD PTR [rcx+rax+492], 1

; 9608 :         stream_.convertInfo[mode].outJump = 1;

  005ed	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  005f5	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  005f9	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00601	c7 84 01 f0 01
	00 00 01 00 00
	00		 mov	 DWORD PTR [rcx+rax+496], 1

; 9609 :       }

  0060c	e9 0a ff ff ff	 jmp	 $LN11@setConvert
$LN12@setConvert:
$LN37@setConvert:
$LN31@setConvert:

; 9610 :     }
; 9611 :   }
; 9612 : 
; 9613 :   // Add channel offset.
; 9614 :   if ( firstChannel > 0 ) {

  00611	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR firstChannel$[rsp], 0
  00619	0f 86 54 02 00
	00		 jbe	 $LN38@setConvert

; 9615 :     if ( stream_.deviceInterleaved[mode] ) {

  0061f	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  00627	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0062f	0f b6 84 01 4b
	01 00 00	 movzx	 eax, BYTE PTR [rcx+rax+331]
  00637	85 c0		 test	 eax, eax
  00639	0f 84 05 01 00
	00		 je	 $LN39@setConvert

; 9616 :       if ( mode == OUTPUT ) {

  0063f	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR mode$[rsp], 0
  00647	75 7c		 jne	 SHORT $LN41@setConvert

; 9617 :         for ( int k=0; k<stream_.convertInfo[mode].channels; k++ )

  00649	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR k$5[rsp], 0
  00651	eb 0a		 jmp	 SHORT $LN16@setConvert
$LN14@setConvert:
  00653	8b 44 24 30	 mov	 eax, DWORD PTR k$5[rsp]
  00657	ff c0		 inc	 eax
  00659	89 44 24 30	 mov	 DWORD PTR k$5[rsp], eax
$LN16@setConvert:
  0065d	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  00665	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  00669	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00671	8b 84 01 e8 01
	00 00		 mov	 eax, DWORD PTR [rcx+rax+488]
  00678	39 44 24 30	 cmp	 DWORD PTR k$5[rsp], eax
  0067c	7d 45		 jge	 SHORT $LN15@setConvert

; 9618 :           stream_.convertInfo[mode].outOffset[k] += firstChannel;

  0067e	48 63 44 24 30	 movsxd	 rax, DWORD PTR k$5[rsp]
  00683	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR mode$[rsp]
  0068b	48 6b c9 48	 imul	 rcx, rcx, 72		; 00000048H
  0068f	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  00697	48 8d 8c 0a 18
	02 00 00	 lea	 rcx, QWORD PTR [rdx+rcx+536]
  0069f	48 8b d0	 mov	 rdx, rax
  006a2	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  006a7	48 89 44 24 50	 mov	 QWORD PTR tv396[rsp], rax
  006ac	48 8b 44 24 50	 mov	 rax, QWORD PTR tv396[rsp]
  006b1	8b 00		 mov	 eax, DWORD PTR [rax]
  006b3	03 84 24 90 00
	00 00		 add	 eax, DWORD PTR firstChannel$[rsp]
  006ba	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv396[rsp]
  006bf	89 01		 mov	 DWORD PTR [rcx], eax
  006c1	eb 90		 jmp	 SHORT $LN14@setConvert
$LN15@setConvert:

; 9619 :       }
; 9620 :       else {

  006c3	eb 7a		 jmp	 SHORT $LN42@setConvert
$LN41@setConvert:

; 9621 :         for ( int k=0; k<stream_.convertInfo[mode].channels; k++ )

  006c5	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR k$6[rsp], 0
  006cd	eb 0a		 jmp	 SHORT $LN19@setConvert
$LN17@setConvert:
  006cf	8b 44 24 34	 mov	 eax, DWORD PTR k$6[rsp]
  006d3	ff c0		 inc	 eax
  006d5	89 44 24 34	 mov	 DWORD PTR k$6[rsp], eax
$LN19@setConvert:
  006d9	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  006e1	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  006e5	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  006ed	8b 84 01 e8 01
	00 00		 mov	 eax, DWORD PTR [rcx+rax+488]
  006f4	39 44 24 34	 cmp	 DWORD PTR k$6[rsp], eax
  006f8	7d 45		 jge	 SHORT $LN18@setConvert

; 9622 :           stream_.convertInfo[mode].inOffset[k] += firstChannel;

  006fa	48 63 44 24 34	 movsxd	 rax, DWORD PTR k$6[rsp]
  006ff	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR mode$[rsp]
  00707	48 6b c9 48	 imul	 rcx, rcx, 72		; 00000048H
  0070b	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  00713	48 8d 8c 0a 00
	02 00 00	 lea	 rcx, QWORD PTR [rdx+rcx+512]
  0071b	48 8b d0	 mov	 rdx, rax
  0071e	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  00723	48 89 44 24 58	 mov	 QWORD PTR tv416[rsp], rax
  00728	48 8b 44 24 58	 mov	 rax, QWORD PTR tv416[rsp]
  0072d	8b 00		 mov	 eax, DWORD PTR [rax]
  0072f	03 84 24 90 00
	00 00		 add	 eax, DWORD PTR firstChannel$[rsp]
  00736	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv416[rsp]
  0073b	89 01		 mov	 DWORD PTR [rcx], eax
  0073d	eb 90		 jmp	 SHORT $LN17@setConvert
$LN18@setConvert:
$LN42@setConvert:

; 9623 :       }
; 9624 :     }
; 9625 :     else {

  0073f	e9 2f 01 00 00	 jmp	 $LN40@setConvert
$LN39@setConvert:

; 9626 :       if ( mode == OUTPUT ) {

  00744	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR mode$[rsp], 0
  0074c	0f 85 93 00 00
	00		 jne	 $LN43@setConvert

; 9627 :         for ( int k=0; k<stream_.convertInfo[mode].channels; k++ )

  00752	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR k$7[rsp], 0
  0075a	eb 0a		 jmp	 SHORT $LN22@setConvert
$LN20@setConvert:
  0075c	8b 44 24 38	 mov	 eax, DWORD PTR k$7[rsp]
  00760	ff c0		 inc	 eax
  00762	89 44 24 38	 mov	 DWORD PTR k$7[rsp], eax
$LN22@setConvert:
  00766	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  0076e	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  00772	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0077a	8b 84 01 e8 01
	00 00		 mov	 eax, DWORD PTR [rcx+rax+488]
  00781	39 44 24 38	 cmp	 DWORD PTR k$7[rsp], eax
  00785	7d 59		 jge	 SHORT $LN21@setConvert

; 9628 :           stream_.convertInfo[mode].outOffset[k] += ( firstChannel * stream_.bufferSize );

  00787	48 63 44 24 38	 movsxd	 rax, DWORD PTR k$7[rsp]
  0078c	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR mode$[rsp]
  00794	48 6b c9 48	 imul	 rcx, rcx, 72		; 00000048H
  00798	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  007a0	48 8d 8c 0a 18
	02 00 00	 lea	 rcx, QWORD PTR [rdx+rcx+536]
  007a8	48 8b d0	 mov	 rdx, rax
  007ab	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  007b0	48 89 44 24 60	 mov	 QWORD PTR tv440[rsp], rax
  007b5	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  007bd	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR firstChannel$[rsp]
  007c4	0f af 88 54 01
	00 00		 imul	 ecx, DWORD PTR [rax+340]
  007cb	8b c1		 mov	 eax, ecx
  007cd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv440[rsp]
  007d2	03 01		 add	 eax, DWORD PTR [rcx]
  007d4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv440[rsp]
  007d9	89 01		 mov	 DWORD PTR [rcx], eax
  007db	e9 7c ff ff ff	 jmp	 $LN20@setConvert
$LN21@setConvert:

; 9629 :       }
; 9630 :       else {

  007e0	e9 8e 00 00 00	 jmp	 $LN44@setConvert
$LN43@setConvert:

; 9631 :         for ( int k=0; k<stream_.convertInfo[mode].channels; k++ )

  007e5	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR k$8[rsp], 0
  007ed	eb 0a		 jmp	 SHORT $LN25@setConvert
$LN23@setConvert:
  007ef	8b 44 24 3c	 mov	 eax, DWORD PTR k$8[rsp]
  007f3	ff c0		 inc	 eax
  007f5	89 44 24 3c	 mov	 DWORD PTR k$8[rsp], eax
$LN25@setConvert:
  007f9	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR mode$[rsp]
  00801	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  00805	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0080d	8b 84 01 e8 01
	00 00		 mov	 eax, DWORD PTR [rcx+rax+488]
  00814	39 44 24 3c	 cmp	 DWORD PTR k$8[rsp], eax
  00818	7d 59		 jge	 SHORT $LN24@setConvert

; 9632 :           stream_.convertInfo[mode].inOffset[k] += ( firstChannel  * stream_.bufferSize );

  0081a	48 63 44 24 3c	 movsxd	 rax, DWORD PTR k$8[rsp]
  0081f	48 63 8c 24 88
	00 00 00	 movsxd	 rcx, DWORD PTR mode$[rsp]
  00827	48 6b c9 48	 imul	 rcx, rcx, 72		; 00000048H
  0082b	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  00833	48 8d 8c 0a 00
	02 00 00	 lea	 rcx, QWORD PTR [rdx+rcx+512]
  0083b	48 8b d0	 mov	 rdx, rax
  0083e	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  00843	48 89 44 24 68	 mov	 QWORD PTR tv463[rsp], rax
  00848	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00850	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR firstChannel$[rsp]
  00857	0f af 88 54 01
	00 00		 imul	 ecx, DWORD PTR [rax+340]
  0085e	8b c1		 mov	 eax, ecx
  00860	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv463[rsp]
  00865	03 01		 add	 eax, DWORD PTR [rcx]
  00867	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv463[rsp]
  0086c	89 01		 mov	 DWORD PTR [rcx], eax
  0086e	e9 7c ff ff ff	 jmp	 $LN23@setConvert
$LN24@setConvert:
$LN44@setConvert:
$LN40@setConvert:
$LN38@setConvert:

; 9633 :       }
; 9634 :     }
; 9635 :   }
; 9636 : }

  00873	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00877	c3		 ret	 0
?setConvertInfo@RtApi@@IEAAXW4StreamMode@1@I@Z ENDP	; RtApi::setConvertInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
this$ = 48
format$ = 56
?formatBytes@RtApi@@IEAAIK@Z PROC			; RtApi::formatBytes

; 9540 : {

$LN13:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 9541 :   if ( format == RTAUDIO_SINT16 )

  0000d	83 7c 24 38 02	 cmp	 DWORD PTR format$[rsp], 2
  00012	75 09		 jne	 SHORT $LN2@formatByte

; 9542 :     return 2;

  00014	b8 02 00 00 00	 mov	 eax, 2
  00019	eb 6f		 jmp	 SHORT $LN1@formatByte
  0001b	eb 45		 jmp	 SHORT $LN3@formatByte
$LN2@formatByte:

; 9543 :   else if ( format == RTAUDIO_SINT32 || format == RTAUDIO_FLOAT32 )

  0001d	83 7c 24 38 08	 cmp	 DWORD PTR format$[rsp], 8
  00022	74 07		 je	 SHORT $LN6@formatByte
  00024	83 7c 24 38 10	 cmp	 DWORD PTR format$[rsp], 16
  00029	75 09		 jne	 SHORT $LN4@formatByte
$LN6@formatByte:

; 9544 :     return 4;

  0002b	b8 04 00 00 00	 mov	 eax, 4
  00030	eb 58		 jmp	 SHORT $LN1@formatByte
  00032	eb 2e		 jmp	 SHORT $LN5@formatByte
$LN4@formatByte:

; 9545 :   else if ( format == RTAUDIO_FLOAT64 )

  00034	83 7c 24 38 20	 cmp	 DWORD PTR format$[rsp], 32 ; 00000020H
  00039	75 09		 jne	 SHORT $LN7@formatByte

; 9546 :     return 8;

  0003b	b8 08 00 00 00	 mov	 eax, 8
  00040	eb 48		 jmp	 SHORT $LN1@formatByte
  00042	eb 1e		 jmp	 SHORT $LN8@formatByte
$LN7@formatByte:

; 9547 :   else if ( format == RTAUDIO_SINT24 )

  00044	83 7c 24 38 04	 cmp	 DWORD PTR format$[rsp], 4
  00049	75 09		 jne	 SHORT $LN9@formatByte

; 9548 :     return 3;

  0004b	b8 03 00 00 00	 mov	 eax, 3
  00050	eb 38		 jmp	 SHORT $LN1@formatByte
  00052	eb 0e		 jmp	 SHORT $LN10@formatByte
$LN9@formatByte:

; 9549 :   else if ( format == RTAUDIO_SINT8 )

  00054	83 7c 24 38 01	 cmp	 DWORD PTR format$[rsp], 1
  00059	75 07		 jne	 SHORT $LN11@formatByte

; 9550 :     return 1;

  0005b	b8 01 00 00 00	 mov	 eax, 1
  00060	eb 28		 jmp	 SHORT $LN1@formatByte
$LN11@formatByte:
$LN10@formatByte:
$LN8@formatByte:
$LN5@formatByte:
$LN3@formatByte:

; 9551 : 
; 9552 :   errorText_ = "RtApi::formatBytes: undefined format.";

  00062	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00067	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129689
  00074	48 8b c8	 mov	 rcx, rax
  00077	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 9553 :   error( RtAudioError::WARNING );

  0007c	33 d2		 xor	 edx, edx
  0007e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00083	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 9554 : 
; 9555 :   return 0;

  00088	33 c0		 xor	 eax, eax
$LN1@formatByte:

; 9556 : }

  0008a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0008e	c3		 ret	 0
?formatBytes@RtApi@@IEAAIK@Z ENDP			; RtApi::formatBytes
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
val$ = 0
i$1 = 4
i$2 = 8
i$3 = 12
i$4 = 16
ptr$ = 24
this$ = 48
buffer$ = 56
samples$ = 64
format$ = 72
?byteSwapBuffer@RtApi@@IEAAXPEADIK@Z PROC		; RtApi::byteSwapBuffer

; 10076: {

$LN23:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 10077:   char val;
; 10078:   char *ptr;
; 10079: 
; 10080:   ptr = buffer;

  00018	48 8b 44 24 38	 mov	 rax, QWORD PTR buffer$[rsp]
  0001d	48 89 44 24 18	 mov	 QWORD PTR ptr$[rsp], rax

; 10081:   if ( format == RTAUDIO_SINT16 ) {

  00022	83 7c 24 48 02	 cmp	 DWORD PTR format$[rsp], 2
  00027	75 5a		 jne	 SHORT $LN14@byteSwapBu

; 10082:     for ( unsigned int i=0; i<samples; i++ ) {

  00029	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0
  00031	eb 0a		 jmp	 SHORT $LN4@byteSwapBu
$LN2@byteSwapBu:
  00033	8b 44 24 04	 mov	 eax, DWORD PTR i$1[rsp]
  00037	ff c0		 inc	 eax
  00039	89 44 24 04	 mov	 DWORD PTR i$1[rsp], eax
$LN4@byteSwapBu:
  0003d	8b 44 24 40	 mov	 eax, DWORD PTR samples$[rsp]
  00041	39 44 24 04	 cmp	 DWORD PTR i$1[rsp], eax
  00045	73 37		 jae	 SHORT $LN3@byteSwapBu

; 10083:       // Swap 1st and 2nd bytes.
; 10084:       val = *(ptr);

  00047	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  0004c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0004f	88 04 24	 mov	 BYTE PTR val$[rsp], al

; 10085:       *(ptr) = *(ptr+1);

  00052	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  00057	48 8b 4c 24 18	 mov	 rcx, QWORD PTR ptr$[rsp]
  0005c	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  00060	88 08		 mov	 BYTE PTR [rax], cl

; 10086:       *(ptr+1) = val;

  00062	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  00067	0f b6 0c 24	 movzx	 ecx, BYTE PTR val$[rsp]
  0006b	88 48 01	 mov	 BYTE PTR [rax+1], cl

; 10087: 
; 10088:       // Increment 2 bytes.
; 10089:       ptr += 2;

  0006e	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  00073	48 83 c0 02	 add	 rax, 2
  00077	48 89 44 24 18	 mov	 QWORD PTR ptr$[rsp], rax

; 10090:     }

  0007c	eb b5		 jmp	 SHORT $LN2@byteSwapBu
$LN3@byteSwapBu:

; 10091:   }
; 10092:   else if ( format == RTAUDIO_SINT32 ||

  0007e	e9 04 02 00 00	 jmp	 $LN15@byteSwapBu
$LN14@byteSwapBu:
  00083	83 7c 24 48 08	 cmp	 DWORD PTR format$[rsp], 8
  00088	74 0b		 je	 SHORT $LN18@byteSwapBu
  0008a	83 7c 24 48 10	 cmp	 DWORD PTR format$[rsp], 16
  0008f	0f 85 8e 00 00
	00		 jne	 $LN16@byteSwapBu
$LN18@byteSwapBu:

; 10093:             format == RTAUDIO_FLOAT32 ) {
; 10094:     for ( unsigned int i=0; i<samples; i++ ) {

  00095	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR i$2[rsp], 0
  0009d	eb 0a		 jmp	 SHORT $LN7@byteSwapBu
$LN5@byteSwapBu:
  0009f	8b 44 24 08	 mov	 eax, DWORD PTR i$2[rsp]
  000a3	ff c0		 inc	 eax
  000a5	89 44 24 08	 mov	 DWORD PTR i$2[rsp], eax
$LN7@byteSwapBu:
  000a9	8b 44 24 40	 mov	 eax, DWORD PTR samples$[rsp]
  000ad	39 44 24 08	 cmp	 DWORD PTR i$2[rsp], eax
  000b1	73 6b		 jae	 SHORT $LN6@byteSwapBu

; 10095:       // Swap 1st and 4th bytes.
; 10096:       val = *(ptr);

  000b3	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  000b8	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000bb	88 04 24	 mov	 BYTE PTR val$[rsp], al

; 10097:       *(ptr) = *(ptr+3);

  000be	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  000c3	48 8b 4c 24 18	 mov	 rcx, QWORD PTR ptr$[rsp]
  000c8	0f b6 49 03	 movzx	 ecx, BYTE PTR [rcx+3]
  000cc	88 08		 mov	 BYTE PTR [rax], cl

; 10098:       *(ptr+3) = val;

  000ce	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  000d3	0f b6 0c 24	 movzx	 ecx, BYTE PTR val$[rsp]
  000d7	88 48 03	 mov	 BYTE PTR [rax+3], cl

; 10099: 
; 10100:       // Swap 2nd and 3rd bytes.
; 10101:       ptr += 1;

  000da	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  000df	48 ff c0	 inc	 rax
  000e2	48 89 44 24 18	 mov	 QWORD PTR ptr$[rsp], rax

; 10102:       val = *(ptr);

  000e7	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  000ec	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000ef	88 04 24	 mov	 BYTE PTR val$[rsp], al

; 10103:       *(ptr) = *(ptr+1);

  000f2	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  000f7	48 8b 4c 24 18	 mov	 rcx, QWORD PTR ptr$[rsp]
  000fc	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  00100	88 08		 mov	 BYTE PTR [rax], cl

; 10104:       *(ptr+1) = val;

  00102	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  00107	0f b6 0c 24	 movzx	 ecx, BYTE PTR val$[rsp]
  0010b	88 48 01	 mov	 BYTE PTR [rax+1], cl

; 10105: 
; 10106:       // Increment 3 more bytes.
; 10107:       ptr += 3;

  0010e	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  00113	48 83 c0 03	 add	 rax, 3
  00117	48 89 44 24 18	 mov	 QWORD PTR ptr$[rsp], rax

; 10108:     }

  0011c	eb 81		 jmp	 SHORT $LN5@byteSwapBu
$LN6@byteSwapBu:

; 10109:   }
; 10110:   else if ( format == RTAUDIO_SINT24 ) {

  0011e	e9 64 01 00 00	 jmp	 $LN17@byteSwapBu
$LN16@byteSwapBu:
  00123	83 7c 24 48 04	 cmp	 DWORD PTR format$[rsp], 4
  00128	75 5a		 jne	 SHORT $LN19@byteSwapBu

; 10111:     for ( unsigned int i=0; i<samples; i++ ) {

  0012a	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR i$3[rsp], 0
  00132	eb 0a		 jmp	 SHORT $LN10@byteSwapBu
$LN8@byteSwapBu:
  00134	8b 44 24 0c	 mov	 eax, DWORD PTR i$3[rsp]
  00138	ff c0		 inc	 eax
  0013a	89 44 24 0c	 mov	 DWORD PTR i$3[rsp], eax
$LN10@byteSwapBu:
  0013e	8b 44 24 40	 mov	 eax, DWORD PTR samples$[rsp]
  00142	39 44 24 0c	 cmp	 DWORD PTR i$3[rsp], eax
  00146	73 37		 jae	 SHORT $LN9@byteSwapBu

; 10112:       // Swap 1st and 3rd bytes.
; 10113:       val = *(ptr);

  00148	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  0014d	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00150	88 04 24	 mov	 BYTE PTR val$[rsp], al

; 10114:       *(ptr) = *(ptr+2);

  00153	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  00158	48 8b 4c 24 18	 mov	 rcx, QWORD PTR ptr$[rsp]
  0015d	0f b6 49 02	 movzx	 ecx, BYTE PTR [rcx+2]
  00161	88 08		 mov	 BYTE PTR [rax], cl

; 10115:       *(ptr+2) = val;

  00163	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  00168	0f b6 0c 24	 movzx	 ecx, BYTE PTR val$[rsp]
  0016c	88 48 02	 mov	 BYTE PTR [rax+2], cl

; 10116: 
; 10117:       // Increment 2 more bytes.
; 10118:       ptr += 2;

  0016f	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  00174	48 83 c0 02	 add	 rax, 2
  00178	48 89 44 24 18	 mov	 QWORD PTR ptr$[rsp], rax

; 10119:     }

  0017d	eb b5		 jmp	 SHORT $LN8@byteSwapBu
$LN9@byteSwapBu:

; 10120:   }
; 10121:   else if ( format == RTAUDIO_FLOAT64 ) {

  0017f	e9 03 01 00 00	 jmp	 $LN20@byteSwapBu
$LN19@byteSwapBu:
  00184	83 7c 24 48 20	 cmp	 DWORD PTR format$[rsp], 32 ; 00000020H
  00189	0f 85 f8 00 00
	00		 jne	 $LN21@byteSwapBu

; 10122:     for ( unsigned int i=0; i<samples; i++ ) {

  0018f	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR i$4[rsp], 0
  00197	eb 0a		 jmp	 SHORT $LN13@byteSwapBu
$LN11@byteSwapBu:
  00199	8b 44 24 10	 mov	 eax, DWORD PTR i$4[rsp]
  0019d	ff c0		 inc	 eax
  0019f	89 44 24 10	 mov	 DWORD PTR i$4[rsp], eax
$LN13@byteSwapBu:
  001a3	8b 44 24 40	 mov	 eax, DWORD PTR samples$[rsp]
  001a7	39 44 24 10	 cmp	 DWORD PTR i$4[rsp], eax
  001ab	0f 83 d6 00 00
	00		 jae	 $LN12@byteSwapBu

; 10123:       // Swap 1st and 8th bytes
; 10124:       val = *(ptr);

  001b1	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  001b6	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  001b9	88 04 24	 mov	 BYTE PTR val$[rsp], al

; 10125:       *(ptr) = *(ptr+7);

  001bc	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  001c1	48 8b 4c 24 18	 mov	 rcx, QWORD PTR ptr$[rsp]
  001c6	0f b6 49 07	 movzx	 ecx, BYTE PTR [rcx+7]
  001ca	88 08		 mov	 BYTE PTR [rax], cl

; 10126:       *(ptr+7) = val;

  001cc	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  001d1	0f b6 0c 24	 movzx	 ecx, BYTE PTR val$[rsp]
  001d5	88 48 07	 mov	 BYTE PTR [rax+7], cl

; 10127: 
; 10128:       // Swap 2nd and 7th bytes
; 10129:       ptr += 1;

  001d8	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  001dd	48 ff c0	 inc	 rax
  001e0	48 89 44 24 18	 mov	 QWORD PTR ptr$[rsp], rax

; 10130:       val = *(ptr);

  001e5	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  001ea	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  001ed	88 04 24	 mov	 BYTE PTR val$[rsp], al

; 10131:       *(ptr) = *(ptr+5);

  001f0	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  001f5	48 8b 4c 24 18	 mov	 rcx, QWORD PTR ptr$[rsp]
  001fa	0f b6 49 05	 movzx	 ecx, BYTE PTR [rcx+5]
  001fe	88 08		 mov	 BYTE PTR [rax], cl

; 10132:       *(ptr+5) = val;

  00200	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  00205	0f b6 0c 24	 movzx	 ecx, BYTE PTR val$[rsp]
  00209	88 48 05	 mov	 BYTE PTR [rax+5], cl

; 10133: 
; 10134:       // Swap 3rd and 6th bytes
; 10135:       ptr += 1;

  0020c	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  00211	48 ff c0	 inc	 rax
  00214	48 89 44 24 18	 mov	 QWORD PTR ptr$[rsp], rax

; 10136:       val = *(ptr);

  00219	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  0021e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00221	88 04 24	 mov	 BYTE PTR val$[rsp], al

; 10137:       *(ptr) = *(ptr+3);

  00224	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  00229	48 8b 4c 24 18	 mov	 rcx, QWORD PTR ptr$[rsp]
  0022e	0f b6 49 03	 movzx	 ecx, BYTE PTR [rcx+3]
  00232	88 08		 mov	 BYTE PTR [rax], cl

; 10138:       *(ptr+3) = val;

  00234	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  00239	0f b6 0c 24	 movzx	 ecx, BYTE PTR val$[rsp]
  0023d	88 48 03	 mov	 BYTE PTR [rax+3], cl

; 10139: 
; 10140:       // Swap 4th and 5th bytes
; 10141:       ptr += 1;

  00240	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  00245	48 ff c0	 inc	 rax
  00248	48 89 44 24 18	 mov	 QWORD PTR ptr$[rsp], rax

; 10142:       val = *(ptr);

  0024d	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  00252	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00255	88 04 24	 mov	 BYTE PTR val$[rsp], al

; 10143:       *(ptr) = *(ptr+1);

  00258	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  0025d	48 8b 4c 24 18	 mov	 rcx, QWORD PTR ptr$[rsp]
  00262	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  00266	88 08		 mov	 BYTE PTR [rax], cl

; 10144:       *(ptr+1) = val;

  00268	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  0026d	0f b6 0c 24	 movzx	 ecx, BYTE PTR val$[rsp]
  00271	88 48 01	 mov	 BYTE PTR [rax+1], cl

; 10145: 
; 10146:       // Increment 5 more bytes.
; 10147:       ptr += 5;

  00274	48 8b 44 24 18	 mov	 rax, QWORD PTR ptr$[rsp]
  00279	48 83 c0 05	 add	 rax, 5
  0027d	48 89 44 24 18	 mov	 QWORD PTR ptr$[rsp], rax

; 10148:     }

  00282	e9 12 ff ff ff	 jmp	 $LN11@byteSwapBu
$LN12@byteSwapBu:
$LN21@byteSwapBu:
$LN20@byteSwapBu:
$LN17@byteSwapBu:
$LN15@byteSwapBu:

; 10149:   }
; 10150: }

  00287	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0028b	c3		 ret	 0
?byteSwapBuffer@RtApi@@IEAAXPEADIK@Z ENDP		; RtApi::byteSwapBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
j$ = 32
out$1 = 40
out$2 = 48
out$3 = 56
out$4 = 64
out$5 = 72
out$6 = 80
tv1641 = 88
tv1638 = 89
scale$7 = 92
i$8 = 96
i$9 = 100
i$10 = 104
i$11 = 108
i$12 = 112
i$13 = 116
i$14 = 120
i$15 = 124
i$16 = 128
i$17 = 132
i$18 = 136
i$19 = 140
i$20 = 144
i$21 = 148
i$22 = 152
i$23 = 156
i$24 = 160
i$25 = 164
i$26 = 168
i$27 = 172
i$28 = 176
i$29 = 180
i$30 = 184
i$31 = 188
i$32 = 192
i$33 = 196
i$34 = 200
tv1664 = 204
i$35 = 208
i$36 = 212
i$37 = 216
i$38 = 220
i$39 = 224
i$40 = 228
tv1648 = 232
tv1645 = 234
i$41 = 236
i$42 = 240
i$43 = 244
scale$44 = 248
tv83 = 256
tv440 = 260
tv496 = 264
tv554 = 268
tv610 = 272
tv699 = 276
tv767 = 280
tv810 = 284
tv855 = 288
tv936 = 292
tv973 = 296
$T45 = 300
$T46 = 304
$T47 = 308
$T48 = 312
$T49 = 316
tv1343 = 320
tv1379 = 324
tv1524 = 328
tv1560 = 332
tv1595 = 336
in$50 = 344
in$51 = 352
in$52 = 360
in$53 = 368
in$54 = 376
in$55 = 384
in$56 = 392
in$57 = 400
in$58 = 408
in$59 = 416
in$60 = 424
in$61 = 432
in$62 = 440
in$63 = 448
in$64 = 456
in$65 = 464
in$66 = 472
in$67 = 480
in$68 = 488
in$69 = 496
in$70 = 504
in$71 = 512
in$72 = 520
in$73 = 528
in$74 = 536
in$75 = 544
in$76 = 552
in$77 = 560
in$78 = 568
in$79 = 576
in$80 = 584
in$81 = 592
in$82 = 600
in$83 = 608
in$84 = 616
in$85 = 624
tv161 = 632
tv171 = 640
tv215 = 648
tv225 = 656
tv271 = 664
tv281 = 672
tv325 = 680
tv335 = 688
tv449 = 696
tv461 = 704
tv505 = 712
tv517 = 720
tv563 = 728
tv575 = 736
tv619 = 744
tv631 = 752
tv776 = 760
tv819 = 768
tv864 = 776
tv1274 = 784
tv152 = 792
tv206 = 800
tv262 = 808
tv316 = 816
tv370 = 824
tv388 = 832
tv401 = 840
tv650 = 848
tv663 = 856
tv751 = 864
tv794 = 872
tv838 = 880
tv883 = 888
tv896 = 896
tv916 = 904
tv954 = 912
tv1066 = 920
tv1080 = 928
tv1249 = 936
tv1292 = 944
tv1305 = 952
tv1325 = 960
tv1362 = 968
tv1398 = 976
tv1436 = 984
tv1475 = 992
tv1488 = 1000
tv1506 = 1008
tv1542 = 1016
tv1578 = 1024
tv1613 = 1032
tv1650 = 1040
this$ = 1088
outBuffer$ = 1096
inBuffer$ = 1104
info$ = 1112
?convertBuffer@RtApi@@IEAAXPEAD0AEAUConvertInfo@1@@Z PROC ; RtApi::convertBuffer

; 9639 : {

$LN296:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 28 04
	00 00		 sub	 rsp, 1064		; 00000428H

; 9640 :   // This function does format conversion, input/output channel compensation, and
; 9641 :   // data interleaving/deinterleaving.  24-bit integers are assumed to occupy
; 9642 :   // the lower three bytes of a 32-bit integer.
; 9643 : 
; 9644 :   // Clear our device buffer when in/out duplex device channels are different
; 9645 :   if ( outBuffer == stream_.deviceBuffer && stream_.mode == DUPLEX &&

  0001d	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00025	48 8b 80 40 01
	00 00		 mov	 rax, QWORD PTR [rax+320]
  0002c	48 39 84 24 48
	04 00 00	 cmp	 QWORD PTR outBuffer$[rsp], rax
  00034	0f 85 a1 00 00
	00		 jne	 $LN218@convertBuf
  0003a	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00042	83 b8 28 01 00
	00 02		 cmp	 DWORD PTR [rax+296], 2
  00049	0f 85 8c 00 00
	00		 jne	 $LN218@convertBuf
  0004f	b8 04 00 00 00	 mov	 eax, 4
  00054	48 6b c0 00	 imul	 rax, rax, 0
  00058	b9 04 00 00 00	 mov	 ecx, 4
  0005d	48 6b c9 01	 imul	 rcx, rcx, 1
  00061	48 8b 94 24 40
	04 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  00069	4c 8b 84 24 40
	04 00 00	 mov	 r8, QWORD PTR this$[rsp]
  00071	41 8b 8c 08 64
	01 00 00	 mov	 ecx, DWORD PTR [r8+rcx+356]
  00079	39 8c 02 64 01
	00 00		 cmp	 DWORD PTR [rdx+rax+356], ecx
  00080	73 59		 jae	 SHORT $LN218@convertBuf

; 9646 :        ( stream_.nDeviceChannels[0] < stream_.nDeviceChannels[1] ) )
; 9647 :     memset( outBuffer, 0, stream_.bufferSize * info.outJump * formatBytes( info.outFormat ) );

  00082	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0008a	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  00092	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  00098	0f af 41 08	 imul	 eax, DWORD PTR [rcx+8]
  0009c	89 84 24 00 01
	00 00		 mov	 DWORD PTR tv83[rsp], eax
  000a3	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  000ab	8b 51 10	 mov	 edx, DWORD PTR [rcx+16]
  000ae	48 8b 8c 24 40
	04 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000b6	e8 00 00 00 00	 call	 ?formatBytes@RtApi@@IEAAIK@Z ; RtApi::formatBytes
  000bb	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR tv83[rsp]
  000c2	0f af c8	 imul	 ecx, eax
  000c5	8b c1		 mov	 eax, ecx
  000c7	8b c0		 mov	 eax, eax
  000c9	44 8b c0	 mov	 r8d, eax
  000cc	33 d2		 xor	 edx, edx
  000ce	48 8b 8c 24 48
	04 00 00	 mov	 rcx, QWORD PTR outBuffer$[rsp]
  000d6	e8 00 00 00 00	 call	 memset
$LN218@convertBuf:

; 9648 : 
; 9649 :   int j;
; 9650 :   if (info.outFormat == RTAUDIO_FLOAT64) {

  000db	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  000e3	83 78 10 20	 cmp	 DWORD PTR [rax+16], 32	; 00000020H
  000e7	0f 85 c4 09 00
	00		 jne	 $LN219@convertBuf

; 9651 :     Float64 scale;
; 9652 :     Float64 *out = (Float64 *)outBuffer;

  000ed	48 8b 84 24 48
	04 00 00	 mov	 rax, QWORD PTR outBuffer$[rsp]
  000f5	48 89 44 24 28	 mov	 QWORD PTR out$1[rsp], rax

; 9653 : 
; 9654 :     if (info.inFormat == RTAUDIO_SINT8) {

  000fa	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00102	83 78 0c 01	 cmp	 DWORD PTR [rax+12], 1
  00106	0f 85 cb 01 00
	00		 jne	 $LN221@convertBuf

; 9655 :       signed char *in = (signed char *)inBuffer;

  0010c	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  00114	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR in$50[rsp], rax

; 9656 :       scale = 1.0 / 127.5;

  0011c	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3f80101010101010
  00124	f2 0f 11 84 24
	f8 00 00 00	 movsd	 QWORD PTR scale$44[rsp], xmm0

; 9657 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  0012d	c7 84 24 ec 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$41[rsp], 0
  00138	eb 10		 jmp	 SHORT $LN4@convertBuf
$LN2@convertBuf:
  0013a	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR i$41[rsp]
  00141	ff c0		 inc	 eax
  00143	89 84 24 ec 00
	00 00		 mov	 DWORD PTR i$41[rsp], eax
$LN4@convertBuf:
  0014a	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00152	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  00158	39 84 24 ec 00
	00 00		 cmp	 DWORD PTR i$41[rsp], eax
  0015f	0f 83 6d 01 00
	00		 jae	 $LN3@convertBuf

; 9658 :         for (j=0; j<info.channels; j++) {

  00165	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  0016d	eb 0a		 jmp	 SHORT $LN7@convertBuf
$LN5@convertBuf:
  0016f	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  00173	ff c0		 inc	 eax
  00175	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN7@convertBuf:
  00179	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00181	8b 00		 mov	 eax, DWORD PTR [rax]
  00183	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  00187	0f 8d 04 01 00
	00		 jge	 $LN6@convertBuf

; 9659 :           out[info.outOffset[j]] = (Float64) in[info.inOffset[j]];

  0018d	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  00192	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  0019a	48 83 c1 18	 add	 rcx, 24
  0019e	48 8b d0	 mov	 rdx, rax
  001a1	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  001a6	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  001a9	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR in$50[rsp]
  001b1	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  001b5	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  001b9	f2 0f 11 84 24
	18 03 00 00	 movsd	 QWORD PTR tv152[rsp], xmm0
  001c2	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  001c7	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  001cf	48 83 c1 30	 add	 rcx, 48			; 00000030H
  001d3	48 8b d0	 mov	 rdx, rax
  001d6	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  001db	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  001de	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out$1[rsp]
  001e3	f2 0f 10 84 24
	18 03 00 00	 movsd	 xmm0, QWORD PTR tv152[rsp]
  001ec	f2 0f 11 04 c1	 movsd	 QWORD PTR [rcx+rax*8], xmm0

; 9660 :           out[info.outOffset[j]] += 0.5;

  001f1	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  001f6	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  001fe	48 83 c1 30	 add	 rcx, 48			; 00000030H
  00202	48 8b d0	 mov	 rdx, rax
  00205	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  0020a	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0020d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out$1[rsp]
  00212	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00216	48 89 84 24 78
	02 00 00	 mov	 QWORD PTR tv161[rsp], rax
  0021e	48 8b 84 24 78
	02 00 00	 mov	 rax, QWORD PTR tv161[rsp]
  00226	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [rax]
  0022a	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00232	48 8b 84 24 78
	02 00 00	 mov	 rax, QWORD PTR tv161[rsp]
  0023a	f2 0f 11 00	 movsd	 QWORD PTR [rax], xmm0

; 9661 :           out[info.outOffset[j]] *= scale;

  0023e	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  00243	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  0024b	48 83 c1 30	 add	 rcx, 48			; 00000030H
  0024f	48 8b d0	 mov	 rdx, rax
  00252	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  00257	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0025a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out$1[rsp]
  0025f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00263	48 89 84 24 80
	02 00 00	 mov	 QWORD PTR tv171[rsp], rax
  0026b	48 8b 84 24 80
	02 00 00	 mov	 rax, QWORD PTR tv171[rsp]
  00273	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [rax]
  00277	f2 0f 59 84 24
	f8 00 00 00	 mulsd	 xmm0, QWORD PTR scale$44[rsp]
  00280	48 8b 84 24 80
	02 00 00	 mov	 rax, QWORD PTR tv171[rsp]
  00288	f2 0f 11 00	 movsd	 QWORD PTR [rax], xmm0

; 9662 :         }

  0028c	e9 de fe ff ff	 jmp	 $LN5@convertBuf
$LN6@convertBuf:

; 9663 :         in += info.inJump;

  00291	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00299	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0029d	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR in$50[rsp]
  002a5	48 03 c8	 add	 rcx, rax
  002a8	48 8b c1	 mov	 rax, rcx
  002ab	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR in$50[rsp], rax

; 9664 :         out += info.outJump;

  002b3	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  002bb	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  002bf	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out$1[rsp]
  002c4	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  002c8	48 89 44 24 28	 mov	 QWORD PTR out$1[rsp], rax

; 9665 :       }

  002cd	e9 68 fe ff ff	 jmp	 $LN2@convertBuf
$LN3@convertBuf:

; 9666 :     }
; 9667 :     else if (info.inFormat == RTAUDIO_SINT16) {

  002d2	e9 d5 07 00 00	 jmp	 $LN222@convertBuf
$LN221@convertBuf:
  002d7	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  002df	83 78 0c 02	 cmp	 DWORD PTR [rax+12], 2
  002e3	0f 85 c9 01 00
	00		 jne	 $LN223@convertBuf

; 9668 :       Int16 *in = (Int16 *)inBuffer;

  002e9	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  002f1	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR in$51[rsp], rax

; 9669 :       scale = 1.0 / 32767.5;

  002f9	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3f00001000100010
  00301	f2 0f 11 84 24
	f8 00 00 00	 movsd	 QWORD PTR scale$44[rsp], xmm0

; 9670 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  0030a	c7 84 24 f0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$42[rsp], 0
  00315	eb 10		 jmp	 SHORT $LN10@convertBuf
$LN8@convertBuf:
  00317	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR i$42[rsp]
  0031e	ff c0		 inc	 eax
  00320	89 84 24 f0 00
	00 00		 mov	 DWORD PTR i$42[rsp], eax
$LN10@convertBuf:
  00327	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0032f	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  00335	39 84 24 f0 00
	00 00		 cmp	 DWORD PTR i$42[rsp], eax
  0033c	0f 83 6b 01 00
	00		 jae	 $LN9@convertBuf

; 9671 :         for (j=0; j<info.channels; j++) {

  00342	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  0034a	eb 0a		 jmp	 SHORT $LN13@convertBuf
$LN11@convertBuf:
  0034c	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  00350	ff c0		 inc	 eax
  00352	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN13@convertBuf:
  00356	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0035e	8b 00		 mov	 eax, DWORD PTR [rax]
  00360	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  00364	0f 8d 04 01 00
	00		 jge	 $LN12@convertBuf

; 9672 :           out[info.outOffset[j]] = (Float64) in[info.inOffset[j]];

  0036a	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  0036f	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  00377	48 83 c1 18	 add	 rcx, 24
  0037b	48 8b d0	 mov	 rdx, rax
  0037e	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  00383	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00386	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR in$51[rsp]
  0038e	0f bf 04 41	 movsx	 eax, WORD PTR [rcx+rax*2]
  00392	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00396	f2 0f 11 84 24
	20 03 00 00	 movsd	 QWORD PTR tv206[rsp], xmm0
  0039f	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  003a4	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  003ac	48 83 c1 30	 add	 rcx, 48			; 00000030H
  003b0	48 8b d0	 mov	 rdx, rax
  003b3	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  003b8	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  003bb	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out$1[rsp]
  003c0	f2 0f 10 84 24
	20 03 00 00	 movsd	 xmm0, QWORD PTR tv206[rsp]
  003c9	f2 0f 11 04 c1	 movsd	 QWORD PTR [rcx+rax*8], xmm0

; 9673 :           out[info.outOffset[j]] += 0.5;

  003ce	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  003d3	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  003db	48 83 c1 30	 add	 rcx, 48			; 00000030H
  003df	48 8b d0	 mov	 rdx, rax
  003e2	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  003e7	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  003ea	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out$1[rsp]
  003ef	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  003f3	48 89 84 24 88
	02 00 00	 mov	 QWORD PTR tv215[rsp], rax
  003fb	48 8b 84 24 88
	02 00 00	 mov	 rax, QWORD PTR tv215[rsp]
  00403	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [rax]
  00407	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0040f	48 8b 84 24 88
	02 00 00	 mov	 rax, QWORD PTR tv215[rsp]
  00417	f2 0f 11 00	 movsd	 QWORD PTR [rax], xmm0

; 9674 :           out[info.outOffset[j]] *= scale;

  0041b	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  00420	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  00428	48 83 c1 30	 add	 rcx, 48			; 00000030H
  0042c	48 8b d0	 mov	 rdx, rax
  0042f	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  00434	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00437	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out$1[rsp]
  0043c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00440	48 89 84 24 90
	02 00 00	 mov	 QWORD PTR tv225[rsp], rax
  00448	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR tv225[rsp]
  00450	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [rax]
  00454	f2 0f 59 84 24
	f8 00 00 00	 mulsd	 xmm0, QWORD PTR scale$44[rsp]
  0045d	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR tv225[rsp]
  00465	f2 0f 11 00	 movsd	 QWORD PTR [rax], xmm0

; 9675 :         }

  00469	e9 de fe ff ff	 jmp	 $LN11@convertBuf
$LN12@convertBuf:

; 9676 :         in += info.inJump;

  0046e	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00476	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0047a	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR in$51[rsp]
  00482	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00486	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR in$51[rsp], rax

; 9677 :         out += info.outJump;

  0048e	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00496	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  0049a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out$1[rsp]
  0049f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  004a3	48 89 44 24 28	 mov	 QWORD PTR out$1[rsp], rax

; 9678 :       }

  004a8	e9 6a fe ff ff	 jmp	 $LN8@convertBuf
$LN9@convertBuf:

; 9679 :     }
; 9680 :     else if (info.inFormat == RTAUDIO_SINT24) {

  004ad	e9 fa 05 00 00	 jmp	 $LN224@convertBuf
$LN223@convertBuf:
  004b2	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  004ba	83 78 0c 04	 cmp	 DWORD PTR [rax+12], 4
  004be	0f 85 dd 01 00
	00		 jne	 $LN225@convertBuf

; 9681 :       Int24 *in = (Int24 *)inBuffer;

  004c4	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  004cc	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR in$52[rsp], rax

; 9682 :       scale = 1.0 / 8388607.5;

  004d4	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3e80000010000010
  004dc	f2 0f 11 84 24
	f8 00 00 00	 movsd	 QWORD PTR scale$44[rsp], xmm0

; 9683 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  004e5	c7 84 24 f4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$43[rsp], 0
  004f0	eb 10		 jmp	 SHORT $LN16@convertBuf
$LN14@convertBuf:
  004f2	8b 84 24 f4 00
	00 00		 mov	 eax, DWORD PTR i$43[rsp]
  004f9	ff c0		 inc	 eax
  004fb	89 84 24 f4 00
	00 00		 mov	 DWORD PTR i$43[rsp], eax
$LN16@convertBuf:
  00502	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0050a	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  00510	39 84 24 f4 00
	00 00		 cmp	 DWORD PTR i$43[rsp], eax
  00517	0f 83 7f 01 00
	00		 jae	 $LN15@convertBuf

; 9684 :         for (j=0; j<info.channels; j++) {

  0051d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  00525	eb 0a		 jmp	 SHORT $LN19@convertBuf
$LN17@convertBuf:
  00527	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  0052b	ff c0		 inc	 eax
  0052d	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN19@convertBuf:
  00531	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00539	8b 00		 mov	 eax, DWORD PTR [rax]
  0053b	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  0053f	0f 8d 12 01 00
	00		 jge	 $LN18@convertBuf

; 9685 :           out[info.outOffset[j]] = (Float64) (in[info.inOffset[j]].asInt());

  00545	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  0054a	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  00552	48 83 c1 18	 add	 rcx, 24
  00556	48 8b d0	 mov	 rdx, rax
  00559	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  0055e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00561	48 6b c0 03	 imul	 rax, rax, 3
  00565	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR in$52[rsp]
  0056d	48 03 c8	 add	 rcx, rax
  00570	48 8b c1	 mov	 rax, rcx
  00573	48 8b c8	 mov	 rcx, rax
  00576	e8 00 00 00 00	 call	 ?asInt@S24@@QEAAHXZ	; S24::asInt
  0057b	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  0057f	f2 0f 11 84 24
	28 03 00 00	 movsd	 QWORD PTR tv262[rsp], xmm0
  00588	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  0058d	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  00595	48 83 c1 30	 add	 rcx, 48			; 00000030H
  00599	48 8b d0	 mov	 rdx, rax
  0059c	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  005a1	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  005a4	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out$1[rsp]
  005a9	f2 0f 10 84 24
	28 03 00 00	 movsd	 xmm0, QWORD PTR tv262[rsp]
  005b2	f2 0f 11 04 c1	 movsd	 QWORD PTR [rcx+rax*8], xmm0

; 9686 :           out[info.outOffset[j]] += 0.5;

  005b7	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  005bc	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  005c4	48 83 c1 30	 add	 rcx, 48			; 00000030H
  005c8	48 8b d0	 mov	 rdx, rax
  005cb	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  005d0	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  005d3	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out$1[rsp]
  005d8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  005dc	48 89 84 24 98
	02 00 00	 mov	 QWORD PTR tv271[rsp], rax
  005e4	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR tv271[rsp]
  005ec	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [rax]
  005f0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  005f8	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR tv271[rsp]
  00600	f2 0f 11 00	 movsd	 QWORD PTR [rax], xmm0

; 9687 :           out[info.outOffset[j]] *= scale;

  00604	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  00609	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  00611	48 83 c1 30	 add	 rcx, 48			; 00000030H
  00615	48 8b d0	 mov	 rdx, rax
  00618	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  0061d	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00620	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out$1[rsp]
  00625	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00629	48 89 84 24 a0
	02 00 00	 mov	 QWORD PTR tv281[rsp], rax
  00631	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR tv281[rsp]
  00639	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [rax]
  0063d	f2 0f 59 84 24
	f8 00 00 00	 mulsd	 xmm0, QWORD PTR scale$44[rsp]
  00646	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR tv281[rsp]
  0064e	f2 0f 11 00	 movsd	 QWORD PTR [rax], xmm0

; 9688 :         }

  00652	e9 d0 fe ff ff	 jmp	 $LN17@convertBuf
$LN18@convertBuf:

; 9689 :         in += info.inJump;

  00657	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0065f	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00663	48 6b c0 03	 imul	 rax, rax, 3
  00667	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR in$52[rsp]
  0066f	48 03 c8	 add	 rcx, rax
  00672	48 8b c1	 mov	 rax, rcx
  00675	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR in$52[rsp], rax

; 9690 :         out += info.outJump;

  0067d	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00685	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  00689	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out$1[rsp]
  0068e	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00692	48 89 44 24 28	 mov	 QWORD PTR out$1[rsp], rax

; 9691 :       }

  00697	e9 56 fe ff ff	 jmp	 $LN14@convertBuf
$LN15@convertBuf:

; 9692 :     }
; 9693 :     else if (info.inFormat == RTAUDIO_SINT32) {

  0069c	e9 0b 04 00 00	 jmp	 $LN226@convertBuf
$LN225@convertBuf:
  006a1	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  006a9	83 78 0c 08	 cmp	 DWORD PTR [rax+12], 8
  006ad	0f 85 ba 01 00
	00		 jne	 $LN227@convertBuf

; 9694 :       Int32 *in = (Int32 *)inBuffer;

  006b3	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  006bb	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR in$53[rsp], rax

; 9695 :       scale = 1.0 / 2147483647.5;

  006c3	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3e00000000100000
  006cb	f2 0f 11 84 24
	f8 00 00 00	 movsd	 QWORD PTR scale$44[rsp], xmm0

; 9696 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  006d4	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR i$8[rsp], 0
  006dc	eb 0a		 jmp	 SHORT $LN22@convertBuf
$LN20@convertBuf:
  006de	8b 44 24 60	 mov	 eax, DWORD PTR i$8[rsp]
  006e2	ff c0		 inc	 eax
  006e4	89 44 24 60	 mov	 DWORD PTR i$8[rsp], eax
$LN22@convertBuf:
  006e8	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  006f0	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  006f6	39 44 24 60	 cmp	 DWORD PTR i$8[rsp], eax
  006fa	0f 83 68 01 00
	00		 jae	 $LN21@convertBuf

; 9697 :         for (j=0; j<info.channels; j++) {

  00700	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  00708	eb 0a		 jmp	 SHORT $LN25@convertBuf
$LN23@convertBuf:
  0070a	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  0070e	ff c0		 inc	 eax
  00710	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN25@convertBuf:
  00714	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0071c	8b 00		 mov	 eax, DWORD PTR [rax]
  0071e	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  00722	0f 8d 01 01 00
	00		 jge	 $LN24@convertBuf

; 9698 :           out[info.outOffset[j]] = (Float64) in[info.inOffset[j]];

  00728	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  0072d	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  00735	48 83 c1 18	 add	 rcx, 24
  00739	48 8b d0	 mov	 rdx, rax
  0073c	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  00741	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00744	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR in$53[rsp]
  0074c	f2 0f 2a 04 81	 cvtsi2sd xmm0, DWORD PTR [rcx+rax*4]
  00751	f2 0f 11 84 24
	30 03 00 00	 movsd	 QWORD PTR tv316[rsp], xmm0
  0075a	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  0075f	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  00767	48 83 c1 30	 add	 rcx, 48			; 00000030H
  0076b	48 8b d0	 mov	 rdx, rax
  0076e	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  00773	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00776	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out$1[rsp]
  0077b	f2 0f 10 84 24
	30 03 00 00	 movsd	 xmm0, QWORD PTR tv316[rsp]
  00784	f2 0f 11 04 c1	 movsd	 QWORD PTR [rcx+rax*8], xmm0

; 9699 :           out[info.outOffset[j]] += 0.5;

  00789	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  0078e	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  00796	48 83 c1 30	 add	 rcx, 48			; 00000030H
  0079a	48 8b d0	 mov	 rdx, rax
  0079d	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  007a2	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  007a5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out$1[rsp]
  007aa	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  007ae	48 89 84 24 a8
	02 00 00	 mov	 QWORD PTR tv325[rsp], rax
  007b6	48 8b 84 24 a8
	02 00 00	 mov	 rax, QWORD PTR tv325[rsp]
  007be	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [rax]
  007c2	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  007ca	48 8b 84 24 a8
	02 00 00	 mov	 rax, QWORD PTR tv325[rsp]
  007d2	f2 0f 11 00	 movsd	 QWORD PTR [rax], xmm0

; 9700 :           out[info.outOffset[j]] *= scale;

  007d6	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  007db	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  007e3	48 83 c1 30	 add	 rcx, 48			; 00000030H
  007e7	48 8b d0	 mov	 rdx, rax
  007ea	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  007ef	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  007f2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out$1[rsp]
  007f7	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  007fb	48 89 84 24 b0
	02 00 00	 mov	 QWORD PTR tv335[rsp], rax
  00803	48 8b 84 24 b0
	02 00 00	 mov	 rax, QWORD PTR tv335[rsp]
  0080b	f2 0f 10 00	 movsd	 xmm0, QWORD PTR [rax]
  0080f	f2 0f 59 84 24
	f8 00 00 00	 mulsd	 xmm0, QWORD PTR scale$44[rsp]
  00818	48 8b 84 24 b0
	02 00 00	 mov	 rax, QWORD PTR tv335[rsp]
  00820	f2 0f 11 00	 movsd	 QWORD PTR [rax], xmm0

; 9701 :         }

  00824	e9 e1 fe ff ff	 jmp	 $LN23@convertBuf
$LN24@convertBuf:

; 9702 :         in += info.inJump;

  00829	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00831	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00835	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR in$53[rsp]
  0083d	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00841	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR in$53[rsp], rax

; 9703 :         out += info.outJump;

  00849	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00851	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  00855	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out$1[rsp]
  0085a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0085e	48 89 44 24 28	 mov	 QWORD PTR out$1[rsp], rax

; 9704 :       }

  00863	e9 76 fe ff ff	 jmp	 $LN20@convertBuf
$LN21@convertBuf:

; 9705 :     }
; 9706 :     else if (info.inFormat == RTAUDIO_FLOAT32) {

  00868	e9 3f 02 00 00	 jmp	 $LN228@convertBuf
$LN227@convertBuf:
  0086d	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00875	83 78 0c 10	 cmp	 DWORD PTR [rax+12], 16
  00879	0f 85 07 01 00
	00		 jne	 $LN229@convertBuf

; 9707 :       Float32 *in = (Float32 *)inBuffer;

  0087f	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  00887	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR in$54[rsp], rax

; 9708 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  0088f	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR i$9[rsp], 0
  00897	eb 0a		 jmp	 SHORT $LN28@convertBuf
$LN26@convertBuf:
  00899	8b 44 24 64	 mov	 eax, DWORD PTR i$9[rsp]
  0089d	ff c0		 inc	 eax
  0089f	89 44 24 64	 mov	 DWORD PTR i$9[rsp], eax
$LN28@convertBuf:
  008a3	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  008ab	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  008b1	39 44 24 64	 cmp	 DWORD PTR i$9[rsp], eax
  008b5	0f 83 c6 00 00
	00		 jae	 $LN27@convertBuf

; 9709 :         for (j=0; j<info.channels; j++) {

  008bb	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  008c3	eb 0a		 jmp	 SHORT $LN31@convertBuf
$LN29@convertBuf:
  008c5	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  008c9	ff c0		 inc	 eax
  008cb	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN31@convertBuf:
  008cf	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  008d7	8b 00		 mov	 eax, DWORD PTR [rax]
  008d9	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  008dd	7d 63		 jge	 SHORT $LN30@convertBuf

; 9710 :           out[info.outOffset[j]] = (Float64) in[info.inOffset[j]];

  008df	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  008e4	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  008ec	48 83 c1 18	 add	 rcx, 24
  008f0	48 8b d0	 mov	 rdx, rax
  008f3	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  008f8	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  008fb	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR in$54[rsp]
  00903	f3 0f 5a 04 81	 cvtss2sd xmm0, DWORD PTR [rcx+rax*4]
  00908	f2 0f 11 84 24
	38 03 00 00	 movsd	 QWORD PTR tv370[rsp], xmm0
  00911	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  00916	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  0091e	48 83 c1 30	 add	 rcx, 48			; 00000030H
  00922	48 8b d0	 mov	 rdx, rax
  00925	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  0092a	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0092d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out$1[rsp]
  00932	f2 0f 10 84 24
	38 03 00 00	 movsd	 xmm0, QWORD PTR tv370[rsp]
  0093b	f2 0f 11 04 c1	 movsd	 QWORD PTR [rcx+rax*8], xmm0

; 9711 :         }

  00940	eb 83		 jmp	 SHORT $LN29@convertBuf
$LN30@convertBuf:

; 9712 :         in += info.inJump;

  00942	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0094a	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0094e	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR in$54[rsp]
  00956	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  0095a	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR in$54[rsp], rax

; 9713 :         out += info.outJump;

  00962	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0096a	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  0096e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out$1[rsp]
  00973	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00977	48 89 44 24 28	 mov	 QWORD PTR out$1[rsp], rax

; 9714 :       }

  0097c	e9 18 ff ff ff	 jmp	 $LN26@convertBuf
$LN27@convertBuf:

; 9715 :     }
; 9716 :     else if (info.inFormat == RTAUDIO_FLOAT64) {

  00981	e9 26 01 00 00	 jmp	 $LN230@convertBuf
$LN229@convertBuf:
  00986	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0098e	83 78 0c 20	 cmp	 DWORD PTR [rax+12], 32	; 00000020H
  00992	0f 85 14 01 00
	00		 jne	 $LN231@convertBuf

; 9717 :       // Channel compensation and/or (de)interleaving only.
; 9718 :       Float64 *in = (Float64 *)inBuffer;

  00998	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  009a0	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR in$55[rsp], rax

; 9719 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  009a8	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR i$10[rsp], 0
  009b0	eb 0a		 jmp	 SHORT $LN34@convertBuf
$LN32@convertBuf:
  009b2	8b 44 24 68	 mov	 eax, DWORD PTR i$10[rsp]
  009b6	ff c0		 inc	 eax
  009b8	89 44 24 68	 mov	 DWORD PTR i$10[rsp], eax
$LN34@convertBuf:
  009bc	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  009c4	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  009ca	39 44 24 68	 cmp	 DWORD PTR i$10[rsp], eax
  009ce	0f 83 d8 00 00
	00		 jae	 $LN33@convertBuf

; 9720 :         for (j=0; j<info.channels; j++) {

  009d4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  009dc	eb 0a		 jmp	 SHORT $LN37@convertBuf
$LN35@convertBuf:
  009de	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  009e2	ff c0		 inc	 eax
  009e4	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN37@convertBuf:
  009e8	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  009f0	8b 00		 mov	 eax, DWORD PTR [rax]
  009f2	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  009f6	7d 75		 jge	 SHORT $LN36@convertBuf

; 9721 :           out[info.outOffset[j]] = in[info.inOffset[j]];

  009f8	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  009fd	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  00a05	48 83 c1 18	 add	 rcx, 24
  00a09	48 8b d0	 mov	 rdx, rax
  00a0c	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  00a11	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00a14	48 89 84 24 48
	03 00 00	 mov	 QWORD PTR tv401[rsp], rax
  00a1c	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR j$[rsp]
  00a21	48 8b 94 24 58
	04 00 00	 mov	 rdx, QWORD PTR info$[rsp]
  00a29	48 83 c2 30	 add	 rdx, 48			; 00000030H
  00a2d	48 89 94 24 40
	03 00 00	 mov	 QWORD PTR tv388[rsp], rdx
  00a35	48 8b d1	 mov	 rdx, rcx
  00a38	48 8b 8c 24 40
	03 00 00	 mov	 rcx, QWORD PTR tv388[rsp]
  00a40	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  00a45	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00a48	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out$1[rsp]
  00a4d	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR in$55[rsp]
  00a55	4c 8b 84 24 48
	03 00 00	 mov	 r8, QWORD PTR tv401[rsp]
  00a5d	f2 42 0f 10 04
	c2		 movsd	 xmm0, QWORD PTR [rdx+r8*8]
  00a63	f2 0f 11 04 c1	 movsd	 QWORD PTR [rcx+rax*8], xmm0

; 9722 :         }

  00a68	e9 71 ff ff ff	 jmp	 $LN35@convertBuf
$LN36@convertBuf:

; 9723 :         in += info.inJump;

  00a6d	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00a75	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00a79	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR in$55[rsp]
  00a81	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00a85	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR in$55[rsp], rax

; 9724 :         out += info.outJump;

  00a8d	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00a95	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  00a99	48 8b 4c 24 28	 mov	 rcx, QWORD PTR out$1[rsp]
  00a9e	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00aa2	48 89 44 24 28	 mov	 QWORD PTR out$1[rsp], rax

; 9725 :       }

  00aa7	e9 06 ff ff ff	 jmp	 $LN32@convertBuf
$LN33@convertBuf:
$LN231@convertBuf:
$LN230@convertBuf:
$LN228@convertBuf:
$LN226@convertBuf:
$LN224@convertBuf:
$LN222@convertBuf:

; 9726 :     }
; 9727 :   }

  00aac	e9 68 29 00 00	 jmp	 $LN220@convertBuf
$LN219@convertBuf:

; 9728 :   else if (info.outFormat == RTAUDIO_FLOAT32) {

  00ab1	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00ab9	83 78 10 10	 cmp	 DWORD PTR [rax+16], 16
  00abd	0f 85 a4 09 00
	00		 jne	 $LN232@convertBuf

; 9729 :     Float32 scale;
; 9730 :     Float32 *out = (Float32 *)outBuffer;

  00ac3	48 8b 84 24 48
	04 00 00	 mov	 rax, QWORD PTR outBuffer$[rsp]
  00acb	48 89 44 24 30	 mov	 QWORD PTR out$2[rsp], rax

; 9731 : 
; 9732 :     if (info.inFormat == RTAUDIO_SINT8) {

  00ad0	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00ad8	83 78 0c 01	 cmp	 DWORD PTR [rax+12], 1
  00adc	0f 85 bd 01 00
	00		 jne	 $LN234@convertBuf

; 9733 :       signed char *in = (signed char *)inBuffer;

  00ae2	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  00aea	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR in$56[rsp], rax

; 9734 :       scale = (Float32) ( 1.0 / 127.5 );

  00af2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c008081
  00afa	f3 0f 11 44 24
	5c		 movss	 DWORD PTR scale$7[rsp], xmm0

; 9735 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  00b00	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR i$11[rsp], 0
  00b08	eb 0a		 jmp	 SHORT $LN40@convertBuf
$LN38@convertBuf:
  00b0a	8b 44 24 6c	 mov	 eax, DWORD PTR i$11[rsp]
  00b0e	ff c0		 inc	 eax
  00b10	89 44 24 6c	 mov	 DWORD PTR i$11[rsp], eax
$LN40@convertBuf:
  00b14	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00b1c	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  00b22	39 44 24 6c	 cmp	 DWORD PTR i$11[rsp], eax
  00b26	0f 83 6e 01 00
	00		 jae	 $LN39@convertBuf

; 9736 :         for (j=0; j<info.channels; j++) {

  00b2c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  00b34	eb 0a		 jmp	 SHORT $LN43@convertBuf
$LN41@convertBuf:
  00b36	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  00b3a	ff c0		 inc	 eax
  00b3c	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN43@convertBuf:
  00b40	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00b48	8b 00		 mov	 eax, DWORD PTR [rax]
  00b4a	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  00b4e	0f 8d 05 01 00
	00		 jge	 $LN42@convertBuf

; 9737 :           out[info.outOffset[j]] = (Float32) in[info.inOffset[j]];

  00b54	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  00b59	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  00b61	48 83 c1 18	 add	 rcx, 24
  00b65	48 8b d0	 mov	 rdx, rax
  00b68	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  00b6d	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00b70	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR in$56[rsp]
  00b78	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00b7c	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00b80	f3 0f 11 84 24
	04 01 00 00	 movss	 DWORD PTR tv440[rsp], xmm0
  00b89	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  00b8e	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  00b96	48 83 c1 30	 add	 rcx, 48			; 00000030H
  00b9a	48 8b d0	 mov	 rdx, rax
  00b9d	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  00ba2	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00ba5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$2[rsp]
  00baa	f3 0f 10 84 24
	04 01 00 00	 movss	 xmm0, DWORD PTR tv440[rsp]
  00bb3	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 9738 :           out[info.outOffset[j]] += 0.5;

  00bb8	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  00bbd	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  00bc5	48 83 c1 30	 add	 rcx, 48			; 00000030H
  00bc9	48 8b d0	 mov	 rdx, rax
  00bcc	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  00bd1	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00bd4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$2[rsp]
  00bd9	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00bdd	48 89 84 24 b8
	02 00 00	 mov	 QWORD PTR tv449[rsp], rax
  00be5	48 8b 84 24 b8
	02 00 00	 mov	 rax, QWORD PTR tv449[rsp]
  00bed	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [rax]
  00bf1	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00bf9	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00bfd	48 8b 84 24 b8
	02 00 00	 mov	 rax, QWORD PTR tv449[rsp]
  00c05	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 9739 :           out[info.outOffset[j]] *= scale;

  00c09	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  00c0e	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  00c16	48 83 c1 30	 add	 rcx, 48			; 00000030H
  00c1a	48 8b d0	 mov	 rdx, rax
  00c1d	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  00c22	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00c25	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$2[rsp]
  00c2a	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00c2e	48 89 84 24 c0
	02 00 00	 mov	 QWORD PTR tv461[rsp], rax
  00c36	48 8b 84 24 c0
	02 00 00	 mov	 rax, QWORD PTR tv461[rsp]
  00c3e	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00c42	f3 0f 59 44 24
	5c		 mulss	 xmm0, DWORD PTR scale$7[rsp]
  00c48	48 8b 84 24 c0
	02 00 00	 mov	 rax, QWORD PTR tv461[rsp]
  00c50	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 9740 :         }

  00c54	e9 dd fe ff ff	 jmp	 $LN41@convertBuf
$LN42@convertBuf:

; 9741 :         in += info.inJump;

  00c59	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00c61	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00c65	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR in$56[rsp]
  00c6d	48 03 c8	 add	 rcx, rax
  00c70	48 8b c1	 mov	 rax, rcx
  00c73	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR in$56[rsp], rax

; 9742 :         out += info.outJump;

  00c7b	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00c83	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  00c87	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$2[rsp]
  00c8c	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00c90	48 89 44 24 30	 mov	 QWORD PTR out$2[rsp], rax

; 9743 :       }

  00c95	e9 70 fe ff ff	 jmp	 $LN38@convertBuf
$LN39@convertBuf:

; 9744 :     }
; 9745 :     else if (info.inFormat == RTAUDIO_SINT16) {

  00c9a	e9 c3 07 00 00	 jmp	 $LN235@convertBuf
$LN234@convertBuf:
  00c9f	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00ca7	83 78 0c 02	 cmp	 DWORD PTR [rax+12], 2
  00cab	0f 85 bb 01 00
	00		 jne	 $LN236@convertBuf

; 9746 :       Int16 *in = (Int16 *)inBuffer;

  00cb1	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  00cb9	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR in$57[rsp], rax

; 9747 :       scale = (Float32) ( 1.0 / 32767.5 );

  00cc1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@38000080
  00cc9	f3 0f 11 44 24
	5c		 movss	 DWORD PTR scale$7[rsp], xmm0

; 9748 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  00ccf	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$12[rsp], 0
  00cd7	eb 0a		 jmp	 SHORT $LN46@convertBuf
$LN44@convertBuf:
  00cd9	8b 44 24 70	 mov	 eax, DWORD PTR i$12[rsp]
  00cdd	ff c0		 inc	 eax
  00cdf	89 44 24 70	 mov	 DWORD PTR i$12[rsp], eax
$LN46@convertBuf:
  00ce3	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00ceb	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  00cf1	39 44 24 70	 cmp	 DWORD PTR i$12[rsp], eax
  00cf5	0f 83 6c 01 00
	00		 jae	 $LN45@convertBuf

; 9749 :         for (j=0; j<info.channels; j++) {

  00cfb	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  00d03	eb 0a		 jmp	 SHORT $LN49@convertBuf
$LN47@convertBuf:
  00d05	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  00d09	ff c0		 inc	 eax
  00d0b	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN49@convertBuf:
  00d0f	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00d17	8b 00		 mov	 eax, DWORD PTR [rax]
  00d19	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  00d1d	0f 8d 05 01 00
	00		 jge	 $LN48@convertBuf

; 9750 :           out[info.outOffset[j]] = (Float32) in[info.inOffset[j]];

  00d23	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  00d28	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  00d30	48 83 c1 18	 add	 rcx, 24
  00d34	48 8b d0	 mov	 rdx, rax
  00d37	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  00d3c	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00d3f	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR in$57[rsp]
  00d47	0f bf 04 41	 movsx	 eax, WORD PTR [rcx+rax*2]
  00d4b	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00d4f	f3 0f 11 84 24
	08 01 00 00	 movss	 DWORD PTR tv496[rsp], xmm0
  00d58	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  00d5d	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  00d65	48 83 c1 30	 add	 rcx, 48			; 00000030H
  00d69	48 8b d0	 mov	 rdx, rax
  00d6c	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  00d71	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00d74	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$2[rsp]
  00d79	f3 0f 10 84 24
	08 01 00 00	 movss	 xmm0, DWORD PTR tv496[rsp]
  00d82	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 9751 :           out[info.outOffset[j]] += 0.5;

  00d87	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  00d8c	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  00d94	48 83 c1 30	 add	 rcx, 48			; 00000030H
  00d98	48 8b d0	 mov	 rdx, rax
  00d9b	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  00da0	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00da3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$2[rsp]
  00da8	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00dac	48 89 84 24 c8
	02 00 00	 mov	 QWORD PTR tv505[rsp], rax
  00db4	48 8b 84 24 c8
	02 00 00	 mov	 rax, QWORD PTR tv505[rsp]
  00dbc	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [rax]
  00dc0	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00dc8	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00dcc	48 8b 84 24 c8
	02 00 00	 mov	 rax, QWORD PTR tv505[rsp]
  00dd4	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 9752 :           out[info.outOffset[j]] *= scale;

  00dd8	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  00ddd	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  00de5	48 83 c1 30	 add	 rcx, 48			; 00000030H
  00de9	48 8b d0	 mov	 rdx, rax
  00dec	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  00df1	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00df4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$2[rsp]
  00df9	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00dfd	48 89 84 24 d0
	02 00 00	 mov	 QWORD PTR tv517[rsp], rax
  00e05	48 8b 84 24 d0
	02 00 00	 mov	 rax, QWORD PTR tv517[rsp]
  00e0d	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00e11	f3 0f 59 44 24
	5c		 mulss	 xmm0, DWORD PTR scale$7[rsp]
  00e17	48 8b 84 24 d0
	02 00 00	 mov	 rax, QWORD PTR tv517[rsp]
  00e1f	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 9753 :         }

  00e23	e9 dd fe ff ff	 jmp	 $LN47@convertBuf
$LN48@convertBuf:

; 9754 :         in += info.inJump;

  00e28	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00e30	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00e34	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR in$57[rsp]
  00e3c	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  00e40	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR in$57[rsp], rax

; 9755 :         out += info.outJump;

  00e48	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00e50	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  00e54	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$2[rsp]
  00e59	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00e5d	48 89 44 24 30	 mov	 QWORD PTR out$2[rsp], rax

; 9756 :       }

  00e62	e9 72 fe ff ff	 jmp	 $LN44@convertBuf
$LN45@convertBuf:

; 9757 :     }
; 9758 :     else if (info.inFormat == RTAUDIO_SINT24) {

  00e67	e9 f6 05 00 00	 jmp	 $LN237@convertBuf
$LN236@convertBuf:
  00e6c	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00e74	83 78 0c 04	 cmp	 DWORD PTR [rax+12], 4
  00e78	0f 85 cf 01 00
	00		 jne	 $LN238@convertBuf

; 9759 :       Int24 *in = (Int24 *)inBuffer;

  00e7e	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  00e86	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR in$58[rsp], rax

; 9760 :       scale = (Float32) ( 1.0 / 8388607.5 );

  00e8e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@34000001
  00e96	f3 0f 11 44 24
	5c		 movss	 DWORD PTR scale$7[rsp], xmm0

; 9761 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  00e9c	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR i$13[rsp], 0
  00ea4	eb 0a		 jmp	 SHORT $LN52@convertBuf
$LN50@convertBuf:
  00ea6	8b 44 24 74	 mov	 eax, DWORD PTR i$13[rsp]
  00eaa	ff c0		 inc	 eax
  00eac	89 44 24 74	 mov	 DWORD PTR i$13[rsp], eax
$LN52@convertBuf:
  00eb0	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00eb8	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  00ebe	39 44 24 74	 cmp	 DWORD PTR i$13[rsp], eax
  00ec2	0f 83 80 01 00
	00		 jae	 $LN51@convertBuf

; 9762 :         for (j=0; j<info.channels; j++) {

  00ec8	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  00ed0	eb 0a		 jmp	 SHORT $LN55@convertBuf
$LN53@convertBuf:
  00ed2	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  00ed6	ff c0		 inc	 eax
  00ed8	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN55@convertBuf:
  00edc	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  00ee4	8b 00		 mov	 eax, DWORD PTR [rax]
  00ee6	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  00eea	0f 8d 13 01 00
	00		 jge	 $LN54@convertBuf

; 9763 :           out[info.outOffset[j]] = (Float32) (in[info.inOffset[j]].asInt());

  00ef0	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  00ef5	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  00efd	48 83 c1 18	 add	 rcx, 24
  00f01	48 8b d0	 mov	 rdx, rax
  00f04	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  00f09	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00f0c	48 6b c0 03	 imul	 rax, rax, 3
  00f10	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR in$58[rsp]
  00f18	48 03 c8	 add	 rcx, rax
  00f1b	48 8b c1	 mov	 rax, rcx
  00f1e	48 8b c8	 mov	 rcx, rax
  00f21	e8 00 00 00 00	 call	 ?asInt@S24@@QEAAHXZ	; S24::asInt
  00f26	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00f2a	f3 0f 11 84 24
	0c 01 00 00	 movss	 DWORD PTR tv554[rsp], xmm0
  00f33	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  00f38	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  00f40	48 83 c1 30	 add	 rcx, 48			; 00000030H
  00f44	48 8b d0	 mov	 rdx, rax
  00f47	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  00f4c	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00f4f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$2[rsp]
  00f54	f3 0f 10 84 24
	0c 01 00 00	 movss	 xmm0, DWORD PTR tv554[rsp]
  00f5d	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 9764 :           out[info.outOffset[j]] += 0.5;

  00f62	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  00f67	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  00f6f	48 83 c1 30	 add	 rcx, 48			; 00000030H
  00f73	48 8b d0	 mov	 rdx, rax
  00f76	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  00f7b	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00f7e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$2[rsp]
  00f83	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00f87	48 89 84 24 d8
	02 00 00	 mov	 QWORD PTR tv563[rsp], rax
  00f8f	48 8b 84 24 d8
	02 00 00	 mov	 rax, QWORD PTR tv563[rsp]
  00f97	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [rax]
  00f9b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  00fa3	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  00fa7	48 8b 84 24 d8
	02 00 00	 mov	 rax, QWORD PTR tv563[rsp]
  00faf	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 9765 :           out[info.outOffset[j]] *= scale;

  00fb3	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  00fb8	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  00fc0	48 83 c1 30	 add	 rcx, 48			; 00000030H
  00fc4	48 8b d0	 mov	 rdx, rax
  00fc7	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  00fcc	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00fcf	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$2[rsp]
  00fd4	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  00fd8	48 89 84 24 e0
	02 00 00	 mov	 QWORD PTR tv575[rsp], rax
  00fe0	48 8b 84 24 e0
	02 00 00	 mov	 rax, QWORD PTR tv575[rsp]
  00fe8	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  00fec	f3 0f 59 44 24
	5c		 mulss	 xmm0, DWORD PTR scale$7[rsp]
  00ff2	48 8b 84 24 e0
	02 00 00	 mov	 rax, QWORD PTR tv575[rsp]
  00ffa	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 9766 :         }

  00ffe	e9 cf fe ff ff	 jmp	 $LN53@convertBuf
$LN54@convertBuf:

; 9767 :         in += info.inJump;

  01003	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0100b	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0100f	48 6b c0 03	 imul	 rax, rax, 3
  01013	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR in$58[rsp]
  0101b	48 03 c8	 add	 rcx, rax
  0101e	48 8b c1	 mov	 rax, rcx
  01021	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR in$58[rsp], rax

; 9768 :         out += info.outJump;

  01029	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01031	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  01035	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$2[rsp]
  0103a	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  0103e	48 89 44 24 30	 mov	 QWORD PTR out$2[rsp], rax

; 9769 :       }

  01043	e9 5e fe ff ff	 jmp	 $LN50@convertBuf
$LN51@convertBuf:

; 9770 :     }
; 9771 :     else if (info.inFormat == RTAUDIO_SINT32) {

  01048	e9 15 04 00 00	 jmp	 $LN239@convertBuf
$LN238@convertBuf:
  0104d	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01055	83 78 0c 08	 cmp	 DWORD PTR [rax+12], 8
  01059	0f 85 b8 01 00
	00		 jne	 $LN240@convertBuf

; 9772 :       Int32 *in = (Int32 *)inBuffer;

  0105f	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  01067	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR in$59[rsp], rax

; 9773 :       scale = (Float32) ( 1.0 / 2147483647.5 );

  0106f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@30000000
  01077	f3 0f 11 44 24
	5c		 movss	 DWORD PTR scale$7[rsp], xmm0

; 9774 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  0107d	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR i$14[rsp], 0
  01085	eb 0a		 jmp	 SHORT $LN58@convertBuf
$LN56@convertBuf:
  01087	8b 44 24 78	 mov	 eax, DWORD PTR i$14[rsp]
  0108b	ff c0		 inc	 eax
  0108d	89 44 24 78	 mov	 DWORD PTR i$14[rsp], eax
$LN58@convertBuf:
  01091	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01099	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  0109f	39 44 24 78	 cmp	 DWORD PTR i$14[rsp], eax
  010a3	0f 83 69 01 00
	00		 jae	 $LN57@convertBuf

; 9775 :         for (j=0; j<info.channels; j++) {

  010a9	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  010b1	eb 0a		 jmp	 SHORT $LN61@convertBuf
$LN59@convertBuf:
  010b3	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  010b7	ff c0		 inc	 eax
  010b9	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN61@convertBuf:
  010bd	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  010c5	8b 00		 mov	 eax, DWORD PTR [rax]
  010c7	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  010cb	0f 8d 02 01 00
	00		 jge	 $LN60@convertBuf

; 9776 :           out[info.outOffset[j]] = (Float32) in[info.inOffset[j]];

  010d1	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  010d6	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  010de	48 83 c1 18	 add	 rcx, 24
  010e2	48 8b d0	 mov	 rdx, rax
  010e5	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  010ea	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  010ed	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR in$59[rsp]
  010f5	f3 0f 2a 04 81	 cvtsi2ss xmm0, DWORD PTR [rcx+rax*4]
  010fa	f3 0f 11 84 24
	10 01 00 00	 movss	 DWORD PTR tv610[rsp], xmm0
  01103	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  01108	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  01110	48 83 c1 30	 add	 rcx, 48			; 00000030H
  01114	48 8b d0	 mov	 rdx, rax
  01117	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  0111c	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0111f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$2[rsp]
  01124	f3 0f 10 84 24
	10 01 00 00	 movss	 xmm0, DWORD PTR tv610[rsp]
  0112d	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 9777 :           out[info.outOffset[j]] += 0.5;

  01132	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  01137	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  0113f	48 83 c1 30	 add	 rcx, 48			; 00000030H
  01143	48 8b d0	 mov	 rdx, rax
  01146	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  0114b	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0114e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$2[rsp]
  01153	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  01157	48 89 84 24 e8
	02 00 00	 mov	 QWORD PTR tv619[rsp], rax
  0115f	48 8b 84 24 e8
	02 00 00	 mov	 rax, QWORD PTR tv619[rsp]
  01167	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [rax]
  0116b	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3fe0000000000000
  01173	f2 0f 5a c0	 cvtsd2ss xmm0, xmm0
  01177	48 8b 84 24 e8
	02 00 00	 mov	 rax, QWORD PTR tv619[rsp]
  0117f	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 9778 :           out[info.outOffset[j]] *= scale;

  01183	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  01188	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  01190	48 83 c1 30	 add	 rcx, 48			; 00000030H
  01194	48 8b d0	 mov	 rdx, rax
  01197	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  0119c	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0119f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$2[rsp]
  011a4	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  011a8	48 89 84 24 f0
	02 00 00	 mov	 QWORD PTR tv631[rsp], rax
  011b0	48 8b 84 24 f0
	02 00 00	 mov	 rax, QWORD PTR tv631[rsp]
  011b8	f3 0f 10 00	 movss	 xmm0, DWORD PTR [rax]
  011bc	f3 0f 59 44 24
	5c		 mulss	 xmm0, DWORD PTR scale$7[rsp]
  011c2	48 8b 84 24 f0
	02 00 00	 mov	 rax, QWORD PTR tv631[rsp]
  011ca	f3 0f 11 00	 movss	 DWORD PTR [rax], xmm0

; 9779 :         }

  011ce	e9 e0 fe ff ff	 jmp	 $LN59@convertBuf
$LN60@convertBuf:

; 9780 :         in += info.inJump;

  011d3	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  011db	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  011df	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR in$59[rsp]
  011e7	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  011eb	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR in$59[rsp], rax

; 9781 :         out += info.outJump;

  011f3	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  011fb	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  011ff	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$2[rsp]
  01204	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  01208	48 89 44 24 30	 mov	 QWORD PTR out$2[rsp], rax

; 9782 :       }

  0120d	e9 75 fe ff ff	 jmp	 $LN56@convertBuf
$LN57@convertBuf:

; 9783 :     }
; 9784 :     else if (info.inFormat == RTAUDIO_FLOAT32) {

  01212	e9 4b 02 00 00	 jmp	 $LN241@convertBuf
$LN240@convertBuf:
  01217	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0121f	83 78 0c 10	 cmp	 DWORD PTR [rax+12], 16
  01223	0f 85 19 01 00
	00		 jne	 $LN242@convertBuf

; 9785 :       // Channel compensation and/or (de)interleaving only.
; 9786 :       Float32 *in = (Float32 *)inBuffer;

  01229	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  01231	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR in$60[rsp], rax

; 9787 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  01239	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR i$15[rsp], 0
  01241	eb 0a		 jmp	 SHORT $LN64@convertBuf
$LN62@convertBuf:
  01243	8b 44 24 7c	 mov	 eax, DWORD PTR i$15[rsp]
  01247	ff c0		 inc	 eax
  01249	89 44 24 7c	 mov	 DWORD PTR i$15[rsp], eax
$LN64@convertBuf:
  0124d	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01255	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  0125b	39 44 24 7c	 cmp	 DWORD PTR i$15[rsp], eax
  0125f	0f 83 d8 00 00
	00		 jae	 $LN63@convertBuf

; 9788 :         for (j=0; j<info.channels; j++) {

  01265	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  0126d	eb 0a		 jmp	 SHORT $LN67@convertBuf
$LN65@convertBuf:
  0126f	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  01273	ff c0		 inc	 eax
  01275	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN67@convertBuf:
  01279	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01281	8b 00		 mov	 eax, DWORD PTR [rax]
  01283	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  01287	7d 75		 jge	 SHORT $LN66@convertBuf

; 9789 :           out[info.outOffset[j]] = in[info.inOffset[j]];

  01289	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  0128e	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  01296	48 83 c1 18	 add	 rcx, 24
  0129a	48 8b d0	 mov	 rdx, rax
  0129d	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  012a2	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  012a5	48 89 84 24 58
	03 00 00	 mov	 QWORD PTR tv663[rsp], rax
  012ad	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR j$[rsp]
  012b2	48 8b 94 24 58
	04 00 00	 mov	 rdx, QWORD PTR info$[rsp]
  012ba	48 83 c2 30	 add	 rdx, 48			; 00000030H
  012be	48 89 94 24 50
	03 00 00	 mov	 QWORD PTR tv650[rsp], rdx
  012c6	48 8b d1	 mov	 rdx, rcx
  012c9	48 8b 8c 24 50
	03 00 00	 mov	 rcx, QWORD PTR tv650[rsp]
  012d1	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  012d6	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  012d9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$2[rsp]
  012de	48 8b 94 24 a8
	01 00 00	 mov	 rdx, QWORD PTR in$60[rsp]
  012e6	4c 8b 84 24 58
	03 00 00	 mov	 r8, QWORD PTR tv663[rsp]
  012ee	f3 42 0f 10 04
	82		 movss	 xmm0, DWORD PTR [rdx+r8*4]
  012f4	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 9790 :         }

  012f9	e9 71 ff ff ff	 jmp	 $LN65@convertBuf
$LN66@convertBuf:

; 9791 :         in += info.inJump;

  012fe	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01306	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0130a	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR in$60[rsp]
  01312	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  01316	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR in$60[rsp], rax

; 9792 :         out += info.outJump;

  0131e	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01326	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  0132a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$2[rsp]
  0132f	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  01333	48 89 44 24 30	 mov	 QWORD PTR out$2[rsp], rax

; 9793 :       }

  01338	e9 06 ff ff ff	 jmp	 $LN62@convertBuf
$LN63@convertBuf:

; 9794 :     }
; 9795 :     else if (info.inFormat == RTAUDIO_FLOAT64) {

  0133d	e9 20 01 00 00	 jmp	 $LN243@convertBuf
$LN242@convertBuf:
  01342	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0134a	83 78 0c 20	 cmp	 DWORD PTR [rax+12], 32	; 00000020H
  0134e	0f 85 0e 01 00
	00		 jne	 $LN244@convertBuf

; 9796 :       Float64 *in = (Float64 *)inBuffer;

  01354	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  0135c	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR in$61[rsp], rax

; 9797 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  01364	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$16[rsp], 0
  0136f	eb 10		 jmp	 SHORT $LN70@convertBuf
$LN68@convertBuf:
  01371	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR i$16[rsp]
  01378	ff c0		 inc	 eax
  0137a	89 84 24 80 00
	00 00		 mov	 DWORD PTR i$16[rsp], eax
$LN70@convertBuf:
  01381	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01389	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  0138f	39 84 24 80 00
	00 00		 cmp	 DWORD PTR i$16[rsp], eax
  01396	0f 83 c6 00 00
	00		 jae	 $LN69@convertBuf

; 9798 :         for (j=0; j<info.channels; j++) {

  0139c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  013a4	eb 0a		 jmp	 SHORT $LN73@convertBuf
$LN71@convertBuf:
  013a6	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  013aa	ff c0		 inc	 eax
  013ac	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN73@convertBuf:
  013b0	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  013b8	8b 00		 mov	 eax, DWORD PTR [rax]
  013ba	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  013be	7d 63		 jge	 SHORT $LN72@convertBuf

; 9799 :           out[info.outOffset[j]] = (Float32) in[info.inOffset[j]];

  013c0	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  013c5	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  013cd	48 83 c1 18	 add	 rcx, 24
  013d1	48 8b d0	 mov	 rdx, rax
  013d4	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  013d9	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  013dc	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR in$61[rsp]
  013e4	f2 0f 5a 04 c1	 cvtsd2ss xmm0, QWORD PTR [rcx+rax*8]
  013e9	f3 0f 11 84 24
	14 01 00 00	 movss	 DWORD PTR tv699[rsp], xmm0
  013f2	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  013f7	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  013ff	48 83 c1 30	 add	 rcx, 48			; 00000030H
  01403	48 8b d0	 mov	 rdx, rax
  01406	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  0140b	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0140e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$2[rsp]
  01413	f3 0f 10 84 24
	14 01 00 00	 movss	 xmm0, DWORD PTR tv699[rsp]
  0141c	f3 0f 11 04 81	 movss	 DWORD PTR [rcx+rax*4], xmm0

; 9800 :         }

  01421	eb 83		 jmp	 SHORT $LN71@convertBuf
$LN72@convertBuf:

; 9801 :         in += info.inJump;

  01423	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0142b	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0142f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR in$61[rsp]
  01437	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0143b	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR in$61[rsp], rax

; 9802 :         out += info.outJump;

  01443	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0144b	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  0144f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$2[rsp]
  01454	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  01458	48 89 44 24 30	 mov	 QWORD PTR out$2[rsp], rax

; 9803 :       }

  0145d	e9 0f ff ff ff	 jmp	 $LN68@convertBuf
$LN69@convertBuf:
$LN244@convertBuf:
$LN243@convertBuf:
$LN241@convertBuf:
$LN239@convertBuf:
$LN237@convertBuf:
$LN235@convertBuf:

; 9804 :     }
; 9805 :   }

  01462	e9 b2 1f 00 00	 jmp	 $LN233@convertBuf
$LN232@convertBuf:

; 9806 :   else if (info.outFormat == RTAUDIO_SINT32) {

  01467	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0146f	83 78 10 08	 cmp	 DWORD PTR [rax+16], 8
  01473	0f 85 55 08 00
	00		 jne	 $LN245@convertBuf

; 9807 :     Int32 *out = (Int32 *)outBuffer;

  01479	48 8b 84 24 48
	04 00 00	 mov	 rax, QWORD PTR outBuffer$[rsp]
  01481	48 89 44 24 38	 mov	 QWORD PTR out$3[rsp], rax

; 9808 :     if (info.inFormat == RTAUDIO_SINT8) {

  01486	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0148e	83 78 0c 01	 cmp	 DWORD PTR [rax+12], 1
  01492	0f 85 69 01 00
	00		 jne	 $LN247@convertBuf

; 9809 :       signed char *in = (signed char *)inBuffer;

  01498	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  014a0	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR in$62[rsp], rax

; 9810 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  014a8	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$17[rsp], 0
  014b3	eb 10		 jmp	 SHORT $LN76@convertBuf
$LN74@convertBuf:
  014b5	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$17[rsp]
  014bc	ff c0		 inc	 eax
  014be	89 84 24 84 00
	00 00		 mov	 DWORD PTR i$17[rsp], eax
$LN76@convertBuf:
  014c5	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  014cd	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  014d3	39 84 24 84 00
	00 00		 cmp	 DWORD PTR i$17[rsp], eax
  014da	0f 83 1c 01 00
	00		 jae	 $LN75@convertBuf

; 9811 :         for (j=0; j<info.channels; j++) {

  014e0	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  014e8	eb 0a		 jmp	 SHORT $LN79@convertBuf
$LN77@convertBuf:
  014ea	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  014ee	ff c0		 inc	 eax
  014f0	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN79@convertBuf:
  014f4	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  014fc	8b 00		 mov	 eax, DWORD PTR [rax]
  014fe	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  01502	0f 8d b3 00 00
	00		 jge	 $LN78@convertBuf

; 9812 :           out[info.outOffset[j]] = (Int32) in[info.inOffset[j]];

  01508	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  0150d	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  01515	48 83 c1 18	 add	 rcx, 24
  01519	48 8b d0	 mov	 rdx, rax
  0151c	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  01521	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  01524	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR in$62[rsp]
  0152c	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  01530	89 84 24 18 01
	00 00		 mov	 DWORD PTR tv767[rsp], eax
  01537	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR j$[rsp]
  0153c	48 8b 94 24 58
	04 00 00	 mov	 rdx, QWORD PTR info$[rsp]
  01544	48 83 c2 30	 add	 rdx, 48			; 00000030H
  01548	48 89 94 24 60
	03 00 00	 mov	 QWORD PTR tv751[rsp], rdx
  01550	48 8b d1	 mov	 rdx, rcx
  01553	48 8b 8c 24 60
	03 00 00	 mov	 rcx, QWORD PTR tv751[rsp]
  0155b	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  01560	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  01563	48 8b 4c 24 38	 mov	 rcx, QWORD PTR out$3[rsp]
  01568	8b 94 24 18 01
	00 00		 mov	 edx, DWORD PTR tv767[rsp]
  0156f	89 14 81	 mov	 DWORD PTR [rcx+rax*4], edx

; 9813 :           out[info.outOffset[j]] <<= 24;

  01572	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  01577	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  0157f	48 83 c1 30	 add	 rcx, 48			; 00000030H
  01583	48 8b d0	 mov	 rdx, rax
  01586	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  0158b	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0158e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR out$3[rsp]
  01593	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  01597	48 89 84 24 f8
	02 00 00	 mov	 QWORD PTR tv776[rsp], rax
  0159f	48 8b 84 24 f8
	02 00 00	 mov	 rax, QWORD PTR tv776[rsp]
  015a7	8b 00		 mov	 eax, DWORD PTR [rax]
  015a9	c1 e0 18	 shl	 eax, 24
  015ac	48 8b 8c 24 f8
	02 00 00	 mov	 rcx, QWORD PTR tv776[rsp]
  015b4	89 01		 mov	 DWORD PTR [rcx], eax

; 9814 :         }

  015b6	e9 2f ff ff ff	 jmp	 $LN77@convertBuf
$LN78@convertBuf:

; 9815 :         in += info.inJump;

  015bb	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  015c3	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  015c7	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR in$62[rsp]
  015cf	48 03 c8	 add	 rcx, rax
  015d2	48 8b c1	 mov	 rax, rcx
  015d5	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR in$62[rsp], rax

; 9816 :         out += info.outJump;

  015dd	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  015e5	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  015e9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR out$3[rsp]
  015ee	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  015f2	48 89 44 24 38	 mov	 QWORD PTR out$3[rsp], rax

; 9817 :       }

  015f7	e9 b9 fe ff ff	 jmp	 $LN74@convertBuf
$LN75@convertBuf:

; 9818 :     }
; 9819 :     else if (info.inFormat == RTAUDIO_SINT16) {

  015fc	e9 c8 06 00 00	 jmp	 $LN248@convertBuf
$LN247@convertBuf:
  01601	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01609	83 78 0c 02	 cmp	 DWORD PTR [rax+12], 2
  0160d	0f 85 67 01 00
	00		 jne	 $LN249@convertBuf

; 9820 :       Int16 *in = (Int16 *)inBuffer;

  01613	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  0161b	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR in$63[rsp], rax

; 9821 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  01623	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$18[rsp], 0
  0162e	eb 10		 jmp	 SHORT $LN82@convertBuf
$LN80@convertBuf:
  01630	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR i$18[rsp]
  01637	ff c0		 inc	 eax
  01639	89 84 24 88 00
	00 00		 mov	 DWORD PTR i$18[rsp], eax
$LN82@convertBuf:
  01640	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01648	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  0164e	39 84 24 88 00
	00 00		 cmp	 DWORD PTR i$18[rsp], eax
  01655	0f 83 1a 01 00
	00		 jae	 $LN81@convertBuf

; 9822 :         for (j=0; j<info.channels; j++) {

  0165b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  01663	eb 0a		 jmp	 SHORT $LN85@convertBuf
$LN83@convertBuf:
  01665	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  01669	ff c0		 inc	 eax
  0166b	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN85@convertBuf:
  0166f	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01677	8b 00		 mov	 eax, DWORD PTR [rax]
  01679	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  0167d	0f 8d b3 00 00
	00		 jge	 $LN84@convertBuf

; 9823 :           out[info.outOffset[j]] = (Int32) in[info.inOffset[j]];

  01683	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  01688	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  01690	48 83 c1 18	 add	 rcx, 24
  01694	48 8b d0	 mov	 rdx, rax
  01697	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  0169c	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0169f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR in$63[rsp]
  016a7	0f bf 04 41	 movsx	 eax, WORD PTR [rcx+rax*2]
  016ab	89 84 24 1c 01
	00 00		 mov	 DWORD PTR tv810[rsp], eax
  016b2	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR j$[rsp]
  016b7	48 8b 94 24 58
	04 00 00	 mov	 rdx, QWORD PTR info$[rsp]
  016bf	48 83 c2 30	 add	 rdx, 48			; 00000030H
  016c3	48 89 94 24 68
	03 00 00	 mov	 QWORD PTR tv794[rsp], rdx
  016cb	48 8b d1	 mov	 rdx, rcx
  016ce	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR tv794[rsp]
  016d6	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  016db	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  016de	48 8b 4c 24 38	 mov	 rcx, QWORD PTR out$3[rsp]
  016e3	8b 94 24 1c 01
	00 00		 mov	 edx, DWORD PTR tv810[rsp]
  016ea	89 14 81	 mov	 DWORD PTR [rcx+rax*4], edx

; 9824 :           out[info.outOffset[j]] <<= 16;

  016ed	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  016f2	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  016fa	48 83 c1 30	 add	 rcx, 48			; 00000030H
  016fe	48 8b d0	 mov	 rdx, rax
  01701	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  01706	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  01709	48 8b 4c 24 38	 mov	 rcx, QWORD PTR out$3[rsp]
  0170e	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  01712	48 89 84 24 00
	03 00 00	 mov	 QWORD PTR tv819[rsp], rax
  0171a	48 8b 84 24 00
	03 00 00	 mov	 rax, QWORD PTR tv819[rsp]
  01722	8b 00		 mov	 eax, DWORD PTR [rax]
  01724	c1 e0 10	 shl	 eax, 16
  01727	48 8b 8c 24 00
	03 00 00	 mov	 rcx, QWORD PTR tv819[rsp]
  0172f	89 01		 mov	 DWORD PTR [rcx], eax

; 9825 :         }

  01731	e9 2f ff ff ff	 jmp	 $LN83@convertBuf
$LN84@convertBuf:

; 9826 :         in += info.inJump;

  01736	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0173e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  01742	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR in$63[rsp]
  0174a	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  0174e	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR in$63[rsp], rax

; 9827 :         out += info.outJump;

  01756	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0175e	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  01762	48 8b 4c 24 38	 mov	 rcx, QWORD PTR out$3[rsp]
  01767	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  0176b	48 89 44 24 38	 mov	 QWORD PTR out$3[rsp], rax

; 9828 :       }

  01770	e9 bb fe ff ff	 jmp	 $LN80@convertBuf
$LN81@convertBuf:

; 9829 :     }
; 9830 :     else if (info.inFormat == RTAUDIO_SINT24) {

  01775	e9 4f 05 00 00	 jmp	 $LN250@convertBuf
$LN249@convertBuf:
  0177a	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01782	83 78 0c 04	 cmp	 DWORD PTR [rax+12], 4
  01786	0f 85 7b 01 00
	00		 jne	 $LN251@convertBuf

; 9831 :       Int24 *in = (Int24 *)inBuffer;

  0178c	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  01794	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR in$64[rsp], rax

; 9832 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  0179c	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$19[rsp], 0
  017a7	eb 10		 jmp	 SHORT $LN88@convertBuf
$LN86@convertBuf:
  017a9	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR i$19[rsp]
  017b0	ff c0		 inc	 eax
  017b2	89 84 24 8c 00
	00 00		 mov	 DWORD PTR i$19[rsp], eax
$LN88@convertBuf:
  017b9	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  017c1	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  017c7	39 84 24 8c 00
	00 00		 cmp	 DWORD PTR i$19[rsp], eax
  017ce	0f 83 2e 01 00
	00		 jae	 $LN87@convertBuf

; 9833 :         for (j=0; j<info.channels; j++) {

  017d4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  017dc	eb 0a		 jmp	 SHORT $LN91@convertBuf
$LN89@convertBuf:
  017de	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  017e2	ff c0		 inc	 eax
  017e4	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN91@convertBuf:
  017e8	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  017f0	8b 00		 mov	 eax, DWORD PTR [rax]
  017f2	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  017f6	0f 8d c1 00 00
	00		 jge	 $LN90@convertBuf

; 9834 :           out[info.outOffset[j]] = (Int32) in[info.inOffset[j]].asInt();

  017fc	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  01801	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  01809	48 83 c1 18	 add	 rcx, 24
  0180d	48 8b d0	 mov	 rdx, rax
  01810	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  01815	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  01818	48 6b c0 03	 imul	 rax, rax, 3
  0181c	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR in$64[rsp]
  01824	48 03 c8	 add	 rcx, rax
  01827	48 8b c1	 mov	 rax, rcx
  0182a	48 8b c8	 mov	 rcx, rax
  0182d	e8 00 00 00 00	 call	 ?asInt@S24@@QEAAHXZ	; S24::asInt
  01832	89 84 24 20 01
	00 00		 mov	 DWORD PTR tv855[rsp], eax
  01839	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR j$[rsp]
  0183e	48 8b 94 24 58
	04 00 00	 mov	 rdx, QWORD PTR info$[rsp]
  01846	48 83 c2 30	 add	 rdx, 48			; 00000030H
  0184a	48 89 94 24 70
	03 00 00	 mov	 QWORD PTR tv838[rsp], rdx
  01852	48 8b d1	 mov	 rdx, rcx
  01855	48 8b 8c 24 70
	03 00 00	 mov	 rcx, QWORD PTR tv838[rsp]
  0185d	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  01862	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  01865	48 8b 4c 24 38	 mov	 rcx, QWORD PTR out$3[rsp]
  0186a	8b 94 24 20 01
	00 00		 mov	 edx, DWORD PTR tv855[rsp]
  01871	89 14 81	 mov	 DWORD PTR [rcx+rax*4], edx

; 9835 :           out[info.outOffset[j]] <<= 8;

  01874	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  01879	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  01881	48 83 c1 30	 add	 rcx, 48			; 00000030H
  01885	48 8b d0	 mov	 rdx, rax
  01888	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  0188d	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  01890	48 8b 4c 24 38	 mov	 rcx, QWORD PTR out$3[rsp]
  01895	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  01899	48 89 84 24 08
	03 00 00	 mov	 QWORD PTR tv864[rsp], rax
  018a1	48 8b 84 24 08
	03 00 00	 mov	 rax, QWORD PTR tv864[rsp]
  018a9	8b 00		 mov	 eax, DWORD PTR [rax]
  018ab	c1 e0 08	 shl	 eax, 8
  018ae	48 8b 8c 24 08
	03 00 00	 mov	 rcx, QWORD PTR tv864[rsp]
  018b6	89 01		 mov	 DWORD PTR [rcx], eax

; 9836 :         }

  018b8	e9 21 ff ff ff	 jmp	 $LN89@convertBuf
$LN90@convertBuf:

; 9837 :         in += info.inJump;

  018bd	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  018c5	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  018c9	48 6b c0 03	 imul	 rax, rax, 3
  018cd	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR in$64[rsp]
  018d5	48 03 c8	 add	 rcx, rax
  018d8	48 8b c1	 mov	 rax, rcx
  018db	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR in$64[rsp], rax

; 9838 :         out += info.outJump;

  018e3	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  018eb	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  018ef	48 8b 4c 24 38	 mov	 rcx, QWORD PTR out$3[rsp]
  018f4	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  018f8	48 89 44 24 38	 mov	 QWORD PTR out$3[rsp], rax

; 9839 :       }

  018fd	e9 a7 fe ff ff	 jmp	 $LN86@convertBuf
$LN87@convertBuf:

; 9840 :     }
; 9841 :     else if (info.inFormat == RTAUDIO_SINT32) {

  01902	e9 c2 03 00 00	 jmp	 $LN252@convertBuf
$LN251@convertBuf:
  01907	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0190f	83 78 0c 08	 cmp	 DWORD PTR [rax+12], 8
  01913	0f 85 21 01 00
	00		 jne	 $LN253@convertBuf

; 9842 :       // Channel compensation and/or (de)interleaving only.
; 9843 :       Int32 *in = (Int32 *)inBuffer;

  01919	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  01921	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR in$65[rsp], rax

; 9844 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  01929	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$20[rsp], 0
  01934	eb 10		 jmp	 SHORT $LN94@convertBuf
$LN92@convertBuf:
  01936	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$20[rsp]
  0193d	ff c0		 inc	 eax
  0193f	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$20[rsp], eax
$LN94@convertBuf:
  01946	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0194e	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  01954	39 84 24 90 00
	00 00		 cmp	 DWORD PTR i$20[rsp], eax
  0195b	0f 83 d4 00 00
	00		 jae	 $LN93@convertBuf

; 9845 :         for (j=0; j<info.channels; j++) {

  01961	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  01969	eb 0a		 jmp	 SHORT $LN97@convertBuf
$LN95@convertBuf:
  0196b	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  0196f	ff c0		 inc	 eax
  01971	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN97@convertBuf:
  01975	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0197d	8b 00		 mov	 eax, DWORD PTR [rax]
  0197f	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  01983	7d 71		 jge	 SHORT $LN96@convertBuf

; 9846 :           out[info.outOffset[j]] = in[info.inOffset[j]];

  01985	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  0198a	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  01992	48 83 c1 18	 add	 rcx, 24
  01996	48 8b d0	 mov	 rdx, rax
  01999	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  0199e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  019a1	48 89 84 24 80
	03 00 00	 mov	 QWORD PTR tv896[rsp], rax
  019a9	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR j$[rsp]
  019ae	48 8b 94 24 58
	04 00 00	 mov	 rdx, QWORD PTR info$[rsp]
  019b6	48 83 c2 30	 add	 rdx, 48			; 00000030H
  019ba	48 89 94 24 78
	03 00 00	 mov	 QWORD PTR tv883[rsp], rdx
  019c2	48 8b d1	 mov	 rdx, rcx
  019c5	48 8b 8c 24 78
	03 00 00	 mov	 rcx, QWORD PTR tv883[rsp]
  019cd	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  019d2	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  019d5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR out$3[rsp]
  019da	48 8b 94 24 d0
	01 00 00	 mov	 rdx, QWORD PTR in$65[rsp]
  019e2	4c 8b 84 24 80
	03 00 00	 mov	 r8, QWORD PTR tv896[rsp]
  019ea	42 8b 14 82	 mov	 edx, DWORD PTR [rdx+r8*4]
  019ee	89 14 81	 mov	 DWORD PTR [rcx+rax*4], edx

; 9847 :         }

  019f1	e9 75 ff ff ff	 jmp	 $LN95@convertBuf
$LN96@convertBuf:

; 9848 :         in += info.inJump;

  019f6	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  019fe	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  01a02	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR in$65[rsp]
  01a0a	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  01a0e	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR in$65[rsp], rax

; 9849 :         out += info.outJump;

  01a16	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01a1e	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  01a22	48 8b 4c 24 38	 mov	 rcx, QWORD PTR out$3[rsp]
  01a27	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  01a2b	48 89 44 24 38	 mov	 QWORD PTR out$3[rsp], rax

; 9850 :       }

  01a30	e9 01 ff ff ff	 jmp	 $LN92@convertBuf
$LN93@convertBuf:

; 9851 :     }
; 9852 :     else if (info.inFormat == RTAUDIO_FLOAT32) {

  01a35	e9 8f 02 00 00	 jmp	 $LN254@convertBuf
$LN253@convertBuf:
  01a3a	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01a42	83 78 0c 10	 cmp	 DWORD PTR [rax+12], 16
  01a46	0f 85 38 01 00
	00		 jne	 $LN255@convertBuf

; 9853 :       Float32 *in = (Float32 *)inBuffer;

  01a4c	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  01a54	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR in$66[rsp], rax

; 9854 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  01a5c	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$21[rsp], 0
  01a67	eb 10		 jmp	 SHORT $LN100@convertBuf
$LN98@convertBuf:
  01a69	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR i$21[rsp]
  01a70	ff c0		 inc	 eax
  01a72	89 84 24 94 00
	00 00		 mov	 DWORD PTR i$21[rsp], eax
$LN100@convertBuf:
  01a79	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01a81	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  01a87	39 84 24 94 00
	00 00		 cmp	 DWORD PTR i$21[rsp], eax
  01a8e	0f 83 eb 00 00
	00		 jae	 $LN99@convertBuf

; 9855 :         for (j=0; j<info.channels; j++) {

  01a94	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  01a9c	eb 0a		 jmp	 SHORT $LN103@convertBuf
$LN101@convertBuf:
  01a9e	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  01aa2	ff c0		 inc	 eax
  01aa4	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN103@convertBuf:
  01aa8	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01ab0	8b 00		 mov	 eax, DWORD PTR [rax]
  01ab2	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  01ab6	0f 8d 84 00 00
	00		 jge	 $LN102@convertBuf

; 9856 :           out[info.outOffset[j]] = (Int32) (in[info.inOffset[j]] * 2147483647.5 - 0.5);

  01abc	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  01ac1	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  01ac9	48 83 c1 18	 add	 rcx, 24
  01acd	48 8b d0	 mov	 rdx, rax
  01ad0	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  01ad5	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  01ad8	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR in$66[rsp]
  01ae0	f3 0f 5a 04 81	 cvtss2sd xmm0, DWORD PTR [rcx+rax*4]
  01ae5	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@41dfffffffe00000
  01aed	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe0000000000000
  01af5	f2 0f 2c c0	 cvttsd2si eax, xmm0
  01af9	89 84 24 24 01
	00 00		 mov	 DWORD PTR tv936[rsp], eax
  01b00	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR j$[rsp]
  01b05	48 8b 94 24 58
	04 00 00	 mov	 rdx, QWORD PTR info$[rsp]
  01b0d	48 83 c2 30	 add	 rdx, 48			; 00000030H
  01b11	48 89 94 24 88
	03 00 00	 mov	 QWORD PTR tv916[rsp], rdx
  01b19	48 8b d1	 mov	 rdx, rcx
  01b1c	48 8b 8c 24 88
	03 00 00	 mov	 rcx, QWORD PTR tv916[rsp]
  01b24	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  01b29	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  01b2c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR out$3[rsp]
  01b31	8b 94 24 24 01
	00 00		 mov	 edx, DWORD PTR tv936[rsp]
  01b38	89 14 81	 mov	 DWORD PTR [rcx+rax*4], edx

; 9857 :         }

  01b3b	e9 5e ff ff ff	 jmp	 $LN101@convertBuf
$LN102@convertBuf:

; 9858 :         in += info.inJump;

  01b40	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01b48	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  01b4c	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR in$66[rsp]
  01b54	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  01b58	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR in$66[rsp], rax

; 9859 :         out += info.outJump;

  01b60	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01b68	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  01b6c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR out$3[rsp]
  01b71	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  01b75	48 89 44 24 38	 mov	 QWORD PTR out$3[rsp], rax

; 9860 :       }

  01b7a	e9 ea fe ff ff	 jmp	 $LN98@convertBuf
$LN99@convertBuf:

; 9861 :     }
; 9862 :     else if (info.inFormat == RTAUDIO_FLOAT64) {

  01b7f	e9 45 01 00 00	 jmp	 $LN256@convertBuf
$LN255@convertBuf:
  01b84	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01b8c	83 78 0c 20	 cmp	 DWORD PTR [rax+12], 32	; 00000020H
  01b90	0f 85 33 01 00
	00		 jne	 $LN257@convertBuf

; 9863 :       Float64 *in = (Float64 *)inBuffer;

  01b96	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  01b9e	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR in$67[rsp], rax

; 9864 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  01ba6	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22[rsp], 0
  01bb1	eb 10		 jmp	 SHORT $LN106@convertBuf
$LN104@convertBuf:
  01bb3	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR i$22[rsp]
  01bba	ff c0		 inc	 eax
  01bbc	89 84 24 98 00
	00 00		 mov	 DWORD PTR i$22[rsp], eax
$LN106@convertBuf:
  01bc3	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01bcb	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  01bd1	39 84 24 98 00
	00 00		 cmp	 DWORD PTR i$22[rsp], eax
  01bd8	0f 83 eb 00 00
	00		 jae	 $LN105@convertBuf

; 9865 :         for (j=0; j<info.channels; j++) {

  01bde	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  01be6	eb 0a		 jmp	 SHORT $LN109@convertBuf
$LN107@convertBuf:
  01be8	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  01bec	ff c0		 inc	 eax
  01bee	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN109@convertBuf:
  01bf2	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01bfa	8b 00		 mov	 eax, DWORD PTR [rax]
  01bfc	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  01c00	0f 8d 84 00 00
	00		 jge	 $LN108@convertBuf

; 9866 :           out[info.outOffset[j]] = (Int32) (in[info.inOffset[j]] * 2147483647.5 - 0.5);

  01c06	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  01c0b	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  01c13	48 83 c1 18	 add	 rcx, 24
  01c17	48 8b d0	 mov	 rdx, rax
  01c1a	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  01c1f	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  01c22	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR in$67[rsp]
  01c2a	f2 0f 10 04 c1	 movsd	 xmm0, QWORD PTR [rcx+rax*8]
  01c2f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@41dfffffffe00000
  01c37	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe0000000000000
  01c3f	f2 0f 2c c0	 cvttsd2si eax, xmm0
  01c43	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv973[rsp], eax
  01c4a	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR j$[rsp]
  01c4f	48 8b 94 24 58
	04 00 00	 mov	 rdx, QWORD PTR info$[rsp]
  01c57	48 83 c2 30	 add	 rdx, 48			; 00000030H
  01c5b	48 89 94 24 90
	03 00 00	 mov	 QWORD PTR tv954[rsp], rdx
  01c63	48 8b d1	 mov	 rdx, rcx
  01c66	48 8b 8c 24 90
	03 00 00	 mov	 rcx, QWORD PTR tv954[rsp]
  01c6e	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  01c73	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  01c76	48 8b 4c 24 38	 mov	 rcx, QWORD PTR out$3[rsp]
  01c7b	8b 94 24 28 01
	00 00		 mov	 edx, DWORD PTR tv973[rsp]
  01c82	89 14 81	 mov	 DWORD PTR [rcx+rax*4], edx

; 9867 :         }

  01c85	e9 5e ff ff ff	 jmp	 $LN107@convertBuf
$LN108@convertBuf:

; 9868 :         in += info.inJump;

  01c8a	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01c92	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  01c96	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR in$67[rsp]
  01c9e	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01ca2	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR in$67[rsp], rax

; 9869 :         out += info.outJump;

  01caa	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01cb2	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  01cb6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR out$3[rsp]
  01cbb	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  01cbf	48 89 44 24 38	 mov	 QWORD PTR out$3[rsp], rax

; 9870 :       }

  01cc4	e9 ea fe ff ff	 jmp	 $LN104@convertBuf
$LN105@convertBuf:
$LN257@convertBuf:
$LN256@convertBuf:
$LN254@convertBuf:
$LN252@convertBuf:
$LN250@convertBuf:
$LN248@convertBuf:

; 9871 :     }
; 9872 :   }

  01cc9	e9 4b 17 00 00	 jmp	 $LN246@convertBuf
$LN245@convertBuf:

; 9873 :   else if (info.outFormat == RTAUDIO_SINT24) {

  01cce	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01cd6	83 78 10 04	 cmp	 DWORD PTR [rax+16], 4
  01cda	0f 85 af 07 00
	00		 jne	 $LN258@convertBuf

; 9874 :     Int24 *out = (Int24 *)outBuffer;

  01ce0	48 8b 84 24 48
	04 00 00	 mov	 rax, QWORD PTR outBuffer$[rsp]
  01ce8	48 89 44 24 48	 mov	 QWORD PTR out$5[rsp], rax

; 9875 :     if (info.inFormat == RTAUDIO_SINT8) {

  01ced	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01cf5	83 78 0c 01	 cmp	 DWORD PTR [rax+12], 1
  01cf9	0f 85 2a 01 00
	00		 jne	 $LN260@convertBuf

; 9876 :       signed char *in = (signed char *)inBuffer;

  01cff	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  01d07	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR in$68[rsp], rax

; 9877 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  01d0f	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$23[rsp], 0
  01d1a	eb 10		 jmp	 SHORT $LN112@convertBuf
$LN110@convertBuf:
  01d1c	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR i$23[rsp]
  01d23	ff c0		 inc	 eax
  01d25	89 84 24 9c 00
	00 00		 mov	 DWORD PTR i$23[rsp], eax
$LN112@convertBuf:
  01d2c	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01d34	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  01d3a	39 84 24 9c 00
	00 00		 cmp	 DWORD PTR i$23[rsp], eax
  01d41	0f 83 dd 00 00
	00		 jae	 $LN111@convertBuf

; 9878 :         for (j=0; j<info.channels; j++) {

  01d47	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  01d4f	eb 0a		 jmp	 SHORT $LN115@convertBuf
$LN113@convertBuf:
  01d51	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  01d55	ff c0		 inc	 eax
  01d57	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN115@convertBuf:
  01d5b	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01d63	8b 00		 mov	 eax, DWORD PTR [rax]
  01d65	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  01d69	7d 72		 jge	 SHORT $LN114@convertBuf

; 9879 :           out[info.outOffset[j]] = (Int32) (in[info.inOffset[j]] << 16);

  01d6b	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  01d70	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  01d78	48 83 c1 18	 add	 rcx, 24
  01d7c	48 8b d0	 mov	 rdx, rax
  01d7f	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  01d84	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  01d87	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR in$68[rsp]
  01d8f	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  01d93	c1 e0 10	 shl	 eax, 16
  01d96	89 84 24 2c 01
	00 00		 mov	 DWORD PTR $T45[rsp], eax
  01d9d	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  01da2	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  01daa	48 83 c1 30	 add	 rcx, 48			; 00000030H
  01dae	48 8b d0	 mov	 rdx, rax
  01db1	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  01db6	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  01db9	48 6b c0 03	 imul	 rax, rax, 3
  01dbd	48 8b 4c 24 48	 mov	 rcx, QWORD PTR out$5[rsp]
  01dc2	48 03 c8	 add	 rcx, rax
  01dc5	48 8b c1	 mov	 rax, rcx
  01dc8	48 8d 94 24 2c
	01 00 00	 lea	 rdx, QWORD PTR $T45[rsp]
  01dd0	48 8b c8	 mov	 rcx, rax
  01dd3	e8 00 00 00 00	 call	 ??4S24@@QEAAAEAV0@AEBH@Z ; S24::operator=

; 9880 :           //out[info.outOffset[j]] <<= 16;
; 9881 :         }

  01dd8	e9 74 ff ff ff	 jmp	 $LN113@convertBuf
$LN114@convertBuf:

; 9882 :         in += info.inJump;

  01ddd	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01de5	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  01de9	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR in$68[rsp]
  01df1	48 03 c8	 add	 rcx, rax
  01df4	48 8b c1	 mov	 rax, rcx
  01df7	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR in$68[rsp], rax

; 9883 :         out += info.outJump;

  01dff	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01e07	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  01e0b	48 6b c0 03	 imul	 rax, rax, 3
  01e0f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR out$5[rsp]
  01e14	48 03 c8	 add	 rcx, rax
  01e17	48 8b c1	 mov	 rax, rcx
  01e1a	48 89 44 24 48	 mov	 QWORD PTR out$5[rsp], rax

; 9884 :       }

  01e1f	e9 f8 fe ff ff	 jmp	 $LN110@convertBuf
$LN111@convertBuf:

; 9885 :     }
; 9886 :     else if (info.inFormat == RTAUDIO_SINT16) {

  01e24	e9 61 06 00 00	 jmp	 $LN261@convertBuf
$LN260@convertBuf:
  01e29	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01e31	83 78 0c 02	 cmp	 DWORD PTR [rax+12], 2
  01e35	0f 85 28 01 00
	00		 jne	 $LN262@convertBuf

; 9887 :       Int16 *in = (Int16 *)inBuffer;

  01e3b	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  01e43	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR in$69[rsp], rax

; 9888 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  01e4b	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$24[rsp], 0
  01e56	eb 10		 jmp	 SHORT $LN118@convertBuf
$LN116@convertBuf:
  01e58	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR i$24[rsp]
  01e5f	ff c0		 inc	 eax
  01e61	89 84 24 a0 00
	00 00		 mov	 DWORD PTR i$24[rsp], eax
$LN118@convertBuf:
  01e68	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01e70	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  01e76	39 84 24 a0 00
	00 00		 cmp	 DWORD PTR i$24[rsp], eax
  01e7d	0f 83 db 00 00
	00		 jae	 $LN117@convertBuf

; 9889 :         for (j=0; j<info.channels; j++) {

  01e83	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  01e8b	eb 0a		 jmp	 SHORT $LN121@convertBuf
$LN119@convertBuf:
  01e8d	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  01e91	ff c0		 inc	 eax
  01e93	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN121@convertBuf:
  01e97	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01e9f	8b 00		 mov	 eax, DWORD PTR [rax]
  01ea1	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  01ea5	7d 72		 jge	 SHORT $LN120@convertBuf

; 9890 :           out[info.outOffset[j]] = (Int32) (in[info.inOffset[j]] << 8);

  01ea7	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  01eac	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  01eb4	48 83 c1 18	 add	 rcx, 24
  01eb8	48 8b d0	 mov	 rdx, rax
  01ebb	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  01ec0	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  01ec3	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR in$69[rsp]
  01ecb	0f bf 04 41	 movsx	 eax, WORD PTR [rcx+rax*2]
  01ecf	c1 e0 08	 shl	 eax, 8
  01ed2	89 84 24 30 01
	00 00		 mov	 DWORD PTR $T46[rsp], eax
  01ed9	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  01ede	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  01ee6	48 83 c1 30	 add	 rcx, 48			; 00000030H
  01eea	48 8b d0	 mov	 rdx, rax
  01eed	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  01ef2	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  01ef5	48 6b c0 03	 imul	 rax, rax, 3
  01ef9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR out$5[rsp]
  01efe	48 03 c8	 add	 rcx, rax
  01f01	48 8b c1	 mov	 rax, rcx
  01f04	48 8d 94 24 30
	01 00 00	 lea	 rdx, QWORD PTR $T46[rsp]
  01f0c	48 8b c8	 mov	 rcx, rax
  01f0f	e8 00 00 00 00	 call	 ??4S24@@QEAAAEAV0@AEBH@Z ; S24::operator=

; 9891 :           //out[info.outOffset[j]] <<= 8;
; 9892 :         }

  01f14	e9 74 ff ff ff	 jmp	 $LN119@convertBuf
$LN120@convertBuf:

; 9893 :         in += info.inJump;

  01f19	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01f21	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  01f25	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR in$69[rsp]
  01f2d	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  01f31	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR in$69[rsp], rax

; 9894 :         out += info.outJump;

  01f39	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01f41	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  01f45	48 6b c0 03	 imul	 rax, rax, 3
  01f49	48 8b 4c 24 48	 mov	 rcx, QWORD PTR out$5[rsp]
  01f4e	48 03 c8	 add	 rcx, rax
  01f51	48 8b c1	 mov	 rax, rcx
  01f54	48 89 44 24 48	 mov	 QWORD PTR out$5[rsp], rax

; 9895 :       }

  01f59	e9 fa fe ff ff	 jmp	 $LN116@convertBuf
$LN117@convertBuf:

; 9896 :     }
; 9897 :     else if (info.inFormat == RTAUDIO_SINT24) {

  01f5e	e9 27 05 00 00	 jmp	 $LN263@convertBuf
$LN262@convertBuf:
  01f63	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01f6b	83 78 0c 04	 cmp	 DWORD PTR [rax+12], 4
  01f6f	0f 85 41 01 00
	00		 jne	 $LN264@convertBuf

; 9898 :       // Channel compensation and/or (de)interleaving only.
; 9899 :       Int24 *in = (Int24 *)inBuffer;

  01f75	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  01f7d	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR in$70[rsp], rax

; 9900 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  01f85	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$25[rsp], 0
  01f90	eb 10		 jmp	 SHORT $LN124@convertBuf
$LN122@convertBuf:
  01f92	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR i$25[rsp]
  01f99	ff c0		 inc	 eax
  01f9b	89 84 24 a4 00
	00 00		 mov	 DWORD PTR i$25[rsp], eax
$LN124@convertBuf:
  01fa2	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  01faa	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  01fb0	39 84 24 a4 00
	00 00		 cmp	 DWORD PTR i$25[rsp], eax
  01fb7	0f 83 f4 00 00
	00		 jae	 $LN123@convertBuf

; 9901 :         for (j=0; j<info.channels; j++) {

  01fbd	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  01fc5	eb 0a		 jmp	 SHORT $LN127@convertBuf
$LN125@convertBuf:
  01fc7	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  01fcb	ff c0		 inc	 eax
  01fcd	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN127@convertBuf:
  01fd1	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  01fd9	8b 00		 mov	 eax, DWORD PTR [rax]
  01fdb	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  01fdf	0f 8d 81 00 00
	00		 jge	 $LN126@convertBuf

; 9902 :           out[info.outOffset[j]] = in[info.inOffset[j]];

  01fe5	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  01fea	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  01ff2	48 83 c1 18	 add	 rcx, 24
  01ff6	48 8b d0	 mov	 rdx, rax
  01ff9	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  01ffe	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  02001	48 6b c0 03	 imul	 rax, rax, 3
  02005	48 89 84 24 a0
	03 00 00	 mov	 QWORD PTR tv1080[rsp], rax
  0200d	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR j$[rsp]
  02012	48 8b 94 24 58
	04 00 00	 mov	 rdx, QWORD PTR info$[rsp]
  0201a	48 83 c2 30	 add	 rdx, 48			; 00000030H
  0201e	48 89 94 24 98
	03 00 00	 mov	 QWORD PTR tv1066[rsp], rdx
  02026	48 8b d1	 mov	 rdx, rcx
  02029	48 8b 8c 24 98
	03 00 00	 mov	 rcx, QWORD PTR tv1066[rsp]
  02031	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  02036	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  02039	48 6b c0 03	 imul	 rax, rax, 3
  0203d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR out$5[rsp]
  02042	48 8b 94 24 f8
	01 00 00	 mov	 rdx, QWORD PTR in$70[rsp]
  0204a	48 8d 3c 01	 lea	 rdi, QWORD PTR [rcx+rax]
  0204e	48 8b 84 24 a0
	03 00 00	 mov	 rax, QWORD PTR tv1080[rsp]
  02056	48 8d 34 02	 lea	 rsi, QWORD PTR [rdx+rax]
  0205a	b9 03 00 00 00	 mov	 ecx, 3
  0205f	f3 a4		 rep movsb

; 9903 :         }

  02061	e9 61 ff ff ff	 jmp	 $LN125@convertBuf
$LN126@convertBuf:

; 9904 :         in += info.inJump;

  02066	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0206e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  02072	48 6b c0 03	 imul	 rax, rax, 3
  02076	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR in$70[rsp]
  0207e	48 03 c8	 add	 rcx, rax
  02081	48 8b c1	 mov	 rax, rcx
  02084	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR in$70[rsp], rax

; 9905 :         out += info.outJump;

  0208c	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02094	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  02098	48 6b c0 03	 imul	 rax, rax, 3
  0209c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR out$5[rsp]
  020a1	48 03 c8	 add	 rcx, rax
  020a4	48 8b c1	 mov	 rax, rcx
  020a7	48 89 44 24 48	 mov	 QWORD PTR out$5[rsp], rax

; 9906 :       }

  020ac	e9 e1 fe ff ff	 jmp	 $LN122@convertBuf
$LN123@convertBuf:

; 9907 :     }
; 9908 :     else if (info.inFormat == RTAUDIO_SINT32) {

  020b1	e9 d4 03 00 00	 jmp	 $LN265@convertBuf
$LN264@convertBuf:
  020b6	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  020be	83 78 0c 08	 cmp	 DWORD PTR [rax+12], 8
  020c2	0f 85 27 01 00
	00		 jne	 $LN266@convertBuf

; 9909 :       Int32 *in = (Int32 *)inBuffer;

  020c8	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  020d0	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR in$71[rsp], rax

; 9910 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  020d8	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$26[rsp], 0
  020e3	eb 10		 jmp	 SHORT $LN130@convertBuf
$LN128@convertBuf:
  020e5	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR i$26[rsp]
  020ec	ff c0		 inc	 eax
  020ee	89 84 24 a8 00
	00 00		 mov	 DWORD PTR i$26[rsp], eax
$LN130@convertBuf:
  020f5	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  020fd	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  02103	39 84 24 a8 00
	00 00		 cmp	 DWORD PTR i$26[rsp], eax
  0210a	0f 83 da 00 00
	00		 jae	 $LN129@convertBuf

; 9911 :         for (j=0; j<info.channels; j++) {

  02110	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  02118	eb 0a		 jmp	 SHORT $LN133@convertBuf
$LN131@convertBuf:
  0211a	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  0211e	ff c0		 inc	 eax
  02120	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN133@convertBuf:
  02124	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0212c	8b 00		 mov	 eax, DWORD PTR [rax]
  0212e	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  02132	7d 71		 jge	 SHORT $LN132@convertBuf

; 9912 :           out[info.outOffset[j]] = (Int32) (in[info.inOffset[j]] >> 8);

  02134	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  02139	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  02141	48 83 c1 18	 add	 rcx, 24
  02145	48 8b d0	 mov	 rdx, rax
  02148	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  0214d	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  02150	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR in$71[rsp]
  02158	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  0215b	c1 f8 08	 sar	 eax, 8
  0215e	89 84 24 34 01
	00 00		 mov	 DWORD PTR $T47[rsp], eax
  02165	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  0216a	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  02172	48 83 c1 30	 add	 rcx, 48			; 00000030H
  02176	48 8b d0	 mov	 rdx, rax
  02179	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  0217e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  02181	48 6b c0 03	 imul	 rax, rax, 3
  02185	48 8b 4c 24 48	 mov	 rcx, QWORD PTR out$5[rsp]
  0218a	48 03 c8	 add	 rcx, rax
  0218d	48 8b c1	 mov	 rax, rcx
  02190	48 8d 94 24 34
	01 00 00	 lea	 rdx, QWORD PTR $T47[rsp]
  02198	48 8b c8	 mov	 rcx, rax
  0219b	e8 00 00 00 00	 call	 ??4S24@@QEAAAEAV0@AEBH@Z ; S24::operator=

; 9913 :           //out[info.outOffset[j]] >>= 8;
; 9914 :         }

  021a0	e9 75 ff ff ff	 jmp	 $LN131@convertBuf
$LN132@convertBuf:

; 9915 :         in += info.inJump;

  021a5	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  021ad	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  021b1	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR in$71[rsp]
  021b9	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  021bd	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR in$71[rsp], rax

; 9916 :         out += info.outJump;

  021c5	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  021cd	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  021d1	48 6b c0 03	 imul	 rax, rax, 3
  021d5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR out$5[rsp]
  021da	48 03 c8	 add	 rcx, rax
  021dd	48 8b c1	 mov	 rax, rcx
  021e0	48 89 44 24 48	 mov	 QWORD PTR out$5[rsp], rax

; 9917 :       }

  021e5	e9 fb fe ff ff	 jmp	 $LN128@convertBuf
$LN129@convertBuf:

; 9918 :     }
; 9919 :     else if (info.inFormat == RTAUDIO_FLOAT32) {

  021ea	e9 9b 02 00 00	 jmp	 $LN267@convertBuf
$LN266@convertBuf:
  021ef	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  021f7	83 78 0c 10	 cmp	 DWORD PTR [rax+12], 16
  021fb	0f 85 3e 01 00
	00		 jne	 $LN268@convertBuf

; 9920 :       Float32 *in = (Float32 *)inBuffer;

  02201	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  02209	48 89 84 24 08
	02 00 00	 mov	 QWORD PTR in$72[rsp], rax

; 9921 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  02211	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$27[rsp], 0
  0221c	eb 10		 jmp	 SHORT $LN136@convertBuf
$LN134@convertBuf:
  0221e	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR i$27[rsp]
  02225	ff c0		 inc	 eax
  02227	89 84 24 ac 00
	00 00		 mov	 DWORD PTR i$27[rsp], eax
$LN136@convertBuf:
  0222e	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  02236	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  0223c	39 84 24 ac 00
	00 00		 cmp	 DWORD PTR i$27[rsp], eax
  02243	0f 83 f1 00 00
	00		 jae	 $LN135@convertBuf

; 9922 :         for (j=0; j<info.channels; j++) {

  02249	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  02251	eb 0a		 jmp	 SHORT $LN139@convertBuf
$LN137@convertBuf:
  02253	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  02257	ff c0		 inc	 eax
  02259	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN139@convertBuf:
  0225d	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02265	8b 00		 mov	 eax, DWORD PTR [rax]
  02267	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  0226b	0f 8d 84 00 00
	00		 jge	 $LN138@convertBuf

; 9923 :           out[info.outOffset[j]] = (Int32) (in[info.inOffset[j]] * 8388607.5 - 0.5);

  02271	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  02276	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  0227e	48 83 c1 18	 add	 rcx, 24
  02282	48 8b d0	 mov	 rdx, rax
  02285	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  0228a	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0228d	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR in$72[rsp]
  02295	f3 0f 5a 04 81	 cvtss2sd xmm0, DWORD PTR [rcx+rax*4]
  0229a	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@415fffffe0000000
  022a2	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe0000000000000
  022aa	f2 0f 2c c0	 cvttsd2si eax, xmm0
  022ae	89 84 24 38 01
	00 00		 mov	 DWORD PTR $T48[rsp], eax
  022b5	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  022ba	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  022c2	48 83 c1 30	 add	 rcx, 48			; 00000030H
  022c6	48 8b d0	 mov	 rdx, rax
  022c9	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  022ce	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  022d1	48 6b c0 03	 imul	 rax, rax, 3
  022d5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR out$5[rsp]
  022da	48 03 c8	 add	 rcx, rax
  022dd	48 8b c1	 mov	 rax, rcx
  022e0	48 8d 94 24 38
	01 00 00	 lea	 rdx, QWORD PTR $T48[rsp]
  022e8	48 8b c8	 mov	 rcx, rax
  022eb	e8 00 00 00 00	 call	 ??4S24@@QEAAAEAV0@AEBH@Z ; S24::operator=

; 9924 :         }

  022f0	e9 5e ff ff ff	 jmp	 $LN137@convertBuf
$LN138@convertBuf:

; 9925 :         in += info.inJump;

  022f5	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  022fd	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  02301	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR in$72[rsp]
  02309	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  0230d	48 89 84 24 08
	02 00 00	 mov	 QWORD PTR in$72[rsp], rax

; 9926 :         out += info.outJump;

  02315	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0231d	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  02321	48 6b c0 03	 imul	 rax, rax, 3
  02325	48 8b 4c 24 48	 mov	 rcx, QWORD PTR out$5[rsp]
  0232a	48 03 c8	 add	 rcx, rax
  0232d	48 8b c1	 mov	 rax, rcx
  02330	48 89 44 24 48	 mov	 QWORD PTR out$5[rsp], rax

; 9927 :       }

  02335	e9 e4 fe ff ff	 jmp	 $LN134@convertBuf
$LN135@convertBuf:

; 9928 :     }
; 9929 :     else if (info.inFormat == RTAUDIO_FLOAT64) {

  0233a	e9 4b 01 00 00	 jmp	 $LN269@convertBuf
$LN268@convertBuf:
  0233f	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02347	83 78 0c 20	 cmp	 DWORD PTR [rax+12], 32	; 00000020H
  0234b	0f 85 39 01 00
	00		 jne	 $LN270@convertBuf

; 9930 :       Float64 *in = (Float64 *)inBuffer;

  02351	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  02359	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR in$73[rsp], rax

; 9931 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  02361	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$28[rsp], 0
  0236c	eb 10		 jmp	 SHORT $LN142@convertBuf
$LN140@convertBuf:
  0236e	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR i$28[rsp]
  02375	ff c0		 inc	 eax
  02377	89 84 24 b0 00
	00 00		 mov	 DWORD PTR i$28[rsp], eax
$LN142@convertBuf:
  0237e	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  02386	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  0238c	39 84 24 b0 00
	00 00		 cmp	 DWORD PTR i$28[rsp], eax
  02393	0f 83 f1 00 00
	00		 jae	 $LN141@convertBuf

; 9932 :         for (j=0; j<info.channels; j++) {

  02399	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  023a1	eb 0a		 jmp	 SHORT $LN145@convertBuf
$LN143@convertBuf:
  023a3	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  023a7	ff c0		 inc	 eax
  023a9	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN145@convertBuf:
  023ad	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  023b5	8b 00		 mov	 eax, DWORD PTR [rax]
  023b7	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  023bb	0f 8d 84 00 00
	00		 jge	 $LN144@convertBuf

; 9933 :           out[info.outOffset[j]] = (Int32) (in[info.inOffset[j]] * 8388607.5 - 0.5);

  023c1	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  023c6	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  023ce	48 83 c1 18	 add	 rcx, 24
  023d2	48 8b d0	 mov	 rdx, rax
  023d5	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  023da	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  023dd	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR in$73[rsp]
  023e5	f2 0f 10 04 c1	 movsd	 xmm0, QWORD PTR [rcx+rax*8]
  023ea	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@415fffffe0000000
  023f2	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe0000000000000
  023fa	f2 0f 2c c0	 cvttsd2si eax, xmm0
  023fe	89 84 24 3c 01
	00 00		 mov	 DWORD PTR $T49[rsp], eax
  02405	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  0240a	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  02412	48 83 c1 30	 add	 rcx, 48			; 00000030H
  02416	48 8b d0	 mov	 rdx, rax
  02419	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  0241e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  02421	48 6b c0 03	 imul	 rax, rax, 3
  02425	48 8b 4c 24 48	 mov	 rcx, QWORD PTR out$5[rsp]
  0242a	48 03 c8	 add	 rcx, rax
  0242d	48 8b c1	 mov	 rax, rcx
  02430	48 8d 94 24 3c
	01 00 00	 lea	 rdx, QWORD PTR $T49[rsp]
  02438	48 8b c8	 mov	 rcx, rax
  0243b	e8 00 00 00 00	 call	 ??4S24@@QEAAAEAV0@AEBH@Z ; S24::operator=

; 9934 :         }

  02440	e9 5e ff ff ff	 jmp	 $LN143@convertBuf
$LN144@convertBuf:

; 9935 :         in += info.inJump;

  02445	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0244d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  02451	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR in$73[rsp]
  02459	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0245d	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR in$73[rsp], rax

; 9936 :         out += info.outJump;

  02465	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0246d	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  02471	48 6b c0 03	 imul	 rax, rax, 3
  02475	48 8b 4c 24 48	 mov	 rcx, QWORD PTR out$5[rsp]
  0247a	48 03 c8	 add	 rcx, rax
  0247d	48 8b c1	 mov	 rax, rcx
  02480	48 89 44 24 48	 mov	 QWORD PTR out$5[rsp], rax

; 9937 :       }

  02485	e9 e4 fe ff ff	 jmp	 $LN140@convertBuf
$LN141@convertBuf:
$LN270@convertBuf:
$LN269@convertBuf:
$LN267@convertBuf:
$LN265@convertBuf:
$LN263@convertBuf:
$LN261@convertBuf:

; 9938 :     }
; 9939 :   }

  0248a	e9 8a 0f 00 00	 jmp	 $LN259@convertBuf
$LN258@convertBuf:

; 9940 :   else if (info.outFormat == RTAUDIO_SINT16) {

  0248f	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02497	83 78 10 02	 cmp	 DWORD PTR [rax+16], 2
  0249b	0f 85 e3 07 00
	00		 jne	 $LN271@convertBuf

; 9941 :     Int16 *out = (Int16 *)outBuffer;

  024a1	48 8b 84 24 48
	04 00 00	 mov	 rax, QWORD PTR outBuffer$[rsp]
  024a9	48 89 44 24 40	 mov	 QWORD PTR out$4[rsp], rax

; 9942 :     if (info.inFormat == RTAUDIO_SINT8) {

  024ae	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  024b6	83 78 0c 01	 cmp	 DWORD PTR [rax+12], 1
  024ba	0f 85 70 01 00
	00		 jne	 $LN273@convertBuf

; 9943 :       signed char *in = (signed char *)inBuffer;

  024c0	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  024c8	48 89 84 24 18
	02 00 00	 mov	 QWORD PTR in$74[rsp], rax

; 9944 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  024d0	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$29[rsp], 0
  024db	eb 10		 jmp	 SHORT $LN148@convertBuf
$LN146@convertBuf:
  024dd	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR i$29[rsp]
  024e4	ff c0		 inc	 eax
  024e6	89 84 24 b4 00
	00 00		 mov	 DWORD PTR i$29[rsp], eax
$LN148@convertBuf:
  024ed	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  024f5	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  024fb	39 84 24 b4 00
	00 00		 cmp	 DWORD PTR i$29[rsp], eax
  02502	0f 83 23 01 00
	00		 jae	 $LN147@convertBuf

; 9945 :         for (j=0; j<info.channels; j++) {

  02508	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  02510	eb 0a		 jmp	 SHORT $LN151@convertBuf
$LN149@convertBuf:
  02512	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  02516	ff c0		 inc	 eax
  02518	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN151@convertBuf:
  0251c	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02524	8b 00		 mov	 eax, DWORD PTR [rax]
  02526	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  0252a	0f 8d ba 00 00
	00		 jge	 $LN150@convertBuf

; 9946 :           out[info.outOffset[j]] = (Int16) in[info.inOffset[j]];

  02530	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  02535	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  0253d	48 83 c1 18	 add	 rcx, 24
  02541	48 8b d0	 mov	 rdx, rax
  02544	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  02549	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0254c	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR in$74[rsp]
  02554	66 0f be 04 01	 movsx	 ax, BYTE PTR [rcx+rax]
  02559	66 89 84 24 cc
	00 00 00	 mov	 WORD PTR tv1664[rsp], ax
  02561	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR j$[rsp]
  02566	48 8b 94 24 58
	04 00 00	 mov	 rdx, QWORD PTR info$[rsp]
  0256e	48 83 c2 30	 add	 rdx, 48			; 00000030H
  02572	48 89 94 24 a8
	03 00 00	 mov	 QWORD PTR tv1249[rsp], rdx
  0257a	48 8b d1	 mov	 rdx, rcx
  0257d	48 8b 8c 24 a8
	03 00 00	 mov	 rcx, QWORD PTR tv1249[rsp]
  02585	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  0258a	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0258d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR out$4[rsp]
  02592	0f b7 94 24 cc
	00 00 00	 movzx	 edx, WORD PTR tv1664[rsp]
  0259a	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 9947 :           out[info.outOffset[j]] <<= 8;

  0259e	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  025a3	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  025ab	48 83 c1 30	 add	 rcx, 48			; 00000030H
  025af	48 8b d0	 mov	 rdx, rax
  025b2	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  025b7	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  025ba	48 8b 4c 24 40	 mov	 rcx, QWORD PTR out$4[rsp]
  025bf	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  025c3	48 89 84 24 10
	03 00 00	 mov	 QWORD PTR tv1274[rsp], rax
  025cb	48 8b 84 24 10
	03 00 00	 mov	 rax, QWORD PTR tv1274[rsp]
  025d3	0f b7 00	 movzx	 eax, WORD PTR [rax]
  025d6	66 c1 e0 08	 shl	 ax, 8
  025da	48 8b 8c 24 10
	03 00 00	 mov	 rcx, QWORD PTR tv1274[rsp]
  025e2	66 89 01	 mov	 WORD PTR [rcx], ax

; 9948 :         }

  025e5	e9 28 ff ff ff	 jmp	 $LN149@convertBuf
$LN150@convertBuf:

; 9949 :         in += info.inJump;

  025ea	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  025f2	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  025f6	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR in$74[rsp]
  025fe	48 03 c8	 add	 rcx, rax
  02601	48 8b c1	 mov	 rax, rcx
  02604	48 89 84 24 18
	02 00 00	 mov	 QWORD PTR in$74[rsp], rax

; 9950 :         out += info.outJump;

  0260c	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02614	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  02618	48 8b 4c 24 40	 mov	 rcx, QWORD PTR out$4[rsp]
  0261d	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  02621	48 89 44 24 40	 mov	 QWORD PTR out$4[rsp], rax

; 9951 :       }

  02626	e9 b2 fe ff ff	 jmp	 $LN146@convertBuf
$LN147@convertBuf:

; 9952 :     }
; 9953 :     else if (info.inFormat == RTAUDIO_SINT16) {

  0262b	e9 4f 06 00 00	 jmp	 $LN274@convertBuf
$LN273@convertBuf:
  02630	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02638	83 78 0c 02	 cmp	 DWORD PTR [rax+12], 2
  0263c	0f 85 22 01 00
	00		 jne	 $LN275@convertBuf

; 9954 :       // Channel compensation and/or (de)interleaving only.
; 9955 :       Int16 *in = (Int16 *)inBuffer;

  02642	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  0264a	48 89 84 24 20
	02 00 00	 mov	 QWORD PTR in$75[rsp], rax

; 9956 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  02652	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$30[rsp], 0
  0265d	eb 10		 jmp	 SHORT $LN154@convertBuf
$LN152@convertBuf:
  0265f	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR i$30[rsp]
  02666	ff c0		 inc	 eax
  02668	89 84 24 b8 00
	00 00		 mov	 DWORD PTR i$30[rsp], eax
$LN154@convertBuf:
  0266f	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  02677	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  0267d	39 84 24 b8 00
	00 00		 cmp	 DWORD PTR i$30[rsp], eax
  02684	0f 83 d5 00 00
	00		 jae	 $LN153@convertBuf

; 9957 :         for (j=0; j<info.channels; j++) {

  0268a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  02692	eb 0a		 jmp	 SHORT $LN157@convertBuf
$LN155@convertBuf:
  02694	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  02698	ff c0		 inc	 eax
  0269a	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN157@convertBuf:
  0269e	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  026a6	8b 00		 mov	 eax, DWORD PTR [rax]
  026a8	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  026ac	7d 72		 jge	 SHORT $LN156@convertBuf

; 9958 :           out[info.outOffset[j]] = in[info.inOffset[j]];

  026ae	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  026b3	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  026bb	48 83 c1 18	 add	 rcx, 24
  026bf	48 8b d0	 mov	 rdx, rax
  026c2	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  026c7	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  026ca	48 89 84 24 b8
	03 00 00	 mov	 QWORD PTR tv1305[rsp], rax
  026d2	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR j$[rsp]
  026d7	48 8b 94 24 58
	04 00 00	 mov	 rdx, QWORD PTR info$[rsp]
  026df	48 83 c2 30	 add	 rdx, 48			; 00000030H
  026e3	48 89 94 24 b0
	03 00 00	 mov	 QWORD PTR tv1292[rsp], rdx
  026eb	48 8b d1	 mov	 rdx, rcx
  026ee	48 8b 8c 24 b0
	03 00 00	 mov	 rcx, QWORD PTR tv1292[rsp]
  026f6	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  026fb	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  026fe	48 8b 4c 24 40	 mov	 rcx, QWORD PTR out$4[rsp]
  02703	48 8b 94 24 20
	02 00 00	 mov	 rdx, QWORD PTR in$75[rsp]
  0270b	48 8b bc 24 b8
	03 00 00	 mov	 rdi, QWORD PTR tv1305[rsp]
  02713	0f b7 14 7a	 movzx	 edx, WORD PTR [rdx+rdi*2]
  02717	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 9959 :         }

  0271b	e9 74 ff ff ff	 jmp	 $LN155@convertBuf
$LN156@convertBuf:

; 9960 :         in += info.inJump;

  02720	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02728	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0272c	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR in$75[rsp]
  02734	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  02738	48 89 84 24 20
	02 00 00	 mov	 QWORD PTR in$75[rsp], rax

; 9961 :         out += info.outJump;

  02740	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02748	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  0274c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR out$4[rsp]
  02751	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  02755	48 89 44 24 40	 mov	 QWORD PTR out$4[rsp], rax

; 9962 :       }

  0275a	e9 00 ff ff ff	 jmp	 $LN152@convertBuf
$LN153@convertBuf:

; 9963 :     }
; 9964 :     else if (info.inFormat == RTAUDIO_SINT24) {

  0275f	e9 1b 05 00 00	 jmp	 $LN276@convertBuf
$LN275@convertBuf:
  02764	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0276c	83 78 0c 04	 cmp	 DWORD PTR [rax+12], 4
  02770	0f 85 3b 01 00
	00		 jne	 $LN277@convertBuf

; 9965 :       Int24 *in = (Int24 *)inBuffer;

  02776	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  0277e	48 89 84 24 28
	02 00 00	 mov	 QWORD PTR in$76[rsp], rax

; 9966 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  02786	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$31[rsp], 0
  02791	eb 10		 jmp	 SHORT $LN160@convertBuf
$LN158@convertBuf:
  02793	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR i$31[rsp]
  0279a	ff c0		 inc	 eax
  0279c	89 84 24 bc 00
	00 00		 mov	 DWORD PTR i$31[rsp], eax
$LN160@convertBuf:
  027a3	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  027ab	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  027b1	39 84 24 bc 00
	00 00		 cmp	 DWORD PTR i$31[rsp], eax
  027b8	0f 83 ee 00 00
	00		 jae	 $LN159@convertBuf

; 9967 :         for (j=0; j<info.channels; j++) {

  027be	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  027c6	eb 0a		 jmp	 SHORT $LN163@convertBuf
$LN161@convertBuf:
  027c8	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  027cc	ff c0		 inc	 eax
  027ce	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN163@convertBuf:
  027d2	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  027da	8b 00		 mov	 eax, DWORD PTR [rax]
  027dc	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  027e0	0f 8d 81 00 00
	00		 jge	 $LN162@convertBuf

; 9968 :           out[info.outOffset[j]] = (Int16) (in[info.inOffset[j]].asInt() >> 8);

  027e6	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  027eb	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  027f3	48 83 c1 18	 add	 rcx, 24
  027f7	48 8b d0	 mov	 rdx, rax
  027fa	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  027ff	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  02802	48 6b c0 03	 imul	 rax, rax, 3
  02806	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR in$76[rsp]
  0280e	48 03 c8	 add	 rcx, rax
  02811	48 8b c1	 mov	 rax, rcx
  02814	48 8b c8	 mov	 rcx, rax
  02817	e8 00 00 00 00	 call	 ?asInt@S24@@QEAAHXZ	; S24::asInt
  0281c	c1 f8 08	 sar	 eax, 8
  0281f	89 84 24 40 01
	00 00		 mov	 DWORD PTR tv1343[rsp], eax
  02826	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR j$[rsp]
  0282b	48 8b 94 24 58
	04 00 00	 mov	 rdx, QWORD PTR info$[rsp]
  02833	48 83 c2 30	 add	 rdx, 48			; 00000030H
  02837	48 89 94 24 c0
	03 00 00	 mov	 QWORD PTR tv1325[rsp], rdx
  0283f	48 8b d1	 mov	 rdx, rcx
  02842	48 8b 8c 24 c0
	03 00 00	 mov	 rcx, QWORD PTR tv1325[rsp]
  0284a	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  0284f	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  02852	48 8b 4c 24 40	 mov	 rcx, QWORD PTR out$4[rsp]
  02857	8b 94 24 40 01
	00 00		 mov	 edx, DWORD PTR tv1343[rsp]
  0285e	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 9969 :         }

  02862	e9 61 ff ff ff	 jmp	 $LN161@convertBuf
$LN162@convertBuf:

; 9970 :         in += info.inJump;

  02867	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0286f	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  02873	48 6b c0 03	 imul	 rax, rax, 3
  02877	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR in$76[rsp]
  0287f	48 03 c8	 add	 rcx, rax
  02882	48 8b c1	 mov	 rax, rcx
  02885	48 89 84 24 28
	02 00 00	 mov	 QWORD PTR in$76[rsp], rax

; 9971 :         out += info.outJump;

  0288d	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02895	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  02899	48 8b 4c 24 40	 mov	 rcx, QWORD PTR out$4[rsp]
  0289e	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  028a2	48 89 44 24 40	 mov	 QWORD PTR out$4[rsp], rax

; 9972 :       }

  028a7	e9 e7 fe ff ff	 jmp	 $LN158@convertBuf
$LN159@convertBuf:

; 9973 :     }
; 9974 :     else if (info.inFormat == RTAUDIO_SINT32) {

  028ac	e9 ce 03 00 00	 jmp	 $LN278@convertBuf
$LN277@convertBuf:
  028b1	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  028b9	83 78 0c 08	 cmp	 DWORD PTR [rax+12], 8
  028bd	0f 85 27 01 00
	00		 jne	 $LN279@convertBuf

; 9975 :       Int32 *in = (Int32 *)inBuffer;

  028c3	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  028cb	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR in$77[rsp], rax

; 9976 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  028d3	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$32[rsp], 0
  028de	eb 10		 jmp	 SHORT $LN166@convertBuf
$LN164@convertBuf:
  028e0	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR i$32[rsp]
  028e7	ff c0		 inc	 eax
  028e9	89 84 24 c0 00
	00 00		 mov	 DWORD PTR i$32[rsp], eax
$LN166@convertBuf:
  028f0	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  028f8	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  028fe	39 84 24 c0 00
	00 00		 cmp	 DWORD PTR i$32[rsp], eax
  02905	0f 83 da 00 00
	00		 jae	 $LN165@convertBuf

; 9977 :         for (j=0; j<info.channels; j++) {

  0290b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  02913	eb 0a		 jmp	 SHORT $LN169@convertBuf
$LN167@convertBuf:
  02915	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  02919	ff c0		 inc	 eax
  0291b	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN169@convertBuf:
  0291f	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02927	8b 00		 mov	 eax, DWORD PTR [rax]
  02929	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  0292d	7d 77		 jge	 SHORT $LN168@convertBuf

; 9978 :           out[info.outOffset[j]] = (Int16) ((in[info.inOffset[j]] >> 16) & 0x0000ffff);

  0292f	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  02934	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  0293c	48 83 c1 18	 add	 rcx, 24
  02940	48 8b d0	 mov	 rdx, rax
  02943	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  02948	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0294b	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR in$77[rsp]
  02953	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  02956	c1 f8 10	 sar	 eax, 16
  02959	25 ff ff 00 00	 and	 eax, 65535		; 0000ffffH
  0295e	89 84 24 44 01
	00 00		 mov	 DWORD PTR tv1379[rsp], eax
  02965	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR j$[rsp]
  0296a	48 8b 94 24 58
	04 00 00	 mov	 rdx, QWORD PTR info$[rsp]
  02972	48 83 c2 30	 add	 rdx, 48			; 00000030H
  02976	48 89 94 24 c8
	03 00 00	 mov	 QWORD PTR tv1362[rsp], rdx
  0297e	48 8b d1	 mov	 rdx, rcx
  02981	48 8b 8c 24 c8
	03 00 00	 mov	 rcx, QWORD PTR tv1362[rsp]
  02989	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  0298e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  02991	48 8b 4c 24 40	 mov	 rcx, QWORD PTR out$4[rsp]
  02996	8b 94 24 44 01
	00 00		 mov	 edx, DWORD PTR tv1379[rsp]
  0299d	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 9979 :         }

  029a1	e9 6f ff ff ff	 jmp	 $LN167@convertBuf
$LN168@convertBuf:

; 9980 :         in += info.inJump;

  029a6	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  029ae	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  029b2	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR in$77[rsp]
  029ba	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  029be	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR in$77[rsp], rax

; 9981 :         out += info.outJump;

  029c6	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  029ce	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  029d2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR out$4[rsp]
  029d7	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  029db	48 89 44 24 40	 mov	 QWORD PTR out$4[rsp], rax

; 9982 :       }

  029e0	e9 fb fe ff ff	 jmp	 $LN164@convertBuf
$LN165@convertBuf:

; 9983 :     }
; 9984 :     else if (info.inFormat == RTAUDIO_FLOAT32) {

  029e5	e9 95 02 00 00	 jmp	 $LN280@convertBuf
$LN279@convertBuf:
  029ea	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  029f2	83 78 0c 10	 cmp	 DWORD PTR [rax+12], 16
  029f6	0f 85 3b 01 00
	00		 jne	 $LN281@convertBuf

; 9985 :       Float32 *in = (Float32 *)inBuffer;

  029fc	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  02a04	48 89 84 24 38
	02 00 00	 mov	 QWORD PTR in$78[rsp], rax

; 9986 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  02a0c	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$33[rsp], 0
  02a17	eb 10		 jmp	 SHORT $LN172@convertBuf
$LN170@convertBuf:
  02a19	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR i$33[rsp]
  02a20	ff c0		 inc	 eax
  02a22	89 84 24 c4 00
	00 00		 mov	 DWORD PTR i$33[rsp], eax
$LN172@convertBuf:
  02a29	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  02a31	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  02a37	39 84 24 c4 00
	00 00		 cmp	 DWORD PTR i$33[rsp], eax
  02a3e	0f 83 ee 00 00
	00		 jae	 $LN171@convertBuf

; 9987 :         for (j=0; j<info.channels; j++) {

  02a44	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  02a4c	eb 0a		 jmp	 SHORT $LN175@convertBuf
$LN173@convertBuf:
  02a4e	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  02a52	ff c0		 inc	 eax
  02a54	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN175@convertBuf:
  02a58	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02a60	8b 00		 mov	 eax, DWORD PTR [rax]
  02a62	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  02a66	0f 8d 87 00 00
	00		 jge	 $LN174@convertBuf

; 9988 :           out[info.outOffset[j]] = (Int16) (in[info.inOffset[j]] * 32767.5 - 0.5);

  02a6c	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  02a71	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  02a79	48 83 c1 18	 add	 rcx, 24
  02a7d	48 8b d0	 mov	 rdx, rax
  02a80	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  02a85	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  02a88	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR in$78[rsp]
  02a90	f3 0f 5a 04 81	 cvtss2sd xmm0, DWORD PTR [rcx+rax*4]
  02a95	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@40dfffe000000000
  02a9d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe0000000000000
  02aa5	f2 0f 2c c0	 cvttsd2si eax, xmm0
  02aa9	66 89 84 24 e8
	00 00 00	 mov	 WORD PTR tv1648[rsp], ax
  02ab1	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR j$[rsp]
  02ab6	48 8b 94 24 58
	04 00 00	 mov	 rdx, QWORD PTR info$[rsp]
  02abe	48 83 c2 30	 add	 rdx, 48			; 00000030H
  02ac2	48 89 94 24 d0
	03 00 00	 mov	 QWORD PTR tv1398[rsp], rdx
  02aca	48 8b d1	 mov	 rdx, rcx
  02acd	48 8b 8c 24 d0
	03 00 00	 mov	 rcx, QWORD PTR tv1398[rsp]
  02ad5	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  02ada	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  02add	48 8b 4c 24 40	 mov	 rcx, QWORD PTR out$4[rsp]
  02ae2	0f b7 94 24 e8
	00 00 00	 movzx	 edx, WORD PTR tv1648[rsp]
  02aea	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 9989 :         }

  02aee	e9 5b ff ff ff	 jmp	 $LN173@convertBuf
$LN174@convertBuf:

; 9990 :         in += info.inJump;

  02af3	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02afb	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  02aff	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR in$78[rsp]
  02b07	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  02b0b	48 89 84 24 38
	02 00 00	 mov	 QWORD PTR in$78[rsp], rax

; 9991 :         out += info.outJump;

  02b13	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02b1b	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  02b1f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR out$4[rsp]
  02b24	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  02b28	48 89 44 24 40	 mov	 QWORD PTR out$4[rsp], rax

; 9992 :       }

  02b2d	e9 e7 fe ff ff	 jmp	 $LN170@convertBuf
$LN171@convertBuf:

; 9993 :     }
; 9994 :     else if (info.inFormat == RTAUDIO_FLOAT64) {

  02b32	e9 48 01 00 00	 jmp	 $LN282@convertBuf
$LN281@convertBuf:
  02b37	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02b3f	83 78 0c 20	 cmp	 DWORD PTR [rax+12], 32	; 00000020H
  02b43	0f 85 36 01 00
	00		 jne	 $LN283@convertBuf

; 9995 :       Float64 *in = (Float64 *)inBuffer;

  02b49	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  02b51	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR in$79[rsp], rax

; 9996 :       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  02b59	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$34[rsp], 0
  02b64	eb 10		 jmp	 SHORT $LN178@convertBuf
$LN176@convertBuf:
  02b66	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR i$34[rsp]
  02b6d	ff c0		 inc	 eax
  02b6f	89 84 24 c8 00
	00 00		 mov	 DWORD PTR i$34[rsp], eax
$LN178@convertBuf:
  02b76	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  02b7e	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  02b84	39 84 24 c8 00
	00 00		 cmp	 DWORD PTR i$34[rsp], eax
  02b8b	0f 83 ee 00 00
	00		 jae	 $LN177@convertBuf

; 9997 :         for (j=0; j<info.channels; j++) {

  02b91	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  02b99	eb 0a		 jmp	 SHORT $LN181@convertBuf
$LN179@convertBuf:
  02b9b	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  02b9f	ff c0		 inc	 eax
  02ba1	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN181@convertBuf:
  02ba5	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02bad	8b 00		 mov	 eax, DWORD PTR [rax]
  02baf	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  02bb3	0f 8d 87 00 00
	00		 jge	 $LN180@convertBuf

; 9998 :           out[info.outOffset[j]] = (Int16) (in[info.inOffset[j]] * 32767.5 - 0.5);

  02bb9	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  02bbe	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  02bc6	48 83 c1 18	 add	 rcx, 24
  02bca	48 8b d0	 mov	 rdx, rax
  02bcd	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  02bd2	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  02bd5	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR in$79[rsp]
  02bdd	f2 0f 10 04 c1	 movsd	 xmm0, QWORD PTR [rcx+rax*8]
  02be2	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@40dfffe000000000
  02bea	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe0000000000000
  02bf2	f2 0f 2c c0	 cvttsd2si eax, xmm0
  02bf6	66 89 84 24 ea
	00 00 00	 mov	 WORD PTR tv1645[rsp], ax
  02bfe	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR j$[rsp]
  02c03	48 8b 94 24 58
	04 00 00	 mov	 rdx, QWORD PTR info$[rsp]
  02c0b	48 83 c2 30	 add	 rdx, 48			; 00000030H
  02c0f	48 89 94 24 d8
	03 00 00	 mov	 QWORD PTR tv1436[rsp], rdx
  02c17	48 8b d1	 mov	 rdx, rcx
  02c1a	48 8b 8c 24 d8
	03 00 00	 mov	 rcx, QWORD PTR tv1436[rsp]
  02c22	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  02c27	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  02c2a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR out$4[rsp]
  02c2f	0f b7 94 24 ea
	00 00 00	 movzx	 edx, WORD PTR tv1645[rsp]
  02c37	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx

; 9999 :         }

  02c3b	e9 5b ff ff ff	 jmp	 $LN179@convertBuf
$LN180@convertBuf:

; 10000:         in += info.inJump;

  02c40	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02c48	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  02c4c	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR in$79[rsp]
  02c54	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  02c58	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR in$79[rsp], rax

; 10001:         out += info.outJump;

  02c60	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02c68	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  02c6c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR out$4[rsp]
  02c71	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  02c75	48 89 44 24 40	 mov	 QWORD PTR out$4[rsp], rax

; 10002:       }

  02c7a	e9 e7 fe ff ff	 jmp	 $LN176@convertBuf
$LN177@convertBuf:
$LN283@convertBuf:
$LN282@convertBuf:
$LN280@convertBuf:
$LN278@convertBuf:
$LN276@convertBuf:
$LN274@convertBuf:

; 10003:     }
; 10004:   }

  02c7f	e9 95 07 00 00	 jmp	 $LN272@convertBuf
$LN271@convertBuf:

; 10005:   else if (info.outFormat == RTAUDIO_SINT8) {

  02c84	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02c8c	83 78 10 01	 cmp	 DWORD PTR [rax+16], 1
  02c90	0f 85 83 07 00
	00		 jne	 $LN284@convertBuf

; 10006:     signed char *out = (signed char *)outBuffer;

  02c96	48 8b 84 24 48
	04 00 00	 mov	 rax, QWORD PTR outBuffer$[rsp]
  02c9e	48 89 44 24 50	 mov	 QWORD PTR out$6[rsp], rax

; 10007:     if (info.inFormat == RTAUDIO_SINT8) {

  02ca3	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02cab	83 78 0c 01	 cmp	 DWORD PTR [rax+12], 1
  02caf	0f 85 20 01 00
	00		 jne	 $LN285@convertBuf

; 10008:       // Channel compensation and/or (de)interleaving only.
; 10009:       signed char *in = (signed char *)inBuffer;

  02cb5	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  02cbd	48 89 84 24 48
	02 00 00	 mov	 QWORD PTR in$80[rsp], rax

; 10010:       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  02cc5	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$40[rsp], 0
  02cd0	eb 10		 jmp	 SHORT $LN184@convertBuf
$LN182@convertBuf:
  02cd2	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR i$40[rsp]
  02cd9	ff c0		 inc	 eax
  02cdb	89 84 24 e4 00
	00 00		 mov	 DWORD PTR i$40[rsp], eax
$LN184@convertBuf:
  02ce2	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  02cea	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  02cf0	39 84 24 e4 00
	00 00		 cmp	 DWORD PTR i$40[rsp], eax
  02cf7	0f 83 d8 00 00
	00		 jae	 $LN183@convertBuf

; 10011:         for (j=0; j<info.channels; j++) {

  02cfd	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  02d05	eb 0a		 jmp	 SHORT $LN187@convertBuf
$LN185@convertBuf:
  02d07	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  02d0b	ff c0		 inc	 eax
  02d0d	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN187@convertBuf:
  02d11	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02d19	8b 00		 mov	 eax, DWORD PTR [rax]
  02d1b	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  02d1f	7d 71		 jge	 SHORT $LN186@convertBuf

; 10012:           out[info.outOffset[j]] = in[info.inOffset[j]];

  02d21	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  02d26	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  02d2e	48 83 c1 18	 add	 rcx, 24
  02d32	48 8b d0	 mov	 rdx, rax
  02d35	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  02d3a	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  02d3d	48 89 84 24 e8
	03 00 00	 mov	 QWORD PTR tv1488[rsp], rax
  02d45	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR j$[rsp]
  02d4a	48 8b 94 24 58
	04 00 00	 mov	 rdx, QWORD PTR info$[rsp]
  02d52	48 83 c2 30	 add	 rdx, 48			; 00000030H
  02d56	48 89 94 24 e0
	03 00 00	 mov	 QWORD PTR tv1475[rsp], rdx
  02d5e	48 8b d1	 mov	 rdx, rcx
  02d61	48 8b 8c 24 e0
	03 00 00	 mov	 rcx, QWORD PTR tv1475[rsp]
  02d69	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  02d6e	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  02d71	48 8b 4c 24 50	 mov	 rcx, QWORD PTR out$6[rsp]
  02d76	48 8b 94 24 48
	02 00 00	 mov	 rdx, QWORD PTR in$80[rsp]
  02d7e	48 8b bc 24 e8
	03 00 00	 mov	 rdi, QWORD PTR tv1488[rsp]
  02d86	0f b6 14 3a	 movzx	 edx, BYTE PTR [rdx+rdi]
  02d8a	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 10013:         }

  02d8d	e9 75 ff ff ff	 jmp	 $LN185@convertBuf
$LN186@convertBuf:

; 10014:         in += info.inJump;

  02d92	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02d9a	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  02d9e	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR in$80[rsp]
  02da6	48 03 c8	 add	 rcx, rax
  02da9	48 8b c1	 mov	 rax, rcx
  02dac	48 89 84 24 48
	02 00 00	 mov	 QWORD PTR in$80[rsp], rax

; 10015:         out += info.outJump;

  02db4	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02dbc	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  02dc0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR out$6[rsp]
  02dc5	48 03 c8	 add	 rcx, rax
  02dc8	48 8b c1	 mov	 rax, rcx
  02dcb	48 89 44 24 50	 mov	 QWORD PTR out$6[rsp], rax

; 10016:       }

  02dd0	e9 fd fe ff ff	 jmp	 $LN182@convertBuf
$LN183@convertBuf:
$LN285@convertBuf:

; 10017:     }
; 10018:     if (info.inFormat == RTAUDIO_SINT16) {

  02dd5	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02ddd	83 78 0c 02	 cmp	 DWORD PTR [rax+12], 2
  02de1	0f 85 29 01 00
	00		 jne	 $LN286@convertBuf

; 10019:       Int16 *in = (Int16 *)inBuffer;

  02de7	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  02def	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR in$81[rsp], rax

; 10020:       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  02df7	c7 84 24 d0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$35[rsp], 0
  02e02	eb 10		 jmp	 SHORT $LN190@convertBuf
$LN188@convertBuf:
  02e04	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR i$35[rsp]
  02e0b	ff c0		 inc	 eax
  02e0d	89 84 24 d0 00
	00 00		 mov	 DWORD PTR i$35[rsp], eax
$LN190@convertBuf:
  02e14	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  02e1c	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  02e22	39 84 24 d0 00
	00 00		 cmp	 DWORD PTR i$35[rsp], eax
  02e29	0f 83 dc 00 00
	00		 jae	 $LN189@convertBuf

; 10021:         for (j=0; j<info.channels; j++) {

  02e2f	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  02e37	eb 0a		 jmp	 SHORT $LN193@convertBuf
$LN191@convertBuf:
  02e39	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  02e3d	ff c0		 inc	 eax
  02e3f	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN193@convertBuf:
  02e43	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02e4b	8b 00		 mov	 eax, DWORD PTR [rax]
  02e4d	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  02e51	7d 77		 jge	 SHORT $LN192@convertBuf

; 10022:           out[info.outOffset[j]] = (signed char) ((in[info.inOffset[j]] >> 8) & 0x00ff);

  02e53	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  02e58	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  02e60	48 83 c1 18	 add	 rcx, 24
  02e64	48 8b d0	 mov	 rdx, rax
  02e67	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  02e6c	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  02e6f	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR in$81[rsp]
  02e77	0f bf 04 41	 movsx	 eax, WORD PTR [rcx+rax*2]
  02e7b	c1 f8 08	 sar	 eax, 8
  02e7e	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  02e83	89 84 24 48 01
	00 00		 mov	 DWORD PTR tv1524[rsp], eax
  02e8a	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR j$[rsp]
  02e8f	48 8b 94 24 58
	04 00 00	 mov	 rdx, QWORD PTR info$[rsp]
  02e97	48 83 c2 30	 add	 rdx, 48			; 00000030H
  02e9b	48 89 94 24 f0
	03 00 00	 mov	 QWORD PTR tv1506[rsp], rdx
  02ea3	48 8b d1	 mov	 rdx, rcx
  02ea6	48 8b 8c 24 f0
	03 00 00	 mov	 rcx, QWORD PTR tv1506[rsp]
  02eae	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  02eb3	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  02eb6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR out$6[rsp]
  02ebb	8b 94 24 48 01
	00 00		 mov	 edx, DWORD PTR tv1524[rsp]
  02ec2	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 10023:         }

  02ec5	e9 6f ff ff ff	 jmp	 $LN191@convertBuf
$LN192@convertBuf:

; 10024:         in += info.inJump;

  02eca	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02ed2	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  02ed6	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR in$81[rsp]
  02ede	48 8d 04 41	 lea	 rax, QWORD PTR [rcx+rax*2]
  02ee2	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR in$81[rsp], rax

; 10025:         out += info.outJump;

  02eea	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02ef2	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  02ef6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR out$6[rsp]
  02efb	48 03 c8	 add	 rcx, rax
  02efe	48 8b c1	 mov	 rax, rcx
  02f01	48 89 44 24 50	 mov	 QWORD PTR out$6[rsp], rax

; 10026:       }

  02f06	e9 f9 fe ff ff	 jmp	 $LN188@convertBuf
$LN189@convertBuf:

; 10027:     }
; 10028:     else if (info.inFormat == RTAUDIO_SINT24) {

  02f0b	e9 09 05 00 00	 jmp	 $LN287@convertBuf
$LN286@convertBuf:
  02f10	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02f18	83 78 0c 04	 cmp	 DWORD PTR [rax+12], 4
  02f1c	0f 85 3c 01 00
	00		 jne	 $LN288@convertBuf

; 10029:       Int24 *in = (Int24 *)inBuffer;

  02f22	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  02f2a	48 89 84 24 58
	02 00 00	 mov	 QWORD PTR in$82[rsp], rax

; 10030:       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  02f32	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$36[rsp], 0
  02f3d	eb 10		 jmp	 SHORT $LN196@convertBuf
$LN194@convertBuf:
  02f3f	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR i$36[rsp]
  02f46	ff c0		 inc	 eax
  02f48	89 84 24 d4 00
	00 00		 mov	 DWORD PTR i$36[rsp], eax
$LN196@convertBuf:
  02f4f	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  02f57	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  02f5d	39 84 24 d4 00
	00 00		 cmp	 DWORD PTR i$36[rsp], eax
  02f64	0f 83 ef 00 00
	00		 jae	 $LN195@convertBuf

; 10031:         for (j=0; j<info.channels; j++) {

  02f6a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  02f72	eb 0a		 jmp	 SHORT $LN199@convertBuf
$LN197@convertBuf:
  02f74	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  02f78	ff c0		 inc	 eax
  02f7a	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN199@convertBuf:
  02f7e	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  02f86	8b 00		 mov	 eax, DWORD PTR [rax]
  02f88	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  02f8c	0f 8d 80 00 00
	00		 jge	 $LN198@convertBuf

; 10032:           out[info.outOffset[j]] = (signed char) (in[info.inOffset[j]].asInt() >> 16);

  02f92	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  02f97	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  02f9f	48 83 c1 18	 add	 rcx, 24
  02fa3	48 8b d0	 mov	 rdx, rax
  02fa6	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  02fab	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  02fae	48 6b c0 03	 imul	 rax, rax, 3
  02fb2	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR in$82[rsp]
  02fba	48 03 c8	 add	 rcx, rax
  02fbd	48 8b c1	 mov	 rax, rcx
  02fc0	48 8b c8	 mov	 rcx, rax
  02fc3	e8 00 00 00 00	 call	 ?asInt@S24@@QEAAHXZ	; S24::asInt
  02fc8	c1 f8 10	 sar	 eax, 16
  02fcb	89 84 24 4c 01
	00 00		 mov	 DWORD PTR tv1560[rsp], eax
  02fd2	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR j$[rsp]
  02fd7	48 8b 94 24 58
	04 00 00	 mov	 rdx, QWORD PTR info$[rsp]
  02fdf	48 83 c2 30	 add	 rdx, 48			; 00000030H
  02fe3	48 89 94 24 f8
	03 00 00	 mov	 QWORD PTR tv1542[rsp], rdx
  02feb	48 8b d1	 mov	 rdx, rcx
  02fee	48 8b 8c 24 f8
	03 00 00	 mov	 rcx, QWORD PTR tv1542[rsp]
  02ff6	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  02ffb	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  02ffe	48 8b 4c 24 50	 mov	 rcx, QWORD PTR out$6[rsp]
  03003	8b 94 24 4c 01
	00 00		 mov	 edx, DWORD PTR tv1560[rsp]
  0300a	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 10033:         }

  0300d	e9 62 ff ff ff	 jmp	 $LN197@convertBuf
$LN198@convertBuf:

; 10034:         in += info.inJump;

  03012	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0301a	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0301e	48 6b c0 03	 imul	 rax, rax, 3
  03022	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR in$82[rsp]
  0302a	48 03 c8	 add	 rcx, rax
  0302d	48 8b c1	 mov	 rax, rcx
  03030	48 89 84 24 58
	02 00 00	 mov	 QWORD PTR in$82[rsp], rax

; 10035:         out += info.outJump;

  03038	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  03040	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  03044	48 8b 4c 24 50	 mov	 rcx, QWORD PTR out$6[rsp]
  03049	48 03 c8	 add	 rcx, rax
  0304c	48 8b c1	 mov	 rax, rcx
  0304f	48 89 44 24 50	 mov	 QWORD PTR out$6[rsp], rax

; 10036:       }

  03054	e9 e6 fe ff ff	 jmp	 $LN194@convertBuf
$LN195@convertBuf:

; 10037:     }
; 10038:     else if (info.inFormat == RTAUDIO_SINT32) {

  03059	e9 bb 03 00 00	 jmp	 $LN289@convertBuf
$LN288@convertBuf:
  0305e	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  03066	83 78 0c 08	 cmp	 DWORD PTR [rax+12], 8
  0306a	0f 85 28 01 00
	00		 jne	 $LN290@convertBuf

; 10039:       Int32 *in = (Int32 *)inBuffer;

  03070	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  03078	48 89 84 24 60
	02 00 00	 mov	 QWORD PTR in$83[rsp], rax

; 10040:       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  03080	c7 84 24 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$37[rsp], 0
  0308b	eb 10		 jmp	 SHORT $LN202@convertBuf
$LN200@convertBuf:
  0308d	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR i$37[rsp]
  03094	ff c0		 inc	 eax
  03096	89 84 24 d8 00
	00 00		 mov	 DWORD PTR i$37[rsp], eax
$LN202@convertBuf:
  0309d	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  030a5	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  030ab	39 84 24 d8 00
	00 00		 cmp	 DWORD PTR i$37[rsp], eax
  030b2	0f 83 db 00 00
	00		 jae	 $LN201@convertBuf

; 10041:         for (j=0; j<info.channels; j++) {

  030b8	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  030c0	eb 0a		 jmp	 SHORT $LN205@convertBuf
$LN203@convertBuf:
  030c2	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  030c6	ff c0		 inc	 eax
  030c8	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN205@convertBuf:
  030cc	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  030d4	8b 00		 mov	 eax, DWORD PTR [rax]
  030d6	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  030da	7d 76		 jge	 SHORT $LN204@convertBuf

; 10042:           out[info.outOffset[j]] = (signed char) ((in[info.inOffset[j]] >> 24) & 0x000000ff);

  030dc	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  030e1	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  030e9	48 83 c1 18	 add	 rcx, 24
  030ed	48 8b d0	 mov	 rdx, rax
  030f0	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  030f5	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  030f8	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR in$83[rsp]
  03100	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  03103	c1 f8 18	 sar	 eax, 24
  03106	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0310b	89 84 24 50 01
	00 00		 mov	 DWORD PTR tv1595[rsp], eax
  03112	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR j$[rsp]
  03117	48 8b 94 24 58
	04 00 00	 mov	 rdx, QWORD PTR info$[rsp]
  0311f	48 83 c2 30	 add	 rdx, 48			; 00000030H
  03123	48 89 94 24 00
	04 00 00	 mov	 QWORD PTR tv1578[rsp], rdx
  0312b	48 8b d1	 mov	 rdx, rcx
  0312e	48 8b 8c 24 00
	04 00 00	 mov	 rcx, QWORD PTR tv1578[rsp]
  03136	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  0313b	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0313e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR out$6[rsp]
  03143	8b 94 24 50 01
	00 00		 mov	 edx, DWORD PTR tv1595[rsp]
  0314a	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 10043:         }

  0314d	e9 70 ff ff ff	 jmp	 $LN203@convertBuf
$LN204@convertBuf:

; 10044:         in += info.inJump;

  03152	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0315a	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0315e	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR in$83[rsp]
  03166	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  0316a	48 89 84 24 60
	02 00 00	 mov	 QWORD PTR in$83[rsp], rax

; 10045:         out += info.outJump;

  03172	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0317a	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  0317e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR out$6[rsp]
  03183	48 03 c8	 add	 rcx, rax
  03186	48 8b c1	 mov	 rax, rcx
  03189	48 89 44 24 50	 mov	 QWORD PTR out$6[rsp], rax

; 10046:       }

  0318e	e9 fa fe ff ff	 jmp	 $LN200@convertBuf
$LN201@convertBuf:

; 10047:     }
; 10048:     else if (info.inFormat == RTAUDIO_FLOAT32) {

  03193	e9 81 02 00 00	 jmp	 $LN291@convertBuf
$LN290@convertBuf:
  03198	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  031a0	83 78 0c 10	 cmp	 DWORD PTR [rax+12], 16
  031a4	0f 85 31 01 00
	00		 jne	 $LN292@convertBuf

; 10049:       Float32 *in = (Float32 *)inBuffer;

  031aa	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  031b2	48 89 84 24 68
	02 00 00	 mov	 QWORD PTR in$84[rsp], rax

; 10050:       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  031ba	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$38[rsp], 0
  031c5	eb 10		 jmp	 SHORT $LN208@convertBuf
$LN206@convertBuf:
  031c7	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR i$38[rsp]
  031ce	ff c0		 inc	 eax
  031d0	89 84 24 dc 00
	00 00		 mov	 DWORD PTR i$38[rsp], eax
$LN208@convertBuf:
  031d7	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  031df	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  031e5	39 84 24 dc 00
	00 00		 cmp	 DWORD PTR i$38[rsp], eax
  031ec	0f 83 e4 00 00
	00		 jae	 $LN207@convertBuf

; 10051:         for (j=0; j<info.channels; j++) {

  031f2	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  031fa	eb 0a		 jmp	 SHORT $LN211@convertBuf
$LN209@convertBuf:
  031fc	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  03200	ff c0		 inc	 eax
  03202	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN211@convertBuf:
  03206	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0320e	8b 00		 mov	 eax, DWORD PTR [rax]
  03210	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  03214	7d 7f		 jge	 SHORT $LN210@convertBuf

; 10052:           out[info.outOffset[j]] = (signed char) (in[info.inOffset[j]] * 127.5 - 0.5);

  03216	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  0321b	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  03223	48 83 c1 18	 add	 rcx, 24
  03227	48 8b d0	 mov	 rdx, rax
  0322a	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  0322f	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  03232	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR in$84[rsp]
  0323a	f3 0f 5a 04 81	 cvtss2sd xmm0, DWORD PTR [rcx+rax*4]
  0323f	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@405fe00000000000
  03247	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe0000000000000
  0324f	f2 0f 2c c0	 cvttsd2si eax, xmm0
  03253	88 44 24 58	 mov	 BYTE PTR tv1641[rsp], al
  03257	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR j$[rsp]
  0325c	48 8b 94 24 58
	04 00 00	 mov	 rdx, QWORD PTR info$[rsp]
  03264	48 83 c2 30	 add	 rdx, 48			; 00000030H
  03268	48 89 94 24 08
	04 00 00	 mov	 QWORD PTR tv1613[rsp], rdx
  03270	48 8b d1	 mov	 rdx, rcx
  03273	48 8b 8c 24 08
	04 00 00	 mov	 rcx, QWORD PTR tv1613[rsp]
  0327b	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  03280	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  03283	48 8b 4c 24 50	 mov	 rcx, QWORD PTR out$6[rsp]
  03288	0f b6 54 24 58	 movzx	 edx, BYTE PTR tv1641[rsp]
  0328d	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 10053:         }

  03290	e9 67 ff ff ff	 jmp	 $LN209@convertBuf
$LN210@convertBuf:

; 10054:         in += info.inJump;

  03295	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  0329d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  032a1	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR in$84[rsp]
  032a9	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  032ad	48 89 84 24 68
	02 00 00	 mov	 QWORD PTR in$84[rsp], rax

; 10055:         out += info.outJump;

  032b5	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  032bd	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  032c1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR out$6[rsp]
  032c6	48 03 c8	 add	 rcx, rax
  032c9	48 8b c1	 mov	 rax, rcx
  032cc	48 89 44 24 50	 mov	 QWORD PTR out$6[rsp], rax

; 10056:       }

  032d1	e9 f1 fe ff ff	 jmp	 $LN206@convertBuf
$LN207@convertBuf:

; 10057:     }
; 10058:     else if (info.inFormat == RTAUDIO_FLOAT64) {

  032d6	e9 3e 01 00 00	 jmp	 $LN293@convertBuf
$LN292@convertBuf:
  032db	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  032e3	83 78 0c 20	 cmp	 DWORD PTR [rax+12], 32	; 00000020H
  032e7	0f 85 2c 01 00
	00		 jne	 $LN294@convertBuf

; 10059:       Float64 *in = (Float64 *)inBuffer;

  032ed	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR inBuffer$[rsp]
  032f5	48 89 84 24 70
	02 00 00	 mov	 QWORD PTR in$85[rsp], rax

; 10060:       for (unsigned int i=0; i<stream_.bufferSize; i++) {

  032fd	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$39[rsp], 0
  03308	eb 10		 jmp	 SHORT $LN214@convertBuf
$LN212@convertBuf:
  0330a	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR i$39[rsp]
  03311	ff c0		 inc	 eax
  03313	89 84 24 e0 00
	00 00		 mov	 DWORD PTR i$39[rsp], eax
$LN214@convertBuf:
  0331a	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR this$[rsp]
  03322	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  03328	39 84 24 e0 00
	00 00		 cmp	 DWORD PTR i$39[rsp], eax
  0332f	0f 83 e4 00 00
	00		 jae	 $LN213@convertBuf

; 10061:         for (j=0; j<info.channels; j++) {

  03335	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  0333d	eb 0a		 jmp	 SHORT $LN217@convertBuf
$LN215@convertBuf:
  0333f	8b 44 24 20	 mov	 eax, DWORD PTR j$[rsp]
  03343	ff c0		 inc	 eax
  03345	89 44 24 20	 mov	 DWORD PTR j$[rsp], eax
$LN217@convertBuf:
  03349	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  03351	8b 00		 mov	 eax, DWORD PTR [rax]
  03353	39 44 24 20	 cmp	 DWORD PTR j$[rsp], eax
  03357	7d 7f		 jge	 SHORT $LN216@convertBuf

; 10062:           out[info.outOffset[j]] = (signed char) (in[info.inOffset[j]] * 127.5 - 0.5);

  03359	48 63 44 24 20	 movsxd	 rax, DWORD PTR j$[rsp]
  0335e	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR info$[rsp]
  03366	48 83 c1 18	 add	 rcx, 24
  0336a	48 8b d0	 mov	 rdx, rax
  0336d	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  03372	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  03375	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR in$85[rsp]
  0337d	f2 0f 10 04 c1	 movsd	 xmm0, QWORD PTR [rcx+rax*8]
  03382	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@405fe00000000000
  0338a	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@3fe0000000000000
  03392	f2 0f 2c c0	 cvttsd2si eax, xmm0
  03396	88 44 24 59	 mov	 BYTE PTR tv1638[rsp], al
  0339a	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR j$[rsp]
  0339f	48 8b 94 24 58
	04 00 00	 mov	 rdx, QWORD PTR info$[rsp]
  033a7	48 83 c2 30	 add	 rdx, 48			; 00000030H
  033ab	48 89 94 24 10
	04 00 00	 mov	 QWORD PTR tv1650[rsp], rdx
  033b3	48 8b d1	 mov	 rdx, rcx
  033b6	48 8b 8c 24 10
	04 00 00	 mov	 rcx, QWORD PTR tv1650[rsp]
  033be	e8 00 00 00 00	 call	 ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ; std::vector<int,std::allocator<int> >::operator[]
  033c3	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  033c6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR out$6[rsp]
  033cb	0f b6 54 24 59	 movzx	 edx, BYTE PTR tv1638[rsp]
  033d0	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 10063:         }

  033d3	e9 67 ff ff ff	 jmp	 $LN215@convertBuf
$LN216@convertBuf:

; 10064:         in += info.inJump;

  033d8	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  033e0	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  033e4	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR in$85[rsp]
  033ec	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  033f0	48 89 84 24 70
	02 00 00	 mov	 QWORD PTR in$85[rsp], rax

; 10065:         out += info.outJump;

  033f8	48 8b 84 24 58
	04 00 00	 mov	 rax, QWORD PTR info$[rsp]
  03400	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  03404	48 8b 4c 24 50	 mov	 rcx, QWORD PTR out$6[rsp]
  03409	48 03 c8	 add	 rcx, rax
  0340c	48 8b c1	 mov	 rax, rcx
  0340f	48 89 44 24 50	 mov	 QWORD PTR out$6[rsp], rax

; 10066:       }

  03414	e9 f1 fe ff ff	 jmp	 $LN212@convertBuf
$LN213@convertBuf:
$LN294@convertBuf:
$LN293@convertBuf:
$LN291@convertBuf:
$LN289@convertBuf:
$LN287@convertBuf:
$LN284@convertBuf:
$LN272@convertBuf:
$LN259@convertBuf:
$LN246@convertBuf:
$LN233@convertBuf:
$LN220@convertBuf:

; 10067:     }
; 10068:   }
; 10069: }

  03419	48 81 c4 28 04
	00 00		 add	 rsp, 1064		; 00000428H
  03420	5f		 pop	 rdi
  03421	5e		 pop	 rsi
  03422	c3		 ret	 0
?convertBuffer@RtApi@@IEAAXPEAD0AEAUConvertInfo@1@@Z ENDP ; RtApi::convertBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
errorCallback$ = 32
tv136 = 40
$T1 = 48
$T2 = 56
$T3 = 88
errorMessage$4 = 120
__$ArrayPad$ = 152
this$ = 176
type$ = 184
?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z PROC		; RtApi::error

; 9465 : {

$LN12:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  00010	48 c7 44 24 30
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 9466 :   errorStream_.str(""); // clear the ostringstream

  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129654
  00032	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T3[rsp]
  00037	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0003c	90		 npad	 1
  0003d	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00045	48 83 c0 08	 add	 rax, 8
  00049	48 8d 54 24 58	 lea	 rdx, QWORD PTR $T3[rsp]
  0004e	48 8b c8	 mov	 rcx, rax
  00051	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00056	90		 npad	 1
  00057	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T3[rsp]
  0005c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 9467 : 
; 9468 :   RtAudioErrorCallback errorCallback = (RtAudioErrorCallback) stream_.callbackInfo.errorCallback;

  00061	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00069	48 8b 80 d0 01
	00 00		 mov	 rax, QWORD PTR [rax+464]
  00070	48 89 44 24 20	 mov	 QWORD PTR errorCallback$[rsp], rax

; 9469 :   if ( errorCallback ) {

  00075	48 83 7c 24 20
	00		 cmp	 QWORD PTR errorCallback$[rsp], 0
  0007b	0f 84 b1 00 00
	00		 je	 $LN2@error

; 9470 :     // abortStream() can generate new error messages. Ignore them. Just keep original one.
; 9471 : 
; 9472 :     if ( firstErrorOccurred_ )

  00081	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00089	0f b6 80 80 02
	00 00		 movzx	 eax, BYTE PTR [rax+640]
  00090	85 c0		 test	 eax, eax
  00092	74 05		 je	 SHORT $LN3@error

; 9473 :       return;

  00094	e9 37 01 00 00	 jmp	 $LN8@error
$LN3@error:

; 9474 : 
; 9475 :     firstErrorOccurred_ = true;

  00099	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000a1	c6 80 80 02 00
	00 01		 mov	 BYTE PTR [rax+640], 1

; 9476 :     const std::string errorMessage = errorText_;

  000a8	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000b0	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  000b6	48 8b d0	 mov	 rdx, rax
  000b9	48 8d 4c 24 78	 lea	 rcx, QWORD PTR errorMessage$4[rsp]
  000be	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000c3	90		 npad	 1

; 9477 : 
; 9478 :     if ( type != RtAudioError::WARNING && stream_.state != STREAM_STOPPED) {

  000c4	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR type$[rsp], 0
  000cc	74 36		 je	 SHORT $LN4@error
  000ce	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000d6	83 b8 2c 01 00
	00 00		 cmp	 DWORD PTR [rax+300], 0
  000dd	74 25		 je	 SHORT $LN4@error

; 9479 :       stream_.callbackInfo.isRunning = false; // exit from the thread

  000df	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000e7	c6 80 e0 01 00
	00 00		 mov	 BYTE PTR [rax+480], 0

; 9480 :       abortStream();

  000ee	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000f6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f9	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00101	ff 50 48	 call	 QWORD PTR [rax+72]
$LN4@error:

; 9481 :     }
; 9482 : 
; 9483 :     errorCallback( type, errorMessage );

  00104	48 8d 54 24 78	 lea	 rdx, QWORD PTR errorMessage$4[rsp]
  00109	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR type$[rsp]
  00110	ff 54 24 20	 call	 QWORD PTR errorCallback$[rsp]

; 9484 :     firstErrorOccurred_ = false;

  00114	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0011c	c6 80 80 02 00
	00 00		 mov	 BYTE PTR [rax+640], 0

; 9485 :     return;

  00123	48 8d 4c 24 78	 lea	 rcx, QWORD PTR errorMessage$4[rsp]
  00128	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0012d	e9 9e 00 00 00	 jmp	 $LN8@error
$LN2@error:

; 9486 :   }
; 9487 : 
; 9488 :   if ( type == RtAudioError::WARNING && showWarnings_ == true )

  00132	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR type$[rsp], 0
  0013a	75 56		 jne	 SHORT $LN5@error
  0013c	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00144	0f b6 80 10 01
	00 00		 movzx	 eax, BYTE PTR [rax+272]
  0014b	83 f8 01	 cmp	 eax, 1
  0014e	75 42		 jne	 SHORT $LN5@error

; 9489 :     std::cerr << '\n' << errorText_ << "\n\n";

  00150	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00158	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  0015e	48 89 44 24 28	 mov	 QWORD PTR tv136[rsp], rax
  00163	b2 0a		 mov	 dl, 10
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cerr
  0016c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00171	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv136[rsp]
  00176	48 8b d1	 mov	 rdx, rcx
  00179	48 8b c8	 mov	 rcx, rax
  0017c	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  00181	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129660
  00188	48 8b c8	 mov	 rcx, rax
  0018b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00190	eb 3e		 jmp	 SHORT $LN8@error
$LN5@error:

; 9490 :   else if ( type != RtAudioError::WARNING )

  00192	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR type$[rsp], 0
  0019a	74 34		 je	 SHORT $LN8@error

; 9491 :     throw( RtAudioError( errorText_, type ) );

  0019c	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001a4	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  001aa	44 8b 84 24 b8
	00 00 00	 mov	 r8d, DWORD PTR type$[rsp]
  001b2	48 8b d0	 mov	 rdx, rax
  001b5	48 8d 4c 24 38	 lea	 rcx, QWORD PTR $T2[rsp]
  001ba	e8 00 00 00 00	 call	 ??0RtAudioError@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Type@0@@Z ; RtAudioError::RtAudioError
  001bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI3?AVRtAudioError@@
  001c6	48 8d 4c 24 38	 lea	 rcx, QWORD PTR $T2[rsp]
  001cb	e8 00 00 00 00	 call	 _CxxThrowException
$LN8@error:

; 9492 : }

  001d0	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001d8	48 33 cc	 xor	 rcx, rsp
  001db	e8 00 00 00 00	 call	 __security_check_cookie
  001e0	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  001e7	c3		 ret	 0
$LN11@error:
?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ENDP		; RtApi::error
_TEXT	ENDS
text$x	SEGMENT
errorCallback$ = 32
tv136 = 40
$T1 = 48
$T2 = 56
$T3 = 88
errorMessage$4 = 120
__$ArrayPad$ = 152
this$ = 176
type$ = 184
?dtor$0@?0??error@RtApi@@IEAAXW4Type@RtAudioError@@@Z@4HA PROC ; `RtApi::error'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 4d 58	 lea	 rcx, QWORD PTR $T3[rbp]
  0000d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0??error@RtApi@@IEAAXW4Type@RtAudioError@@@Z@4HA ENDP ; `RtApi::error'::`1'::dtor$0
errorCallback$ = 32
tv136 = 40
$T1 = 48
$T2 = 56
$T3 = 88
errorMessage$4 = 120
__$ArrayPad$ = 152
this$ = 176
type$ = 184
?dtor$1@?0??error@RtApi@@IEAAXW4Type@RtAudioError@@@Z@4HA PROC ; `RtApi::error'::`1'::dtor$1
  00018	40 55		 push	 rbp
  0001a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001e	48 8b ea	 mov	 rbp, rdx
  00021	48 8d 4d 78	 lea	 rcx, QWORD PTR errorMessage$4[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
?dtor$1@?0??error@RtApi@@IEAAXW4Type@RtAudioError@@@Z@4HA ENDP ; `RtApi::error'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
text$x	SEGMENT
errorCallback$ = 32
tv136 = 40
$T1 = 48
$T2 = 56
$T3 = 88
errorMessage$4 = 120
__$ArrayPad$ = 152
this$ = 176
type$ = 184
?dtor$0@?0??error@RtApi@@IEAAXW4Type@RtAudioError@@@Z@4HA PROC ; `RtApi::error'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 4d 58	 lea	 rcx, QWORD PTR $T3[rbp]
  0000d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0??error@RtApi@@IEAAXW4Type@RtAudioError@@@Z@4HA ENDP ; `RtApi::error'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
text$x	SEGMENT
errorCallback$ = 32
tv136 = 40
$T1 = 48
$T2 = 56
$T3 = 88
errorMessage$4 = 120
__$ArrayPad$ = 152
this$ = 176
type$ = 184
?dtor$1@?0??error@RtApi@@IEAAXW4Type@RtAudioError@@@Z@4HA PROC ; `RtApi::error'::`1'::dtor$1
  00018	40 55		 push	 rbp
  0001a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001e	48 8b ea	 mov	 rbp, rdx
  00021	48 8d 4d 78	 lea	 rcx, QWORD PTR errorMessage$4[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
?dtor$1@?0??error@RtApi@@IEAAXW4Type@RtAudioError@@@Z@4HA ENDP ; `RtApi::error'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
this$ = 48
?verifyStream@RtApi@@IEAAXXZ PROC			; RtApi::verifyStream

; 9495 : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 9496 :   if ( stream_.state == STREAM_CLOSED ) {

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	83 b8 2c 01 00
	00 ce		 cmp	 DWORD PTR [rax+300], -50 ; ffffffffffffffceH
  00015	75 29		 jne	 SHORT $LN2@verifyStre

; 9497 :     errorText_ = "RtApi:: a stream is not open!";

  00017	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001c	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00022	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG129667
  00029	48 8b c8	 mov	 rcx, rax
  0002c	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 9498 :     error( RtAudioError::INVALID_USE );

  00031	ba 07 00 00 00	 mov	 edx, 7
  00036	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0003b	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error
$LN2@verifyStre:

; 9499 :   }
; 9500 : }

  00040	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00044	c3		 ret	 0
?verifyStream@RtApi@@IEAAXXZ ENDP			; RtApi::verifyStream
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
i$1 = 32
this$ = 64
?clearStreamInfo@RtApi@@IEAAXXZ PROC			; RtApi::clearStreamInfo

; 9503 : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 9504 :   stream_.mode = UNINITIALIZED;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	c7 80 28 01 00
	00 b5 ff ff ff	 mov	 DWORD PTR [rax+296], -75 ; ffffffffffffffb5H

; 9505 :   stream_.state = STREAM_CLOSED;

  00018	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0001d	c7 80 2c 01 00
	00 ce ff ff ff	 mov	 DWORD PTR [rax+300], -50 ; ffffffffffffffceH

; 9506 :   stream_.sampleRate = 0;

  00027	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0002c	c7 80 50 01 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+336], 0

; 9507 :   stream_.bufferSize = 0;

  00036	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0003b	c7 80 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+340], 0

; 9508 :   stream_.nBuffers = 0;

  00045	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0004a	c7 80 58 01 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+344], 0

; 9509 :   stream_.userFormat = 0;

  00054	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00059	c7 80 7c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+380], 0

; 9510 :   stream_.userInterleaved = true;

  00063	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00068	c6 80 4a 01 00
	00 01		 mov	 BYTE PTR [rax+330], 1

; 9511 :   stream_.streamTime = 0.0;

  0006f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00074	0f 57 c0	 xorps	 xmm0, xmm0
  00077	f2 0f 11 80 78
	02 00 00	 movsd	 QWORD PTR [rax+632], xmm0

; 9512 :   stream_.apiHandle = 0;

  0007f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00084	48 c7 80 20 01
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+288], 0

; 9513 :   stream_.deviceBuffer = 0;

  0008f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00094	48 c7 80 40 01
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+320], 0

; 9514 :   stream_.callbackInfo.callback = 0;

  0009f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000a4	48 c7 80 c0 01
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+448], 0

; 9515 :   stream_.callbackInfo.userData = 0;

  000af	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000b4	48 c7 80 c8 01
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+456], 0

; 9516 :   stream_.callbackInfo.isRunning = false;

  000bf	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000c4	c6 80 e0 01 00
	00 00		 mov	 BYTE PTR [rax+480], 0

; 9517 :   stream_.callbackInfo.errorCallback = 0;

  000cb	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000d0	48 c7 80 d0 01
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+464], 0

; 9518 :   for ( int i=0; i<2; i++ ) {

  000db	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0
  000e3	eb 0a		 jmp	 SHORT $LN4@clearStrea
$LN2@clearStrea:
  000e5	8b 44 24 20	 mov	 eax, DWORD PTR i$1[rsp]
  000e9	ff c0		 inc	 eax
  000eb	89 44 24 20	 mov	 DWORD PTR i$1[rsp], eax
$LN4@clearStrea:
  000ef	83 7c 24 20 02	 cmp	 DWORD PTR i$1[rsp], 2
  000f4	0f 8d 88 01 00
	00		 jge	 $LN3@clearStrea

; 9519 :     stream_.device[i] = 11111;

  000fa	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$1[rsp]
  000ff	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00104	c7 84 81 18 01
	00 00 67 2b 00
	00		 mov	 DWORD PTR [rcx+rax*4+280], 11111 ; 00002b67H

; 9520 :     stream_.doConvertBuffer[i] = false;

  0010f	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$1[rsp]
  00114	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00119	c6 84 01 48 01
	00 00 00	 mov	 BYTE PTR [rcx+rax+328], 0

; 9521 :     stream_.deviceInterleaved[i] = true;

  00121	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$1[rsp]
  00126	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0012b	c6 84 01 4b 01
	00 00 01	 mov	 BYTE PTR [rcx+rax+331], 1

; 9522 :     stream_.doByteSwap[i] = false;

  00133	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$1[rsp]
  00138	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0013d	c6 84 01 4d 01
	00 00 00	 mov	 BYTE PTR [rcx+rax+333], 0

; 9523 :     stream_.nUserChannels[i] = 0;

  00145	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$1[rsp]
  0014a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0014f	c7 84 81 5c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax*4+348], 0

; 9524 :     stream_.nDeviceChannels[i] = 0;

  0015a	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$1[rsp]
  0015f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00164	c7 84 81 64 01
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax*4+356], 0

; 9525 :     stream_.channelOffset[i] = 0;

  0016f	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$1[rsp]
  00174	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00179	c7 84 81 6c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax*4+364], 0

; 9526 :     stream_.deviceFormat[i] = 0;

  00184	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$1[rsp]
  00189	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0018e	c7 84 81 80 01
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax*4+384], 0

; 9527 :     stream_.latency[i] = 0;

  00199	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$1[rsp]
  0019e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  001a3	c7 84 81 74 01
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax*4+372], 0

; 9528 :     stream_.userBuffer[i] = 0;

  001ae	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$1[rsp]
  001b3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  001b8	48 c7 84 c1 30
	01 00 00 00 00
	00 00		 mov	 QWORD PTR [rcx+rax*8+304], 0

; 9529 :     stream_.convertInfo[i].channels = 0;

  001c4	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$1[rsp]
  001c9	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  001cd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  001d2	c7 84 01 e8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax+488], 0

; 9530 :     stream_.convertInfo[i].inJump = 0;

  001dd	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$1[rsp]
  001e2	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  001e6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  001eb	c7 84 01 ec 01
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax+492], 0

; 9531 :     stream_.convertInfo[i].outJump = 0;

  001f6	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$1[rsp]
  001fb	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  001ff	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00204	c7 84 01 f0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax+496], 0

; 9532 :     stream_.convertInfo[i].inFormat = 0;

  0020f	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$1[rsp]
  00214	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  00218	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0021d	c7 84 01 f4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax+500], 0

; 9533 :     stream_.convertInfo[i].outFormat = 0;

  00228	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$1[rsp]
  0022d	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  00231	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00236	c7 84 01 f8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR [rcx+rax+504], 0

; 9534 :     stream_.convertInfo[i].inOffset.clear();

  00241	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$1[rsp]
  00246	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  0024a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0024f	48 8d 84 01 00
	02 00 00	 lea	 rax, QWORD PTR [rcx+rax+512]
  00257	48 8b c8	 mov	 rcx, rax
  0025a	e8 00 00 00 00	 call	 ?clear@?$vector@HV?$allocator@H@std@@@std@@QEAAXXZ ; std::vector<int,std::allocator<int> >::clear

; 9535 :     stream_.convertInfo[i].outOffset.clear();

  0025f	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$1[rsp]
  00264	48 6b c0 48	 imul	 rax, rax, 72		; 00000048H
  00268	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0026d	48 8d 84 01 18
	02 00 00	 lea	 rax, QWORD PTR [rcx+rax+536]
  00275	48 8b c8	 mov	 rcx, rax
  00278	e8 00 00 00 00	 call	 ?clear@?$vector@HV?$allocator@H@std@@@std@@QEAAXXZ ; std::vector<int,std::allocator<int> >::clear

; 9536 :   }

  0027d	e9 63 fe ff ff	 jmp	 $LN2@clearStrea
$LN3@clearStrea:

; 9537 : }

  00282	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00286	c3		 ret	 0
?clearStreamInfo@RtApi@@IEAAXXZ ENDP			; RtApi::clearStreamInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
this$ = 8
?tickStreamTime@RtApi@@IEAAXXZ PROC			; RtApi::tickStreamTime

; 377  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 378  :   // Subclasses that do not provide their own implementation of
; 379  :   // getStreamTime should call this function once per buffer I/O to
; 380  :   // provide basic stream time support.
; 381  : 
; 382  :   stream_.streamTime += ( stream_.bufferSize * 1.0 / stream_.sampleRate );

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	8b 80 54 01 00
	00		 mov	 eax, DWORD PTR [rax+340]
  00010	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  00015	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@3ff0000000000000
  0001d	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00022	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]
  00028	f2 48 0f 2a c8	 cvtsi2sd xmm1, rax
  0002d	f2 0f 5e c1	 divsd	 xmm0, xmm1
  00031	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00036	f2 0f 10 88 78
	02 00 00	 movsd	 xmm1, QWORD PTR [rax+632]
  0003e	f2 0f 58 c8	 addsd	 xmm1, xmm0
  00042	0f 28 c1	 movaps	 xmm0, xmm1
  00045	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0004a	f2 0f 11 80 78
	02 00 00	 movsd	 QWORD PTR [rax+632], xmm0

; 383  : 
; 384  : #if defined( HAVE_GETTIMEOFDAY )
; 385  :   gettimeofday( &stream_.lastTickTimestamp, NULL );
; 386  : #endif
; 387  : }

  00052	c3		 ret	 0
?tickStreamTime@RtApi@@IEAAXXZ ENDP			; RtApi::tickStreamTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
__formal$ = 24
__formal$ = 32
__formal$ = 40
__formal$ = 48
__formal$ = 56
__formal$ = 64
__formal$ = 72
?probeDeviceOpen@RtApi@@MEAA_NIW4StreamMode@1@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z PROC ; RtApi::probeDeviceOpen

; 371  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 372  :   // MUST be implemented in subclasses!
; 373  :   return FAILURE;

  00013	32 c0		 xor	 al, al

; 374  : }

  00015	c3		 ret	 0
?probeDeviceOpen@RtApi@@MEAA_NIW4StreamMode@1@IIIKPEAIPEAUStreamOptions@RtAudio@@@Z ENDP ; RtApi::probeDeviceOpen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor', COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00014	48 8b c8	 mov	 rcx, rax
  00017	e8 00 00 00 00	 call	 ??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
  0001c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00021	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00027	48 8b c8	 mov	 rcx, rax
  0002a	e8 00 00 00 00	 call	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00012	48 2d 88 00 00
	00		 sub	 rax, 136		; 00000088H
  00018	48 8b c8	 mov	 rcx, rax
  0001b	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  00020	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  00024	83 e0 01	 and	 eax, 1
  00027	85 c0		 test	 eax, eax
  00029	74 18		 je	 SHORT $LN2@scalar
  0002b	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00030	48 2d 88 00 00
	00		 sub	 rax, 136		; 00000088H
  00036	ba e8 00 00 00	 mov	 edx, 232		; 000000e8H
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00043	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00048	48 2d 88 00 00
	00		 sub	 rax, 136		; 00000088H
  0004e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00052	c3		 ret	 0
??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 78 00 00 00	 mov	 edx, 120		; 00000078H
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAHH@Z
_TEXT	SEGMENT
_State$ = 0
this$ = 32
_Mode$ = 40
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate, COMDAT

; 354  : 		{	// convert open mode to stream state bits

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 18	 sub	 rsp, 24

; 355  : 		_Strstate _State = (_Strstate)0;

  0000d	c7 04 24 00 00
	00 00		 mov	 DWORD PTR _State$[rsp], 0

; 356  : 		if (!(_Mode & ios_base::in))

  00014	8b 44 24 28	 mov	 eax, DWORD PTR _Mode$[rsp]
  00018	83 e0 01	 and	 eax, 1
  0001b	85 c0		 test	 eax, eax
  0001d	75 09		 jne	 SHORT $LN2@Getstate

; 357  : 			_State |= _Noread;

  0001f	8b 04 24	 mov	 eax, DWORD PTR _State$[rsp]
  00022	83 c8 04	 or	 eax, 4
  00025	89 04 24	 mov	 DWORD PTR _State$[rsp], eax
$LN2@Getstate:

; 358  : 		if (!(_Mode & ios_base::out))

  00028	8b 44 24 28	 mov	 eax, DWORD PTR _Mode$[rsp]
  0002c	83 e0 02	 and	 eax, 2
  0002f	85 c0		 test	 eax, eax
  00031	75 09		 jne	 SHORT $LN3@Getstate

; 359  : 			_State |= _Constant;

  00033	8b 04 24	 mov	 eax, DWORD PTR _State$[rsp]
  00036	83 c8 02	 or	 eax, 2
  00039	89 04 24	 mov	 DWORD PTR _State$[rsp], eax
$LN3@Getstate:

; 360  : 		if (_Mode & ios_base::app)

  0003c	8b 44 24 28	 mov	 eax, DWORD PTR _Mode$[rsp]
  00040	83 e0 08	 and	 eax, 8
  00043	85 c0		 test	 eax, eax
  00045	74 09		 je	 SHORT $LN4@Getstate

; 361  : 			_State |= _Append;

  00047	8b 04 24	 mov	 eax, DWORD PTR _State$[rsp]
  0004a	83 c8 08	 or	 eax, 8
  0004d	89 04 24	 mov	 DWORD PTR _State$[rsp], eax
$LN4@Getstate:

; 362  : 		if (_Mode & ios_base::ate)

  00050	8b 44 24 28	 mov	 eax, DWORD PTR _Mode$[rsp]
  00054	83 e0 04	 and	 eax, 4
  00057	85 c0		 test	 eax, eax
  00059	74 09		 je	 SHORT $LN5@Getstate

; 363  : 			_State |= _Atend;

  0005b	8b 04 24	 mov	 eax, DWORD PTR _State$[rsp]
  0005e	83 c8 10	 or	 eax, 16
  00061	89 04 24	 mov	 DWORD PTR _State$[rsp], eax
$LN5@Getstate:

; 364  : 		return (_State);

  00064	8b 04 24	 mov	 eax, DWORD PTR _State$[rsp]

; 365  : 		}

  00067	48 83 c4 18	 add	 rsp, 24
  0006b	c3		 ret	 0
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ
_TEXT	SEGMENT
tv88 = 32
tv95 = 40
this$ = 64
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT

; 337  : 		{	// discard any allocated buffer and clear pointers

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 338  : 		if (_Mystate & _Allocated)

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00011	83 e0 01	 and	 eax, 1
  00014	85 c0		 test	 eax, eax
  00016	74 6c		 je	 SHORT $LN2@Tidy

; 339  : 			_Al.deallocate(_Mysb::eback(),

  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  00022	48 85 c0	 test	 rax, rax
  00025	74 11		 je	 SHORT $LN4@Tidy
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
  00031	48 89 44 24 20	 mov	 QWORD PTR tv88[rsp], rax
  00036	eb 0f		 jmp	 SHORT $LN5@Tidy
$LN4@Tidy:
  00038	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0003d	e8 00 00 00 00	 call	 ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::egptr
  00042	48 89 44 24 20	 mov	 QWORD PTR tv88[rsp], rax
$LN5@Tidy:
  00047	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0004c	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  00051	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv88[rsp]
  00056	48 2b c8	 sub	 rcx, rax
  00059	48 8b c1	 mov	 rax, rcx
  0005c	48 89 44 24 28	 mov	 QWORD PTR tv95[rsp], rax
  00061	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00066	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  0006b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00070	48 83 c1 74	 add	 rcx, 116		; 00000074H
  00074	48 8b 54 24 28	 mov	 rdx, QWORD PTR tv95[rsp]
  00079	4c 8b c2	 mov	 r8, rdx
  0007c	48 8b d0	 mov	 rdx, rax
  0007f	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXPEAD_K@Z ; std::allocator<char>::deallocate
$LN2@Tidy:

; 340  : 				(_Mysb::pptr() != 0 ? _Mysb::epptr()
; 341  : 					: _Mysb::egptr()) - _Mysb::eback());
; 342  : 		_Mysb::setg(0, 0, 0);

  00084	45 33 c9	 xor	 r9d, r9d
  00087	45 33 c0	 xor	 r8d, r8d
  0008a	33 d2		 xor	 edx, edx
  0008c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00091	e8 00 00 00 00	 call	 ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg

; 343  : 		_Mysb::setp(0, 0);

  00096	45 33 c0	 xor	 r8d, r8d
  00099	33 d2		 xor	 edx, edx
  0009b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000a0	e8 00 00 00 00	 call	 ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD0@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp

; 344  : 		_Seekhigh = 0;

  000a5	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000aa	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0

; 345  : 		_Mystate &= ~_Allocated;

  000b2	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000b7	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000ba	83 e0 fe	 and	 eax, -2
  000bd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000c2	89 41 70	 mov	 DWORD PTR [rcx+112], eax

; 346  : 		}

  000c5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c9	c3		 ret	 0
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXPEBD_KH@Z
_TEXT	SEGMENT
_Pnew$1 = 32
tv140 = 40
this$ = 64
_Ptr$ = 72
_Count$ = 80
_State$ = 88
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXPEBD_KH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init, COMDAT

; 310  : 		{	// initialize buffer to [_Ptr, _Ptr + _Count), set state

$LN9:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 311  : 		_Seekhigh = 0;

  00018	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0001d	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0

; 312  : 		_Mystate = _State;

  00025	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0002a	8b 4c 24 58	 mov	 ecx, DWORD PTR _State$[rsp]
  0002e	89 48 70	 mov	 DWORD PTR [rax+112], ecx

; 313  : 
; 314  : 		if (_Count != 0
; 315  : 			&& (_Mystate & (_Noread | _Constant)) != (_Noread | _Constant))

  00031	48 83 7c 24 50
	00		 cmp	 QWORD PTR _Count$[rsp], 0
  00037	0f 84 31 01 00
	00		 je	 $LN2@Init
  0003d	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00042	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00045	83 e0 06	 and	 eax, 6
  00048	83 f8 06	 cmp	 eax, 6
  0004b	0f 84 1d 01 00
	00		 je	 $LN2@Init

; 316  : 			{	// finite buffer that can be read or written, set it up
; 317  : 			_Elem *_Pnew = _Al.allocate(_Count);

  00051	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00056	48 83 c0 74	 add	 rax, 116		; 00000074H
  0005a	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Count$[rsp]
  0005f	48 8b c8	 mov	 rcx, rax
  00062	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  00067	48 89 44 24 20	 mov	 QWORD PTR _Pnew$1[rsp], rax

; 318  : 			_Traits::copy(_Pnew, _Ptr, _Count);

  0006c	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Count$[rsp]
  00071	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00076	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Pnew$1[rsp]
  0007b	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::copy

; 319  : 			_Seekhigh = _Pnew + _Count;

  00080	48 8b 44 24 50	 mov	 rax, QWORD PTR _Count$[rsp]
  00085	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Pnew$1[rsp]
  0008a	48 03 c8	 add	 rcx, rax
  0008d	48 8b c1	 mov	 rax, rcx
  00090	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00095	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 320  : 
; 321  : 			if (!(_Mystate & _Noread))

  00099	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0009e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000a1	83 e0 04	 and	 eax, 4
  000a4	85 c0		 test	 eax, eax
  000a6	75 27		 jne	 SHORT $LN3@Init

; 322  : 				_Mysb::setg(_Pnew, _Pnew,

  000a8	48 8b 44 24 50	 mov	 rax, QWORD PTR _Count$[rsp]
  000ad	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Pnew$1[rsp]
  000b2	48 03 c8	 add	 rcx, rax
  000b5	48 8b c1	 mov	 rax, rcx
  000b8	4c 8b c8	 mov	 r9, rax
  000bb	4c 8b 44 24 20	 mov	 r8, QWORD PTR _Pnew$1[rsp]
  000c0	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Pnew$1[rsp]
  000c5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000ca	e8 00 00 00 00	 call	 ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg
$LN3@Init:

; 323  : 					_Pnew + _Count);	// setup read buffer
; 324  : 			if (!(_Mystate & _Constant))

  000cf	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000d4	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000d7	83 e0 02	 and	 eax, 2
  000da	85 c0		 test	 eax, eax
  000dc	75 7d		 jne	 SHORT $LN4@Init

; 325  : 				{	// setup write buffer, and maybe read buffer
; 326  : 				_Mysb::setp(_Pnew,

  000de	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000e3	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000e6	83 e0 18	 and	 eax, 24
  000e9	85 c0		 test	 eax, eax
  000eb	74 17		 je	 SHORT $LN7@Init
  000ed	48 8b 44 24 50	 mov	 rax, QWORD PTR _Count$[rsp]
  000f2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Pnew$1[rsp]
  000f7	48 03 c8	 add	 rcx, rax
  000fa	48 8b c1	 mov	 rax, rcx
  000fd	48 89 44 24 28	 mov	 QWORD PTR tv140[rsp], rax
  00102	eb 0a		 jmp	 SHORT $LN8@Init
$LN7@Init:
  00104	48 8b 44 24 20	 mov	 rax, QWORD PTR _Pnew$1[rsp]
  00109	48 89 44 24 28	 mov	 QWORD PTR tv140[rsp], rax
$LN8@Init:
  0010e	48 8b 44 24 50	 mov	 rax, QWORD PTR _Count$[rsp]
  00113	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Pnew$1[rsp]
  00118	48 03 c8	 add	 rcx, rax
  0011b	48 8b c1	 mov	 rax, rcx
  0011e	4c 8b c8	 mov	 r9, rax
  00121	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv140[rsp]
  00126	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Pnew$1[rsp]
  0012b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00130	e8 00 00 00 00	 call	 ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp

; 327  : 					(_Mystate & (_Atend | _Append)) ? _Pnew + _Count : _Pnew,
; 328  : 					_Pnew + _Count);
; 329  : 				if (_Mysb::gptr() == 0)

  00135	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0013a	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  0013f	48 85 c0	 test	 rax, rax
  00142	75 17		 jne	 SHORT $LN5@Init

; 330  : 					_Mysb::setg(_Pnew, 0, _Pnew);

  00144	4c 8b 4c 24 20	 mov	 r9, QWORD PTR _Pnew$1[rsp]
  00149	45 33 c0	 xor	 r8d, r8d
  0014c	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Pnew$1[rsp]
  00151	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00156	e8 00 00 00 00	 call	 ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg
$LN5@Init:
$LN4@Init:

; 331  : 				}
; 332  : 			_Mystate |= _Allocated;

  0015b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00160	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00163	83 c8 01	 or	 eax, 1
  00166	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0016b	89 41 70	 mov	 DWORD PTR [rcx+112], eax
$LN2@Init:

; 333  : 			}
; 334  : 		}

  0016e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00172	c3		 ret	 0
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXPEBD_KH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
_Off$ = 32
tv150 = 40
tv180 = 48
tv187 = 56
tv225 = 64
this$ = 96
__$ReturnUdt$ = 104
_Ptr$ = 112
_Mode$ = 120
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos, COMDAT

; 276  : 		{	// change position to _Pos, according to _Mode

$LN15:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 277  : 		streamoff _Off = (streamoff)_Ptr;

  00018	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  0001d	e8 00 00 00 00	 call	 ??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ ; std::fpos<_Mbstatet>::operator __int64
  00022	48 89 44 24 20	 mov	 QWORD PTR _Off$[rsp], rax

; 278  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  00027	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  00031	48 85 c0	 test	 rax, rax
  00034	74 28		 je	 SHORT $LN2@seekpos
  00036	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0003b	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  00040	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00045	48 39 41 68	 cmp	 QWORD PTR [rcx+104], rax
  00049	73 13		 jae	 SHORT $LN2@seekpos

; 279  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  0004b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00050	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  00055	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0005a	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
$LN2@seekpos:

; 280  : 
; 281  : 		if (_Off == _BADOFF)

  0005e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_BADOFF@std@@3_JB ; std::_BADOFF
  00065	48 39 44 24 20	 cmp	 QWORD PTR _Off$[rsp], rax
  0006a	75 05		 jne	 SHORT $LN3@seekpos
  0006c	e9 8c 01 00 00	 jmp	 $LN4@seekpos
$LN3@seekpos:

; 282  : 			;
; 283  : 		else if (_Mode & ios_base::in && _Mysb::gptr() != 0)

  00071	8b 44 24 78	 mov	 eax, DWORD PTR _Mode$[rsp]
  00075	83 e0 01	 and	 eax, 1
  00078	85 c0		 test	 eax, eax
  0007a	0f 84 ea 00 00
	00		 je	 $LN5@seekpos
  00080	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00085	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  0008a	48 85 c0	 test	 rax, rax
  0008d	0f 84 d7 00 00
	00		 je	 $LN5@seekpos

; 284  : 			{	// position within read buffer
; 285  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00093	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Off$[rsp], 0
  00099	0f 8c ba 00 00
	00		 jl	 $LN7@seekpos
  0009f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000a4	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  000a9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000ae	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  000b2	48 2b c8	 sub	 rcx, rax
  000b5	48 8b c1	 mov	 rax, rcx
  000b8	48 39 44 24 20	 cmp	 QWORD PTR _Off$[rsp], rax
  000bd	0f 8f 96 00 00
	00		 jg	 $LN7@seekpos

; 286  : 				{	// change read position
; 287  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  000c3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000c8	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  000cd	48 89 44 24 28	 mov	 QWORD PTR tv150[rsp], rax
  000d2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000d7	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  000dc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv150[rsp]
  000e1	48 2b c8	 sub	 rcx, rax
  000e4	48 8b c1	 mov	 rax, rcx
  000e7	48 03 44 24 20	 add	 rax, QWORD PTR _Off$[rsp]
  000ec	8b d0		 mov	 edx, eax
  000ee	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000f3	e8 00 00 00 00	 call	 ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::gbump

; 288  : 				if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  000f8	8b 44 24 78	 mov	 eax, DWORD PTR _Mode$[rsp]
  000fc	83 e0 02	 and	 eax, 2
  000ff	85 c0		 test	 eax, eax
  00101	74 54		 je	 SHORT $LN9@seekpos
  00103	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00108	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  0010d	48 85 c0	 test	 rax, rax
  00110	74 45		 je	 SHORT $LN9@seekpos

; 289  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),

  00112	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00117	e8 00 00 00 00	 call	 ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
  0011c	48 89 44 24 30	 mov	 QWORD PTR tv180[rsp], rax
  00121	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00126	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  0012b	48 89 44 24 38	 mov	 QWORD PTR tv187[rsp], rax
  00130	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00135	e8 00 00 00 00	 call	 ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pbase
  0013a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv180[rsp]
  0013f	4c 8b c9	 mov	 r9, rcx
  00142	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv187[rsp]
  00147	4c 8b c1	 mov	 r8, rcx
  0014a	48 8b d0	 mov	 rdx, rax
  0014d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00152	e8 00 00 00 00	 call	 ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
$LN9@seekpos:

; 290  : 						_Mysb::epptr());	// change write position to match
; 291  : 				}
; 292  : 			else

  00157	eb 0c		 jmp	 SHORT $LN8@seekpos
$LN7@seekpos:

; 293  : 				_Off = _BADOFF;

  00159	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_BADOFF@std@@3_JB ; std::_BADOFF
  00160	48 89 44 24 20	 mov	 QWORD PTR _Off$[rsp], rax
$LN8@seekpos:
  00165	e9 93 00 00 00	 jmp	 $LN6@seekpos
$LN5@seekpos:

; 294  : 			}
; 295  : 		else if (_Mode & ios_base::out && _Mysb::pptr() != 0)

  0016a	8b 44 24 78	 mov	 eax, DWORD PTR _Mode$[rsp]
  0016e	83 e0 02	 and	 eax, 2
  00171	85 c0		 test	 eax, eax
  00173	74 7c		 je	 SHORT $LN10@seekpos
  00175	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0017a	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  0017f	48 85 c0	 test	 rax, rax
  00182	74 6d		 je	 SHORT $LN10@seekpos

; 296  : 			{	// position within write buffer
; 297  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00184	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Off$[rsp], 0
  0018a	7c 57		 jl	 SHORT $LN12@seekpos
  0018c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00191	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  00196	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0019b	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0019f	48 2b c8	 sub	 rcx, rax
  001a2	48 8b c1	 mov	 rax, rcx
  001a5	48 39 44 24 20	 cmp	 QWORD PTR _Off$[rsp], rax
  001aa	7f 37		 jg	 SHORT $LN12@seekpos

; 298  : 				_Mysb::pbump((int)(_Mysb::eback()

  001ac	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  001b1	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  001b6	48 89 44 24 40	 mov	 QWORD PTR tv225[rsp], rax
  001bb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  001c0	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  001c5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv225[rsp]
  001ca	48 2b c8	 sub	 rcx, rax
  001cd	48 8b c1	 mov	 rax, rcx
  001d0	48 03 44 24 20	 add	 rax, QWORD PTR _Off$[rsp]
  001d5	8b d0		 mov	 edx, eax
  001d7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  001dc	e8 00 00 00 00	 call	 ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbump

; 299  : 					- _Mysb::pptr() + _Off));	// change write position
; 300  : 			else

  001e1	eb 0c		 jmp	 SHORT $LN13@seekpos
$LN12@seekpos:

; 301  : 				_Off = _BADOFF;

  001e3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_BADOFF@std@@3_JB ; std::_BADOFF
  001ea	48 89 44 24 20	 mov	 QWORD PTR _Off$[rsp], rax
$LN13@seekpos:

; 302  : 			}
; 303  : 		else

  001ef	eb 0c		 jmp	 SHORT $LN11@seekpos
$LN10@seekpos:

; 304  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

  001f1	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_BADOFF@std@@3_JB ; std::_BADOFF
  001f8	48 89 44 24 20	 mov	 QWORD PTR _Off$[rsp], rax
$LN11@seekpos:
$LN6@seekpos:
$LN4@seekpos:

; 305  : 		return (streampos(_Off));

  001fd	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Off$[rsp]
  00202	48 8b 4c 24 68	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00207	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  0020c	48 8b 44 24 68	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 306  : 		}

  00211	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00215	c3		 ret	 0
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
tv145 = 32
tv175 = 40
tv205 = 48
tv212 = 56
tv246 = 64
tv276 = 72
this$ = 96
__$ReturnUdt$ = 104
_Off$ = 112
_Way$ = 120
_Which$ = 128
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff, COMDAT

; 227  : 		{	// change position by _Off, according to _Way, _Mode

$LN24:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 228  : 		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())

  00018	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  00022	48 85 c0	 test	 rax, rax
  00025	74 28		 je	 SHORT $LN2@seekoff
  00027	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  00031	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00036	48 39 41 68	 cmp	 QWORD PTR [rcx+104], rax
  0003a	73 13		 jae	 SHORT $LN2@seekoff

; 229  : 			_Seekhigh = _Mysb::pptr();	// update high-water pointer

  0003c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00041	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  00046	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0004b	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
$LN2@seekoff:

; 230  : 
; 231  : 		if (_Which & ios_base::in && _Mysb::gptr() != 0)

  0004f	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR _Which$[rsp]
  00056	83 e0 01	 and	 eax, 1
  00059	85 c0		 test	 eax, eax
  0005b	0f 84 7d 01 00
	00		 je	 $LN3@seekoff
  00061	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00066	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  0006b	48 85 c0	 test	 rax, rax
  0006e	0f 84 6a 01 00
	00		 je	 $LN3@seekoff

; 232  : 			{	// position within read buffer
; 233  : 			if (_Way == ios_base::end)

  00074	83 7c 24 78 02	 cmp	 DWORD PTR _Way$[rsp], 2
  00079	75 2b		 jne	 SHORT $LN5@seekoff

; 234  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  0007b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00080	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  00085	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0008a	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0008e	48 2b c8	 sub	 rcx, rax
  00091	48 8b c1	 mov	 rax, rcx
  00094	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Off$[rsp]
  00099	48 03 c8	 add	 rcx, rax
  0009c	48 8b c1	 mov	 rax, rcx
  0009f	48 89 44 24 70	 mov	 QWORD PTR _Off$[rsp], rax

; 235  : 			else if (_Way == ios_base::cur

  000a4	eb 5e		 jmp	 SHORT $LN6@seekoff
$LN5@seekoff:

; 236  : 				&& (_Which & ios_base::out) == 0)

  000a6	83 7c 24 78 01	 cmp	 DWORD PTR _Way$[rsp], 1
  000ab	75 44		 jne	 SHORT $LN7@seekoff
  000ad	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR _Which$[rsp]
  000b4	83 e0 02	 and	 eax, 2
  000b7	85 c0		 test	 eax, eax
  000b9	75 36		 jne	 SHORT $LN7@seekoff

; 237  : 				_Off += (off_type)(_Mysb::gptr() - _Mysb::eback());

  000bb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000c0	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  000c5	48 89 44 24 20	 mov	 QWORD PTR tv145[rsp], rax
  000ca	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000cf	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  000d4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv145[rsp]
  000d9	48 2b c8	 sub	 rcx, rax
  000dc	48 8b c1	 mov	 rax, rcx
  000df	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Off$[rsp]
  000e4	48 03 c8	 add	 rcx, rax
  000e7	48 8b c1	 mov	 rax, rcx
  000ea	48 89 44 24 70	 mov	 QWORD PTR _Off$[rsp], rax
  000ef	eb 13		 jmp	 SHORT $LN8@seekoff
$LN7@seekoff:

; 238  : 			else if (_Way != ios_base::beg)

  000f1	83 7c 24 78 00	 cmp	 DWORD PTR _Way$[rsp], 0
  000f6	74 0c		 je	 SHORT $LN9@seekoff

; 239  : 				_Off = _BADOFF;

  000f8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_BADOFF@std@@3_JB ; std::_BADOFF
  000ff	48 89 44 24 70	 mov	 QWORD PTR _Off$[rsp], rax
$LN9@seekoff:
$LN8@seekoff:
$LN6@seekoff:

; 240  : 
; 241  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00104	48 83 7c 24 70
	00		 cmp	 QWORD PTR _Off$[rsp], 0
  0010a	0f 8c bd 00 00
	00		 jl	 $LN10@seekoff
  00110	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00115	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  0011a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0011f	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00123	48 2b c8	 sub	 rcx, rax
  00126	48 8b c1	 mov	 rax, rcx
  00129	48 39 44 24 70	 cmp	 QWORD PTR _Off$[rsp], rax
  0012e	0f 8f 99 00 00
	00		 jg	 $LN10@seekoff

; 242  : 				{	// change read position
; 243  : 				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));

  00134	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00139	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  0013e	48 89 44 24 28	 mov	 QWORD PTR tv175[rsp], rax
  00143	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00148	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  0014d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv175[rsp]
  00152	48 2b c8	 sub	 rcx, rax
  00155	48 8b c1	 mov	 rax, rcx
  00158	48 03 44 24 70	 add	 rax, QWORD PTR _Off$[rsp]
  0015d	8b d0		 mov	 edx, eax
  0015f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00164	e8 00 00 00 00	 call	 ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::gbump

; 244  : 				if (_Which & ios_base::out && _Mysb::pptr() != 0)

  00169	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR _Which$[rsp]
  00170	83 e0 02	 and	 eax, 2
  00173	85 c0		 test	 eax, eax
  00175	74 54		 je	 SHORT $LN12@seekoff
  00177	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0017c	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  00181	48 85 c0	 test	 rax, rax
  00184	74 45		 je	 SHORT $LN12@seekoff

; 245  : 					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),

  00186	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0018b	e8 00 00 00 00	 call	 ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
  00190	48 89 44 24 30	 mov	 QWORD PTR tv205[rsp], rax
  00195	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0019a	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  0019f	48 89 44 24 38	 mov	 QWORD PTR tv212[rsp], rax
  001a4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  001a9	e8 00 00 00 00	 call	 ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pbase
  001ae	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv205[rsp]
  001b3	4c 8b c9	 mov	 r9, rcx
  001b6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv212[rsp]
  001bb	4c 8b c1	 mov	 r8, rcx
  001be	48 8b d0	 mov	 rdx, rax
  001c1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  001c6	e8 00 00 00 00	 call	 ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
$LN12@seekoff:

; 246  : 						_Mysb::epptr());	// change write position to match
; 247  : 				}
; 248  : 			else

  001cb	eb 0c		 jmp	 SHORT $LN11@seekoff
$LN10@seekoff:

; 249  : 				_Off = _BADOFF;

  001cd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_BADOFF@std@@3_JB ; std::_BADOFF
  001d4	48 89 44 24 70	 mov	 QWORD PTR _Off$[rsp], rax
$LN11@seekoff:
  001d9	e9 28 01 00 00	 jmp	 $LN4@seekoff
$LN3@seekoff:

; 250  : 			}
; 251  : 		else if (_Which & ios_base::out && _Mysb::pptr() != 0)

  001de	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR _Which$[rsp]
  001e5	83 e0 02	 and	 eax, 2
  001e8	85 c0		 test	 eax, eax
  001ea	0f 84 02 01 00
	00		 je	 $LN13@seekoff
  001f0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  001f5	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  001fa	48 85 c0	 test	 rax, rax
  001fd	0f 84 ef 00 00
	00		 je	 $LN13@seekoff

; 252  : 			{	// position within write buffer
; 253  : 			if (_Way == ios_base::end)

  00203	83 7c 24 78 02	 cmp	 DWORD PTR _Way$[rsp], 2
  00208	75 2b		 jne	 SHORT $LN15@seekoff

; 254  : 				_Off += (off_type)(_Seekhigh - _Mysb::eback());

  0020a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0020f	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  00214	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00219	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0021d	48 2b c8	 sub	 rcx, rax
  00220	48 8b c1	 mov	 rax, rcx
  00223	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Off$[rsp]
  00228	48 03 c8	 add	 rcx, rax
  0022b	48 8b c1	 mov	 rax, rcx
  0022e	48 89 44 24 70	 mov	 QWORD PTR _Off$[rsp], rax
  00233	eb 50		 jmp	 SHORT $LN16@seekoff
$LN15@seekoff:

; 255  : 			else if (_Way == ios_base::cur)

  00235	83 7c 24 78 01	 cmp	 DWORD PTR _Way$[rsp], 1
  0023a	75 36		 jne	 SHORT $LN17@seekoff

; 256  : 				_Off += (off_type)(_Mysb::pptr() - _Mysb::eback());

  0023c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00241	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  00246	48 89 44 24 40	 mov	 QWORD PTR tv246[rsp], rax
  0024b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00250	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  00255	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv246[rsp]
  0025a	48 2b c8	 sub	 rcx, rax
  0025d	48 8b c1	 mov	 rax, rcx
  00260	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _Off$[rsp]
  00265	48 03 c8	 add	 rcx, rax
  00268	48 8b c1	 mov	 rax, rcx
  0026b	48 89 44 24 70	 mov	 QWORD PTR _Off$[rsp], rax
  00270	eb 13		 jmp	 SHORT $LN18@seekoff
$LN17@seekoff:

; 257  : 			else if (_Way != ios_base::beg)

  00272	83 7c 24 78 00	 cmp	 DWORD PTR _Way$[rsp], 0
  00277	74 0c		 je	 SHORT $LN19@seekoff

; 258  : 				_Off = _BADOFF;

  00279	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_BADOFF@std@@3_JB ; std::_BADOFF
  00280	48 89 44 24 70	 mov	 QWORD PTR _Off$[rsp], rax
$LN19@seekoff:
$LN18@seekoff:
$LN16@seekoff:

; 259  : 
; 260  : 			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())

  00285	48 83 7c 24 70
	00		 cmp	 QWORD PTR _Off$[rsp], 0
  0028b	7c 57		 jl	 SHORT $LN20@seekoff
  0028d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00292	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  00297	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0029c	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  002a0	48 2b c8	 sub	 rcx, rax
  002a3	48 8b c1	 mov	 rax, rcx
  002a6	48 39 44 24 70	 cmp	 QWORD PTR _Off$[rsp], rax
  002ab	7f 37		 jg	 SHORT $LN20@seekoff

; 261  : 				_Mysb::pbump((int)(_Mysb::eback()

  002ad	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  002b2	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  002b7	48 89 44 24 48	 mov	 QWORD PTR tv276[rsp], rax
  002bc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  002c1	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  002c6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv276[rsp]
  002cb	48 2b c8	 sub	 rcx, rax
  002ce	48 8b c1	 mov	 rax, rcx
  002d1	48 03 44 24 70	 add	 rax, QWORD PTR _Off$[rsp]
  002d6	8b d0		 mov	 edx, eax
  002d8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  002dd	e8 00 00 00 00	 call	 ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbump

; 262  : 					- _Mysb::pptr() + _Off));	// change write position
; 263  : 			else

  002e2	eb 0c		 jmp	 SHORT $LN21@seekoff
$LN20@seekoff:

; 264  : 				_Off = _BADOFF;

  002e4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_BADOFF@std@@3_JB ; std::_BADOFF
  002eb	48 89 44 24 70	 mov	 QWORD PTR _Off$[rsp], rax
$LN21@seekoff:
  002f0	eb 14		 jmp	 SHORT $LN14@seekoff
$LN13@seekoff:

; 265  : 			}
; 266  : 
; 267  : 		else if (_Off != 0)

  002f2	48 83 7c 24 70
	00		 cmp	 QWORD PTR _Off$[rsp], 0
  002f8	74 0c		 je	 SHORT $LN22@seekoff

; 268  : 
; 269  : 
; 270  : 			_Off = _BADOFF;	// neither read nor write buffer selected, fail

  002fa	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_BADOFF@std@@3_JB ; std::_BADOFF
  00301	48 89 44 24 70	 mov	 QWORD PTR _Off$[rsp], rax
$LN22@seekoff:
$LN14@seekoff:
$LN4@seekoff:

; 271  : 		return (pos_type(_Off));

  00306	48 8b 54 24 70	 mov	 rdx, QWORD PTR _Off$[rsp]
  0030b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00310	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  00315	48 8b 44 24 68	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 272  : 		}

  0031a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0031e	c3		 ret	 0
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ
_TEXT	SEGMENT
tv77 = 32
tv140 = 40
tv184 = 48
this$ = 80
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow, COMDAT

; 207  : 		{	// get an element from stream, but don't point past it

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 208  : 		if (_Mysb::gptr() == 0)

  00009	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00013	48 85 c0	 test	 rax, rax
  00016	75 0f		 jne	 SHORT $LN2@underflow

; 209  : 			return (_Traits::eof());	// no character buffer, fail

  00018	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0001d	e9 14 01 00 00	 jmp	 $LN1@underflow
  00022	e9 0f 01 00 00	 jmp	 $LN3@underflow
$LN2@underflow:

; 210  : 		else if (_Mysb::gptr() < _Mysb::egptr())

  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00031	48 89 44 24 20	 mov	 QWORD PTR tv77[rsp], rax
  00036	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0003b	e8 00 00 00 00	 call	 ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::egptr
  00040	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv77[rsp]
  00045	48 3b c8	 cmp	 rcx, rax
  00048	73 1c		 jae	 SHORT $LN4@underflow

; 211  : 			return (_Traits::to_int_type(*_Mysb::gptr()));	// return buffered

  0004a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0004f	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHAEBD@Z ; std::char_traits<char>::to_int_type
  0005c	e9 d5 00 00 00	 jmp	 $LN1@underflow

; 212  : 		else if (_Mystate & _Noread || _Mysb::pptr() == 0

  00061	e9 d0 00 00 00	 jmp	 $LN5@underflow
$LN4@underflow:

; 213  : 			|| (_Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr()))

  00066	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0006b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0006e	83 e0 04	 and	 eax, 4
  00071	85 c0		 test	 eax, eax
  00073	75 47		 jne	 SHORT $LN8@underflow
  00075	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0007a	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  0007f	48 85 c0	 test	 rax, rax
  00082	74 38		 je	 SHORT $LN8@underflow
  00084	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00089	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  0008e	48 89 44 24 28	 mov	 QWORD PTR tv140[rsp], rax
  00093	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00098	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  0009d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv140[rsp]
  000a2	48 3b c8	 cmp	 rcx, rax
  000a5	77 1e		 ja	 SHORT $LN6@underflow
  000a7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000ac	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  000b1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000b6	48 39 41 68	 cmp	 QWORD PTR [rcx+104], rax
  000ba	77 09		 ja	 SHORT $LN6@underflow
$LN8@underflow:

; 214  : 			return (_Traits::eof());	// can't read, fail

  000bc	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000c1	eb 73		 jmp	 SHORT $LN1@underflow

; 215  : 		else

  000c3	eb 71		 jmp	 SHORT $LN7@underflow
$LN6@underflow:

; 216  : 			{	// extend read buffer into written area, then return buffered
; 217  : 			if (_Seekhigh < _Mysb::pptr())

  000c5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000ca	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  000cf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000d4	48 39 41 68	 cmp	 QWORD PTR [rcx+104], rax
  000d8	73 13		 jae	 SHORT $LN9@underflow

; 218  : 				_Seekhigh = _Mysb::pptr();

  000da	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000df	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  000e4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000e9	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
$LN9@underflow:

; 219  : 			_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);

  000ed	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000f2	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  000f7	48 89 44 24 30	 mov	 QWORD PTR tv184[rsp], rax
  000fc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00101	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  00106	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0010b	4c 8b 49 68	 mov	 r9, QWORD PTR [rcx+104]
  0010f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv184[rsp]
  00114	4c 8b c1	 mov	 r8, rcx
  00117	48 8b d0	 mov	 rdx, rax
  0011a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0011f	e8 00 00 00 00	 call	 ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg

; 220  : 			return (_Traits::to_int_type(*_Mysb::gptr()));

  00124	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00129	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  0012e	48 8b c8	 mov	 rcx, rax
  00131	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHAEBD@Z ; std::char_traits<char>::to_int_type
$LN7@underflow:
$LN5@underflow:
$LN3@underflow:
$LN1@underflow:

; 221  : 			}
; 222  : 		}

  00136	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0013a	c3		 ret	 0
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z
_TEXT	SEGMENT
$T1 = 32
tv155 = 33
$T2 = 36
$T3 = 40
tv76 = 48
this$ = 80
_Meta$ = 88
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail, COMDAT

; 190  : 		{	// put an element back to stream

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 191  : 		if (_Mysb::gptr() == 0
; 192  : 			|| _Mysb::gptr() <= _Mysb::eback()
; 193  : 			|| (!_Traits::eq_int_type(_Traits::eof(), _Meta)

  0000d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00017	48 85 c0	 test	 rax, rax
  0001a	0f 84 89 00 00
	00		 je	 $LN4@pbackfail
  00020	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00025	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  0002a	48 89 44 24 30	 mov	 QWORD PTR tv76[rsp], rax
  0002f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00034	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  00039	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv76[rsp]
  0003e	48 3b c8	 cmp	 rcx, rax
  00041	76 66		 jbe	 SHORT $LN4@pbackfail
  00043	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00048	89 44 24 24	 mov	 DWORD PTR $T2[rsp], eax
  0004c	48 8d 54 24 58	 lea	 rdx, QWORD PTR _Meta$[rsp]
  00051	48 8d 4c 24 24	 lea	 rcx, QWORD PTR $T2[rsp]
  00056	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  0005b	0f b6 c0	 movzx	 eax, al
  0005e	85 c0		 test	 eax, eax
  00060	75 50		 jne	 SHORT $LN2@pbackfail
  00062	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Meta$[rsp]
  00067	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADAEBH@Z ; std::char_traits<char>::to_char_type
  0006c	88 44 24 20	 mov	 BYTE PTR $T1[rsp], al
  00070	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00075	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  0007a	b9 01 00 00 00	 mov	 ecx, 1
  0007f	48 6b c9 ff	 imul	 rcx, rcx, -1
  00083	48 03 c1	 add	 rax, rcx
  00086	48 8b d0	 mov	 rdx, rax
  00089	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  0008e	e8 00 00 00 00	 call	 ?eq@?$char_traits@D@std@@SA_NAEBD0@Z ; std::char_traits<char>::eq
  00093	0f b6 c0	 movzx	 eax, al
  00096	85 c0		 test	 eax, eax
  00098	75 18		 jne	 SHORT $LN2@pbackfail
  0009a	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0009f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000a2	83 e0 02	 and	 eax, 2
  000a5	85 c0		 test	 eax, eax
  000a7	74 09		 je	 SHORT $LN2@pbackfail
$LN4@pbackfail:

; 194  : 			&& !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
; 195  : 			&& _Mystate & _Constant))
; 196  : 			return (_Traits::eof());	// can't put back, fail

  000a9	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000ae	eb 59		 jmp	 SHORT $LN1@pbackfail

; 197  : 		else

  000b0	eb 57		 jmp	 SHORT $LN3@pbackfail
$LN2@pbackfail:

; 198  : 			{	// back up one position and store put-back character
; 199  : 			_Mysb::gbump(-1);

  000b2	ba ff ff ff ff	 mov	 edx, -1
  000b7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000bc	e8 00 00 00 00	 call	 ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::gbump

; 200  : 			if (!_Traits::eq_int_type(_Traits::eof(), _Meta))

  000c1	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000c6	89 44 24 28	 mov	 DWORD PTR $T3[rsp], eax
  000ca	48 8d 54 24 58	 lea	 rdx, QWORD PTR _Meta$[rsp]
  000cf	48 8d 4c 24 28	 lea	 rcx, QWORD PTR $T3[rsp]
  000d4	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  000d9	0f b6 c0	 movzx	 eax, al
  000dc	85 c0		 test	 eax, eax
  000de	75 1f		 jne	 SHORT $LN5@pbackfail

; 201  : 				*_Mysb::gptr() = _Traits::to_char_type(_Meta);

  000e0	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Meta$[rsp]
  000e5	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADAEBH@Z ; std::char_traits<char>::to_char_type
  000ea	88 44 24 21	 mov	 BYTE PTR tv155[rsp], al
  000ee	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000f3	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  000f8	0f b6 4c 24 21	 movzx	 ecx, BYTE PTR tv155[rsp]
  000fd	88 08		 mov	 BYTE PTR [rax], cl
$LN5@pbackfail:

; 202  : 			return (_Traits::not_eof(_Meta));

  000ff	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Meta$[rsp]
  00104	e8 00 00 00 00	 call	 ?not_eof@?$char_traits@D@std@@SAHAEBH@Z ; std::char_traits<char>::not_eof
$LN3@pbackfail:
$LN1@pbackfail:

; 203  : 			}
; 204  : 		}

  00109	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0010d	c3		 ret	 0
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z
_TEXT	SEGMENT
_Newptr$1 = 32
tv330 = 40
tv307 = 41
_Newsize$2 = 48
_Inc$3 = 56
_Oldptr$4 = 64
_Oldsize$5 = 72
$T6 = 80
tv195 = 88
tv199 = 96
tv136 = 104
tv159 = 112
tv187 = 120
tv263 = 128
tv272 = 136
tv305 = 144
this$ = 176
_Meta$ = 184
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow, COMDAT

; 120  : 		{	// put an element to stream

$LN24:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 121  : 		if (_Mystate & _Constant)

  00010	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00018	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0001b	83 e0 02	 and	 eax, 2
  0001e	85 c0		 test	 eax, eax
  00020	74 0c		 je	 SHORT $LN4@overflow

; 122  : 			return (_Traits::eof());	// array nonmutable, fail

  00022	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00027	e9 a3 04 00 00	 jmp	 $LN1@overflow
  0002c	eb 34		 jmp	 SHORT $LN5@overflow
$LN4@overflow:

; 123  : 		else if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0002e	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00033	89 44 24 50	 mov	 DWORD PTR $T6[rsp], eax
  00037	48 8d 94 24 b8
	00 00 00	 lea	 rdx, QWORD PTR _Meta$[rsp]
  0003f	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T6[rsp]
  00044	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  00049	0f b6 c0	 movzx	 eax, al
  0004c	85 c0		 test	 eax, eax
  0004e	74 12		 je	 SHORT $LN6@overflow

; 124  : 			return (_Traits::not_eof(_Meta));	// EOF, return success code

  00050	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR _Meta$[rsp]
  00058	e8 00 00 00 00	 call	 ?not_eof@?$char_traits@D@std@@SAHAEBH@Z ; std::char_traits<char>::not_eof
  0005d	e9 6d 04 00 00	 jmp	 $LN1@overflow
$LN6@overflow:
$LN5@overflow:

; 125  : 
; 126  : 		if (_Mystate & _Append
; 127  : 			&& _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)

  00062	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0006a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0006d	83 e0 08	 and	 eax, 8
  00070	85 c0		 test	 eax, eax
  00072	74 70		 je	 SHORT $LN7@overflow
  00074	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0007c	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  00081	48 85 c0	 test	 rax, rax
  00084	74 5e		 je	 SHORT $LN7@overflow
  00086	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0008e	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  00093	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0009b	48 3b 41 68	 cmp	 rax, QWORD PTR [rcx+104]
  0009f	73 43		 jae	 SHORT $LN7@overflow

; 128  : 			_Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

  000a1	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000a9	e8 00 00 00 00	 call	 ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
  000ae	48 89 44 24 68	 mov	 QWORD PTR tv136[rsp], rax
  000b3	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000bb	e8 00 00 00 00	 call	 ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pbase
  000c0	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv136[rsp]
  000c5	4c 8b c9	 mov	 r9, rcx
  000c8	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000d0	4c 8b 41 68	 mov	 r8, QWORD PTR [rcx+104]
  000d4	48 8b d0	 mov	 rdx, rax
  000d7	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000df	e8 00 00 00 00	 call	 ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp
$LN7@overflow:

; 129  : 
; 130  : 		if (_Mysb::pptr() != 0
; 131  : 			&& _Mysb::pptr() < _Mysb::epptr())

  000e4	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000ec	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  000f1	48 85 c0	 test	 rax, rax
  000f4	74 5f		 je	 SHORT $LN8@overflow
  000f6	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000fe	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  00103	48 89 44 24 70	 mov	 QWORD PTR tv159[rsp], rax
  00108	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00110	e8 00 00 00 00	 call	 ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
  00115	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv159[rsp]
  0011a	48 3b c8	 cmp	 rcx, rax
  0011d	73 36		 jae	 SHORT $LN8@overflow

; 132  : 			{	// room in buffer, store it
; 133  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  0011f	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR _Meta$[rsp]
  00127	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADAEBH@Z ; std::char_traits<char>::to_char_type
  0012c	88 44 24 28	 mov	 BYTE PTR tv330[rsp], al
  00130	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00138	e8 00 00 00 00	 call	 ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
  0013d	0f b6 4c 24 28	 movzx	 ecx, BYTE PTR tv330[rsp]
  00142	88 08		 mov	 BYTE PTR [rax], cl

; 134  : 			return (_Meta);

  00144	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR _Meta$[rsp]
  0014b	e9 7f 03 00 00	 jmp	 $LN1@overflow

; 135  : 			}
; 136  : 		else

  00150	e9 7a 03 00 00	 jmp	 $LN9@overflow
$LN8@overflow:

; 137  : 			{	// grow buffer and store element
; 138  : 			size_t _Oldsize = _Mysb::pptr() == 0

  00155	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0015d	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  00162	48 85 c0	 test	 rax, rax
  00165	75 0b		 jne	 SHORT $LN20@overflow
  00167	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tv195[rsp], 0
  00170	eb 2f		 jmp	 SHORT $LN21@overflow
$LN20@overflow:
  00172	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0017a	e8 00 00 00 00	 call	 ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::epptr
  0017f	48 89 44 24 78	 mov	 QWORD PTR tv187[rsp], rax
  00184	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0018c	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  00191	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv187[rsp]
  00196	48 2b c8	 sub	 rcx, rax
  00199	48 8b c1	 mov	 rax, rcx
  0019c	48 89 44 24 58	 mov	 QWORD PTR tv195[rsp], rax
$LN21@overflow:
  001a1	48 8b 44 24 58	 mov	 rax, QWORD PTR tv195[rsp]
  001a6	48 89 44 24 48	 mov	 QWORD PTR _Oldsize$5[rsp], rax

; 139  : 				? 0 : _Mysb::epptr() - _Mysb::eback();
; 140  : 			size_t _Newsize = _Oldsize;

  001ab	48 8b 44 24 48	 mov	 rax, QWORD PTR _Oldsize$5[rsp]
  001b0	48 89 44 24 30	 mov	 QWORD PTR _Newsize$2[rsp], rax

; 141  : 			size_t _Inc = _Newsize / 2 < _MINSIZE

  001b5	33 d2		 xor	 edx, edx
  001b7	48 8b 44 24 30	 mov	 rax, QWORD PTR _Newsize$2[rsp]
  001bc	b9 02 00 00 00	 mov	 ecx, 2
  001c1	48 f7 f1	 div	 rcx
  001c4	48 83 f8 20	 cmp	 rax, 32			; 00000020H
  001c8	73 0b		 jae	 SHORT $LN22@overflow
  001ca	48 c7 44 24 60
	20 00 00 00	 mov	 QWORD PTR tv199[rsp], 32 ; 00000020H
  001d3	eb 14		 jmp	 SHORT $LN23@overflow
$LN22@overflow:
  001d5	33 d2		 xor	 edx, edx
  001d7	48 8b 44 24 30	 mov	 rax, QWORD PTR _Newsize$2[rsp]
  001dc	b9 02 00 00 00	 mov	 ecx, 2
  001e1	48 f7 f1	 div	 rcx
  001e4	48 89 44 24 60	 mov	 QWORD PTR tv199[rsp], rax
$LN23@overflow:
  001e9	48 8b 44 24 60	 mov	 rax, QWORD PTR tv199[rsp]
  001ee	48 89 44 24 38	 mov	 QWORD PTR _Inc$3[rsp], rax
$LN2@overflow:

; 142  : 				? _MINSIZE : _Newsize / 2;	// grow by 50 per cent
; 143  : 
; 144  : 			while (0 < _Inc && INT_MAX - _Inc < _Newsize)

  001f3	48 83 7c 24 38
	00		 cmp	 QWORD PTR _Inc$3[rsp], 0
  001f9	76 27		 jbe	 SHORT $LN3@overflow
  001fb	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00200	48 2b 44 24 38	 sub	 rax, QWORD PTR _Inc$3[rsp]
  00205	48 3b 44 24 30	 cmp	 rax, QWORD PTR _Newsize$2[rsp]
  0020a	73 16		 jae	 SHORT $LN3@overflow

; 145  : 				_Inc /= 2;	// increment causes overflow, halve it

  0020c	33 d2		 xor	 edx, edx
  0020e	48 8b 44 24 38	 mov	 rax, QWORD PTR _Inc$3[rsp]
  00213	b9 02 00 00 00	 mov	 ecx, 2
  00218	48 f7 f1	 div	 rcx
  0021b	48 89 44 24 38	 mov	 QWORD PTR _Inc$3[rsp], rax
  00220	eb d1		 jmp	 SHORT $LN2@overflow
$LN3@overflow:

; 146  : 			if (_Inc == 0)

  00222	48 83 7c 24 38
	00		 cmp	 QWORD PTR _Inc$3[rsp], 0
  00228	75 0a		 jne	 SHORT $LN10@overflow

; 147  : 				return (_Traits::eof());	// buffer can't grow, fail

  0022a	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0022f	e9 9b 02 00 00	 jmp	 $LN1@overflow
$LN10@overflow:

; 148  : 
; 149  : 			_Newsize += _Inc;

  00234	48 8b 44 24 38	 mov	 rax, QWORD PTR _Inc$3[rsp]
  00239	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Newsize$2[rsp]
  0023e	48 03 c8	 add	 rcx, rax
  00241	48 8b c1	 mov	 rax, rcx
  00244	48 89 44 24 30	 mov	 QWORD PTR _Newsize$2[rsp], rax

; 150  : 
; 151  : 			_Elem *_Newptr = _Al.allocate(_Newsize);

  00249	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00251	48 83 c0 74	 add	 rax, 116		; 00000074H
  00255	48 8b 54 24 30	 mov	 rdx, QWORD PTR _Newsize$2[rsp]
  0025a	48 8b c8	 mov	 rcx, rax
  0025d	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  00262	48 89 44 24 20	 mov	 QWORD PTR _Newptr$1[rsp], rax

; 152  : 			_Elem *_Oldptr = _Mysb::eback();

  00267	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0026f	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  00274	48 89 44 24 40	 mov	 QWORD PTR _Oldptr$4[rsp], rax

; 153  : 
; 154  : 			if (0 < _Oldsize)

  00279	48 83 7c 24 48
	00		 cmp	 QWORD PTR _Oldsize$5[rsp], 0
  0027f	76 14		 jbe	 SHORT $LN11@overflow

; 155  : 				_Traits::copy(_Newptr, _Oldptr, _Oldsize);

  00281	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Oldsize$5[rsp]
  00286	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Oldptr$4[rsp]
  0028b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Newptr$1[rsp]
  00290	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::copy
$LN11@overflow:

; 156  : 
; 157  : 			if (_Oldsize == 0)

  00295	48 83 7c 24 48
	00		 cmp	 QWORD PTR _Oldsize$5[rsp], 0
  0029b	0f 85 8b 00 00
	00		 jne	 $LN12@overflow

; 158  : 				{	// first growth, set up pointers
; 159  : 				_Seekhigh = _Newptr;

  002a1	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  002a9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Newptr$1[rsp]
  002ae	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 160  : 				_Mysb::setp(_Newptr, _Newptr + _Newsize);

  002b2	48 8b 44 24 30	 mov	 rax, QWORD PTR _Newsize$2[rsp]
  002b7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Newptr$1[rsp]
  002bc	48 03 c8	 add	 rcx, rax
  002bf	48 8b c1	 mov	 rax, rcx
  002c2	4c 8b c0	 mov	 r8, rax
  002c5	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Newptr$1[rsp]
  002ca	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  002d2	e8 00 00 00 00	 call	 ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD0@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp

; 161  : 				if (_Mystate & _Noread)

  002d7	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  002df	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002e2	83 e0 04	 and	 eax, 4
  002e5	85 c0		 test	 eax, eax
  002e7	74 1c		 je	 SHORT $LN14@overflow

; 162  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  002e9	4c 8b 4c 24 20	 mov	 r9, QWORD PTR _Newptr$1[rsp]
  002ee	45 33 c0	 xor	 r8d, r8d
  002f1	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Newptr$1[rsp]
  002f6	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  002fe	e8 00 00 00 00	 call	 ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg

; 163  : 				else

  00303	eb 22		 jmp	 SHORT $LN15@overflow
$LN14@overflow:

; 164  : 					_Mysb::setg(_Newptr, _Newptr, _Newptr + 1);

  00305	48 8b 44 24 20	 mov	 rax, QWORD PTR _Newptr$1[rsp]
  0030a	48 ff c0	 inc	 rax
  0030d	4c 8b c8	 mov	 r9, rax
  00310	4c 8b 44 24 20	 mov	 r8, QWORD PTR _Newptr$1[rsp]
  00315	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Newptr$1[rsp]
  0031a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00322	e8 00 00 00 00	 call	 ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg
$LN15@overflow:

; 165  : 				}
; 166  : 			else

  00327	e9 2e 01 00 00	 jmp	 $LN13@overflow
$LN12@overflow:

; 167  : 				{	// not first growth, adjust pointers
; 168  : 				_Seekhigh = _Newptr + (_Seekhigh - _Oldptr);

  0032c	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00334	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Oldptr$4[rsp]
  00339	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0033d	48 2b c1	 sub	 rax, rcx
  00340	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Newptr$1[rsp]
  00345	48 03 c8	 add	 rcx, rax
  00348	48 8b c1	 mov	 rax, rcx
  0034b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00353	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 169  : 				_Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),

  00357	48 8b 44 24 30	 mov	 rax, QWORD PTR _Newsize$2[rsp]
  0035c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Newptr$1[rsp]
  00361	48 03 c8	 add	 rcx, rax
  00364	48 8b c1	 mov	 rax, rcx
  00367	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv263[rsp], rax
  0036f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00377	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  0037c	48 2b 44 24 40	 sub	 rax, QWORD PTR _Oldptr$4[rsp]
  00381	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Newptr$1[rsp]
  00386	48 03 c8	 add	 rcx, rax
  00389	48 8b c1	 mov	 rax, rcx
  0038c	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv272[rsp], rax
  00394	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0039c	e8 00 00 00 00	 call	 ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pbase
  003a1	48 2b 44 24 40	 sub	 rax, QWORD PTR _Oldptr$4[rsp]
  003a6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Newptr$1[rsp]
  003ab	48 03 c8	 add	 rcx, rax
  003ae	48 8b c1	 mov	 rax, rcx
  003b1	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv263[rsp]
  003b9	4c 8b c9	 mov	 r9, rcx
  003bc	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv272[rsp]
  003c4	4c 8b c1	 mov	 r8, rcx
  003c7	48 8b d0	 mov	 rdx, rax
  003ca	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  003d2	e8 00 00 00 00	 call	 ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp

; 170  : 					_Newptr + (_Mysb::pptr() - _Oldptr),
; 171  : 					_Newptr + _Newsize);
; 172  : 				if (_Mystate & _Noread)

  003d7	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  003df	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003e2	83 e0 04	 and	 eax, 4
  003e5	85 c0		 test	 eax, eax
  003e7	74 1c		 je	 SHORT $LN16@overflow

; 173  : 					_Mysb::setg(_Newptr, 0, _Newptr);

  003e9	4c 8b 4c 24 20	 mov	 r9, QWORD PTR _Newptr$1[rsp]
  003ee	45 33 c0	 xor	 r8d, r8d
  003f1	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Newptr$1[rsp]
  003f6	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  003fe	e8 00 00 00 00	 call	 ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg

; 174  : 				else

  00403	eb 55		 jmp	 SHORT $LN17@overflow
$LN16@overflow:

; 175  : 					_Mysb::setg(_Newptr,

  00405	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0040d	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  00412	48 ff c0	 inc	 rax
  00415	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv305[rsp], rax
  0041d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00425	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  0042a	48 2b 44 24 40	 sub	 rax, QWORD PTR _Oldptr$4[rsp]
  0042f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Newptr$1[rsp]
  00434	48 03 c8	 add	 rcx, rax
  00437	48 8b c1	 mov	 rax, rcx
  0043a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv305[rsp]
  00442	4c 8b c9	 mov	 r9, rcx
  00445	4c 8b c0	 mov	 r8, rax
  00448	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Newptr$1[rsp]
  0044d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00455	e8 00 00 00 00	 call	 ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg
$LN17@overflow:
$LN13@overflow:

; 176  : 						_Newptr + (_Mysb::gptr() - _Oldptr),
; 177  : 						_Mysb::pptr() + 1);
; 178  : 				}
; 179  : 
; 180  : 			if (_Mystate & _Allocated)

  0045a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00462	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00465	83 e0 01	 and	 eax, 1
  00468	85 c0		 test	 eax, eax
  0046a	74 1e		 je	 SHORT $LN18@overflow

; 181  : 				_Al.deallocate(_Oldptr, _Oldsize);

  0046c	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00474	48 83 c0 74	 add	 rax, 116		; 00000074H
  00478	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Oldsize$5[rsp]
  0047d	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Oldptr$4[rsp]
  00482	48 8b c8	 mov	 rcx, rax
  00485	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXPEAD_K@Z ; std::allocator<char>::deallocate
$LN18@overflow:

; 182  : 			_Mystate |= _Allocated;

  0048a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00492	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00495	83 c8 01	 or	 eax, 1
  00498	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  004a0	89 41 70	 mov	 DWORD PTR [rcx+112], eax

; 183  : 
; 184  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  004a3	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR _Meta$[rsp]
  004ab	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADAEBH@Z ; std::char_traits<char>::to_char_type
  004b0	88 44 24 29	 mov	 BYTE PTR tv307[rsp], al
  004b4	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  004bc	e8 00 00 00 00	 call	 ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
  004c1	0f b6 4c 24 29	 movzx	 ecx, BYTE PTR tv307[rsp]
  004c6	88 08		 mov	 BYTE PTR [rax], cl

; 185  : 			return (_Meta);

  004c8	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR _Meta$[rsp]
$LN9@overflow:
$LN1@overflow:

; 186  : 			}
; 187  : 		}

  004cf	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  004d6	c3		 ret	 0
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
tv69 = 32
this$ = 64
_Newstr$ = 72
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT

; 113  : 		{	// replace character array from string

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 114  : 		_Tidy();

  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 115  : 		_Init(_Newstr.c_str(), _Newstr.size(), _Mystate);

  00018	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Newstr$[rsp]
  0001d	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00022	48 89 44 24 20	 mov	 QWORD PTR tv69[rsp], rax
  00027	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Newstr$[rsp]
  0002c	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00031	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00036	44 8b 49 70	 mov	 r9d, DWORD PTR [rcx+112]
  0003a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv69[rsp]
  0003f	4c 8b c1	 mov	 r8, rcx
  00042	48 8b d0	 mov	 rdx, rax
  00045	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0004a	e8 00 00 00 00	 call	 ?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXPEBD_KH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init

; 116  : 		}

  0004f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00053	c3		 ret	 0
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = 32
tv91 = 40
tv130 = 48
tv161 = 56
tv168 = 64
_Str$2 = 72
_Str$3 = 104
_Nul$4 = 136
__$ArrayPad$ = 168
this$ = 192
__$ReturnUdt$ = 200
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT

; 93   : 		{	// return string copy of character array

$LN14:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  00023	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 94   : 		if (!(_Mystate & _Constant) && _Mysb::pptr() != 0)

  0002b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00033	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00036	83 e0 02	 and	 eax, 2
  00039	85 c0		 test	 eax, eax
  0003b	0f 85 ce 00 00
	00		 jne	 $LN2@str
  00041	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00049	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  0004e	48 85 c0	 test	 rax, rax
  00051	0f 84 b8 00 00
	00		 je	 $LN2@str

; 95   : 			{	// writable, make string from write buffer
; 96   : 			_Mystr _Str(_Mysb::pbase(), (_Seekhigh < _Mysb::pptr()

  00057	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0005f	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  00064	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0006c	48 39 41 68	 cmp	 QWORD PTR [rcx+104], rax
  00070	73 14		 jae	 SHORT $LN7@str
  00072	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0007a	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  0007f	48 89 44 24 28	 mov	 QWORD PTR tv91[rsp], rax
  00084	eb 11		 jmp	 SHORT $LN8@str
$LN7@str:
  00086	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0008e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00092	48 89 44 24 28	 mov	 QWORD PTR tv91[rsp], rax
$LN8@str:
  00097	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0009f	e8 00 00 00 00	 call	 ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pbase
  000a4	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv91[rsp]
  000a9	48 2b c8	 sub	 rcx, rax
  000ac	48 8b c1	 mov	 rax, rcx
  000af	48 89 44 24 30	 mov	 QWORD PTR tv130[rsp], rax
  000b4	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000bc	e8 00 00 00 00	 call	 ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pbase
  000c1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv130[rsp]
  000c6	4c 8b c1	 mov	 r8, rcx
  000c9	48 8b d0	 mov	 rdx, rax
  000cc	48 8d 4c 24 48	 lea	 rcx, QWORD PTR _Str$2[rsp]
  000d1	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 97   : 				? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());
; 98   : 			return (_Str);

  000d6	48 8d 54 24 48	 lea	 rdx, QWORD PTR _Str$2[rsp]
  000db	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  000e3	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000e8	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  000ec	83 c8 01	 or	 eax, 1
  000ef	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  000f3	48 8d 4c 24 48	 lea	 rcx, QWORD PTR _Str$2[rsp]
  000f8	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000fd	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
  00105	e9 f7 00 00 00	 jmp	 $LN1@str
  0010a	e9 f2 00 00 00	 jmp	 $LN1@str
$LN2@str:

; 99   : 			}
; 100  : 		else if (!(_Mystate & _Noread) && _Mysb::gptr() != 0)

  0010f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00117	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0011a	83 e0 04	 and	 eax, 4
  0011d	85 c0		 test	 eax, eax
  0011f	0f 85 9a 00 00
	00		 jne	 $LN4@str
  00125	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0012d	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00132	48 85 c0	 test	 rax, rax
  00135	0f 84 84 00 00
	00		 je	 $LN4@str

; 101  : 			{	// readable, make string from read buffer
; 102  : 			_Mystr _Str(_Mysb::eback(), _Mysb::egptr() - _Mysb::eback());

  0013b	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00143	e8 00 00 00 00	 call	 ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::egptr
  00148	48 89 44 24 38	 mov	 QWORD PTR tv161[rsp], rax
  0014d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00155	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  0015a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv161[rsp]
  0015f	48 2b c8	 sub	 rcx, rax
  00162	48 8b c1	 mov	 rax, rcx
  00165	48 89 44 24 40	 mov	 QWORD PTR tv168[rsp], rax
  0016a	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00172	e8 00 00 00 00	 call	 ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::eback
  00177	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv168[rsp]
  0017c	4c 8b c1	 mov	 r8, rcx
  0017f	48 8b d0	 mov	 rdx, rax
  00182	48 8d 4c 24 68	 lea	 rcx, QWORD PTR _Str$3[rsp]
  00187	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 103  : 			return (_Str);

  0018c	48 8d 54 24 68	 lea	 rdx, QWORD PTR _Str$3[rsp]
  00191	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00199	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0019e	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  001a2	83 c8 01	 or	 eax, 1
  001a5	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  001a9	48 8d 4c 24 68	 lea	 rcx, QWORD PTR _Str$3[rsp]
  001ae	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001b3	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
  001bb	eb 44		 jmp	 SHORT $LN1@str

; 104  : 			}
; 105  : 		else

  001bd	eb 42		 jmp	 SHORT $LN1@str
$LN4@str:

; 106  : 			{	// inaccessible, return empty string
; 107  : 			_Mystr _Nul;

  001bf	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR _Nul$4[rsp]
  001c7	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 108  : 			return (_Nul);

  001cc	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR _Nul$4[rsp]
  001d4	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  001dc	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  001e1	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  001e5	83 c8 01	 or	 eax, 1
  001e8	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  001ec	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR _Nul$4[rsp]
  001f4	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  001f9	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
$LN1@str:

; 109  : 			}
; 110  : 		}

  00201	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00209	48 33 cc	 xor	 rcx, rsp
  0020c	e8 00 00 00 00	 call	 __security_check_cookie
  00211	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00218	c3		 ret	 0
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 75   : 		{	// destroy the object

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0001e	48 89 08	 mov	 QWORD PTR [rax], rcx

; 76   : 		_Tidy();

  00021	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00026	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0002b	90		 npad	 1

; 77   : 		}

  0002c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00031	e8 00 00 00 00	 call	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
  00036	90		 npad	 1
  00037	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003b	c3		 ret	 0
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Mode$ = 72
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 28   : 	explicit basic_stringbuf(ios_base::openmode _Mode =

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000d	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 29   : 		ios_base::in | ios_base::out)
; 30   : 		{	// construct empty character buffer from mode

  00016	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001b	e8 00 00 00 00	 call	 ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAA@XZ ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
  00020	90		 npad	 1
  00021	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0002d	48 89 08	 mov	 QWORD PTR [rax], rcx
  00030	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00035	48 83 c0 74	 add	 rax, 116		; 00000074H
  00039	48 8b c8	 mov	 rcx, rax
  0003c	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QEAA@XZ ; std::allocator<char>::allocator<char>

; 31   : 		_Init(0, 0, _Getstate(_Mode));

  00041	8b 54 24 48	 mov	 edx, DWORD PTR _Mode$[rsp]
  00045	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0004a	e8 00 00 00 00	 call	 ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
  0004f	44 8b c8	 mov	 r9d, eax
  00052	45 33 c0	 xor	 r8d, r8d
  00055	33 d2		 xor	 edx, edx
  00057	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0005c	e8 00 00 00 00	 call	 ?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXPEBD_KH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Init
  00061	90		 npad	 1

; 32   : 		}

  00062	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00067	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006b	c3		 ret	 0
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
_Mode$ = 72
?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA PROC ; `std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA ENDP ; `std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
_Mode$ = 72
?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA PROC ; `std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA ENDP ; `std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 68 00 00 00	 mov	 edx, 104		; 00000068H
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::imbue, COMDAT

; 448  : 		{	// set locale to argument (do nothing)

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 449  : 		}

  0000a	c3		 ret	 0
?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::imbue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
_TEXT	SEGMENT
this$ = 8
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::sync, COMDAT

; 443  : 		{	// synchronize with external agent (do nothing)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 444  : 		return (0);

  00005	33 c0		 xor	 eax, eax

; 445  : 		}

  00007	c3		 ret	 0
?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sync
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAPEAV12@PEAD_J@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
__formal$ = 24
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAPEAV12@PEAD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setbuf, COMDAT

; 438  : 		{	// offer buffer to external agent (do nothing)

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 439  : 		return (this);

  0000f	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 440  : 		}

  00014	c3		 ret	 0
?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAPEAV12@PEAD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
__formal$ = 64
__formal$ = 72
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekpos, COMDAT

; 433  : 		{	// change to specified position, according to mode

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 434  : 		return (streampos(_BADOFF));

  00018	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?_BADOFF@std@@3_JB ; std::_BADOFF
  0001f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00024	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  00029	48 8b 44 24 38	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 435  : 		}

  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	c3		 ret	 0
?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
__formal$ = 64
__formal$ = 72
__formal$ = 80
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::seekoff, COMDAT

; 427  : 		{	// change position by offset, according to way and mode

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 428  : 		return (streampos(_BADOFF));

  00018	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?_BADOFF@std@@3_JB ; std::_BADOFF
  0001f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00024	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  00029	48 8b 44 24 38	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 429  : 		}

  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	c3		 ret	 0
?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 36
_Size$ = 40
_Copied$ = 48
tv95 = 56
this$ = 80
_Ptr$ = 88
_Count$ = 96
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn, COMDAT

; 397  : 		{	// put _Count characters to stream

$LN11:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 398  : 		streamsize _Size, _Copied;
; 399  : 
; 400  : 		for (_Copied = 0; 0 < _Count; )

  00013	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR _Copied$[rsp], 0
$LN2@xsputn:
  0001c	48 83 7c 24 60
	00		 cmp	 QWORD PTR _Count$[rsp], 0
  00022	0f 8e 15 01 00
	00		 jle	 $LN3@xsputn

; 401  : 			if (0 < (_Size = _Pnavail()))

  00028	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
  00032	48 89 44 24 28	 mov	 QWORD PTR _Size$[rsp], rax
  00037	48 83 7c 24 28
	00		 cmp	 QWORD PTR _Size$[rsp], 0
  0003d	0f 8e 81 00 00
	00		 jle	 $LN5@xsputn

; 402  : 				{	// copy to write buffer
; 403  : 				if (_Count < _Size)

  00043	48 8b 44 24 28	 mov	 rax, QWORD PTR _Size$[rsp]
  00048	48 39 44 24 60	 cmp	 QWORD PTR _Count$[rsp], rax
  0004d	7d 0a		 jge	 SHORT $LN7@xsputn

; 404  : 					_Size = _Count;

  0004f	48 8b 44 24 60	 mov	 rax, QWORD PTR _Count$[rsp]
  00054	48 89 44 24 28	 mov	 QWORD PTR _Size$[rsp], rax
$LN7@xsputn:

; 405  : 				_Traits::copy(pptr(), _Ptr, (size_t)_Size);

  00059	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0005e	e8 00 00 00 00	 call	 ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::pptr
  00063	4c 8b 44 24 28	 mov	 r8, QWORD PTR _Size$[rsp]
  00068	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  0006d	48 8b c8	 mov	 rcx, rax
  00070	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::copy

; 406  : 				_Ptr += _Size;

  00075	48 8b 44 24 28	 mov	 rax, QWORD PTR _Size$[rsp]
  0007a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  0007f	48 03 c8	 add	 rcx, rax
  00082	48 8b c1	 mov	 rax, rcx
  00085	48 89 44 24 58	 mov	 QWORD PTR _Ptr$[rsp], rax

; 407  : 				_Copied += _Size;

  0008a	48 8b 44 24 28	 mov	 rax, QWORD PTR _Size$[rsp]
  0008f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Copied$[rsp]
  00094	48 03 c8	 add	 rcx, rax
  00097	48 8b c1	 mov	 rax, rcx
  0009a	48 89 44 24 30	 mov	 QWORD PTR _Copied$[rsp], rax

; 408  : 				_Count -= _Size;

  0009f	48 8b 44 24 28	 mov	 rax, QWORD PTR _Size$[rsp]
  000a4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _Count$[rsp]
  000a9	48 2b c8	 sub	 rcx, rax
  000ac	48 8b c1	 mov	 rax, rcx
  000af	48 89 44 24 60	 mov	 QWORD PTR _Count$[rsp], rax

; 409  : 				pbump((int)_Size);

  000b4	8b 54 24 28	 mov	 edx, DWORD PTR _Size$[rsp]
  000b8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000bd	e8 00 00 00 00	 call	 ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::pbump
  000c2	eb 74		 jmp	 SHORT $LN6@xsputn
$LN5@xsputn:

; 410  : 				}
; 411  : 			else if (_Traits::eq_int_type(_Traits::eof(),

  000c4	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  000c9	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHAEBD@Z ; std::char_traits<char>::to_int_type
  000ce	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000d3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d6	48 89 4c 24 38	 mov	 QWORD PTR tv95[rsp], rcx
  000db	8b d0		 mov	 edx, eax
  000dd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000e2	48 8b 44 24 38	 mov	 rax, QWORD PTR tv95[rsp]
  000e7	ff 50 18	 call	 QWORD PTR [rax+24]
  000ea	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  000ee	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000f3	89 44 24 24	 mov	 DWORD PTR $T2[rsp], eax
  000f7	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  000fc	48 8d 4c 24 24	 lea	 rcx, QWORD PTR $T2[rsp]
  00101	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  00106	0f b6 c0	 movzx	 eax, al
  00109	85 c0		 test	 eax, eax
  0010b	74 04		 je	 SHORT $LN8@xsputn

; 412  : 				overflow(_Traits::to_int_type(*_Ptr))))
; 413  : 				break;	// single character put failed, quit

  0010d	eb 2e		 jmp	 SHORT $LN3@xsputn

; 414  : 			else

  0010f	eb 27		 jmp	 SHORT $LN9@xsputn
$LN8@xsputn:

; 415  : 				{	// count character successfully put
; 416  : 				++_Ptr;

  00111	48 8b 44 24 58	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00116	48 ff c0	 inc	 rax
  00119	48 89 44 24 58	 mov	 QWORD PTR _Ptr$[rsp], rax

; 417  : 				++_Copied;

  0011e	48 8b 44 24 30	 mov	 rax, QWORD PTR _Copied$[rsp]
  00123	48 ff c0	 inc	 rax
  00126	48 89 44 24 30	 mov	 QWORD PTR _Copied$[rsp], rax

; 418  : 				--_Count;

  0012b	48 8b 44 24 60	 mov	 rax, QWORD PTR _Count$[rsp]
  00130	48 ff c8	 dec	 rax
  00133	48 89 44 24 60	 mov	 QWORD PTR _Count$[rsp], rax
$LN9@xsputn:
$LN6@xsputn:

; 419  : 				}

  00138	e9 df fe ff ff	 jmp	 $LN2@xsputn
$LN3@xsputn:

; 420  : 
; 421  : 		return (_Copied);

  0013d	48 8b 44 24 30	 mov	 rax, QWORD PTR _Copied$[rsp]

; 422  : 		}

  00142	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00146	c3		 ret	 0
?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z
_TEXT	SEGMENT
_Meta$ = 32
$T1 = 36
_Size$ = 40
_Copied$ = 48
this$ = 80
_Ptr$ = 88
_Count$ = 96
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn, COMDAT

; 368  : 		{	// get _Count characters from stream

$LN11:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 369  : 		int_type _Meta;
; 370  : 		streamsize _Size, _Copied;
; 371  : 
; 372  : 		for (_Copied = 0; 0 < _Count; )

  00013	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR _Copied$[rsp], 0
$LN2@xsgetn:
  0001c	48 83 7c 24 60
	00		 cmp	 QWORD PTR _Count$[rsp], 0
  00022	0f 8e 10 01 00
	00		 jle	 $LN3@xsgetn

; 373  : 			if (0 < (_Size = _Gnavail()))

  00028	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0002d	e8 00 00 00 00	 call	 ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
  00032	48 89 44 24 28	 mov	 QWORD PTR _Size$[rsp], rax
  00037	48 83 7c 24 28
	00		 cmp	 QWORD PTR _Size$[rsp], 0
  0003d	0f 8e 81 00 00
	00		 jle	 $LN5@xsgetn

; 374  : 				{	// copy from read buffer
; 375  : 				if (_Count < _Size)

  00043	48 8b 44 24 28	 mov	 rax, QWORD PTR _Size$[rsp]
  00048	48 39 44 24 60	 cmp	 QWORD PTR _Count$[rsp], rax
  0004d	7d 0a		 jge	 SHORT $LN7@xsgetn

; 376  : 					_Size = _Count;

  0004f	48 8b 44 24 60	 mov	 rax, QWORD PTR _Count$[rsp]
  00054	48 89 44 24 28	 mov	 QWORD PTR _Size$[rsp], rax
$LN7@xsgetn:

; 377  : 				_Traits::copy(_Ptr, gptr(), (size_t)_Size);

  00059	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0005e	e8 00 00 00 00	 call	 ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::gptr
  00063	4c 8b 44 24 28	 mov	 r8, QWORD PTR _Size$[rsp]
  00068	48 8b d0	 mov	 rdx, rax
  0006b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00070	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::copy

; 378  : 				_Ptr += _Size;

  00075	48 8b 44 24 28	 mov	 rax, QWORD PTR _Size$[rsp]
  0007a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  0007f	48 03 c8	 add	 rcx, rax
  00082	48 8b c1	 mov	 rax, rcx
  00085	48 89 44 24 58	 mov	 QWORD PTR _Ptr$[rsp], rax

; 379  : 				_Copied += _Size;

  0008a	48 8b 44 24 28	 mov	 rax, QWORD PTR _Size$[rsp]
  0008f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Copied$[rsp]
  00094	48 03 c8	 add	 rcx, rax
  00097	48 8b c1	 mov	 rax, rcx
  0009a	48 89 44 24 30	 mov	 QWORD PTR _Copied$[rsp], rax

; 380  : 				_Count -= _Size;

  0009f	48 8b 44 24 28	 mov	 rax, QWORD PTR _Size$[rsp]
  000a4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _Count$[rsp]
  000a9	48 2b c8	 sub	 rcx, rax
  000ac	48 8b c1	 mov	 rax, rcx
  000af	48 89 44 24 60	 mov	 QWORD PTR _Count$[rsp], rax

; 381  : 				gbump((int)_Size);

  000b4	8b 54 24 28	 mov	 edx, DWORD PTR _Size$[rsp]
  000b8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000bd	e8 00 00 00 00	 call	 ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z ; std::basic_streambuf<char,std::char_traits<char> >::gbump
  000c2	eb 6f		 jmp	 SHORT $LN6@xsgetn
$LN5@xsgetn:

; 382  : 				}
; 383  : 			else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))

  000c4	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000c9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000cc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000d1	ff 50 38	 call	 QWORD PTR [rax+56]
  000d4	89 44 24 20	 mov	 DWORD PTR _Meta$[rsp], eax
  000d8	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  000dd	89 44 24 24	 mov	 DWORD PTR $T1[rsp], eax
  000e1	48 8d 54 24 20	 lea	 rdx, QWORD PTR _Meta$[rsp]
  000e6	48 8d 4c 24 24	 lea	 rcx, QWORD PTR $T1[rsp]
  000eb	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  000f0	0f b6 c0	 movzx	 eax, al
  000f3	85 c0		 test	 eax, eax
  000f5	74 04		 je	 SHORT $LN8@xsgetn

; 384  : 				break;	// end of file, quit

  000f7	eb 3f		 jmp	 SHORT $LN3@xsgetn

; 385  : 			else

  000f9	eb 38		 jmp	 SHORT $LN9@xsgetn
$LN8@xsgetn:

; 386  : 				{	// get a single character
; 387  : 				*_Ptr++ = _Traits::to_char_type(_Meta);

  000fb	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Meta$[rsp]
  00100	e8 00 00 00 00	 call	 ?to_char_type@?$char_traits@D@std@@SADAEBH@Z ; std::char_traits<char>::to_char_type
  00105	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  0010a	88 01		 mov	 BYTE PTR [rcx], al
  0010c	48 8b 44 24 58	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00111	48 ff c0	 inc	 rax
  00114	48 89 44 24 58	 mov	 QWORD PTR _Ptr$[rsp], rax

; 388  : 				++_Copied;

  00119	48 8b 44 24 30	 mov	 rax, QWORD PTR _Copied$[rsp]
  0011e	48 ff c0	 inc	 rax
  00121	48 89 44 24 30	 mov	 QWORD PTR _Copied$[rsp], rax

; 389  : 				--_Count;

  00126	48 8b 44 24 60	 mov	 rax, QWORD PTR _Count$[rsp]
  0012b	48 ff c8	 dec	 rax
  0012e	48 89 44 24 60	 mov	 QWORD PTR _Count$[rsp], rax
$LN9@xsgetn:
$LN6@xsgetn:

; 390  : 				}

  00133	e9 e4 fe ff ff	 jmp	 $LN2@xsgetn
$LN3@xsgetn:

; 391  : 
; 392  : 		return (_Copied);

  00138	48 8b 44 24 30	 mov	 rax, QWORD PTR _Copied$[rsp]

; 393  : 		}

  0013d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00141	c3		 ret	 0
?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
_TEXT	SEGMENT
tv79 = 32
$T1 = 36
$T2 = 40
this$ = 64
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::uflow, COMDAT

; 361  : 		{	// get a character from stream, point past it

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 362  : 		return (_Traits::eq_int_type(_Traits::eof(), underflow())

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00016	ff 50 30	 call	 QWORD PTR [rax+48]
  00019	89 44 24 24	 mov	 DWORD PTR $T1[rsp], eax
  0001d	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00022	89 44 24 28	 mov	 DWORD PTR $T2[rsp], eax
  00026	48 8d 54 24 24	 lea	 rdx, QWORD PTR $T1[rsp]
  0002b	48 8d 4c 24 28	 lea	 rcx, QWORD PTR $T2[rsp]
  00030	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  00035	0f b6 c0	 movzx	 eax, al
  00038	85 c0		 test	 eax, eax
  0003a	74 0b		 je	 SHORT $LN3@uflow
  0003c	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00041	89 44 24 20	 mov	 DWORD PTR tv79[rsp], eax
  00045	eb 16		 jmp	 SHORT $LN4@uflow
$LN3@uflow:
  00047	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0004c	e8 00 00 00 00	 call	 ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
  00051	48 8b c8	 mov	 rcx, rax
  00054	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHAEBD@Z ; std::char_traits<char>::to_int_type
  00059	89 44 24 20	 mov	 DWORD PTR tv79[rsp], eax
$LN4@uflow:
  0005d	8b 44 24 20	 mov	 eax, DWORD PTR tv79[rsp]

; 363  : 			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));
; 364  : 		}

  00061	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00065	c3		 ret	 0
?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::uflow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
_TEXT	SEGMENT
this$ = 48
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::underflow, COMDAT

; 356  : 		{	// get a character from stream, but don't point past it

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 357  : 		return (_Traits::eof());

  00009	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof

; 358  : 		}

  0000e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00012	c3		 ret	 0
?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JXZ
_TEXT	SEGMENT
this$ = 8
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc, COMDAT

; 351  : 		{	// return count of input characters

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 352  : 		return (0);

  00005	33 c0		 xor	 eax, eax

; 353  : 		}

  00007	c3		 ret	 0
?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail, COMDAT

; 346  : 		{	// put a character back to stream (always fail)

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 347  : 		return (_Traits::eof());

  0000d	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof

; 348  : 		}

  00012	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00016	c3		 ret	 0
?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::overflow, COMDAT

; 341  : 		{	// put a character to stream (always fail)

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 342  : 		return (_Traits::eof());

  0000d	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof

; 343  : 		}

  00012	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00016	c3		 ret	 0
?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Init, COMDAT

; 318  : 		{	// initialize buffer parameters for no buffers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 319  : 		_IGfirst = &_Gfirst;

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 c0 08	 add	 rax, 8
  00012	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00017	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 320  : 		_IPfirst = &_Pfirst;

  0001b	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00020	48 83 c0 10	 add	 rax, 16
  00024	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00029	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 321  : 		_IGnext = &_Gnext;

  0002d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00032	48 83 c0 28	 add	 rax, 40			; 00000028H
  00036	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0003b	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 322  : 		_IPnext = &_Pnext;

  0003f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00044	48 83 c0 30	 add	 rax, 48			; 00000030H
  00048	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0004d	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax

; 323  : 		_IGcount = &_Gcount;

  00051	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00056	48 83 c0 48	 add	 rax, 72			; 00000048H
  0005a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0005f	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax

; 324  : 		_IPcount = &_Pcount;

  00063	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00068	48 83 c0 4c	 add	 rax, 76			; 0000004cH
  0006c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00071	48 89 41 58	 mov	 QWORD PTR [rcx+88], rax

; 325  : 		setp(0, 0);

  00075	45 33 c0	 xor	 r8d, r8d
  00078	33 d2		 xor	 edx, edx
  0007a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0007f	e8 00 00 00 00	 call	 ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD0@Z ; std::basic_streambuf<char,std::char_traits<char> >::setp

; 326  : 		setg(0, 0, 0);

  00084	45 33 c9	 xor	 r9d, r9d
  00087	45 33 c0	 xor	 r8d, r8d
  0008a	33 d2		 xor	 edx, edx
  0008c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00091	e8 00 00 00 00	 call	 ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z ; std::basic_streambuf<char,std::char_traits<char> >::setg

; 327  : 		}

  00096	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0009a	c3		 ret	 0
?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ
_TEXT	SEGMENT
tv69 = 0
this$ = 32
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail, COMDAT

; 313  : 		{	// count number of available positions in write buffer

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 314  : 		return (*_IPnext != 0 ? *_IPcount : 0);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  00012	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00016	74 10		 je	 SHORT $LN3@Pnavail
  00018	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0001d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00021	8b 00		 mov	 eax, DWORD PTR [rax]
  00023	89 04 24	 mov	 DWORD PTR tv69[rsp], eax
  00026	eb 07		 jmp	 SHORT $LN4@Pnavail
$LN3@Pnavail:
  00028	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv69[rsp], 0
$LN4@Pnavail:
  0002f	48 63 04 24	 movsxd	 rax, DWORD PTR tv69[rsp]

; 315  : 		}

  00033	48 83 c4 18	 add	 rsp, 24
  00037	c3		 ret	 0
?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ
_TEXT	SEGMENT
tv76 = 0
this$ = 32
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc, COMDAT

; 307  : 		{	// increment current position in write buffer

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 308  : 		--*_IPcount;

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00012	8b 00		 mov	 eax, DWORD PTR [rax]
  00014	ff c8		 dec	 eax
  00016	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  0001b	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0001f	89 01		 mov	 DWORD PTR [rcx], eax

; 309  : 		return ((*_IPnext)++);

  00021	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00026	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  0002a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002d	48 89 04 24	 mov	 QWORD PTR tv76[rsp], rax
  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  0003a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003d	48 ff c0	 inc	 rax
  00040	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  00045	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  00049	48 89 01	 mov	 QWORD PTR [rcx], rax
  0004c	48 8b 04 24	 mov	 rax, QWORD PTR tv76[rsp]

; 310  : 		}

  00050	48 83 c4 18	 add	 rsp, 24
  00054	c3		 ret	 0
?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
_TEXT	SEGMENT
this$ = 8
_First$ = 16
_Next$ = 24
_Last$ = 32
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setp, COMDAT

; 300  : 		{	// set pointers for write buffer, extended version

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 301  : 		*_IPfirst = _First;

  00014	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00019	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001d	48 8b 4c 24 10	 mov	 rcx, QWORD PTR _First$[rsp]
  00022	48 89 08	 mov	 QWORD PTR [rax], rcx

; 302  : 		*_IPnext = _Next;

  00025	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0002a	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  0002e	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Next$[rsp]
  00033	48 89 08	 mov	 QWORD PTR [rax], rcx

; 303  : 		*_IPcount = (int)(_Last - _Next);

  00036	48 8b 44 24 18	 mov	 rax, QWORD PTR _Next$[rsp]
  0003b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Last$[rsp]
  00040	48 2b c8	 sub	 rcx, rax
  00043	48 8b c1	 mov	 rax, rcx
  00046	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  0004b	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0004f	89 01		 mov	 DWORD PTR [rcx], eax

; 304  : 		}

  00051	c3		 ret	 0
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setp
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD0@Z
_TEXT	SEGMENT
this$ = 8
_First$ = 16
_Last$ = 24
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD0@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setp, COMDAT

; 293  : 		{	// set pointers for write buffer

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 294  : 		*_IPfirst = _First;

  0000f	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00014	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00018	48 8b 4c 24 10	 mov	 rcx, QWORD PTR _First$[rsp]
  0001d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 295  : 		*_IPnext = _First;

  00020	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00025	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  00029	48 8b 4c 24 10	 mov	 rcx, QWORD PTR _First$[rsp]
  0002e	48 89 08	 mov	 QWORD PTR [rax], rcx

; 296  : 		*_IPcount = (int)(_Last - _First);

  00031	48 8b 44 24 10	 mov	 rax, QWORD PTR _First$[rsp]
  00036	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Last$[rsp]
  0003b	48 2b c8	 sub	 rcx, rax
  0003e	48 8b c1	 mov	 rax, rcx
  00041	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00046	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0004a	89 01		 mov	 DWORD PTR [rcx], eax

; 297  : 		}

  0004c	c3		 ret	 0
?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD0@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setp
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z
_TEXT	SEGMENT
this$ = 8
_Off$ = 16
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbump, COMDAT

; 287  : 		{	// alter current position in write buffer by _Off

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 288  : 		*_IPcount -= _Off;

  00009	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00012	8b 4c 24 10	 mov	 ecx, DWORD PTR _Off$[rsp]
  00016	8b 00		 mov	 eax, DWORD PTR [rax]
  00018	2b c1		 sub	 eax, ecx
  0001a	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  0001f	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  00023	89 01		 mov	 DWORD PTR [rcx], eax

; 289  : 		*_IPnext += _Off;

  00025	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0002a	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  0002e	48 63 4c 24 10	 movsxd	 rcx, DWORD PTR _Off$[rsp]
  00033	48 03 08	 add	 rcx, QWORD PTR [rax]
  00036	48 8b c1	 mov	 rax, rcx
  00039	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  0003e	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  00042	48 89 01	 mov	 QWORD PTR [rcx], rax

; 290  : 		}

  00045	c3		 ret	 0
?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbump
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ
_TEXT	SEGMENT
tv69 = 0
this$ = 32
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail, COMDAT

; 282  : 		{	// count number of available elements in read buffer

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 283  : 		return (*_IGnext != 0 ? *_IGcount : 0);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00012	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00016	74 10		 je	 SHORT $LN3@Gnavail
  00018	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0001d	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00021	8b 00		 mov	 eax, DWORD PTR [rax]
  00023	89 04 24	 mov	 DWORD PTR tv69[rsp], eax
  00026	eb 07		 jmp	 SHORT $LN4@Gnavail
$LN3@Gnavail:
  00028	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv69[rsp], 0
$LN4@Gnavail:
  0002f	48 63 04 24	 movsxd	 rax, DWORD PTR tv69[rsp]

; 284  : 		}

  00033	48 83 c4 18	 add	 rsp, 24
  00037	c3		 ret	 0
?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gnavail
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ
_TEXT	SEGMENT
tv76 = 0
this$ = 32
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc, COMDAT

; 270  : 		{	// increment current position in read buffer

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 271  : 		--*_IGcount;

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00012	8b 00		 mov	 eax, DWORD PTR [rax]
  00014	ff c8		 dec	 eax
  00016	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  0001b	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  0001f	89 01		 mov	 DWORD PTR [rcx], eax

; 272  : 		return ((*_IGnext)++);

  00021	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00026	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0002a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002d	48 89 04 24	 mov	 QWORD PTR tv76[rsp], rax
  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0003a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003d	48 ff c0	 inc	 rax
  00040	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  00045	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00049	48 89 01	 mov	 QWORD PTR [rcx], rax
  0004c	48 8b 04 24	 mov	 rax, QWORD PTR tv76[rsp]

; 273  : 		}

  00050	48 83 c4 18	 add	 rsp, 24
  00054	c3		 ret	 0
?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Gninc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
_TEXT	SEGMENT
this$ = 8
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::epptr, COMDAT

; 259  : 		{	// return end of write buffer

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 260  : 		return (*_IPnext + *_IPcount);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  0000e	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00013	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  00017	48 63 09	 movsxd	 rcx, DWORD PTR [rcx]
  0001a	48 03 08	 add	 rcx, QWORD PTR [rax]
  0001d	48 8b c1	 mov	 rax, rcx

; 261  : 		}

  00020	c3		 ret	 0
?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::epptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
_TEXT	SEGMENT
this$ = 8
_First$ = 16
_Next$ = 24
_Last$ = 32
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::setg, COMDAT

; 252  : 		{	// set pointers for read buffer

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 253  : 		*_IGfirst = _First;

  00014	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00019	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0001d	48 8b 4c 24 10	 mov	 rcx, QWORD PTR _First$[rsp]
  00022	48 89 08	 mov	 QWORD PTR [rax], rcx

; 254  : 		*_IGnext = _Next;

  00025	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0002a	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0002e	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Next$[rsp]
  00033	48 89 08	 mov	 QWORD PTR [rax], rcx

; 255  : 		*_IGcount = (int)(_Last - _Next);

  00036	48 8b 44 24 18	 mov	 rax, QWORD PTR _Next$[rsp]
  0003b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Last$[rsp]
  00040	48 2b c8	 sub	 rcx, rax
  00043	48 8b c1	 mov	 rax, rcx
  00046	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  0004b	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  0004f	89 01		 mov	 DWORD PTR [rcx], eax

; 256  : 		}

  00051	c3		 ret	 0
?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::setg
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z
_TEXT	SEGMENT
this$ = 8
_Off$ = 16
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::gbump, COMDAT

; 246  : 		{	// alter current position in read buffer by _Off

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 247  : 		*_IGcount -= _Off;

  00009	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00012	8b 4c 24 10	 mov	 ecx, DWORD PTR _Off$[rsp]
  00016	8b 00		 mov	 eax, DWORD PTR [rax]
  00018	2b c1		 sub	 eax, ecx
  0001a	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  0001f	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  00023	89 01		 mov	 DWORD PTR [rcx], eax

; 248  : 		*_IGnext += _Off;

  00025	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0002a	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0002e	48 63 4c 24 10	 movsxd	 rcx, DWORD PTR _Off$[rsp]
  00033	48 03 08	 add	 rcx, QWORD PTR [rax]
  00036	48 8b c1	 mov	 rax, rcx
  00039	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  0003e	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  00042	48 89 01	 mov	 QWORD PTR [rcx], rax

; 249  : 		}

  00045	c3		 ret	 0
?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gbump
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
_TEXT	SEGMENT
this$ = 8
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::egptr, COMDAT

; 241  : 		{	// return end of read buffer

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 242  : 		return (*_IGnext + *_IGcount);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0000e	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00013	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  00017	48 63 09	 movsxd	 rcx, DWORD PTR [rcx]
  0001a	48 03 08	 add	 rcx, QWORD PTR [rax]
  0001d	48 8b c1	 mov	 rax, rcx

; 243  : 		}

  00020	c3		 ret	 0
?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::egptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
_TEXT	SEGMENT
this$ = 8
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pptr, COMDAT

; 236  : 		{	// return current position in write buffer

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 237  : 		return (*_IPnext);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 238  : 		}

  00011	c3		 ret	 0
?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
_TEXT	SEGMENT
this$ = 8
?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pbase, COMDAT

; 231  : 		{	// return beginning of write buffer

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 232  : 		return (*_IPfirst);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 233  : 		}

  00011	c3		 ret	 0
?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pbase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
_TEXT	SEGMENT
this$ = 8
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::gptr, COMDAT

; 226  : 		{	// return current position in read buffer

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 227  : 		return (*_IGnext);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 228  : 		}

  00011	c3		 ret	 0
?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::gptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
_TEXT	SEGMENT
this$ = 8
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::eback, COMDAT

; 221  : 		{	// return beginning of read buffer

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 222  : 		return (*_IGfirst);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 223  : 		}

  00011	c3		 ret	 0
?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::eback
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
_TEXT	SEGMENT
this$ = 8
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock, COMDAT

; 216  : 		{	// clear the thread lock (overridden by basic_filebuf)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 217  : 		}

  00005	c3		 ret	 0
?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
_TEXT	SEGMENT
this$ = 8
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Lock, COMDAT

; 212  : 		{	// set the thread lock (overridden by basic_filebuf)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 213  : 		}

  00005	c3		 ret	 0
?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
_Count$ = 64
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputn, COMDAT

; 207  : 		{	// put _Count characters from array beginning at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 208  : 		return (xsputn(_Ptr, _Count));

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00018	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001b	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Count$[rsp]
  00020	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002a	ff 50 48	 call	 QWORD PTR [rax+72]

; 209  : 		}

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputn
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
_TEXT	SEGMENT
tv78 = 32
$T1 = 40
tv79 = 48
this$ = 80
_Ch$ = 88
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z PROC ; std::basic_streambuf<char,std::char_traits<char> >::sputc, COMDAT

; 199  : 		{	// put a character

$LN5:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 200  : 		return (0 < _Pnavail()

  0000d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pnavail
  00017	48 85 c0	 test	 rax, rax
  0001a	7e 2b		 jle	 SHORT $LN3@sputc
  0001c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00021	e8 00 00 00 00	 call	 ?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Pninc
  00026	48 89 44 24 28	 mov	 QWORD PTR $T1[rsp], rax
  0002b	48 8b 44 24 28	 mov	 rax, QWORD PTR $T1[rsp]
  00030	0f b6 4c 24 58	 movzx	 ecx, BYTE PTR _Ch$[rsp]
  00035	88 08		 mov	 BYTE PTR [rax], cl
  00037	48 8b 4c 24 28	 mov	 rcx, QWORD PTR $T1[rsp]
  0003c	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHAEBD@Z ; std::char_traits<char>::to_int_type
  00041	89 44 24 20	 mov	 DWORD PTR tv78[rsp], eax
  00045	eb 2a		 jmp	 SHORT $LN4@sputc
$LN3@sputc:
  00047	48 8d 4c 24 58	 lea	 rcx, QWORD PTR _Ch$[rsp]
  0004c	e8 00 00 00 00	 call	 ?to_int_type@?$char_traits@D@std@@SAHAEBD@Z ; std::char_traits<char>::to_int_type
  00051	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00056	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00059	48 89 4c 24 30	 mov	 QWORD PTR tv79[rsp], rcx
  0005e	8b d0		 mov	 edx, eax
  00060	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00065	48 8b 44 24 30	 mov	 rax, QWORD PTR tv79[rsp]
  0006a	ff 50 18	 call	 QWORD PTR [rax+24]
  0006d	89 44 24 20	 mov	 DWORD PTR tv78[rsp], eax
$LN4@sputc:
  00071	8b 44 24 20	 mov	 eax, DWORD PTR tv78[rsp]

; 201  : 			? _Traits::to_int_type(*_Pninc() = _Ch)
; 202  : 			: overflow(_Traits::to_int_type(_Ch)));
; 203  : 		}

  00075	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00079	c3		 ret	 0
?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z ENDP ; std::basic_streambuf<char,std::char_traits<char> >::sputc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ
_TEXT	SEGMENT
this$ = 48
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::pubsync, COMDAT

; 144  : 		{	// synchronize with external agent

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 145  : 		return (sync());

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00016	ff 50 68	 call	 QWORD PTR [rax+104]

; 146  : 		}

  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	c3		 ret	 0
?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
tv70 = 48
this$ = 80
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >, COMDAT

; 79   : 		{	// destroy the object

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  00015	48 89 08	 mov	 QWORD PTR [rax], rcx

; 80   : 		delete _Plocale;

  00018	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0001d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00021	48 89 44 24 28	 mov	 QWORD PTR $T2[rsp], rax
  00026	48 8b 44 24 28	 mov	 rax, QWORD PTR $T2[rsp]
  0002b	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00030	48 83 7c 24 20
	00		 cmp	 QWORD PTR $T1[rsp], 0
  00036	74 16		 je	 SHORT $LN3@basic_stre
  00038	ba 01 00 00 00	 mov	 edx, 1
  0003d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  00042	e8 00 00 00 00	 call	 ??_Glocale@std@@QEAAPEAXI@Z
  00047	48 89 44 24 30	 mov	 QWORD PTR tv70[rsp], rax
  0004c	eb 09		 jmp	 SHORT $LN4@basic_stre
$LN3@basic_stre:
  0004e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv70[rsp], 0
$LN4@basic_stre:

; 81   : 		}

  00057	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005b	c3		 ret	 0
??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::~basic_streambuf<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\streambuf
;	COMDAT ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAA@XZ
_TEXT	SEGMENT
$T1 = 32
tv74 = 40
this$ = 64
??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAA@XZ PROC ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >, COMDAT

; 26   : 		{	// construct with no buffers

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$basic_streambuf@DU?$char_traits@D@std@@@std@@6B@
  00015	48 89 08	 mov	 QWORD PTR [rax], rcx

; 25   : 		: _Plocale(new locale)

  00018	b9 10 00 00 00	 mov	 ecx, 16
  0001d	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00022	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00027	48 83 7c 24 20
	00		 cmp	 QWORD PTR $T1[rsp], 0
  0002d	74 11		 je	 SHORT $LN3@basic_stre
  0002f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  00034	e8 00 00 00 00	 call	 ??0locale@std@@QEAA@XZ	; std::locale::locale
  00039	48 89 44 24 28	 mov	 QWORD PTR tv74[rsp], rax
  0003e	eb 09		 jmp	 SHORT $LN4@basic_stre
$LN3@basic_stre:
  00040	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv74[rsp], 0
$LN4@basic_stre:
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0004e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv74[rsp]
  00053	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 27   : 		_Init();

  00057	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0005c	e8 00 00 00 00	 call	 ?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXXZ ; std::basic_streambuf<char,std::char_traits<char> >::_Init

; 28   : 		}

  00061	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00066	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006a	c3		 ret	 0
??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAA@XZ ENDP ; std::basic_streambuf<char,std::char_traits<char> >::basic_streambuf<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
this$ = 48
_Newstr$ = 56
?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT

; 550  : 		{	// replace character array from string

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 551  : 		_Stringbuffer.str(_Newstr);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 83 c0 08	 add	 rax, 8
  00017	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Newstr$[rsp]
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	e8 00 00 00 00	 call	 ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str

; 552  : 		}

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT

; 545  : 		{	// return string copy of character array

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 546  : 		return (_Stringbuffer.str());

  00016	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0001b	48 83 c0 08	 add	 rax, 8
  0001f	48 8b 54 24 48	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  00024	48 8b c8	 mov	 rcx, rax
  00027	e8 00 00 00 00	 call	 ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
  0002c	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  00030	83 c8 01	 or	 eax, 1
  00033	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  00037	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 547  : 		}

  0003c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00040	c3		 ret	 0
?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 536  : 		{	// destroy the object

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b 80 78 ff
	ff ff		 mov	 rax, QWORD PTR [rax-136]
  00015	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00025	48 89 94 01 78
	ff ff ff	 mov	 QWORD PTR [rcx+rax-136], rdx
  0002d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00032	48 8b 80 78 ff
	ff ff		 mov	 rax, QWORD PTR [rax-136]
  00039	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0003d	48 2d 88 00 00
	00		 sub	 rax, 136		; 00000088H
  00043	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00048	48 8b 89 78 ff
	ff ff		 mov	 rcx, QWORD PTR [rcx-136]
  0004f	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  00053	48 8b 54 24 30	 mov	 rdx, QWORD PTR this$[rsp]
  00058	89 84 0a 74 ff
	ff ff		 mov	 DWORD PTR [rdx+rcx-140], eax

; 537  : 		}

  0005f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00064	48 2d 80 00 00
	00		 sub	 rax, 128		; 00000080H
  0006a	48 8b c8	 mov	 rcx, rax
  0006d	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  00072	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00077	48 83 e8 78	 sub	 rax, 120		; 00000078H
  0007b	48 8b c8	 mov	 rcx, rax
  0007e	e8 00 00 00 00	 call	 ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
  00083	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00087	c3		 ret	 0
??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\sstream
;	COMDAT ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
_Mode$ = 72
$initVBases$ = 80
??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 492  : 		{	// construct empty writable character buffer

$LN8:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00012	48 c7 44 24 28
	fe ff ff ff	 mov	 QWORD PTR $T2[rsp], -2
  0001b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0
  00023	83 7c 24 50 00	 cmp	 DWORD PTR $initVBases$[rsp], 0
  00028	74 2e		 je	 SHORT $LN2@basic_ostr
  0002a	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@
  00036	48 89 08	 mov	 QWORD PTR [rax], rcx
  00039	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0003e	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00044	48 8b c8	 mov	 rcx, rax
  00047	e8 00 00 00 00	 call	 ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IEAA@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
  0004c	90		 npad	 1
  0004d	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  00051	83 c8 01	 or	 eax, 1
  00054	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
$LN2@basic_ostr:

; 490  : 		: _Mybase(&_Stringbuffer),

  00058	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0005d	48 83 c0 08	 add	 rax, 8
  00061	45 33 c9	 xor	 r9d, r9d
  00064	45 33 c0	 xor	 r8d, r8d
  00067	48 8b d0	 mov	 rdx, rax
  0006a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0006f	e8 00 00 00 00	 call	 ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
  00074	90		 npad	 1

; 492  : 		{	// construct empty writable character buffer

  00075	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00081	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00086	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0008d	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
  00091	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0009d	48 2d 88 00 00
	00		 sub	 rax, 136		; 00000088H
  000a3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000a8	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ab	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  000af	48 8b 54 24 40	 mov	 rdx, QWORD PTR this$[rsp]
  000b4	89 44 0a fc	 mov	 DWORD PTR [rdx+rcx-4], eax

; 491  : 			_Stringbuffer(_Mode | ios_base::out)

  000b8	8b 44 24 48	 mov	 eax, DWORD PTR _Mode$[rsp]
  000bc	83 c8 02	 or	 eax, 2
  000bf	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000c4	48 83 c1 08	 add	 rcx, 8
  000c8	8b d0		 mov	 edx, eax
  000ca	e8 00 00 00 00	 call	 ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  000cf	90		 npad	 1

; 493  : 		}

  000d0	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000d5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d9	c3		 ret	 0
??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
_Mode$ = 72
$initVBases$ = 80
?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA PROC ; `std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	8b 45 20	 mov	 eax, DWORD PTR $T1[rbp]
  0000c	83 e0 01	 and	 eax, 1
  0000f	85 c0		 test	 eax, eax
  00011	74 14		 je	 SHORT $LN5@dtor$0
  00013	83 65 20 fe	 and	 DWORD PTR $T1[rbp], -2
  00017	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0001b	48 81 c1 88 00
	00 00		 add	 rcx, 136		; 00000088H
  00022	e8 00 00 00 00	 call	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@dtor$0:
  00027	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002b	5d		 pop	 rbp
  0002c	c3		 ret	 0
?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA ENDP ; `std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
$T1 = 32
$T2 = 40
this$ = 64
_Mode$ = 72
$initVBases$ = 80
?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA PROC ; `std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
  0002d	40 55		 push	 rbp
  0002f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00033	48 8b ea	 mov	 rbp, rdx
  00036	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0003a	48 83 c1 10	 add	 rcx, 16
  0003e	e8 00 00 00 00	 call	 ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
  00043	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA ENDP ; `std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
_Mode$ = 72
$initVBases$ = 80
?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA PROC ; `std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	8b 45 20	 mov	 eax, DWORD PTR $T1[rbp]
  0000c	83 e0 01	 and	 eax, 1
  0000f	85 c0		 test	 eax, eax
  00011	74 14		 je	 SHORT $LN5@dtor$0
  00013	83 65 20 fe	 and	 DWORD PTR $T1[rbp], -2
  00017	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0001b	48 81 c1 88 00
	00 00		 add	 rcx, 136		; 00000088H
  00022	e8 00 00 00 00	 call	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@dtor$0:
  00027	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002b	5d		 pop	 rbp
  0002c	c3		 ret	 0
?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA ENDP ; `std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
_Mode$ = 72
$initVBases$ = 80
?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA PROC ; `std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
  0002d	40 55		 push	 rbp
  0002f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00033	48 8b ea	 mov	 rbp, rdx
  00036	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0003a	48 83 c1 10	 add	 rcx, 16
  0003e	e8 00 00 00 00	 call	 ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
  00043	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA ENDP ; `std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1RtApiStream@RtApi@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1RtApiStream@RtApi@@QEAA@XZ PROC			; RtApi::RtApiStream::~RtApiStream, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 05 d0 00 00
	00		 add	 rax, 208		; 000000d0H
  0001d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??1ConvertInfo@RtApi@@QEAA@XZ
  00024	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002a	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  0002f	48 8b c8	 mov	 rcx, rax
  00032	e8 00 00 00 00	 call	 ??_M@YAXPEAX_K1P6AX0@Z@Z
  00037	90		 npad	 1
  00038	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003c	c3		 ret	 0
??1RtApiStream@RtApi@@QEAA@XZ ENDP			; RtApi::RtApiStream::~RtApiStream
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.h
;	COMDAT ??0RtApiStream@RtApi@@QEAA@XZ
_TEXT	SEGMENT
this$ = 64
??0RtApiStream@RtApi@@QEAA@XZ PROC			; RtApi::RtApiStream::RtApiStream, COMDAT

; 774  :     RtApiStream()

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 775  :       :apiHandle(0), deviceBuffer(0) { device[0] = 11111; device[1] = 11111; }

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00016	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0001b	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0
  00023	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00028	48 05 98 00 00
	00		 add	 rax, 152		; 00000098H
  0002e	48 8b c8	 mov	 rcx, rax
  00031	e8 00 00 00 00	 call	 ??0CallbackInfo@@QEAA@XZ ; CallbackInfo::CallbackInfo
  00036	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0003b	48 05 d0 00 00
	00		 add	 rax, 208		; 000000d0H
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??1ConvertInfo@RtApi@@QEAA@XZ
  00048	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0004d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??0ConvertInfo@RtApi@@QEAA@XZ
  00054	41 b8 02 00 00
	00		 mov	 r8d, 2
  0005a	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  0005f	48 8b c8	 mov	 rcx, rax
  00062	e8 00 00 00 00	 call	 ??_L@YAXPEAX_K1P6AX0@Z2@Z
  00067	b8 04 00 00 00	 mov	 eax, 4
  0006c	48 6b c0 00	 imul	 rax, rax, 0
  00070	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00075	c7 04 01 67 2b
	00 00		 mov	 DWORD PTR [rcx+rax], 11111 ; 00002b67H
  0007c	b8 04 00 00 00	 mov	 eax, 4
  00081	48 6b c0 01	 imul	 rax, rax, 1
  00085	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0008a	c7 04 01 67 2b
	00 00		 mov	 DWORD PTR [rcx+rax], 11111 ; 00002b67H
  00091	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00096	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009a	c3		 ret	 0
??0RtApiStream@RtApi@@QEAA@XZ ENDP			; RtApi::RtApiStream::RtApiStream
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1ConvertInfo@RtApi@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1ConvertInfo@RtApi@@QEAA@XZ PROC			; RtApi::ConvertInfo::~ConvertInfo, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 c0 30	 add	 rax, 48			; 00000030H
  00012	48 8b c8	 mov	 rcx, rax
  00015	e8 00 00 00 00	 call	 ??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
  0001a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001f	48 83 c0 18	 add	 rax, 24
  00023	48 8b c8	 mov	 rcx, rax
  00026	e8 00 00 00 00	 call	 ??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
  0002b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002f	c3		 ret	 0
??1ConvertInfo@RtApi@@QEAA@XZ ENDP			; RtApi::ConvertInfo::~ConvertInfo
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0ConvertInfo@RtApi@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0ConvertInfo@RtApi@@QEAA@XZ PROC			; RtApi::ConvertInfo::ConvertInfo, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 c0 18	 add	 rax, 24
  00012	48 8b c8	 mov	 rcx, rax
  00015	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  0001a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001f	48 83 c0 30	 add	 rax, 48			; 00000030H
  00023	48 8b c8	 mov	 rcx, rax
  00026	e8 00 00 00 00	 call	 ??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
  0002b	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00030	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00034	c3		 ret	 0
??0ConvertInfo@RtApi@@QEAA@XZ ENDP			; RtApi::ConvertInfo::ConvertInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IEBAXPEAH0@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
__formal$ = 24
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IEBAXPEAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Orphan_range, COMDAT

; 1793 : 		{	// orphan iterators within specified (inclusive) range

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1794 : 		}

  0000f	c3		 ret	 0
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IEBAXPEAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IEBAXXZ
_TEXT	SEGMENT
this$ = 48
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IEBAXXZ PROC	; std::vector<int,std::allocator<int> >::_Xlen, COMDAT

; 1764 : 		{	// report a length_error

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1765 : 		_Xlength_error("vector<T> too long");

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00010	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 1766 : 		}

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IEBAXXZ ENDP	; std::vector<int,std::allocator<int> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IEAAXXZ
_TEXT	SEGMENT
tv82 = 32
tv135 = 40
tv143 = 48
tv150 = 56
this$ = 80
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IEAAXXZ PROC	; std::vector<int,std::allocator<int> >::_Tidy, COMDAT

; 1636 : 		{	// free all storage

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1637 : 		if (this->_Myfirst() != pointer())

  00009	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
  00013	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00017	0f 84 cf 00 00
	00		 je	 $LN2@Tidy

; 1638 : 			{	// something to free, destroy and deallocate it
; 1639 : 			this->_Orphan_all();

  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Orphan_all

; 1640 : 			_Destroy(this->_Myfirst(), this->_Mylast());

  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  00031	48 89 44 24 20	 mov	 QWORD PTR tv82[rsp], rax
  00036	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0003b	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
  00040	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv82[rsp]
  00045	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  00048	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0004b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00050	e8 00 00 00 00	 call	 ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IEAAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

  00055	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0005a	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend
  0005f	48 89 44 24 28	 mov	 QWORD PTR tv135[rsp], rax
  00064	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00069	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
  0006e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00071	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv135[rsp]
  00076	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00079	48 2b c8	 sub	 rcx, rax
  0007c	48 8b c1	 mov	 rax, rcx
  0007f	48 c1 f8 02	 sar	 rax, 2
  00083	48 89 44 24 30	 mov	 QWORD PTR tv143[rsp], rax
  00088	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0008d	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
  00092	48 89 44 24 38	 mov	 QWORD PTR tv150[rsp], rax
  00097	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0009c	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal
  000a1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv143[rsp]
  000a6	4c 8b c1	 mov	 r8, rcx
  000a9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv150[rsp]
  000ae	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  000b1	48 8b c8	 mov	 rcx, rax
  000b4	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAH_K@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate

; 1642 : 				this->_Myend() - this->_Myfirst());
; 1643 : 			this->_Myfirst() = pointer();

  000b9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000be	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
  000c3	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1644 : 			this->_Mylast() = pointer();

  000ca	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000cf	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  000d4	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1645 : 			this->_Myend() = pointer();

  000db	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000e0	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend
  000e5	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN2@Tidy:

; 1646 : 			}
; 1647 : 		}

  000ec	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f0	c3		 ret	 0
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IEAAXXZ ENDP	; std::vector<int,std::allocator<int> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z
_TEXT	SEGMENT
tv68 = 32
this$ = 64
_Count$ = 72
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z PROC ; std::vector<int,std::allocator<int> >::_Reserve, COMDAT

; 1626 : 		{	// ensure room for _Count new elements, grow exponentially

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1627 : 		if (_Unused_capacity() < _Count)

  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::_Unused_capacity
  00018	48 3b 44 24 48	 cmp	 rax, QWORD PTR _Count$[rsp]
  0001d	73 5e		 jae	 SHORT $LN2@Reserve

; 1628 : 			{	// need more room, try to get it
; 1629 : 			if (max_size() - size() < _Count)

  0001f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00024	e8 00 00 00 00	 call	 ?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::max_size
  00029	48 89 44 24 20	 mov	 QWORD PTR tv68[rsp], rax
  0002e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00033	e8 00 00 00 00	 call	 ?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::size
  00038	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv68[rsp]
  0003d	48 2b c8	 sub	 rcx, rax
  00040	48 8b c1	 mov	 rax, rcx
  00043	48 3b 44 24 48	 cmp	 rax, QWORD PTR _Count$[rsp]
  00048	73 0a		 jae	 SHORT $LN3@Reserve

; 1630 : 				_Xlen();

  0004a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0004f	e8 00 00 00 00	 call	 ?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IEBAXXZ ; std::vector<int,std::allocator<int> >::_Xlen
$LN3@Reserve:

; 1631 : 			_Reallocate(_Grow_to(size() + _Count));

  00054	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00059	e8 00 00 00 00	 call	 ?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::size
  0005e	48 03 44 24 48	 add	 rax, QWORD PTR _Count$[rsp]
  00063	48 8b d0	 mov	 rdx, rax
  00066	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0006b	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IEBA_K_K@Z ; std::vector<int,std::allocator<int> >::_Grow_to
  00070	48 8b d0	 mov	 rdx, rax
  00073	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00078	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z ; std::vector<int,std::allocator<int> >::_Reallocate
$LN2@Reserve:
$LN4@Reserve:

; 1632 : 			}
; 1633 : 		}

  0007d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00081	c3		 ret	 0
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z ENDP ; std::vector<int,std::allocator<int> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 32
tv84 = 40
tv150 = 48
tv177 = 56
tv179 = 64
tv186 = 72
tv200 = 80
_Size$ = 88
tv208 = 96
$T1 = 104
this$ = 128
_Count$ = 136
?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z PROC ; std::vector<int,std::allocator<int> >::_Reallocate, COMDAT

; 1601 : 		{	// move to array of exactly _Count elements

$LN11:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  0000e	48 c7 44 24 68
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 1602 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  00017	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0001f	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal
  00024	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR _Count$[rsp]
  0002c	48 8b c8	 mov	 rcx, rax
  0002f	e8 00 00 00 00	 call	 ?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAPEAH_K@Z ; std::_Wrap_alloc<std::allocator<int> >::allocate
  00034	48 89 44 24 20	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1603 : 
; 1604 : 		_TRY_BEGIN
; 1605 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);

  00039	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00041	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  00046	48 89 44 24 28	 mov	 QWORD PTR tv84[rsp], rax
  0004b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00053	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
  00058	4c 8b 4c 24 20	 mov	 r9, QWORD PTR _Ptr$[rsp]
  0005d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv84[rsp]
  00062	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  00065	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00068	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00070	e8 00 00 00 00	 call	 ??$_Umove@PEAH@?$vector@HV?$allocator@H@std@@@std@@IEAAPEAHPEAH00@Z ; std::vector<int,std::allocator<int> >::_Umove<int * __ptr64>
  00075	90		 npad	 1
  00076	eb 00		 jmp	 SHORT $LN7@Reallocate
$LN8@Reallocate:
$LN7@Reallocate:

; 1606 : 		_CATCH_ALL
; 1607 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1608 : 		_RERAISE;
; 1609 : 		_CATCH_END
; 1610 : 
; 1611 : 		size_type _Size = size();

  00078	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00080	e8 00 00 00 00	 call	 ?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::size
  00085	48 89 44 24 58	 mov	 QWORD PTR _Size$[rsp], rax

; 1612 : 		if (this->_Myfirst() != pointer())

  0008a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00092	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
  00097	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0009b	0f 84 a4 00 00
	00		 je	 $LN3@Reallocate

; 1613 : 			{	// destroy and deallocate old array
; 1614 : 			_Destroy(this->_Myfirst(), this->_Mylast());

  000a1	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000a9	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  000ae	48 89 44 24 30	 mov	 QWORD PTR tv150[rsp], rax
  000b3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000bb	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
  000c0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv150[rsp]
  000c5	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  000c8	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000cb	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000d3	e8 00 00 00 00	 call	 ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IEAAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy

; 1615 : 			this->_Getal().deallocate(this->_Myfirst(),

  000d8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000e0	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
  000e5	48 89 44 24 38	 mov	 QWORD PTR tv177[rsp], rax
  000ea	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000f2	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend
  000f7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv177[rsp]
  000fc	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ff	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00102	48 2b c1	 sub	 rax, rcx
  00105	48 c1 f8 02	 sar	 rax, 2
  00109	48 89 44 24 40	 mov	 QWORD PTR tv179[rsp], rax
  0010e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00116	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
  0011b	48 89 44 24 48	 mov	 QWORD PTR tv186[rsp], rax
  00120	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00128	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal
  0012d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv179[rsp]
  00132	4c 8b c1	 mov	 r8, rcx
  00135	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv186[rsp]
  0013a	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  0013d	48 8b c8	 mov	 rcx, rax
  00140	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAH_K@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate
$LN3@Reallocate:

; 1616 : 				this->_Myend() - this->_Myfirst());
; 1617 : 			}
; 1618 : 
; 1619 : 		this->_Orphan_all();

  00145	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0014d	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Orphan_all

; 1620 : 		this->_Myend() = _Ptr + _Count;

  00152	48 8b 44 24 20	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00157	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _Count$[rsp]
  0015f	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  00163	48 89 44 24 50	 mov	 QWORD PTR tv200[rsp], rax
  00168	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00170	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend
  00175	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv200[rsp]
  0017a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1621 : 		this->_Mylast() = _Ptr + _Size;

  0017d	48 8b 44 24 20	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00182	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Size$[rsp]
  00187	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  0018b	48 89 44 24 60	 mov	 QWORD PTR tv208[rsp], rax
  00190	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00198	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  0019d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv208[rsp]
  001a2	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1622 : 		this->_Myfirst() = _Ptr;

  001a5	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001ad	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
  001b2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  001b7	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1623 : 		}

  001ba	48 83 c4 78	 add	 rsp, 120		; 00000078H
  001be	c3		 ret	 0
$LN9@Reallocate:
?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z ENDP ; std::vector<int,std::allocator<int> >::_Reallocate
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Ptr$ = 32
tv84 = 40
tv150 = 48
tv177 = 56
tv179 = 64
tv186 = 72
tv200 = 80
_Size$ = 88
tv208 = 96
$T1 = 104
this$ = 128
_Count$ = 136
?catch$0@?0??_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z@4HA PROC ; `std::vector<int,std::allocator<int> >::_Reallocate'::`1'::catch$0

; 1606 : 		_CATCH_ALL

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z$0:

; 1606 : 		_CATCH_ALL
; 1607 : 		this->_Getal().deallocate(_Ptr, _Count);

  0000d	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00014	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal
  00019	4c 8b 85 88 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00020	48 8b 55 20	 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00024	48 8b c8	 mov	 rcx, rax
  00027	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAH_K@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate

; 1606 : 		_CATCH_ALL
; 1607 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1608 : 		_RERAISE;

  0002c	33 d2		 xor	 edx, edx
  0002e	33 c9		 xor	 ecx, ecx
  00030	e8 00 00 00 00	 call	 _CxxThrowException
  00035	90		 npad	 1

; 1606 : 		_CATCH_ALL
; 1607 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1608 : 		_RERAISE;
; 1609 : 		_CATCH_END

  00036	48 8d 05 00 00
	00 00		 lea	 rax, $LN8@catch$0
  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
  00043	cc		 int	 3
?catch$0@?0??_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z@4HA ENDP ; `std::vector<int,std::allocator<int> >::_Reallocate'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_Ptr$ = 32
tv84 = 40
tv150 = 48
tv177 = 56
tv179 = 64
tv186 = 72
tv200 = 80
_Size$ = 88
tv208 = 96
$T1 = 104
this$ = 128
_Count$ = 136
?catch$0@?0??_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z@4HA PROC ; `std::vector<int,std::allocator<int> >::_Reallocate'::`1'::catch$0

; 1606 : 		_CATCH_ALL

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z$0:

; 1607 : 		this->_Getal().deallocate(_Ptr, _Count);

  0000d	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00014	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal
  00019	4c 8b 85 88 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00020	48 8b 55 20	 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00024	48 8b c8	 mov	 rcx, rax
  00027	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAH_K@Z ; std::_Wrap_alloc<std::allocator<int> >::deallocate

; 1608 : 		_RERAISE;

  0002c	33 d2		 xor	 edx, edx
  0002e	33 c9		 xor	 ecx, ecx
  00030	e8 00 00 00 00	 call	 _CxxThrowException
  00035	90		 npad	 1

; 1609 : 		_CATCH_END

  00036	48 8d 05 00 00
	00 00		 lea	 rax, $LN8@catch$0
  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
  00043	cc		 int	 3
?catch$0@?0??_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z@4HA ENDP ; `std::vector<int,std::allocator<int> >::_Reallocate'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@HV?$allocator@H@std@@@std@@IEBA_NPEBH@Z
_TEXT	SEGMENT
tv82 = 32
this$ = 64
_Ptr$ = 72
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IEBA_NPEBH@Z PROC ; std::vector<int,std::allocator<int> >::_Inside, COMDAT

; 1596 : 		{	// test if _Ptr points inside vector

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  00018	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0001b	e8 00 00 00 00	 call	 ??$_Unfancy@H@std@@YAPEAHPEAH@Z ; std::_Unfancy<int>
  00020	48 39 44 24 48	 cmp	 QWORD PTR _Ptr$[rsp], rax
  00025	73 23		 jae	 SHORT $LN3@Inside
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
  00031	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00034	e8 00 00 00 00	 call	 ??$_Unfancy@H@std@@YAPEAHPEAH@Z ; std::_Unfancy<int>
  00039	48 3b 44 24 48	 cmp	 rax, QWORD PTR _Ptr$[rsp]
  0003e	77 0a		 ja	 SHORT $LN3@Inside
  00040	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
  00048	eb 08		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  0004a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
$LN4@Inside:
  00052	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv82[rsp]

; 1598 : 		}

  00057	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005b	c3		 ret	 0
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IEBA_NPEBH@Z ENDP ; std::vector<int,std::allocator<int> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IEBA_K_K@Z
_TEXT	SEGMENT
_Capacity$ = 32
tv73 = 40
tv67 = 48
this$ = 80
_Count$ = 88
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IEBA_K_K@Z PROC ; std::vector<int,std::allocator<int> >::_Grow_to, COMDAT

; 1585 : 		{	// grow by 50% or at least to _Count

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1586 : 		size_type _Capacity = capacity();

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::capacity
  00018	48 89 44 24 20	 mov	 QWORD PTR _Capacity$[rsp], rax

; 1587 : 
; 1588 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ; std::vector<int,std::allocator<int> >::max_size
  00027	48 89 44 24 30	 mov	 QWORD PTR tv67[rsp], rax
  0002c	33 d2		 xor	 edx, edx
  0002e	48 8b 44 24 20	 mov	 rax, QWORD PTR _Capacity$[rsp]
  00033	b9 02 00 00 00	 mov	 ecx, 2
  00038	48 f7 f1	 div	 rcx
  0003b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv67[rsp]
  00040	48 2b c8	 sub	 rcx, rax
  00043	48 8b c1	 mov	 rax, rcx
  00046	48 3b 44 24 20	 cmp	 rax, QWORD PTR _Capacity$[rsp]
  0004b	73 0b		 jae	 SHORT $LN4@Grow_to
  0004d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv73[rsp], 0
  00056	eb 1f		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00058	33 d2		 xor	 edx, edx
  0005a	48 8b 44 24 20	 mov	 rax, QWORD PTR _Capacity$[rsp]
  0005f	b9 02 00 00 00	 mov	 ecx, 2
  00064	48 f7 f1	 div	 rcx
  00067	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Capacity$[rsp]
  0006c	48 03 c8	 add	 rcx, rax
  0006f	48 8b c1	 mov	 rax, rcx
  00072	48 89 44 24 28	 mov	 QWORD PTR tv73[rsp], rax
$LN5@Grow_to:
  00077	48 8b 44 24 28	 mov	 rax, QWORD PTR tv73[rsp]
  0007c	48 89 44 24 20	 mov	 QWORD PTR _Capacity$[rsp], rax

; 1589 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1590 : 		if (_Capacity < _Count)

  00081	48 8b 44 24 58	 mov	 rax, QWORD PTR _Count$[rsp]
  00086	48 39 44 24 20	 cmp	 QWORD PTR _Capacity$[rsp], rax
  0008b	73 0a		 jae	 SHORT $LN2@Grow_to

; 1591 : 			_Capacity = _Count;

  0008d	48 8b 44 24 58	 mov	 rax, QWORD PTR _Count$[rsp]
  00092	48 89 44 24 20	 mov	 QWORD PTR _Capacity$[rsp], rax
$LN2@Grow_to:

; 1592 : 		return (_Capacity);

  00097	48 8b 44 24 20	 mov	 rax, QWORD PTR _Capacity$[rsp]

; 1593 : 		}

  0009c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a0	c3		 ret	 0
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IEBA_K_K@Z ENDP ; std::vector<int,std::allocator<int> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IEAAXPEAH0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IEAAXPEAH0@Z PROC ; std::vector<int,std::allocator<int> >::_Destroy, COMDAT

; 1580 : 		{	// destroy [_First, _Last) using allocator

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1581 : 		_Destroy_range(_First, _Last, this->_Getal());

  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Last$[rsp]
  00025	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _First$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@H@std@@PEAH@std@@YAXPEAH0AEAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z ; std::_Destroy_range<std::allocator<int>,int * __ptr64>

; 1582 : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IEAAXPEAH0@Z ENDP ; std::vector<int,std::allocator<int> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?clear@?$vector@HV?$allocator@H@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
tv75 = 32
tv95 = 40
$T1 = 48
this$ = 80
?clear@?$vector@HV?$allocator@H@std@@@std@@QEAAXXZ PROC	; std::vector<int,std::allocator<int> >::clear, COMDAT

; 1539 : 		{	// erase all

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00009	48 c7 44 24 30
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 1540 : 		this->_Orphan_all();

  00012	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00017	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Orphan_all
  0001c	90		 npad	 1

; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());

  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  00027	90		 npad	 1
  00028	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  0002d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00032	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
  00037	90		 npad	 1
  00038	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv75[rsp]
  0003d	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  00040	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00043	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00048	e8 00 00 00 00	 call	 ?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IEAAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Destroy
  0004d	90		 npad	 1

; 1542 : 		this->_Mylast() = this->_Myfirst();

  0004e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00053	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
  00058	90		 npad	 1
  00059	48 89 44 24 28	 mov	 QWORD PTR tv95[rsp], rax
  0005e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00063	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  00068	90		 npad	 1
  00069	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv95[rsp]
  0006e	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00071	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1543 : 		}

  00074	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00078	c3		 ret	 0
?clear@?$vector@HV?$allocator@H@std@@@std@@QEAAXXZ ENDP	; std::vector<int,std::allocator<int> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QEAAXAEBH@Z
_TEXT	SEGMENT
tv176 = 32
tv231 = 40
tv71 = 48
tv88 = 56
tv136 = 64
_Idx$1 = 72
tv159 = 80
tv161 = 88
tv183 = 96
tv199 = 104
tv216 = 112
this$ = 144
_Val$ = 152
?push_back@?$vector@HV?$allocator@H@std@@@std@@QEAAXAEBH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT

; 1276 : 		{	// insert element at end

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1277 : 		if (_Inside(_STD addressof(_Val)))

  00011	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Val$[rsp]
  00019	e8 00 00 00 00	 call	 ??$addressof@$$CBH@std@@YAPEBHAEBH@Z ; std::addressof<int const >
  0001e	48 8b d0	 mov	 rdx, rax
  00021	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00029	e8 00 00 00 00	 call	 ?_Inside@?$vector@HV?$allocator@H@std@@@std@@IEBA_NPEBH@Z ; std::vector<int,std::allocator<int> >::_Inside
  0002e	0f b6 c0	 movzx	 eax, al
  00031	85 c0		 test	 eax, eax
  00033	0f 84 38 01 00
	00		 je	 $LN2@push_back

; 1278 : 			{	// push back an element
; 1279 : 			size_type _Idx = _STD addressof(_Val) - _Unfancy(this->_Myfirst());

  00039	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Val$[rsp]
  00041	e8 00 00 00 00	 call	 ??$addressof@$$CBH@std@@YAPEBHAEBH@Z ; std::addressof<int const >
  00046	48 89 44 24 30	 mov	 QWORD PTR tv71[rsp], rax
  0004b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00053	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
  00058	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0005b	e8 00 00 00 00	 call	 ??$_Unfancy@H@std@@YAPEAHPEAH@Z ; std::_Unfancy<int>
  00060	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv71[rsp]
  00065	48 2b c8	 sub	 rcx, rax
  00068	48 8b c1	 mov	 rax, rcx
  0006b	48 c1 f8 02	 sar	 rax, 2
  0006f	48 89 44 24 48	 mov	 QWORD PTR _Idx$1[rsp], rax

; 1280 : 			if (this->_Mylast() == this->_Myend())

  00074	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0007c	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  00081	48 89 44 24 38	 mov	 QWORD PTR tv88[rsp], rax
  00086	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0008e	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend
  00093	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00096	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv88[rsp]
  0009b	48 39 01	 cmp	 QWORD PTR [rcx], rax
  0009e	75 12		 jne	 SHORT $LN4@push_back

; 1281 : 				_Reserve(1);

  000a0	ba 01 00 00 00	 mov	 edx, 1
  000a5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000ad	e8 00 00 00 00	 call	 ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN4@push_back:

; 1282 : 			_Orphan_range(this->_Mylast(), this->_Mylast());

  000b2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000ba	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  000bf	48 89 44 24 40	 mov	 QWORD PTR tv136[rsp], rax
  000c4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000cc	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  000d1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv136[rsp]
  000d6	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  000d9	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000dc	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000e4	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range

; 1283 : 			this->_Getal().construct(_Unfancy(this->_Mylast()),

  000e9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000f1	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
  000f6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Idx$1[rsp]
  000fe	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  00102	48 89 44 24 50	 mov	 QWORD PTR tv159[rsp], rax
  00107	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0010f	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  00114	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00117	e8 00 00 00 00	 call	 ??$_Unfancy@H@std@@YAPEAHPEAH@Z ; std::_Unfancy<int>
  0011c	48 89 44 24 58	 mov	 QWORD PTR tv161[rsp], rax
  00121	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00129	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal
  0012e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv159[rsp]
  00133	4c 8b c1	 mov	 r8, rcx
  00136	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv161[rsp]
  0013b	48 8b d1	 mov	 rdx, rcx
  0013e	48 8b c8	 mov	 rcx, rax
  00141	e8 00 00 00 00	 call	 ??$construct@HAEAH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAHAEAH@Z ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int & __ptr64>

; 1284 : 				this->_Myfirst()[_Idx]);
; 1285 : 			++this->_Mylast();

  00146	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0014e	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  00153	48 89 44 24 20	 mov	 QWORD PTR tv176[rsp], rax
  00158	48 8b 44 24 20	 mov	 rax, QWORD PTR tv176[rsp]
  0015d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00160	48 83 c0 04	 add	 rax, 4
  00164	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv176[rsp]
  00169	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1286 : 			}
; 1287 : 		else

  0016c	e9 da 00 00 00	 jmp	 $LN3@push_back
$LN2@push_back:

; 1288 : 			{	// push back a non-element
; 1289 : 			if (this->_Mylast() == this->_Myend())

  00171	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00179	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  0017e	48 89 44 24 60	 mov	 QWORD PTR tv183[rsp], rax
  00183	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0018b	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend
  00190	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00193	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv183[rsp]
  00198	48 39 01	 cmp	 QWORD PTR [rcx], rax
  0019b	75 12		 jne	 SHORT $LN5@push_back

; 1290 : 				_Reserve(1);

  0019d	ba 01 00 00 00	 mov	 edx, 1
  001a2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001aa	e8 00 00 00 00	 call	 ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN5@push_back:

; 1291 : 			_Orphan_range(this->_Mylast(), this->_Mylast());

  001af	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001b7	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  001bc	48 89 44 24 68	 mov	 QWORD PTR tv199[rsp], rax
  001c1	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001c9	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  001ce	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv199[rsp]
  001d3	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  001d6	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  001d9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001e1	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range

; 1292 : 			this->_Getal().construct(_Unfancy(this->_Mylast()),

  001e6	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001ee	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  001f3	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  001f6	e8 00 00 00 00	 call	 ??$_Unfancy@H@std@@YAPEAHPEAH@Z ; std::_Unfancy<int>
  001fb	48 89 44 24 70	 mov	 QWORD PTR tv216[rsp], rax
  00200	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00208	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal
  0020d	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR _Val$[rsp]
  00215	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv216[rsp]
  0021a	48 8b d1	 mov	 rdx, rcx
  0021d	48 8b c8	 mov	 rcx, rax
  00220	e8 00 00 00 00	 call	 ??$construct@HAEBH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAHAEBH@Z ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int const & __ptr64>

; 1293 : 				_Val);
; 1294 : 			++this->_Mylast();

  00225	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0022d	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  00232	48 89 44 24 28	 mov	 QWORD PTR tv231[rsp], rax
  00237	48 8b 44 24 28	 mov	 rax, QWORD PTR tv231[rsp]
  0023c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0023f	48 83 c0 04	 add	 rax, 4
  00243	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv231[rsp]
  00248	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN3@push_back:

; 1295 : 			}
; 1296 : 		}

  0024b	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00252	c3		 ret	 0
?push_back@?$vector@HV?$allocator@H@std@@@std@@QEAAXAEBH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z
_TEXT	SEGMENT
this$ = 48
_Pos$ = 56
??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z PROC ; std::vector<int,std::allocator<int> >::operator[], COMDAT

; 1230 : 		{	// subscript mutable sequence

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1231 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1232 : 		if (size() <= _Pos)
; 1233 : 			{	// report error
; 1234 : 			_DEBUG_ERROR("vector subscript out of range");
; 1235 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1236 : 			}
; 1237 : 
; 1238 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1239 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1240 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1241 : 
; 1242 : 		return (*(this->_Myfirst() + _Pos));

  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
  00018	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Pos$[rsp]
  00020	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]

; 1243 : 		}

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
??A?$vector@HV?$allocator@H@std@@@std@@QEAAAEAH_K@Z ENDP ; std::vector<int,std::allocator<int> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ PROC ; std::vector<int,std::allocator<int> >::max_size, COMDAT

; 1184 : 		{	// return maximum possible length of sequence

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1185 : 		return (this->_Getal().max_size());

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal
  00013	0f b6 54 24 20	 movzx	 edx, BYTE PTR $T1[rsp]
  00018	48 8b c8	 mov	 rcx, rax
  0001b	e8 00 00 00 00	 call	 ?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEBA_KU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<int> >::max_size

; 1186 : 		}

  00020	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00024	c3		 ret	 0
?max_size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ENDP ; std::vector<int,std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
tv69 = 32
this$ = 64
?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ PROC	; std::vector<int,std::allocator<int> >::size, COMDAT

; 1179 : 		{	// return length of sequence

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  00013	48 89 44 24 20	 mov	 QWORD PTR tv69[rsp], rax
  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
  00022	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00025	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv69[rsp]
  0002a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0002d	48 2b c8	 sub	 rcx, rax
  00030	48 8b c1	 mov	 rax, rcx
  00033	48 c1 f8 02	 sar	 rax, 2

; 1181 : 		}

  00037	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003b	c3		 ret	 0
?size@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ENDP	; std::vector<int,std::allocator<int> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
tv69 = 32
this$ = 64
?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ PROC ; std::vector<int,std::allocator<int> >::_Unused_capacity, COMDAT

; 1047 : 		{	// micro-optimization for capacity() - size()

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1048 : 		return (this->_Myend() - this->_Mylast());

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend
  00013	48 89 44 24 20	 mov	 QWORD PTR tv69[rsp], rax
  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  00022	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00025	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv69[rsp]
  0002a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0002d	48 2b c8	 sub	 rcx, rax
  00030	48 8b c1	 mov	 rax, rcx
  00033	48 c1 f8 02	 sar	 rax, 2

; 1049 : 		}

  00037	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003b	c3		 ret	 0
?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ENDP ; std::vector<int,std::allocator<int> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
tv69 = 32
this$ = 64
?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ PROC ; std::vector<int,std::allocator<int> >::capacity, COMDAT

; 1042 : 		{	// return current length of allocated storage

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1043 : 		return (this->_Myend() - this->_Myfirst());

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend
  00013	48 89 44 24 20	 mov	 QWORD PTR tv69[rsp], rax
  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
  00022	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00025	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv69[rsp]
  0002a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0002d	48 2b c8	 sub	 rcx, rax
  00030	48 8b c1	 mov	 rax, rcx
  00033	48 c1 f8 02	 sar	 rax, 2

; 1044 : 		}

  00037	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003b	c3		 ret	 0
?capacity@?$vector@HV?$allocator@H@std@@@std@@QEBA_KXZ ENDP ; std::vector<int,std::allocator<int> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ PROC	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >, COMDAT

; 975  : 		{	// destroy the object

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 976  : 		_Tidy();

  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00017	e8 00 00 00 00	 call	 ?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IEAAXXZ ; std::vector<int,std::allocator<int> >::_Tidy
  0001c	90		 npad	 1

; 977  : 		}

  0001d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00021	c3		 ret	 0
??1?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ENDP	; std::vector<int,std::allocator<int> >::~vector<int,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@HV?$allocator@H@std@@@std@@QEAAX$$QEAH@Z
_TEXT	SEGMENT
tv178 = 32
tv235 = 40
tv71 = 48
tv88 = 56
tv136 = 64
_Idx$1 = 72
tv152 = 80
tv163 = 88
tv185 = 96
tv201 = 104
tv217 = 112
tv220 = 120
this$ = 144
_Val$ = 152
?push_back@?$vector@HV?$allocator@H@std@@@std@@QEAAX$$QEAH@Z PROC ; std::vector<int,std::allocator<int> >::push_back, COMDAT

; 896  : 		{	// insert by moving into element at end

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 897  : 		if (_Inside(_STD addressof(_Val)))

  00011	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Val$[rsp]
  00019	e8 00 00 00 00	 call	 ??$addressof@H@std@@YAPEAHAEAH@Z ; std::addressof<int>
  0001e	48 8b d0	 mov	 rdx, rax
  00021	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00029	e8 00 00 00 00	 call	 ?_Inside@?$vector@HV?$allocator@H@std@@@std@@IEBA_NPEBH@Z ; std::vector<int,std::allocator<int> >::_Inside
  0002e	0f b6 c0	 movzx	 eax, al
  00031	85 c0		 test	 eax, eax
  00033	0f 84 40 01 00
	00		 je	 $LN2@push_back

; 898  : 			{	// push back an element
; 899  : 			size_type _Idx = _STD addressof(_Val) - _Unfancy(this->_Myfirst());

  00039	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Val$[rsp]
  00041	e8 00 00 00 00	 call	 ??$addressof@H@std@@YAPEAHAEAH@Z ; std::addressof<int>
  00046	48 89 44 24 30	 mov	 QWORD PTR tv71[rsp], rax
  0004b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00053	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
  00058	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0005b	e8 00 00 00 00	 call	 ??$_Unfancy@H@std@@YAPEAHPEAH@Z ; std::_Unfancy<int>
  00060	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv71[rsp]
  00065	48 2b c8	 sub	 rcx, rax
  00068	48 8b c1	 mov	 rax, rcx
  0006b	48 c1 f8 02	 sar	 rax, 2
  0006f	48 89 44 24 48	 mov	 QWORD PTR _Idx$1[rsp], rax

; 900  : 			if (this->_Mylast() == this->_Myend())

  00074	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0007c	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  00081	48 89 44 24 38	 mov	 QWORD PTR tv88[rsp], rax
  00086	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0008e	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend
  00093	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00096	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv88[rsp]
  0009b	48 39 01	 cmp	 QWORD PTR [rcx], rax
  0009e	75 12		 jne	 SHORT $LN4@push_back

; 901  : 				_Reserve(1);

  000a0	ba 01 00 00 00	 mov	 edx, 1
  000a5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000ad	e8 00 00 00 00	 call	 ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN4@push_back:

; 902  : 			_Orphan_range(this->_Mylast(), this->_Mylast());

  000b2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000ba	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  000bf	48 89 44 24 40	 mov	 QWORD PTR tv136[rsp], rax
  000c4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000cc	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  000d1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv136[rsp]
  000d6	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  000d9	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000dc	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000e4	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range

; 903  : 			this->_Getal().construct(_Unfancy(this->_Mylast()),

  000e9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000f1	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
  000f6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Idx$1[rsp]
  000fe	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  00102	48 8b c8	 mov	 rcx, rax
  00105	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  0010a	48 89 44 24 50	 mov	 QWORD PTR tv152[rsp], rax
  0010f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00117	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  0011c	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0011f	e8 00 00 00 00	 call	 ??$_Unfancy@H@std@@YAPEAHPEAH@Z ; std::_Unfancy<int>
  00124	48 89 44 24 58	 mov	 QWORD PTR tv163[rsp], rax
  00129	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00131	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal
  00136	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv152[rsp]
  0013b	4c 8b c1	 mov	 r8, rcx
  0013e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv163[rsp]
  00143	48 8b d1	 mov	 rdx, rcx
  00146	48 8b c8	 mov	 rcx, rax
  00149	e8 00 00 00 00	 call	 ??$construct@HH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAH$$QEAH@Z ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int>

; 904  : 				_STD forward<value_type>(this->_Myfirst()[_Idx]));
; 905  : 			++this->_Mylast();

  0014e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00156	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  0015b	48 89 44 24 20	 mov	 QWORD PTR tv178[rsp], rax
  00160	48 8b 44 24 20	 mov	 rax, QWORD PTR tv178[rsp]
  00165	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00168	48 83 c0 04	 add	 rax, 4
  0016c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv178[rsp]
  00171	48 89 01	 mov	 QWORD PTR [rcx], rax

; 906  : 			}
; 907  : 		else

  00174	e9 ec 00 00 00	 jmp	 $LN3@push_back
$LN2@push_back:

; 908  : 			{	// push back a non-element
; 909  : 			if (this->_Mylast() == this->_Myend())

  00179	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00181	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  00186	48 89 44 24 60	 mov	 QWORD PTR tv185[rsp], rax
  0018b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00193	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend
  00198	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0019b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv185[rsp]
  001a0	48 39 01	 cmp	 QWORD PTR [rcx], rax
  001a3	75 12		 jne	 SHORT $LN5@push_back

; 910  : 				_Reserve(1);

  001a5	ba 01 00 00 00	 mov	 edx, 1
  001aa	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001b2	e8 00 00 00 00	 call	 ?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IEAAX_K@Z ; std::vector<int,std::allocator<int> >::_Reserve
$LN5@push_back:

; 911  : 			_Orphan_range(this->_Mylast(), this->_Mylast());

  001b7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001bf	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  001c4	48 89 44 24 68	 mov	 QWORD PTR tv201[rsp], rax
  001c9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001d1	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  001d6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv201[rsp]
  001db	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  001de	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  001e1	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001e9	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IEBAXPEAH0@Z ; std::vector<int,std::allocator<int> >::_Orphan_range

; 912  : 			this->_Getal().construct(_Unfancy(this->_Mylast()),

  001ee	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Val$[rsp]
  001f6	e8 00 00 00 00	 call	 ??$forward@H@std@@YA$$QEAHAEAH@Z ; std::forward<int>
  001fb	48 89 44 24 70	 mov	 QWORD PTR tv217[rsp], rax
  00200	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00208	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  0020d	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00210	e8 00 00 00 00	 call	 ??$_Unfancy@H@std@@YAPEAHPEAH@Z ; std::_Unfancy<int>
  00215	48 89 44 24 78	 mov	 QWORD PTR tv220[rsp], rax
  0021a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00222	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal
  00227	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv217[rsp]
  0022c	4c 8b c1	 mov	 r8, rcx
  0022f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv220[rsp]
  00234	48 8b d1	 mov	 rdx, rcx
  00237	48 8b c8	 mov	 rcx, rax
  0023a	e8 00 00 00 00	 call	 ??$construct@HH@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAH$$QEAH@Z ; std::_Wrap_alloc<std::allocator<int> >::construct<int,int>

; 913  : 				_STD forward<value_type>(_Val));
; 914  : 			++this->_Mylast();

  0023f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00247	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
  0024c	48 89 44 24 28	 mov	 QWORD PTR tv235[rsp], rax
  00251	48 8b 44 24 28	 mov	 rax, QWORD PTR tv235[rsp]
  00256	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00259	48 83 c0 04	 add	 rax, 4
  0025d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv235[rsp]
  00262	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN3@push_back:

; 915  : 			}
; 916  : 		}

  00265	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0026c	c3		 ret	 0
?push_back@?$vector@HV?$allocator@H@std@@@std@@QEAAX$$QEAH@Z ENDP ; std::vector<int,std::allocator<int> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ PROC	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >, COMDAT

; 707  : 		{	// construct empty vector

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 706  : 		: _Mybase()

  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >
  0001c	90		 npad	 1

; 708  : 		}

  0001d	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00026	c3		 ret	 0
??0?$vector@HV?$allocator@H@std@@@std@@QEAA@XZ ENDP	; std::vector<int,std::allocator<int> >::vector<int,std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second, COMDAT

; 319  : 		{	// return const reference to second

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 320  : 		return (_Myval2);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 321  : 		}

  0000a	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second, COMDAT

; 314  : 		{	// return reference to second

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 315  : 		return (_Myval2);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 316  : 		}

  0000a	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first, COMDAT

; 299  : 		{	// return const reference to first

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 300  : 		return (*this);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 301  : 		}

  0000a	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first, COMDAT

; 294  : 		{	// return reference to first

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 295  : 		return (*this);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 296  : 		}

  0000a	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >, COMDAT

; 488  : 		{	// initialize values

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 485  : 		: _Myfirst(),

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 486  : 		_Mylast(),

  00011	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00016	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 487  : 		_Myend()

  0001e	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 489  : 		}

  0002b	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00030	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<int> >::_Vector_val<std::_Simple_types<int> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ
_TEXT	SEGMENT
this$ = 48
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend, COMDAT

; 667  : 		{	// return const reference to _Myend

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 668  : 		return (_Get_data()._Myend);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data
  00013	48 83 c0 10	 add	 rax, 16

; 669  : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ
_TEXT	SEGMENT
this$ = 48
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend, COMDAT

; 662  : 		{	// return reference to _Myend

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 663  : 		return (_Get_data()._Myend);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data
  00013	48 83 c0 10	 add	 rax, 16

; 664  : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ
_TEXT	SEGMENT
this$ = 48
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast, COMDAT

; 657  : 		{	// return const reference to _Mylast

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 658  : 		return (_Get_data()._Mylast);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data
  00013	48 83 c0 08	 add	 rax, 8

; 659  : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ
_TEXT	SEGMENT
this$ = 48
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast, COMDAT

; 652  : 		{	// return reference to _Mylast

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 653  : 		return (_Get_data()._Mylast);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data
  00013	48 83 c0 08	 add	 rax, 8

; 654  : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ
_TEXT	SEGMENT
this$ = 48
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst, COMDAT

; 647  : 		{	// return const reference to _Myfirst

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 648  : 		return (_Get_data()._Myfirst);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data

; 649  : 		}

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBQEAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ
_TEXT	SEGMENT
this$ = 48
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst, COMDAT

; 642  : 		{	// return reference to _Myfirst

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 643  : 		return (_Get_data()._Myfirst);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data

; 644  : 		}

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAPEAHXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data, COMDAT

; 637  : 		{	// return const reference to _Vector_val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 638  : 		return (_Mypair._Get_second());

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second

; 639  : 		}

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data, COMDAT

; 632  : 		{	// return reference to _Vector_val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 633  : 		return (_Mypair._Get_second());

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_second

; 634  : 		}

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal, COMDAT

; 627  : 		{	// return const reference to allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 628  : 		return (_Mypair._Get_first());

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first

; 629  : 		}

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal, COMDAT

; 622  : 		{	// return reference to allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 623  : 		return (_Mypair._Get_first());

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Get_first

; 624  : 		}

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Orphan_all, COMDAT

; 612  : 		{	// orphan all iterators

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 613  : 		_Get_data()._Orphan_all();

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@H@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Get_data
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 614  : 		}

  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAAXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??0?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >, COMDAT

; 520  : 		{	// default construct allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 519  : 		: _Mypair(_Zero_then_variadic_args_t())

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	0f b6 54 24 20	 movzx	 edx, BYTE PTR $T1[rsp]
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@V?$_Vector_val@U?$_Simple_types@H@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<int> >,std::_Vector_val<std::_Simple_types<int> >,1><>

; 521  : 		}

  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00020	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00024	c3		 ret	 0
??0?$_Vector_alloc@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >::_Vector_alloc<std::_Vec_base_types<int,std::allocator<int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEBA_KU_Nil@2@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEBA_KU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::max_size, COMDAT

; 1007 : 		{	// get maximum size

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1008 : 		return (_Mytraits::max_size(*this));

  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z ; std::allocator_traits<std::allocator<int> >::max_size

; 1009 : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEBA_KU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAH_K@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAH_K@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::deallocate, COMDAT

; 986  : 		{	// deallocate object at _Ptr, ignore size

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 987  : 		_Mybase::deallocate(_Ptr, _Count);

  00013	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Count$[rsp]
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ?deallocate@?$allocator@H@std@@QEAAXPEAH_K@Z ; std::allocator<int>::deallocate

; 988  : 		}

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAXPEAH_K@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAPEAH_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAPEAH_K@Z PROC ; std::_Wrap_alloc<std::allocator<int> >::allocate, COMDAT

; 975  : 		{	// allocate array of _Count elements

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 976  : 		return (_Mybase::allocate(_Count));

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Count$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ?allocate@?$allocator@H@std@@QEAAPEAH_K@Z ; std::allocator<int>::allocate

; 977  : 		}

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAAPEAH_K@Z ENDP ; std::_Wrap_alloc<std::allocator<int> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAA@XZ PROC	; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >, COMDAT

; 936  : 		{	// construct default allocator (do nothing)

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 935  : 		: _Mybase()

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??0?$allocator@H@std@@QEAA@XZ ; std::allocator<int>::allocator<int>

; 937  : 		}

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QEAA@XZ ENDP	; std::_Wrap_alloc<std::allocator<int> >::_Wrap_alloc<std::allocator<int> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z
_TEXT	SEGMENT
_Al$ = 48
?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z PROC ; std::allocator_traits<std::allocator<int> >::max_size, COMDAT

; 868  : 		{	// get maximum size

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 869  : 		return (_Al.max_size());

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  0000e	e8 00 00 00 00	 call	 ?max_size@?$allocator@H@std@@QEBA_KXZ ; std::allocator<int>::max_size

; 870  : 		}

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SA_KAEBV?$allocator@H@2@@Z ENDP ; std::allocator_traits<std::allocator<int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@H@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 8
?max_size@?$allocator@H@std@@QEBA_KXZ PROC		; std::allocator<int>::max_size, COMDAT

; 748  : 		{	// estimate maximum array size

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 749  : 		return ((size_t)(-1) / sizeof (_Ty));

  00005	48 b8 ff ff ff
	ff ff ff ff 3f	 mov	 rax, 4611686018427387903 ; 3fffffffffffffffH

; 750  : 		}

  0000f	c3		 ret	 0
?max_size@?$allocator@H@std@@QEBA_KXZ ENDP		; std::allocator<int>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@H@std@@QEAAPEAH_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@H@std@@QEAAPEAH_K@Z PROC		; std::allocator<int>::allocate, COMDAT

; 724  : 		{	// allocate array of _Count elements

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

  0000e	41 b0 01	 mov	 r8b, 1
  00011	ba 04 00 00 00	 mov	 edx, 4
  00016	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Count$[rsp]
  0001b	e8 00 00 00 00	 call	 ?_Allocate@std@@YAPEAX_K0_N@Z ; std::_Allocate

; 726  : 		}

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
?allocate@?$allocator@H@std@@QEAAPEAH_K@Z ENDP		; std::allocator<int>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@H@std@@QEAAXPEAH_K@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$allocator@H@std@@QEAAXPEAH_K@Z PROC	; std::allocator<int>::deallocate, COMDAT

; 719  : 		{	// deallocate object at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00013	41 b8 04 00 00
	00		 mov	 r8d, 4
  00019	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Count$[rsp]
  0001e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00023	e8 00 00 00 00	 call	 ?_Deallocate@std@@YAXPEAX_K1@Z ; std::_Deallocate

; 721  : 		}

  00028	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002c	c3		 ret	 0
?deallocate@?$allocator@H@std@@QEAAXPEAH_K@Z ENDP	; std::allocator<int>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@H@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$allocator@H@std@@QEAA@XZ PROC			; std::allocator<int>::allocator<int>, COMDAT

; 699  : 	allocator() _THROW0()

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	c3		 ret	 0
??0?$allocator@H@std@@QEAA@XZ ENDP			; std::allocator<int>::allocator<int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
this$ = 48
time$ = 56
?setStreamTime@RtApi@@UEAAXN@Z PROC			; RtApi::setStreamTime

; 426  : {

$LN4:
  00000	f2 0f 11 4c 24
	10		 movsd	 QWORD PTR [rsp+16], xmm1
  00006	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000b	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 427  :   verifyStream();

  0000f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00014	e8 00 00 00 00	 call	 ?verifyStream@RtApi@@IEAAXXZ ; RtApi::verifyStream

; 428  : 
; 429  :   if ( time >= 0.0 )

  00019	f2 0f 10 44 24
	38		 movsd	 xmm0, QWORD PTR time$[rsp]
  0001f	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00027	72 13		 jb	 SHORT $LN2@setStreamT

; 430  :     stream_.streamTime = time;

  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002e	f2 0f 10 44 24
	38		 movsd	 xmm0, QWORD PTR time$[rsp]
  00034	f2 0f 11 80 78
	02 00 00	 movsd	 QWORD PTR [rax+632], xmm0
$LN2@setStreamT:

; 431  : #if defined( HAVE_GETTIMEOFDAY )
; 432  :   gettimeofday( &stream_.lastTickTimestamp, NULL );
; 433  : #endif
; 434  : }

  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	c3		 ret	 0
?setStreamTime@RtApi@@UEAAXN@Z ENDP			; RtApi::setStreamTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
this$ = 48
?getStreamTime@RtApi@@UEAANXZ PROC			; RtApi::getStreamTime

; 403  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 404  :   verifyStream();

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?verifyStream@RtApi@@IEAAXXZ ; RtApi::verifyStream

; 405  : 
; 406  : #if defined( HAVE_GETTIMEOFDAY )
; 407  :   // Return a very accurate estimate of the stream time by
; 408  :   // adding in the elapsed time since the last tick.
; 409  :   struct timeval then;
; 410  :   struct timeval now;
; 411  : 
; 412  :   if ( stream_.state != STREAM_RUNNING || stream_.streamTime == 0.0 )
; 413  :     return stream_.streamTime;
; 414  : 
; 415  :   gettimeofday( &now, NULL );
; 416  :   then = stream_.lastTickTimestamp;
; 417  :   return stream_.streamTime +
; 418  :     ((now.tv_sec + 0.000001 * now.tv_usec) -
; 419  :      (then.tv_sec + 0.000001 * then.tv_usec));     
; 420  : #else
; 421  :   return stream_.streamTime;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00018	f2 0f 10 80 78
	02 00 00	 movsd	 xmm0, QWORD PTR [rax+632]

; 422  : #endif
; 423  : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
?getStreamTime@RtApi@@UEAANXZ ENDP			; RtApi::getStreamTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
this$ = 48
?getStreamSampleRate@RtApi@@QEAAIXZ PROC		; RtApi::getStreamSampleRate

; 437  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 438  :  verifyStream();

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?verifyStream@RtApi@@IEAAXXZ ; RtApi::verifyStream

; 439  : 
; 440  :  return stream_.sampleRate;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00018	8b 80 50 01 00
	00		 mov	 eax, DWORD PTR [rax+336]

; 441  : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
?getStreamSampleRate@RtApi@@QEAAIXZ ENDP		; RtApi::getStreamSampleRate
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
totalLatency$ = 32
this$ = 64
?getStreamLatency@RtApi@@QEAAJXZ PROC			; RtApi::getStreamLatency

; 390  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 391  :   verifyStream();

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?verifyStream@RtApi@@IEAAXXZ ; RtApi::verifyStream

; 392  : 
; 393  :   long totalLatency = 0;

  00013	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR totalLatency$[rsp], 0

; 394  :   if ( stream_.mode == OUTPUT || stream_.mode == DUPLEX )

  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00020	83 b8 28 01 00
	00 00		 cmp	 DWORD PTR [rax+296], 0
  00027	74 0e		 je	 SHORT $LN3@getStreamL
  00029	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0002e	83 b8 28 01 00
	00 02		 cmp	 DWORD PTR [rax+296], 2
  00035	75 19		 jne	 SHORT $LN2@getStreamL
$LN3@getStreamL:

; 395  :     totalLatency = stream_.latency[0];

  00037	b8 04 00 00 00	 mov	 eax, 4
  0003c	48 6b c0 00	 imul	 rax, rax, 0
  00040	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00045	8b 84 01 74 01
	00 00		 mov	 eax, DWORD PTR [rcx+rax+372]
  0004c	89 44 24 20	 mov	 DWORD PTR totalLatency$[rsp], eax
$LN2@getStreamL:

; 396  :   if ( stream_.mode == INPUT || stream_.mode == DUPLEX )

  00050	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00055	83 b8 28 01 00
	00 01		 cmp	 DWORD PTR [rax+296], 1
  0005c	74 0e		 je	 SHORT $LN5@getStreamL
  0005e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00063	83 b8 28 01 00
	00 02		 cmp	 DWORD PTR [rax+296], 2
  0006a	75 21		 jne	 SHORT $LN4@getStreamL
$LN5@getStreamL:

; 397  :     totalLatency += stream_.latency[1];

  0006c	b8 04 00 00 00	 mov	 eax, 4
  00071	48 6b c0 01	 imul	 rax, rax, 1
  00075	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0007a	8b 84 01 74 01
	00 00		 mov	 eax, DWORD PTR [rcx+rax+372]
  00081	8b 4c 24 20	 mov	 ecx, DWORD PTR totalLatency$[rsp]
  00085	03 c8		 add	 ecx, eax
  00087	8b c1		 mov	 eax, ecx
  00089	89 44 24 20	 mov	 DWORD PTR totalLatency$[rsp], eax
$LN4@getStreamL:

; 398  : 
; 399  :   return totalLatency;

  0008d	8b 44 24 20	 mov	 eax, DWORD PTR totalLatency$[rsp]

; 400  : }

  00091	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00095	c3		 ret	 0
?getStreamLatency@RtApi@@QEAAJXZ ENDP			; RtApi::getStreamLatency
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
this$ = 8
?closeStream@RtApi@@UEAAXXZ PROC			; RtApi::closeStream

; 362  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 363  :   // MUST be implemented in subclasses!
; 364  :   return;
; 365  : }

  00005	c3		 ret	 0
?closeStream@RtApi@@UEAAXXZ ENDP			; RtApi::closeStream
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
result$ = 80
oChannels$ = 84
iChannels$ = 88
nDevices$ = 92
this$ = 112
oParams$ = 120
iParams$ = 128
format$ = 136
sampleRate$ = 144
bufferFrames$ = 152
callback$ = 160
userData$ = 168
options$ = 176
errorCallback$ = 184
?openStream@RtApi@@QEAAXPEAUStreamParameters@RtAudio@@0KIPEAIP6AHPEAX2INI2@Z2PEAUStreamOptions@3@P6AXW4Type@RtAudioError@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@Z PROC ; RtApi::openStream

; 263  : {

$LN18:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 264  :   if ( stream_.state != STREAM_CLOSED ) {

  00018	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0001d	83 b8 2c 01 00
	00 ce		 cmp	 DWORD PTR [rax+300], -50 ; ffffffffffffffceH
  00024	74 2e		 je	 SHORT $LN2@openStream

; 265  :     errorText_ = "RtApi::openStream: a stream is already open!";

  00026	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0002b	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00031	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG125271
  00038	48 8b c8	 mov	 rcx, rax
  0003b	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 266  :     error( RtAudioError::INVALID_USE );

  00040	ba 07 00 00 00	 mov	 edx, 7
  00045	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  0004a	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 267  :     return;

  0004f	e9 74 03 00 00	 jmp	 $LN1@openStream
$LN2@openStream:

; 268  :   }
; 269  : 
; 270  :   // Clear stream information potentially left from a previously open stream.
; 271  :   clearStreamInfo();

  00054	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00059	e8 00 00 00 00	 call	 ?clearStreamInfo@RtApi@@IEAAXXZ ; RtApi::clearStreamInfo

; 272  : 
; 273  :   if ( oParams && oParams->nChannels < 1 ) {

  0005e	48 83 7c 24 78
	00		 cmp	 QWORD PTR oParams$[rsp], 0
  00064	74 39		 je	 SHORT $LN3@openStream
  00066	48 8b 44 24 78	 mov	 rax, QWORD PTR oParams$[rsp]
  0006b	83 78 04 01	 cmp	 DWORD PTR [rax+4], 1
  0006f	73 2e		 jae	 SHORT $LN3@openStream

; 274  :     errorText_ = "RtApi::openStream: a non-NULL output StreamParameters structure cannot have an nChannels value less than one.";

  00071	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00076	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  0007c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG125273
  00083	48 8b c8	 mov	 rcx, rax
  00086	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 275  :     error( RtAudioError::INVALID_USE );

  0008b	ba 07 00 00 00	 mov	 edx, 7
  00090	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00095	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 276  :     return;

  0009a	e9 29 03 00 00	 jmp	 $LN1@openStream
$LN3@openStream:

; 277  :   }
; 278  : 
; 279  :   if ( iParams && iParams->nChannels < 1 ) {

  0009f	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR iParams$[rsp], 0
  000a8	74 3c		 je	 SHORT $LN4@openStream
  000aa	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR iParams$[rsp]
  000b2	83 78 04 01	 cmp	 DWORD PTR [rax+4], 1
  000b6	73 2e		 jae	 SHORT $LN4@openStream

; 280  :     errorText_ = "RtApi::openStream: a non-NULL input StreamParameters structure cannot have an nChannels value less than one.";

  000b8	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  000bd	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  000c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG125275
  000ca	48 8b c8	 mov	 rcx, rax
  000cd	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 281  :     error( RtAudioError::INVALID_USE );

  000d2	ba 07 00 00 00	 mov	 edx, 7
  000d7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  000dc	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 282  :     return;

  000e1	e9 e2 02 00 00	 jmp	 $LN1@openStream
$LN4@openStream:

; 283  :   }
; 284  : 
; 285  :   if ( oParams == NULL && iParams == NULL ) {

  000e6	48 83 7c 24 78
	00		 cmp	 QWORD PTR oParams$[rsp], 0
  000ec	75 39		 jne	 SHORT $LN5@openStream
  000ee	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR iParams$[rsp], 0
  000f7	75 2e		 jne	 SHORT $LN5@openStream

; 286  :     errorText_ = "RtApi::openStream: input and output StreamParameters structures are both NULL!";

  000f9	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  000fe	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00104	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG125277
  0010b	48 8b c8	 mov	 rcx, rax
  0010e	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 287  :     error( RtAudioError::INVALID_USE );

  00113	ba 07 00 00 00	 mov	 edx, 7
  00118	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  0011d	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 288  :     return;

  00122	e9 a1 02 00 00	 jmp	 $LN1@openStream
$LN5@openStream:

; 289  :   }
; 290  : 
; 291  :   if ( formatBytes(format) == 0 ) {

  00127	8b 94 24 88 00
	00 00		 mov	 edx, DWORD PTR format$[rsp]
  0012e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00133	e8 00 00 00 00	 call	 ?formatBytes@RtApi@@IEAAIK@Z ; RtApi::formatBytes
  00138	85 c0		 test	 eax, eax
  0013a	75 2e		 jne	 SHORT $LN6@openStream

; 292  :     errorText_ = "RtApi::openStream: 'format' parameter value is undefined.";

  0013c	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00141	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00147	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG125279
  0014e	48 8b c8	 mov	 rcx, rax
  00151	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 293  :     error( RtAudioError::INVALID_USE );

  00156	ba 07 00 00 00	 mov	 edx, 7
  0015b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00160	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 294  :     return;

  00165	e9 5e 02 00 00	 jmp	 $LN1@openStream
$LN6@openStream:

; 295  :   }
; 296  : 
; 297  :   unsigned int nDevices = getDeviceCount();

  0016a	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0016f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00172	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00177	ff 50 10	 call	 QWORD PTR [rax+16]
  0017a	89 44 24 5c	 mov	 DWORD PTR nDevices$[rsp], eax

; 298  :   unsigned int oChannels = 0;

  0017e	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR oChannels$[rsp], 0

; 299  :   if ( oParams ) {

  00186	48 83 7c 24 78
	00		 cmp	 QWORD PTR oParams$[rsp], 0
  0018c	74 47		 je	 SHORT $LN7@openStream

; 300  :     oChannels = oParams->nChannels;

  0018e	48 8b 44 24 78	 mov	 rax, QWORD PTR oParams$[rsp]
  00193	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00196	89 44 24 54	 mov	 DWORD PTR oChannels$[rsp], eax

; 301  :     if ( oParams->deviceId >= nDevices ) {

  0019a	48 8b 44 24 78	 mov	 rax, QWORD PTR oParams$[rsp]
  0019f	8b 4c 24 5c	 mov	 ecx, DWORD PTR nDevices$[rsp]
  001a3	39 08		 cmp	 DWORD PTR [rax], ecx
  001a5	72 2e		 jb	 SHORT $LN8@openStream

; 302  :       errorText_ = "RtApi::openStream: output device parameter value is invalid.";

  001a7	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  001ac	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  001b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG125282
  001b9	48 8b c8	 mov	 rcx, rax
  001bc	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 303  :       error( RtAudioError::INVALID_USE );

  001c1	ba 07 00 00 00	 mov	 edx, 7
  001c6	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  001cb	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 304  :       return;

  001d0	e9 f3 01 00 00	 jmp	 $LN1@openStream
$LN8@openStream:
$LN7@openStream:

; 305  :     }
; 306  :   }
; 307  : 
; 308  :   unsigned int iChannels = 0;

  001d5	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR iChannels$[rsp], 0

; 309  :   if ( iParams ) {

  001dd	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR iParams$[rsp], 0
  001e6	74 4d		 je	 SHORT $LN9@openStream

; 310  :     iChannels = iParams->nChannels;

  001e8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR iParams$[rsp]
  001f0	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  001f3	89 44 24 58	 mov	 DWORD PTR iChannels$[rsp], eax

; 311  :     if ( iParams->deviceId >= nDevices ) {

  001f7	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR iParams$[rsp]
  001ff	8b 4c 24 5c	 mov	 ecx, DWORD PTR nDevices$[rsp]
  00203	39 08		 cmp	 DWORD PTR [rax], ecx
  00205	72 2e		 jb	 SHORT $LN10@openStream

; 312  :       errorText_ = "RtApi::openStream: input device parameter value is invalid.";

  00207	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0020c	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00212	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG125285
  00219	48 8b c8	 mov	 rcx, rax
  0021c	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=

; 313  :       error( RtAudioError::INVALID_USE );

  00221	ba 07 00 00 00	 mov	 edx, 7
  00226	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  0022b	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 314  :       return;

  00230	e9 93 01 00 00	 jmp	 $LN1@openStream
$LN10@openStream:
$LN9@openStream:

; 315  :     }
; 316  :   }
; 317  : 
; 318  :   bool result;
; 319  : 
; 320  :   if ( oChannels > 0 ) {

  00235	83 7c 24 54 00	 cmp	 DWORD PTR oChannels$[rsp], 0
  0023a	76 7c		 jbe	 SHORT $LN11@openStream

; 321  : 
; 322  :     result = probeDeviceOpen( oParams->deviceId, OUTPUT, oChannels, oParams->firstChannel,

  0023c	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00241	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00244	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR options$[rsp]
  0024c	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00251	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR bufferFrames$[rsp]
  00259	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0025e	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR format$[rsp]
  00265	89 4c 24 30	 mov	 DWORD PTR [rsp+48], ecx
  00269	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR sampleRate$[rsp]
  00270	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  00274	48 8b 4c 24 78	 mov	 rcx, QWORD PTR oParams$[rsp]
  00279	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  0027c	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00280	44 8b 4c 24 54	 mov	 r9d, DWORD PTR oChannels$[rsp]
  00285	45 33 c0	 xor	 r8d, r8d
  00288	48 8b 4c 24 78	 mov	 rcx, QWORD PTR oParams$[rsp]
  0028d	8b 11		 mov	 edx, DWORD PTR [rcx]
  0028f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00294	ff 50 60	 call	 QWORD PTR [rax+96]
  00297	88 44 24 50	 mov	 BYTE PTR result$[rsp], al

; 323  :                               sampleRate, format, bufferFrames, options );
; 324  :     if ( result == false ) {

  0029b	0f b6 44 24 50	 movzx	 eax, BYTE PTR result$[rsp]
  002a0	85 c0		 test	 eax, eax
  002a2	75 14		 jne	 SHORT $LN12@openStream

; 325  :       error( RtAudioError::SYSTEM_ERROR );

  002a4	ba 09 00 00 00	 mov	 edx, 9
  002a9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  002ae	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 326  :       return;

  002b3	e9 10 01 00 00	 jmp	 $LN1@openStream
$LN12@openStream:
$LN11@openStream:

; 327  :     }
; 328  :   }
; 329  : 
; 330  :   if ( iChannels > 0 ) {

  002b8	83 7c 24 58 00	 cmp	 DWORD PTR iChannels$[rsp], 0
  002bd	0f 86 99 00 00
	00		 jbe	 $LN13@openStream

; 331  : 
; 332  :     result = probeDeviceOpen( iParams->deviceId, INPUT, iChannels, iParams->firstChannel,

  002c3	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  002c8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002cb	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR options$[rsp]
  002d3	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002d8	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR bufferFrames$[rsp]
  002e0	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002e5	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR format$[rsp]
  002ec	89 4c 24 30	 mov	 DWORD PTR [rsp+48], ecx
  002f0	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR sampleRate$[rsp]
  002f7	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  002fb	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR iParams$[rsp]
  00303	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00306	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0030a	44 8b 4c 24 58	 mov	 r9d, DWORD PTR iChannels$[rsp]
  0030f	41 b8 01 00 00
	00		 mov	 r8d, 1
  00315	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR iParams$[rsp]
  0031d	8b 11		 mov	 edx, DWORD PTR [rcx]
  0031f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00324	ff 50 60	 call	 QWORD PTR [rax+96]
  00327	88 44 24 50	 mov	 BYTE PTR result$[rsp], al

; 333  :                               sampleRate, format, bufferFrames, options );
; 334  :     if ( result == false ) {

  0032b	0f b6 44 24 50	 movzx	 eax, BYTE PTR result$[rsp]
  00330	85 c0		 test	 eax, eax
  00332	75 28		 jne	 SHORT $LN14@openStream

; 335  :       if ( oChannels > 0 ) closeStream();

  00334	83 7c 24 54 00	 cmp	 DWORD PTR oChannels$[rsp], 0
  00339	76 10		 jbe	 SHORT $LN15@openStream
  0033b	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00340	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00343	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00348	ff 50 30	 call	 QWORD PTR [rax+48]
$LN15@openStream:

; 336  :       error( RtAudioError::SYSTEM_ERROR );

  0034b	ba 09 00 00 00	 mov	 edx, 9
  00350	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00355	e8 00 00 00 00	 call	 ?error@RtApi@@IEAAXW4Type@RtAudioError@@@Z ; RtApi::error

; 337  :       return;

  0035a	eb 6c		 jmp	 SHORT $LN1@openStream
$LN14@openStream:
$LN13@openStream:

; 338  :     }
; 339  :   }
; 340  : 
; 341  :   stream_.callbackInfo.callback = (void *) callback;

  0035c	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00361	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR callback$[rsp]
  00369	48 89 88 c0 01
	00 00		 mov	 QWORD PTR [rax+448], rcx

; 342  :   stream_.callbackInfo.userData = userData;

  00370	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00375	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR userData$[rsp]
  0037d	48 89 88 c8 01
	00 00		 mov	 QWORD PTR [rax+456], rcx

; 343  :   stream_.callbackInfo.errorCallback = (void *) errorCallback;

  00384	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00389	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR errorCallback$[rsp]
  00391	48 89 88 d0 01
	00 00		 mov	 QWORD PTR [rax+464], rcx

; 344  : 
; 345  :   if ( options ) options->numberOfBuffers = stream_.nBuffers;

  00398	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR options$[rsp], 0
  003a1	74 16		 je	 SHORT $LN16@openStream
  003a3	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR options$[rsp]
  003ab	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  003b0	8b 89 58 01 00
	00		 mov	 ecx, DWORD PTR [rcx+344]
  003b6	89 48 04	 mov	 DWORD PTR [rax+4], ecx
$LN16@openStream:

; 346  :   stream_.state = STREAM_STOPPED;

  003b9	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  003be	c7 80 2c 01 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+300], 0
$LN1@openStream:

; 347  : }

  003c8	48 83 c4 68	 add	 rsp, 104		; 00000068H
  003cc	c3		 ret	 0
?openStream@RtApi@@QEAAXPEAUStreamParameters@RtAudio@@0KIPEAIP6AHPEAX2INI2@Z2PEAUStreamOptions@3@P6AXW4Type@RtAudioError@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@Z ENDP ; RtApi::openStream
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
this$ = 8
?getDefaultOutputDevice@RtApi@@UEAAIXZ PROC		; RtApi::getDefaultOutputDevice

; 356  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 357  :   // Should be implemented in subclasses if possible.
; 358  :   return 0;

  00005	33 c0		 xor	 eax, eax

; 359  : }

  00007	c3		 ret	 0
?getDefaultOutputDevice@RtApi@@UEAAIXZ ENDP		; RtApi::getDefaultOutputDevice
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
this$ = 8
?getDefaultInputDevice@RtApi@@UEAAIXZ PROC		; RtApi::getDefaultInputDevice

; 350  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 351  :   // Should be implemented in subclasses if possible.
; 352  :   return 0;

  00005	33 c0		 xor	 eax, eax

; 353  : }

  00007	c3		 ret	 0
?getDefaultInputDevice@RtApi@@UEAAIXZ ENDP		; RtApi::getDefaultInputDevice
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
this$ = 48
??1RtApi@@UEAA@XZ PROC					; RtApi::~RtApi

; 252  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7RtApi@@6B@
  00015	48 89 08	 mov	 QWORD PTR [rax], rcx

; 253  :   MUTEX_DESTROY( &stream_.mutex );

  00018	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001d	48 05 88 01 00
	00		 add	 rax, 392		; 00000188H
  00023	48 8b c8	 mov	 rcx, rax
  00026	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DeleteCriticalSection

; 254  : }

  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00031	48 05 18 01 00
	00		 add	 rax, 280		; 00000118H
  00037	48 8b c8	 mov	 rcx, rax
  0003a	e8 00 00 00 00	 call	 ??1RtApiStream@RtApi@@QEAA@XZ
  0003f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00044	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  0004a	48 8b c8	 mov	 rcx, rax
  0004d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00052	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00057	48 83 c0 08	 add	 rax, 8
  0005b	48 8b c8	 mov	 rcx, rax
  0005e	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
??1RtApi@@UEAA@XZ ENDP					; RtApi::~RtApi
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??0RtApi@@QEAA@XZ PROC					; RtApi::RtApi

; 240  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7RtApi@@6B@
  0001e	48 89 08	 mov	 QWORD PTR [rax], rcx
  00021	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00026	48 83 c0 08	 add	 rax, 8
  0002a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00030	ba 02 00 00 00	 mov	 edx, 2
  00035	48 8b c8	 mov	 rcx, rax
  00038	e8 00 00 00 00	 call	 ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
  0003d	90		 npad	 1
  0003e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00043	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00049	48 8b c8	 mov	 rcx, rax
  0004c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00051	90		 npad	 1
  00052	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00057	48 05 18 01 00
	00		 add	 rax, 280		; 00000118H
  0005d	48 8b c8	 mov	 rcx, rax
  00060	e8 00 00 00 00	 call	 ??0RtApiStream@RtApi@@QEAA@XZ ; RtApi::RtApiStream::RtApiStream

; 241  :   stream_.state = STREAM_CLOSED;

  00065	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0006a	c7 80 2c 01 00
	00 ce ff ff ff	 mov	 DWORD PTR [rax+300], -50 ; ffffffffffffffceH

; 242  :   stream_.mode = UNINITIALIZED;

  00074	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00079	c7 80 28 01 00
	00 b5 ff ff ff	 mov	 DWORD PTR [rax+296], -75 ; ffffffffffffffb5H

; 243  :   stream_.apiHandle = 0;

  00083	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00088	48 c7 80 20 01
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+288], 0

; 244  :   stream_.userBuffer[0] = 0;

  00093	b8 08 00 00 00	 mov	 eax, 8
  00098	48 6b c0 00	 imul	 rax, rax, 0
  0009c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000a1	48 c7 84 01 30
	01 00 00 00 00
	00 00		 mov	 QWORD PTR [rcx+rax+304], 0

; 245  :   stream_.userBuffer[1] = 0;

  000ad	b8 08 00 00 00	 mov	 eax, 8
  000b2	48 6b c0 01	 imul	 rax, rax, 1
  000b6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000bb	48 c7 84 01 30
	01 00 00 00 00
	00 00		 mov	 QWORD PTR [rcx+rax+304], 0

; 246  :   MUTEX_INITIALIZE( &stream_.mutex );

  000c7	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000cc	48 05 88 01 00
	00		 add	 rax, 392		; 00000188H
  000d2	48 8b c8	 mov	 rcx, rax
  000d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSection

; 247  :   showWarnings_ = true;

  000db	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000e0	c6 80 10 01 00
	00 01		 mov	 BYTE PTR [rax+272], 1

; 248  :   firstErrorOccurred_ = false;

  000e7	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000ec	c6 80 80 02 00
	00 00		 mov	 BYTE PTR [rax+640], 0

; 249  : }

  000f3	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000f8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fc	c3		 ret	 0
??0RtApi@@QEAA@XZ ENDP					; RtApi::RtApi
_TEXT	ENDS
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$0@?0???0RtApi@@QEAA@XZ@4HA PROC			; `RtApi::RtApi'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	48 83 c1 08	 add	 rcx, 8
  00011	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5d		 pop	 rbp
  0001b	c3		 ret	 0
?dtor$0@?0???0RtApi@@QEAA@XZ@4HA ENDP			; `RtApi::RtApi'::`1'::dtor$0
$T1 = 32
this$ = 64
?dtor$1@?0???0RtApi@@QEAA@XZ@4HA PROC			; `RtApi::RtApi'::`1'::dtor$1
  0001c	40 55		 push	 rbp
  0001e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00022	48 8b ea	 mov	 rbp, rdx
  00025	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  00029	48 81 c1 f0 00
	00 00		 add	 rcx, 240		; 000000f0H
  00030	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	5d		 pop	 rbp
  0003a	c3		 ret	 0
?dtor$1@?0???0RtApi@@QEAA@XZ@4HA ENDP			; `RtApi::RtApi'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$0@?0???0RtApi@@QEAA@XZ@4HA PROC			; `RtApi::RtApi'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	48 83 c1 08	 add	 rcx, 8
  00011	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  00016	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001a	5d		 pop	 rbp
  0001b	c3		 ret	 0
?dtor$0@?0???0RtApi@@QEAA@XZ@4HA ENDP			; `RtApi::RtApi'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
text$x	SEGMENT
$T1 = 32
this$ = 64
?dtor$1@?0???0RtApi@@QEAA@XZ@4HA PROC			; `RtApi::RtApi'::`1'::dtor$1
  0001c	40 55		 push	 rbp
  0001e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00022	48 8b ea	 mov	 rbp, rdx
  00025	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  00029	48 81 c1 f0 00
	00 00		 add	 rcx, 240		; 000000f0H
  00030	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00035	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00039	5d		 pop	 rbp
  0003a	c3		 ret	 0
?dtor$1@?0???0RtApi@@QEAA@XZ@4HA ENDP			; `RtApi::RtApi'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.h
;	COMDAT ?asInt@S24@@QEAAHXZ
_TEXT	SEGMENT
i$ = 0
this$ = 32
?asInt@S24@@QEAAHXZ PROC				; S24::asInt, COMDAT

; 670  :   int asInt() {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 671  :     int i = c3[0] | (c3[1] << 8) | (c3[2] << 16);

  00009	b8 01 00 00 00	 mov	 eax, 1
  0000e	48 6b c0 00	 imul	 rax, rax, 0
  00012	48 8b 4c 24 20	 mov	 rcx, QWORD PTR this$[rsp]
  00017	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0001b	b9 01 00 00 00	 mov	 ecx, 1
  00020	48 6b c9 01	 imul	 rcx, rcx, 1
  00024	48 8b 54 24 20	 mov	 rdx, QWORD PTR this$[rsp]
  00029	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0002d	c1 e1 08	 shl	 ecx, 8
  00030	0b c1		 or	 eax, ecx
  00032	b9 01 00 00 00	 mov	 ecx, 1
  00037	48 6b c9 02	 imul	 rcx, rcx, 2
  0003b	48 8b 54 24 20	 mov	 rdx, QWORD PTR this$[rsp]
  00040	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00044	c1 e1 10	 shl	 ecx, 16
  00047	0b c1		 or	 eax, ecx
  00049	89 04 24	 mov	 DWORD PTR i$[rsp], eax

; 672  :     if (i & 0x800000) i |= ~0xffffff;

  0004c	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  0004f	25 00 00 80 00	 and	 eax, 8388608		; 00800000H
  00054	85 c0		 test	 eax, eax
  00056	74 0b		 je	 SHORT $LN2@asInt
  00058	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  0005b	0d 00 00 00 ff	 or	 eax, -16777216		; ffffffffff000000H
  00060	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN2@asInt:

; 673  :     return i;

  00063	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]

; 674  :   }

  00066	48 83 c4 18	 add	 rsp, 24
  0006a	c3		 ret	 0
?asInt@S24@@QEAAHXZ ENDP				; S24::asInt
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.h
;	COMDAT ??4S24@@QEAAAEAV0@AEBH@Z
_TEXT	SEGMENT
this$ = 8
i$ = 16
??4S24@@QEAAAEAV0@AEBH@Z PROC				; S24::operator=, COMDAT

; 657  :   S24& operator = ( const int& i ) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 658  :     c3[0] = (i & 0x000000ff);

  0000a	48 8b 44 24 10	 mov	 rax, QWORD PTR i$[rsp]
  0000f	8b 00		 mov	 eax, DWORD PTR [rax]
  00011	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00016	b9 01 00 00 00	 mov	 ecx, 1
  0001b	48 6b c9 00	 imul	 rcx, rcx, 0
  0001f	48 8b 54 24 08	 mov	 rdx, QWORD PTR this$[rsp]
  00024	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 659  :     c3[1] = (i & 0x0000ff00) >> 8;

  00027	48 8b 44 24 10	 mov	 rax, QWORD PTR i$[rsp]
  0002c	8b 00		 mov	 eax, DWORD PTR [rax]
  0002e	25 00 ff 00 00	 and	 eax, 65280		; 0000ff00H
  00033	c1 f8 08	 sar	 eax, 8
  00036	b9 01 00 00 00	 mov	 ecx, 1
  0003b	48 6b c9 01	 imul	 rcx, rcx, 1
  0003f	48 8b 54 24 08	 mov	 rdx, QWORD PTR this$[rsp]
  00044	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 660  :     c3[2] = (i & 0x00ff0000) >> 16;

  00047	48 8b 44 24 10	 mov	 rax, QWORD PTR i$[rsp]
  0004c	8b 00		 mov	 eax, DWORD PTR [rax]
  0004e	25 00 00 ff 00	 and	 eax, 16711680		; 00ff0000H
  00053	c1 f8 10	 sar	 eax, 16
  00056	b9 01 00 00 00	 mov	 ecx, 1
  0005b	48 6b c9 02	 imul	 rcx, rcx, 2
  0005f	48 8b 54 24 08	 mov	 rdx, QWORD PTR this$[rsp]
  00064	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 661  :     return *this;

  00067	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 662  :   }

  0006c	c3		 ret	 0
??4S24@@QEAAAEAV0@AEBH@Z ENDP				; S24::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.h
;	COMDAT ??0CallbackInfo@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0CallbackInfo@@QEAA@XZ PROC				; CallbackInfo::CallbackInfo, COMDAT

; 630  :   CallbackInfo()

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 631  :   :object(0), callback(0), userData(0), errorCallback(0), apiInfo(0), isRunning(false), doRealtime(false), priority(0) {}

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00011	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00016	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0
  0001e	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0
  0002b	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00030	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0
  00038	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0003d	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0
  00045	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0004a	c6 40 30 00	 mov	 BYTE PTR [rax+48], 0
  0004e	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00053	c6 40 31 00	 mov	 BYTE PTR [rax+49], 0
  00057	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0005c	c7 40 34 00 00
	00 00		 mov	 DWORD PTR [rax+52], 0
  00063	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00068	c3		 ret	 0
??0CallbackInfo@@QEAA@XZ ENDP				; CallbackInfo::CallbackInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
tv91 = 48
$T3 = 56
tv73 = 64
$T4 = 72
$T5 = 80
this$ = 112
api$ = 120
?openRtApi@RtAudio@@IEAAXW4Api@1@@Z PROC		; RtAudio::openRtApi

; 137  : {

$LN10:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  0000d	48 c7 44 24 50
	fe ff ff ff	 mov	 QWORD PTR $T5[rsp], -2

; 138  :   if ( rtapi_ )

  00016	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  0001b	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0001f	74 43		 je	 SHORT $LN2@openRtApi

; 139  :     delete rtapi_;

  00021	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00026	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00029	48 89 44 24 38	 mov	 QWORD PTR $T3[rsp], rax
  0002e	48 8b 44 24 38	 mov	 rax, QWORD PTR $T3[rsp]
  00033	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00038	48 83 7c 24 20
	00		 cmp	 QWORD PTR $T1[rsp], 0
  0003e	74 1b		 je	 SHORT $LN5@openRtApi
  00040	48 8b 44 24 20	 mov	 rax, QWORD PTR $T1[rsp]
  00045	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00048	ba 01 00 00 00	 mov	 edx, 1
  0004d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  00052	ff 10		 call	 QWORD PTR [rax]
  00054	48 89 44 24 40	 mov	 QWORD PTR tv73[rsp], rax
  00059	eb 09		 jmp	 SHORT $LN2@openRtApi
$LN5@openRtApi:
  0005b	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tv73[rsp], 0
$LN2@openRtApi:

; 140  :   rtapi_ = 0;

  00064	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00069	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 141  : 
; 142  : #if defined(__UNIX_JACK__)
; 143  :   if ( api == UNIX_JACK )
; 144  :     rtapi_ = new RtApiJack();
; 145  : #endif
; 146  : #if defined(__LINUX_ALSA__)
; 147  :   if ( api == LINUX_ALSA )
; 148  :     rtapi_ = new RtApiAlsa();
; 149  : #endif
; 150  : #if defined(__LINUX_PULSE__)
; 151  :   if ( api == LINUX_PULSE )
; 152  :     rtapi_ = new RtApiPulse();
; 153  : #endif
; 154  : #if defined(__LINUX_OSS__)
; 155  :   if ( api == LINUX_OSS )
; 156  :     rtapi_ = new RtApiOss();
; 157  : #endif
; 158  : #if defined(__WINDOWS_ASIO__)
; 159  :   if ( api == WINDOWS_ASIO )
; 160  :     rtapi_ = new RtApiAsio();
; 161  : #endif
; 162  : #if defined(__WINDOWS_WASAPI__)
; 163  :   if ( api == WINDOWS_WASAPI )
; 164  :     rtapi_ = new RtApiWasapi();
; 165  : #endif
; 166  : #if defined(__WINDOWS_DS__)
; 167  :   if ( api == WINDOWS_DS )

  00070	83 7c 24 78 08	 cmp	 DWORD PTR api$[rsp], 8
  00075	75 48		 jne	 SHORT $LN3@openRtApi

; 168  :     rtapi_ = new RtApiDs();

  00077	b9 a8 02 00 00	 mov	 ecx, 680		; 000002a8H
  0007c	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00081	48 89 44 24 28	 mov	 QWORD PTR $T2[rsp], rax
  00086	48 83 7c 24 28
	00		 cmp	 QWORD PTR $T2[rsp], 0
  0008c	74 11		 je	 SHORT $LN7@openRtApi
  0008e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR $T2[rsp]
  00093	e8 00 00 00 00	 call	 ??0RtApiDs@@QEAA@XZ	; RtApiDs::RtApiDs
  00098	48 89 44 24 30	 mov	 QWORD PTR tv91[rsp], rax
  0009d	eb 09		 jmp	 SHORT $LN8@openRtApi
$LN7@openRtApi:
  0009f	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv91[rsp], 0
$LN8@openRtApi:
  000a8	48 8b 44 24 30	 mov	 rax, QWORD PTR tv91[rsp]
  000ad	48 89 44 24 48	 mov	 QWORD PTR $T4[rsp], rax
  000b2	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  000b7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR $T4[rsp]
  000bc	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN3@openRtApi:

; 169  : #endif
; 170  : #if defined(__MACOSX_CORE__)
; 171  :   if ( api == MACOSX_CORE )
; 172  :     rtapi_ = new RtApiCore();
; 173  : #endif
; 174  : #if defined(__RTAUDIO_DUMMY__)
; 175  :   if ( api == RTAUDIO_DUMMY )
; 176  :     rtapi_ = new RtApiDummy();
; 177  : #endif
; 178  : }

  000bf	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000c3	c3		 ret	 0
?openRtApi@RtAudio@@IEAAXW4Api@1@@Z ENDP		; RtAudio::openRtApi
_TEXT	ENDS
text$x	SEGMENT
$T1 = 32
$T2 = 40
tv91 = 48
$T3 = 56
tv73 = 64
$T4 = 72
$T5 = 80
this$ = 112
api$ = 120
?dtor$0@?0??openRtApi@RtAudio@@IEAAXW4Api@1@@Z@4HA PROC	; `RtAudio::openRtApi'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	ba a8 02 00 00	 mov	 edx, 680		; 000002a8H
  0000e	48 8b 4d 28	 mov	 rcx, QWORD PTR $T2[rbp]
  00012	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5d		 pop	 rbp
  0001c	c3		 ret	 0
?dtor$0@?0??openRtApi@RtAudio@@IEAAXW4Api@1@@Z@4HA ENDP	; `RtAudio::openRtApi'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
text$x	SEGMENT
$T1 = 32
$T2 = 40
tv91 = 48
$T3 = 56
tv73 = 64
$T4 = 72
$T5 = 80
this$ = 112
api$ = 120
?dtor$0@?0??openRtApi@RtAudio@@IEAAXW4Api@1@@Z@4HA PROC	; `RtAudio::openRtApi'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	ba a8 02 00 00	 mov	 edx, 680		; 000002a8H
  0000e	48 8b 4d 28	 mov	 rcx, QWORD PTR $T2[rbp]
  00012	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5d		 pop	 rbp
  0001c	c3		 ret	 0
?dtor$0@?0??openRtApi@RtAudio@@IEAAXW4Api@1@@Z@4HA ENDP	; `RtAudio::openRtApi'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
this$ = 96
outputParameters$ = 104
inputParameters$ = 112
format$ = 120
sampleRate$ = 128
bufferFrames$ = 136
callback$ = 144
userData$ = 152
options$ = 160
errorCallback$ = 168
?openStream@RtAudio@@QEAAXPEAUStreamParameters@1@0KIPEAIP6AHPEAX2INI2@Z2PEAUStreamOptions@1@P6AXW4Type@RtAudioError@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@Z PROC ; RtAudio::openStream

; 226  : {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 227  :   return rtapi_->openStream( outputParameters, inputParameters, format,

  00018	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR errorCallback$[rsp]
  00020	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00025	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR options$[rsp]
  0002d	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00032	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR userData$[rsp]
  0003a	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0003f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR callback$[rsp]
  00047	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0004c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR bufferFrames$[rsp]
  00054	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00059	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR sampleRate$[rsp]
  00060	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00064	44 8b 4c 24 78	 mov	 r9d, DWORD PTR format$[rsp]
  00069	4c 8b 44 24 70	 mov	 r8, QWORD PTR inputParameters$[rsp]
  0006e	48 8b 54 24 68	 mov	 rdx, QWORD PTR outputParameters$[rsp]
  00073	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]
  00078	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0007b	e8 00 00 00 00	 call	 ?openStream@RtApi@@QEAAXPEAUStreamParameters@RtAudio@@0KIPEAIP6AHPEAX2INI2@Z2PEAUStreamOptions@3@P6AXW4Type@RtAudioError@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@Z ; RtApi::openStream

; 228  :                              sampleRate, bufferFrames, callback,
; 229  :                              userData, options, errorCallback );
; 230  : }

  00080	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00084	c3		 ret	 0
?openStream@RtAudio@@QEAAXPEAUStreamParameters@1@0KIPEAIP6AHPEAX2INI2@Z2PEAUStreamOptions@1@P6AXW4Type@RtAudioError@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z@Z ENDP ; RtAudio::openStream
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
tv73 = 48
this$ = 80
??1RtAudio@@QEAA@XZ PROC				; RtAudio::~RtAudio

; 214  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 215  :   if ( rtapi_ )

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00012	74 43		 je	 SHORT $LN2@RtAudio

; 216  :     delete rtapi_;

  00014	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00019	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001c	48 89 44 24 28	 mov	 QWORD PTR $T2[rsp], rax
  00021	48 8b 44 24 28	 mov	 rax, QWORD PTR $T2[rsp]
  00026	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  0002b	48 83 7c 24 20
	00		 cmp	 QWORD PTR $T1[rsp], 0
  00031	74 1b		 je	 SHORT $LN4@RtAudio
  00033	48 8b 44 24 20	 mov	 rax, QWORD PTR $T1[rsp]
  00038	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003b	ba 01 00 00 00	 mov	 edx, 1
  00040	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  00045	ff 10		 call	 QWORD PTR [rax]
  00047	48 89 44 24 30	 mov	 QWORD PTR tv73[rsp], rax
  0004c	eb 09		 jmp	 SHORT $LN2@RtAudio
$LN4@RtAudio:
  0004e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv73[rsp], 0
$LN2@RtAudio:

; 217  : }

  00057	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005b	c3		 ret	 0
??1RtAudio@@QEAA@XZ ENDP				; RtAudio::~RtAudio
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
i$1 = 32
tv80 = 40
apis$ = 48
$T2 = 72
$T3 = 80
errorText$ = 112
__$ArrayPad$ = 144
this$ = 176
api$ = 184
??0RtAudio@@QEAA@W4Api@0@@Z PROC			; RtAudio::RtAudio

; 181  : {

$LN13:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  00010	48 c7 44 24 48
	fe ff ff ff	 mov	 QWORD PTR $T2[rsp], -2
  00019	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00020	48 33 c4	 xor	 rax, rsp
  00023	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 182  :   rtapi_ = 0;

  0002b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00033	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 183  : 
; 184  :   if ( api != UNSPECIFIED ) {

  0003a	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR api$[rsp], 0
  00042	74 49		 je	 SHORT $LN5@RtAudio

; 185  :     // Attempt to open the specified API.
; 186  :     openRtApi( api );

  00044	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR api$[rsp]
  0004b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00053	e8 00 00 00 00	 call	 ?openRtApi@RtAudio@@IEAAXW4Api@1@@Z ; RtAudio::openRtApi

; 187  :     if ( rtapi_ ) return;

  00058	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00060	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00064	74 05		 je	 SHORT $LN6@RtAudio
  00066	e9 21 01 00 00	 jmp	 $LN1@RtAudio
$LN6@RtAudio:

; 188  : 
; 189  :     // No compiled support for specified API value.  Issue a debug
; 190  :     // warning and continue as if no API was specified.
; 191  :     std::cerr << "\nRtAudio: no compiled support for specified API argument!\n" << std::endl;

  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG125205
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cerr
  00079	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0007e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
  00085	48 8b c8	 mov	 rcx, rax
  00088	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
$LN5@RtAudio:

; 192  :   }
; 193  : 
; 194  :   // Iterate through the compiled APIs and return as soon as we find
; 195  :   // one with at least one device or we reach the end of the list.
; 196  :   std::vector< RtAudio::Api > apis;

  0008d	48 8d 4c 24 30	 lea	 rcx, QWORD PTR apis$[rsp]
  00092	e8 00 00 00 00	 call	 ??0?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >
  00097	90		 npad	 1

; 197  :   getCompiledApi( apis );

  00098	48 8d 4c 24 30	 lea	 rcx, QWORD PTR apis$[rsp]
  0009d	e8 00 00 00 00	 call	 ?getCompiledApi@RtAudio@@SAXAEAV?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@Z ; RtAudio::getCompiledApi

; 198  :   for ( unsigned int i=0; i<apis.size(); i++ ) {

  000a2	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0
  000aa	eb 0a		 jmp	 SHORT $LN4@RtAudio
$LN2@RtAudio:
  000ac	8b 44 24 20	 mov	 eax, DWORD PTR i$1[rsp]
  000b0	ff c0		 inc	 eax
  000b2	89 44 24 20	 mov	 DWORD PTR i$1[rsp], eax
$LN4@RtAudio:
  000b6	8b 44 24 20	 mov	 eax, DWORD PTR i$1[rsp]
  000ba	48 89 44 24 28	 mov	 QWORD PTR tv80[rsp], rax
  000bf	48 8d 4c 24 30	 lea	 rcx, QWORD PTR apis$[rsp]
  000c4	e8 00 00 00 00	 call	 ?size@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEBA_KXZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::size
  000c9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv80[rsp]
  000ce	48 3b c8	 cmp	 rcx, rax
  000d1	73 51		 jae	 SHORT $LN3@RtAudio

; 199  :     openRtApi( apis[i] );

  000d3	8b 44 24 20	 mov	 eax, DWORD PTR i$1[rsp]
  000d7	8b d0		 mov	 edx, eax
  000d9	48 8d 4c 24 30	 lea	 rcx, QWORD PTR apis$[rsp]
  000de	e8 00 00 00 00	 call	 ??A?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAAEAW4Api@RtAudio@@_K@Z ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::operator[]
  000e3	8b 10		 mov	 edx, DWORD PTR [rax]
  000e5	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000ed	e8 00 00 00 00	 call	 ?openRtApi@RtAudio@@IEAAXW4Api@1@@Z ; RtAudio::openRtApi

; 200  :     if ( rtapi_ && rtapi_->getDeviceCount() ) break;

  000f2	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000fa	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000fe	74 22		 je	 SHORT $LN7@RtAudio
  00100	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00108	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0010b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00113	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00116	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00119	ff 50 10	 call	 QWORD PTR [rax+16]
  0011c	85 c0		 test	 eax, eax
  0011e	74 02		 je	 SHORT $LN7@RtAudio
  00120	eb 02		 jmp	 SHORT $LN3@RtAudio
$LN7@RtAudio:

; 201  :   }

  00122	eb 88		 jmp	 SHORT $LN2@RtAudio
$LN3@RtAudio:

; 202  : 
; 203  :   if ( rtapi_ ) return;

  00124	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0012c	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00130	74 0c		 je	 SHORT $LN8@RtAudio
  00132	48 8d 4c 24 30	 lea	 rcx, QWORD PTR apis$[rsp]
  00137	e8 00 00 00 00	 call	 ??1?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::~vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >
  0013c	eb 4e		 jmp	 SHORT $LN1@RtAudio
$LN8@RtAudio:

; 204  : 
; 205  :   // It should not be possible to get here because the preprocessor
; 206  :   // definition __RTAUDIO_DUMMY__ is automatically defined if no
; 207  :   // API-specific definitions are passed to the compiler. But just in
; 208  :   // case something weird happens, we'll thow an error.
; 209  :   std::string errorText = "\nRtAudio: no compiled API support found ... critical error!!\n\n";

  0013e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG125208
  00145	48 8d 4c 24 70	 lea	 rcx, QWORD PTR errorText$[rsp]
  0014a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0014f	90		 npad	 1

; 210  :   throw( RtAudioError( errorText, RtAudioError::UNSPECIFIED ) );

  00150	41 b8 02 00 00
	00		 mov	 r8d, 2
  00156	48 8d 54 24 70	 lea	 rdx, QWORD PTR errorText$[rsp]
  0015b	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T3[rsp]
  00160	e8 00 00 00 00	 call	 ??0RtAudioError@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Type@0@@Z ; RtAudioError::RtAudioError
  00165	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI3?AVRtAudioError@@
  0016c	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T3[rsp]
  00171	e8 00 00 00 00	 call	 _CxxThrowException
  00176	90		 npad	 1

; 211  : }

  00177	48 8d 4c 24 70	 lea	 rcx, QWORD PTR errorText$[rsp]
  0017c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00181	48 8d 4c 24 30	 lea	 rcx, QWORD PTR apis$[rsp]
  00186	e8 00 00 00 00	 call	 ??1?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::~vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >
  0018b	90		 npad	 1
$LN1@RtAudio:
  0018c	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00194	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0019c	48 33 cc	 xor	 rcx, rsp
  0019f	e8 00 00 00 00	 call	 __security_check_cookie
  001a4	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  001ab	c3		 ret	 0
$LN12@RtAudio:
??0RtAudio@@QEAA@W4Api@0@@Z ENDP			; RtAudio::RtAudio
_TEXT	ENDS
text$x	SEGMENT
i$1 = 32
tv80 = 40
apis$ = 48
$T2 = 72
$T3 = 80
errorText$ = 112
__$ArrayPad$ = 144
this$ = 176
api$ = 184
?dtor$0@?0???0RtAudio@@QEAA@W4Api@0@@Z@4HA PROC		; `RtAudio::RtAudio'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 4d 30	 lea	 rcx, QWORD PTR apis$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::~vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0RtAudio@@QEAA@W4Api@0@@Z@4HA ENDP		; `RtAudio::RtAudio'::`1'::dtor$0
i$1 = 32
tv80 = 40
apis$ = 48
$T2 = 72
$T3 = 80
errorText$ = 112
__$ArrayPad$ = 144
this$ = 176
api$ = 184
?dtor$1@?0???0RtAudio@@QEAA@W4Api@0@@Z@4HA PROC		; `RtAudio::RtAudio'::`1'::dtor$1
  00018	40 55		 push	 rbp
  0001a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001e	48 8b ea	 mov	 rbp, rdx
  00021	48 8d 4d 70	 lea	 rcx, QWORD PTR errorText$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
?dtor$1@?0???0RtAudio@@QEAA@W4Api@0@@Z@4HA ENDP		; `RtAudio::RtAudio'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
text$x	SEGMENT
i$1 = 32
tv80 = 40
apis$ = 48
$T2 = 72
$T3 = 80
errorText$ = 112
__$ArrayPad$ = 144
this$ = 176
api$ = 184
?dtor$0@?0???0RtAudio@@QEAA@W4Api@0@@Z@4HA PROC		; `RtAudio::RtAudio'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 4d 30	 lea	 rcx, QWORD PTR apis$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAA@XZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::~vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0RtAudio@@QEAA@W4Api@0@@Z@4HA ENDP		; `RtAudio::RtAudio'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
text$x	SEGMENT
i$1 = 32
tv80 = 40
apis$ = 48
$T2 = 72
$T3 = 80
errorText$ = 112
__$ArrayPad$ = 144
this$ = 176
api$ = 184
?dtor$1@?0???0RtAudio@@QEAA@W4Api@0@@Z@4HA PROC		; `RtAudio::RtAudio'::`1'::dtor$1
  00018	40 55		 push	 rbp
  0001a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001e	48 8b ea	 mov	 rbp, rdx
  00021	48 8d 4d 70	 lea	 rcx, QWORD PTR errorText$[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
?dtor$1@?0???0RtAudio@@QEAA@W4Api@0@@Z@4HA ENDP		; `RtAudio::RtAudio'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
$T1 = 32
apis$ = 64
?getCompiledApi@RtAudio@@SAXAEAV?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@Z PROC ; RtAudio::getCompiledApi

; 102  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 103  :   apis.clear();

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR apis$[rsp]
  0000e	e8 00 00 00 00	 call	 ?clear@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAXXZ ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::clear

; 104  : 
; 105  :   // The order here will control the order of RtAudio's API search in
; 106  :   // the constructor.
; 107  : #if defined(__UNIX_JACK__)
; 108  :   apis.push_back( UNIX_JACK );
; 109  : #endif
; 110  : #if defined(__LINUX_ALSA__)
; 111  :   apis.push_back( LINUX_ALSA );
; 112  : #endif
; 113  : #if defined(__LINUX_PULSE__)
; 114  :   apis.push_back( LINUX_PULSE );
; 115  : #endif
; 116  : #if defined(__LINUX_OSS__)
; 117  :   apis.push_back( LINUX_OSS );
; 118  : #endif
; 119  : #if defined(__WINDOWS_ASIO__)
; 120  :   apis.push_back( WINDOWS_ASIO );
; 121  : #endif
; 122  : #if defined(__WINDOWS_WASAPI__)
; 123  :   apis.push_back( WINDOWS_WASAPI );
; 124  : #endif
; 125  : #if defined(__WINDOWS_DS__)
; 126  :   apis.push_back( WINDOWS_DS );

  00013	c7 44 24 20 08
	00 00 00	 mov	 DWORD PTR $T1[rsp], 8
  0001b	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00020	48 8b 4c 24 40	 mov	 rcx, QWORD PTR apis$[rsp]
  00025	e8 00 00 00 00	 call	 ?push_back@?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@QEAAX$$QEAW4Api@RtAudio@@@Z ; std::vector<enum RtAudio::Api,std::allocator<enum RtAudio::Api> >::push_back

; 127  : #endif
; 128  : #if defined(__MACOSX_CORE__)
; 129  :   apis.push_back( MACOSX_CORE );
; 130  : #endif
; 131  : #if defined(__RTAUDIO_DUMMY__)
; 132  :   apis.push_back( RTAUDIO_DUMMY );
; 133  : #endif
; 134  : }

  0002a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0002e	c3		 ret	 0
?getCompiledApi@RtAudio@@SAXAEAV?$vector@W4Api@RtAudio@@V?$allocator@W4Api@RtAudio@@@std@@@std@@@Z ENDP ; RtAudio::getCompiledApi
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.cpp
_TEXT	SEGMENT
$T1 = 32
__$ReturnUdt$ = 64
?getVersion@RtAudio@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; RtAudio::getVersion

; 97   : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 98   :   return RTAUDIO_VERSION;

  00011	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG124424
  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0001d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00022	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  00026	83 c8 01	 or	 eax, 1
  00029	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  0002d	48 8b 44 24 40	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 99   : }

  00032	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00036	c3		 ret	 0
?getVersion@RtAudio@@SA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; RtAudio::getVersion
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0DeviceInfo@RtAudio@@QEAA@$$QEAU01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0DeviceInfo@RtAudio@@QEAA@$$QEAU01@@Z PROC		; RtAudio::DeviceInfo::DeviceInfo, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __that$[rsp]
  00018	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0001b	88 08		 mov	 BYTE PTR [rax], cl
  0001d	48 8b 44 24 38	 mov	 rax, QWORD PTR __that$[rsp]
  00022	48 83 c0 08	 add	 rax, 8
  00026	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002b	48 83 c1 08	 add	 rcx, 8
  0002f	48 8b d0	 mov	 rdx, rax
  00032	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00037	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __that$[rsp]
  00041	8b 49 28	 mov	 ecx, DWORD PTR [rcx+40]
  00044	89 48 28	 mov	 DWORD PTR [rax+40], ecx
  00047	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __that$[rsp]
  00051	8b 49 2c	 mov	 ecx, DWORD PTR [rcx+44]
  00054	89 48 2c	 mov	 DWORD PTR [rax+44], ecx
  00057	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0005c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __that$[rsp]
  00061	8b 49 30	 mov	 ecx, DWORD PTR [rcx+48]
  00064	89 48 30	 mov	 DWORD PTR [rax+48], ecx
  00067	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0006c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __that$[rsp]
  00071	0f b6 49 34	 movzx	 ecx, BYTE PTR [rcx+52]
  00075	88 48 34	 mov	 BYTE PTR [rax+52], cl
  00078	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0007d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __that$[rsp]
  00082	0f b6 49 35	 movzx	 ecx, BYTE PTR [rcx+53]
  00086	88 48 35	 mov	 BYTE PTR [rax+53], cl
  00089	48 8b 44 24 38	 mov	 rax, QWORD PTR __that$[rsp]
  0008e	48 83 c0 38	 add	 rax, 56			; 00000038H
  00092	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00097	48 83 c1 38	 add	 rcx, 56			; 00000038H
  0009b	48 8b d0	 mov	 rdx, rax
  0009e	e8 00 00 00 00	 call	 ??0?$vector@IV?$allocator@I@std@@@std@@QEAA@$$QEAV01@@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >
  000a3	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  000a8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __that$[rsp]
  000ad	8b 49 50	 mov	 ecx, DWORD PTR [rcx+80]
  000b0	89 48 50	 mov	 DWORD PTR [rax+80], ecx
  000b3	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  000b8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __that$[rsp]
  000bd	8b 49 54	 mov	 ecx, DWORD PTR [rcx+84]
  000c0	89 48 54	 mov	 DWORD PTR [rax+84], ecx
  000c3	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  000c8	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000cc	c3		 ret	 0
??0DeviceInfo@RtAudio@@QEAA@$$QEAU01@@Z ENDP		; RtAudio::DeviceInfo::DeviceInfo
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1DeviceInfo@RtAudio@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1DeviceInfo@RtAudio@@QEAA@XZ PROC			; RtAudio::DeviceInfo::~DeviceInfo, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 c0 38	 add	 rax, 56			; 00000038H
  00012	48 8b c8	 mov	 rcx, rax
  00015	e8 00 00 00 00	 call	 ??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
  0001a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001f	48 83 c0 08	 add	 rax, 8
  00023	48 8b c8	 mov	 rcx, rax
  00026	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002f	c3		 ret	 0
??1DeviceInfo@RtAudio@@QEAA@XZ ENDP			; RtAudio::DeviceInfo::~DeviceInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.h
;	COMDAT ??0DeviceInfo@RtAudio@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0DeviceInfo@RtAudio@@QEAA@XZ PROC			; RtAudio::DeviceInfo::DeviceInfo, COMDAT

; 307  :        isDefaultOutput(false), isDefaultInput(false), preferredSampleRate(0), nativeFormats(0) {}

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 306  :       :probed(false), outputChannels(0), inputChannels(0), duplexChannels(0),

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	c6 00 00	 mov	 BYTE PTR [rax], 0

; 307  :        isDefaultOutput(false), isDefaultInput(false), preferredSampleRate(0), nativeFormats(0) {}

  00011	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00016	48 83 c0 08	 add	 rax, 8
  0001a	48 8b c8	 mov	 rcx, rax
  0001d	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >

; 306  :       :probed(false), outputChannels(0), inputChannels(0), duplexChannels(0),

  00022	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00027	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [rax+40], 0
  0002e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00033	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [rax+44], 0
  0003a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0003f	c7 40 30 00 00
	00 00		 mov	 DWORD PTR [rax+48], 0

; 307  :        isDefaultOutput(false), isDefaultInput(false), preferredSampleRate(0), nativeFormats(0) {}

  00046	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0004b	c6 40 34 00	 mov	 BYTE PTR [rax+52], 0
  0004f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00054	c6 40 35 00	 mov	 BYTE PTR [rax+53], 0
  00058	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0005d	48 83 c0 38	 add	 rax, 56			; 00000038H
  00061	48 8b c8	 mov	 rcx, rax
  00064	e8 00 00 00 00	 call	 ??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ ; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >
  00069	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0006e	c7 40 50 00 00
	00 00		 mov	 DWORD PTR [rax+80], 0
  00075	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0007a	c7 40 54 00 00
	00 00		 mov	 DWORD PTR [rax+84], 0
  00081	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00086	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0008a	c3		 ret	 0
??0DeviceInfo@RtAudio@@QEAA@XZ ENDP			; RtAudio::DeviceInfo::DeviceInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@IEBAXPEAI0@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
__formal$ = 24
?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@IEBAXPEAI0@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range, COMDAT

; 1793 : 		{	// orphan iterators within specified (inclusive) range

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1794 : 		}

  0000f	c3		 ret	 0
?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@IEBAXPEAI0@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Xlen@?$vector@IV?$allocator@I@std@@@std@@IEBAXXZ
_TEXT	SEGMENT
this$ = 48
?_Xlen@?$vector@IV?$allocator@I@std@@@std@@IEBAXXZ PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlen, COMDAT

; 1764 : 		{	// report a length_error

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1765 : 		_Xlength_error("vector<T> too long");

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  00010	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 1766 : 		}

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
?_Xlen@?$vector@IV?$allocator@I@std@@@std@@IEBAXXZ ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Tidy@?$vector@IV?$allocator@I@std@@@std@@IEAAXXZ
_TEXT	SEGMENT
tv82 = 32
tv135 = 40
tv143 = 48
tv150 = 56
this$ = 80
?_Tidy@?$vector@IV?$allocator@I@std@@@std@@IEAAXXZ PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy, COMDAT

; 1636 : 		{	// free all storage

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1637 : 		if (this->_Myfirst() != pointer())

  00009	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  00013	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00017	0f 84 cf 00 00
	00		 je	 $LN2@Tidy

; 1638 : 			{	// something to free, destroy and deallocate it
; 1639 : 			this->_Orphan_all();

  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAXXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Orphan_all

; 1640 : 			_Destroy(this->_Myfirst(), this->_Mylast());

  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  00031	48 89 44 24 20	 mov	 QWORD PTR tv82[rsp], rax
  00036	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0003b	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  00040	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv82[rsp]
  00045	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  00048	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0004b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00050	e8 00 00 00 00	 call	 ?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IEAAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy

; 1641 : 			this->_Getal().deallocate(this->_Myfirst(),

  00055	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0005a	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myend
  0005f	48 89 44 24 28	 mov	 QWORD PTR tv135[rsp], rax
  00064	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00069	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  0006e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00071	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv135[rsp]
  00076	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00079	48 2b c8	 sub	 rcx, rax
  0007c	48 8b c1	 mov	 rax, rcx
  0007f	48 c1 f8 02	 sar	 rax, 2
  00083	48 89 44 24 30	 mov	 QWORD PTR tv143[rsp], rax
  00088	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0008d	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  00092	48 89 44 24 38	 mov	 QWORD PTR tv150[rsp], rax
  00097	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0009c	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Getal
  000a1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv143[rsp]
  000a6	4c 8b c1	 mov	 r8, rcx
  000a9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv150[rsp]
  000ae	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  000b1	48 8b c8	 mov	 rcx, rax
  000b4	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAI_K@Z ; std::_Wrap_alloc<std::allocator<unsigned int> >::deallocate

; 1642 : 				this->_Myend() - this->_Myfirst());
; 1643 : 			this->_Myfirst() = pointer();

  000b9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000be	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  000c3	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1644 : 			this->_Mylast() = pointer();

  000ca	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000cf	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  000d4	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1645 : 			this->_Myend() = pointer();

  000db	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000e0	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myend
  000e5	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN2@Tidy:

; 1646 : 			}
; 1647 : 		}

  000ec	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f0	c3		 ret	 0
?_Tidy@?$vector@IV?$allocator@I@std@@@std@@IEAAXXZ ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reserve@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z
_TEXT	SEGMENT
tv68 = 32
this$ = 64
_Count$ = 72
?_Reserve@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Reserve, COMDAT

; 1626 : 		{	// ensure room for _Count new elements, grow exponentially

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1627 : 		if (_Unused_capacity() < _Count)

  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?_Unused_capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Unused_capacity
  00018	48 3b 44 24 48	 cmp	 rax, QWORD PTR _Count$[rsp]
  0001d	73 5e		 jae	 SHORT $LN2@Reserve

; 1628 : 			{	// need more room, try to get it
; 1629 : 			if (max_size() - size() < _Count)

  0001f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00024	e8 00 00 00 00	 call	 ?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::max_size
  00029	48 89 44 24 20	 mov	 QWORD PTR tv68[rsp], rax
  0002e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00033	e8 00 00 00 00	 call	 ?size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
  00038	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv68[rsp]
  0003d	48 2b c8	 sub	 rcx, rax
  00040	48 8b c1	 mov	 rax, rcx
  00043	48 3b 44 24 48	 cmp	 rax, QWORD PTR _Count$[rsp]
  00048	73 0a		 jae	 SHORT $LN3@Reserve

; 1630 : 				_Xlen();

  0004a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0004f	e8 00 00 00 00	 call	 ?_Xlen@?$vector@IV?$allocator@I@std@@@std@@IEBAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Xlen
$LN3@Reserve:

; 1631 : 			_Reallocate(_Grow_to(size() + _Count));

  00054	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00059	e8 00 00 00 00	 call	 ?size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
  0005e	48 03 44 24 48	 add	 rax, QWORD PTR _Count$[rsp]
  00063	48 8b d0	 mov	 rdx, rax
  00066	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0006b	e8 00 00 00 00	 call	 ?_Grow_to@?$vector@IV?$allocator@I@std@@@std@@IEBA_K_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Grow_to
  00070	48 8b d0	 mov	 rdx, rax
  00073	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00078	e8 00 00 00 00	 call	 ?_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Reallocate
$LN2@Reserve:
$LN4@Reserve:

; 1632 : 			}
; 1633 : 		}

  0007d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00081	c3		 ret	 0
?_Reserve@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Reserve
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 32
tv84 = 40
tv150 = 48
tv177 = 56
tv179 = 64
tv186 = 72
tv200 = 80
_Size$ = 88
tv208 = 96
$T1 = 104
this$ = 128
_Count$ = 136
?_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Reallocate, COMDAT

; 1601 : 		{	// move to array of exactly _Count elements

$LN11:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  0000e	48 c7 44 24 68
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 1602 : 		pointer _Ptr = this->_Getal().allocate(_Count);

  00017	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0001f	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Getal
  00024	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR _Count$[rsp]
  0002c	48 8b c8	 mov	 rcx, rax
  0002f	e8 00 00 00 00	 call	 ?allocate@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAPEAI_K@Z ; std::_Wrap_alloc<std::allocator<unsigned int> >::allocate
  00034	48 89 44 24 20	 mov	 QWORD PTR _Ptr$[rsp], rax

; 1603 : 
; 1604 : 		_TRY_BEGIN
; 1605 : 		_Umove(this->_Myfirst(), this->_Mylast(), _Ptr);

  00039	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00041	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  00046	48 89 44 24 28	 mov	 QWORD PTR tv84[rsp], rax
  0004b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00053	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  00058	4c 8b 4c 24 20	 mov	 r9, QWORD PTR _Ptr$[rsp]
  0005d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv84[rsp]
  00062	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  00065	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00068	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00070	e8 00 00 00 00	 call	 ??$_Umove@PEAI@?$vector@IV?$allocator@I@std@@@std@@IEAAPEAIPEAI00@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Umove<unsigned int * __ptr64>
  00075	90		 npad	 1
  00076	eb 00		 jmp	 SHORT $LN7@Reallocate
$LN8@Reallocate:
$LN7@Reallocate:

; 1606 : 		_CATCH_ALL
; 1607 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1608 : 		_RERAISE;
; 1609 : 		_CATCH_END
; 1610 : 
; 1611 : 		size_type _Size = size();

  00078	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00080	e8 00 00 00 00	 call	 ?size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::size
  00085	48 89 44 24 58	 mov	 QWORD PTR _Size$[rsp], rax

; 1612 : 		if (this->_Myfirst() != pointer())

  0008a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00092	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  00097	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0009b	0f 84 a4 00 00
	00		 je	 $LN3@Reallocate

; 1613 : 			{	// destroy and deallocate old array
; 1614 : 			_Destroy(this->_Myfirst(), this->_Mylast());

  000a1	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000a9	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  000ae	48 89 44 24 30	 mov	 QWORD PTR tv150[rsp], rax
  000b3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000bb	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  000c0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv150[rsp]
  000c5	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  000c8	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000cb	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000d3	e8 00 00 00 00	 call	 ?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IEAAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy

; 1615 : 			this->_Getal().deallocate(this->_Myfirst(),

  000d8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000e0	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  000e5	48 89 44 24 38	 mov	 QWORD PTR tv177[rsp], rax
  000ea	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000f2	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myend
  000f7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv177[rsp]
  000fc	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ff	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00102	48 2b c1	 sub	 rax, rcx
  00105	48 c1 f8 02	 sar	 rax, 2
  00109	48 89 44 24 40	 mov	 QWORD PTR tv179[rsp], rax
  0010e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00116	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  0011b	48 89 44 24 48	 mov	 QWORD PTR tv186[rsp], rax
  00120	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00128	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Getal
  0012d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv179[rsp]
  00132	4c 8b c1	 mov	 r8, rcx
  00135	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv186[rsp]
  0013a	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  0013d	48 8b c8	 mov	 rcx, rax
  00140	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAI_K@Z ; std::_Wrap_alloc<std::allocator<unsigned int> >::deallocate
$LN3@Reallocate:

; 1616 : 				this->_Myend() - this->_Myfirst());
; 1617 : 			}
; 1618 : 
; 1619 : 		this->_Orphan_all();

  00145	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0014d	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAXXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Orphan_all

; 1620 : 		this->_Myend() = _Ptr + _Count;

  00152	48 8b 44 24 20	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00157	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _Count$[rsp]
  0015f	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  00163	48 89 44 24 50	 mov	 QWORD PTR tv200[rsp], rax
  00168	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00170	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myend
  00175	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv200[rsp]
  0017a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1621 : 		this->_Mylast() = _Ptr + _Size;

  0017d	48 8b 44 24 20	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00182	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Size$[rsp]
  00187	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  0018b	48 89 44 24 60	 mov	 QWORD PTR tv208[rsp], rax
  00190	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00198	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  0019d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv208[rsp]
  001a2	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1622 : 		this->_Myfirst() = _Ptr;

  001a5	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001ad	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  001b2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  001b7	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1623 : 		}

  001ba	48 83 c4 78	 add	 rsp, 120		; 00000078H
  001be	c3		 ret	 0
$LN9@Reallocate:
?_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Reallocate
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Ptr$ = 32
tv84 = 40
tv150 = 48
tv177 = 56
tv179 = 64
tv186 = 72
tv200 = 80
_Size$ = 88
tv208 = 96
$T1 = 104
this$ = 128
_Count$ = 136
?catch$0@?0??_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z@4HA PROC ; `std::vector<unsigned int,std::allocator<unsigned int> >::_Reallocate'::`1'::catch$0

; 1606 : 		_CATCH_ALL

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$?_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z$0:

; 1606 : 		_CATCH_ALL
; 1607 : 		this->_Getal().deallocate(_Ptr, _Count);

  0000d	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00014	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Getal
  00019	4c 8b 85 88 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00020	48 8b 55 20	 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00024	48 8b c8	 mov	 rcx, rax
  00027	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAI_K@Z ; std::_Wrap_alloc<std::allocator<unsigned int> >::deallocate

; 1606 : 		_CATCH_ALL
; 1607 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1608 : 		_RERAISE;

  0002c	33 d2		 xor	 edx, edx
  0002e	33 c9		 xor	 ecx, ecx
  00030	e8 00 00 00 00	 call	 _CxxThrowException
  00035	90		 npad	 1

; 1606 : 		_CATCH_ALL
; 1607 : 		this->_Getal().deallocate(_Ptr, _Count);
; 1608 : 		_RERAISE;
; 1609 : 		_CATCH_END

  00036	48 8d 05 00 00
	00 00		 lea	 rax, $LN8@catch$0
  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
  00043	cc		 int	 3
?catch$0@?0??_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z@4HA ENDP ; `std::vector<unsigned int,std::allocator<unsigned int> >::_Reallocate'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_Ptr$ = 32
tv84 = 40
tv150 = 48
tv177 = 56
tv179 = 64
tv186 = 72
tv200 = 80
_Size$ = 88
tv208 = 96
$T1 = 104
this$ = 128
_Count$ = 136
?catch$0@?0??_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z@4HA PROC ; `std::vector<unsigned int,std::allocator<unsigned int> >::_Reallocate'::`1'::catch$0

; 1606 : 		_CATCH_ALL

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$?_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z$0:

; 1607 : 		this->_Getal().deallocate(_Ptr, _Count);

  0000d	48 8b 8d 80 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00014	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Getal
  00019	4c 8b 85 88 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00020	48 8b 55 20	 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00024	48 8b c8	 mov	 rcx, rax
  00027	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAI_K@Z ; std::_Wrap_alloc<std::allocator<unsigned int> >::deallocate

; 1608 : 		_RERAISE;

  0002c	33 d2		 xor	 edx, edx
  0002e	33 c9		 xor	 ecx, ecx
  00030	e8 00 00 00 00	 call	 _CxxThrowException
  00035	90		 npad	 1

; 1609 : 		_CATCH_END

  00036	48 8d 05 00 00
	00 00		 lea	 rax, $LN8@catch$0
  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
  00043	cc		 int	 3
?catch$0@?0??_Reallocate@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z@4HA ENDP ; `std::vector<unsigned int,std::allocator<unsigned int> >::_Reallocate'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Inside@?$vector@IV?$allocator@I@std@@@std@@IEBA_NPEBI@Z
_TEXT	SEGMENT
tv82 = 32
this$ = 64
_Ptr$ = 72
?_Inside@?$vector@IV?$allocator@I@std@@@std@@IEBA_NPEBI@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Inside, COMDAT

; 1596 : 		{	// test if _Ptr points inside vector

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1597 : 		return (_Ptr < _Unfancy(this->_Mylast()) && _Unfancy(this->_Myfirst()) <= _Ptr);

  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  00018	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0001b	e8 00 00 00 00	 call	 ??$_Unfancy@I@std@@YAPEAIPEAI@Z ; std::_Unfancy<unsigned int>
  00020	48 39 44 24 48	 cmp	 QWORD PTR _Ptr$[rsp], rax
  00025	73 23		 jae	 SHORT $LN3@Inside
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  00031	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00034	e8 00 00 00 00	 call	 ??$_Unfancy@I@std@@YAPEAIPEAI@Z ; std::_Unfancy<unsigned int>
  00039	48 3b 44 24 48	 cmp	 rax, QWORD PTR _Ptr$[rsp]
  0003e	77 0a		 ja	 SHORT $LN3@Inside
  00040	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
  00048	eb 08		 jmp	 SHORT $LN4@Inside
$LN3@Inside:
  0004a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
$LN4@Inside:
  00052	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv82[rsp]

; 1598 : 		}

  00057	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005b	c3		 ret	 0
?_Inside@?$vector@IV?$allocator@I@std@@@std@@IEBA_NPEBI@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@IV?$allocator@I@std@@@std@@IEBA_K_K@Z
_TEXT	SEGMENT
_Capacity$ = 32
tv73 = 40
tv67 = 48
this$ = 80
_Count$ = 88
?_Grow_to@?$vector@IV?$allocator@I@std@@@std@@IEBA_K_K@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Grow_to, COMDAT

; 1585 : 		{	// grow by 50% or at least to _Count

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1586 : 		size_type _Capacity = capacity();

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::capacity
  00018	48 89 44 24 20	 mov	 QWORD PTR _Capacity$[rsp], rax

; 1587 : 
; 1588 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity

  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::max_size
  00027	48 89 44 24 30	 mov	 QWORD PTR tv67[rsp], rax
  0002c	33 d2		 xor	 edx, edx
  0002e	48 8b 44 24 20	 mov	 rax, QWORD PTR _Capacity$[rsp]
  00033	b9 02 00 00 00	 mov	 ecx, 2
  00038	48 f7 f1	 div	 rcx
  0003b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv67[rsp]
  00040	48 2b c8	 sub	 rcx, rax
  00043	48 8b c1	 mov	 rax, rcx
  00046	48 3b 44 24 20	 cmp	 rax, QWORD PTR _Capacity$[rsp]
  0004b	73 0b		 jae	 SHORT $LN4@Grow_to
  0004d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv73[rsp], 0
  00056	eb 1f		 jmp	 SHORT $LN5@Grow_to
$LN4@Grow_to:
  00058	33 d2		 xor	 edx, edx
  0005a	48 8b 44 24 20	 mov	 rax, QWORD PTR _Capacity$[rsp]
  0005f	b9 02 00 00 00	 mov	 ecx, 2
  00064	48 f7 f1	 div	 rcx
  00067	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Capacity$[rsp]
  0006c	48 03 c8	 add	 rcx, rax
  0006f	48 8b c1	 mov	 rax, rcx
  00072	48 89 44 24 28	 mov	 QWORD PTR tv73[rsp], rax
$LN5@Grow_to:
  00077	48 8b 44 24 28	 mov	 rax, QWORD PTR tv73[rsp]
  0007c	48 89 44 24 20	 mov	 QWORD PTR _Capacity$[rsp], rax

; 1589 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%
; 1590 : 		if (_Capacity < _Count)

  00081	48 8b 44 24 58	 mov	 rax, QWORD PTR _Count$[rsp]
  00086	48 39 44 24 20	 cmp	 QWORD PTR _Capacity$[rsp], rax
  0008b	73 0a		 jae	 SHORT $LN2@Grow_to

; 1591 : 			_Capacity = _Count;

  0008d	48 8b 44 24 58	 mov	 rax, QWORD PTR _Count$[rsp]
  00092	48 89 44 24 20	 mov	 QWORD PTR _Capacity$[rsp], rax
$LN2@Grow_to:

; 1592 : 		return (_Capacity);

  00097	48 8b 44 24 20	 mov	 rax, QWORD PTR _Capacity$[rsp]

; 1593 : 		}

  0009c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a0	c3		 ret	 0
?_Grow_to@?$vector@IV?$allocator@I@std@@@std@@IEBA_K_K@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IEAAXPEAI0@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IEAAXPEAI0@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy, COMDAT

; 1580 : 		{	// destroy [_First, _Last) using allocator

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1581 : 		_Destroy_range(_First, _Last, this->_Getal());

  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Getal
  0001d	4c 8b c0	 mov	 r8, rax
  00020	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Last$[rsp]
  00025	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _First$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@I@std@@PEAI@std@@YAXPEAI0AEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@@Z ; std::_Destroy_range<std::allocator<unsigned int>,unsigned int * __ptr64>

; 1582 : 		}

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IEAAXPEAI0@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?clear@?$vector@IV?$allocator@I@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
tv75 = 32
tv95 = 40
$T1 = 48
this$ = 80
?clear@?$vector@IV?$allocator@I@std@@@std@@QEAAXXZ PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::clear, COMDAT

; 1539 : 		{	// erase all

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00009	48 c7 44 24 30
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 1540 : 		this->_Orphan_all();

  00012	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00017	e8 00 00 00 00	 call	 ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAXXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Orphan_all
  0001c	90		 npad	 1

; 1541 : 		_Destroy(this->_Myfirst(), this->_Mylast());

  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  00027	90		 npad	 1
  00028	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  0002d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00032	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  00037	90		 npad	 1
  00038	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv75[rsp]
  0003d	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  00040	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00043	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00048	e8 00 00 00 00	 call	 ?_Destroy@?$vector@IV?$allocator@I@std@@@std@@IEAAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Destroy
  0004d	90		 npad	 1

; 1542 : 		this->_Mylast() = this->_Myfirst();

  0004e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00053	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  00058	90		 npad	 1
  00059	48 89 44 24 28	 mov	 QWORD PTR tv95[rsp], rax
  0005e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00063	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  00068	90		 npad	 1
  00069	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv95[rsp]
  0006e	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00071	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1543 : 		}

  00074	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00078	c3		 ret	 0
?clear@?$vector@IV?$allocator@I@std@@@std@@QEAAXXZ ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAXAEBI@Z
_TEXT	SEGMENT
tv176 = 32
tv231 = 40
tv71 = 48
tv88 = 56
tv136 = 64
_Idx$1 = 72
tv159 = 80
tv161 = 88
tv183 = 96
tv199 = 104
tv216 = 112
this$ = 144
_Val$ = 152
?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAXAEBI@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::push_back, COMDAT

; 1276 : 		{	// insert element at end

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1277 : 		if (_Inside(_STD addressof(_Val)))

  00011	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Val$[rsp]
  00019	e8 00 00 00 00	 call	 ??$addressof@$$CBI@std@@YAPEBIAEBI@Z ; std::addressof<unsigned int const >
  0001e	48 8b d0	 mov	 rdx, rax
  00021	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00029	e8 00 00 00 00	 call	 ?_Inside@?$vector@IV?$allocator@I@std@@@std@@IEBA_NPEBI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Inside
  0002e	0f b6 c0	 movzx	 eax, al
  00031	85 c0		 test	 eax, eax
  00033	0f 84 38 01 00
	00		 je	 $LN2@push_back

; 1278 : 			{	// push back an element
; 1279 : 			size_type _Idx = _STD addressof(_Val) - _Unfancy(this->_Myfirst());

  00039	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Val$[rsp]
  00041	e8 00 00 00 00	 call	 ??$addressof@$$CBI@std@@YAPEBIAEBI@Z ; std::addressof<unsigned int const >
  00046	48 89 44 24 30	 mov	 QWORD PTR tv71[rsp], rax
  0004b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00053	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  00058	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0005b	e8 00 00 00 00	 call	 ??$_Unfancy@I@std@@YAPEAIPEAI@Z ; std::_Unfancy<unsigned int>
  00060	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv71[rsp]
  00065	48 2b c8	 sub	 rcx, rax
  00068	48 8b c1	 mov	 rax, rcx
  0006b	48 c1 f8 02	 sar	 rax, 2
  0006f	48 89 44 24 48	 mov	 QWORD PTR _Idx$1[rsp], rax

; 1280 : 			if (this->_Mylast() == this->_Myend())

  00074	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0007c	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  00081	48 89 44 24 38	 mov	 QWORD PTR tv88[rsp], rax
  00086	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0008e	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myend
  00093	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00096	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv88[rsp]
  0009b	48 39 01	 cmp	 QWORD PTR [rcx], rax
  0009e	75 12		 jne	 SHORT $LN4@push_back

; 1281 : 				_Reserve(1);

  000a0	ba 01 00 00 00	 mov	 edx, 1
  000a5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000ad	e8 00 00 00 00	 call	 ?_Reserve@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Reserve
$LN4@push_back:

; 1282 : 			_Orphan_range(this->_Mylast(), this->_Mylast());

  000b2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000ba	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  000bf	48 89 44 24 40	 mov	 QWORD PTR tv136[rsp], rax
  000c4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000cc	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  000d1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv136[rsp]
  000d6	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  000d9	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000dc	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000e4	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@IEBAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range

; 1283 : 			this->_Getal().construct(_Unfancy(this->_Mylast()),

  000e9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000f1	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  000f6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Idx$1[rsp]
  000fe	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  00102	48 89 44 24 50	 mov	 QWORD PTR tv159[rsp], rax
  00107	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0010f	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  00114	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00117	e8 00 00 00 00	 call	 ??$_Unfancy@I@std@@YAPEAIPEAI@Z ; std::_Unfancy<unsigned int>
  0011c	48 89 44 24 58	 mov	 QWORD PTR tv161[rsp], rax
  00121	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00129	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Getal
  0012e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv159[rsp]
  00133	4c 8b c1	 mov	 r8, rcx
  00136	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv161[rsp]
  0013b	48 8b d1	 mov	 rdx, rcx
  0013e	48 8b c8	 mov	 rcx, rax
  00141	e8 00 00 00 00	 call	 ??$construct@IAEAI@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAIAEAI@Z ; std::_Wrap_alloc<std::allocator<unsigned int> >::construct<unsigned int,unsigned int & __ptr64>

; 1284 : 				this->_Myfirst()[_Idx]);
; 1285 : 			++this->_Mylast();

  00146	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0014e	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  00153	48 89 44 24 20	 mov	 QWORD PTR tv176[rsp], rax
  00158	48 8b 44 24 20	 mov	 rax, QWORD PTR tv176[rsp]
  0015d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00160	48 83 c0 04	 add	 rax, 4
  00164	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv176[rsp]
  00169	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1286 : 			}
; 1287 : 		else

  0016c	e9 da 00 00 00	 jmp	 $LN3@push_back
$LN2@push_back:

; 1288 : 			{	// push back a non-element
; 1289 : 			if (this->_Mylast() == this->_Myend())

  00171	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00179	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  0017e	48 89 44 24 60	 mov	 QWORD PTR tv183[rsp], rax
  00183	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0018b	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myend
  00190	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00193	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv183[rsp]
  00198	48 39 01	 cmp	 QWORD PTR [rcx], rax
  0019b	75 12		 jne	 SHORT $LN5@push_back

; 1290 : 				_Reserve(1);

  0019d	ba 01 00 00 00	 mov	 edx, 1
  001a2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001aa	e8 00 00 00 00	 call	 ?_Reserve@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Reserve
$LN5@push_back:

; 1291 : 			_Orphan_range(this->_Mylast(), this->_Mylast());

  001af	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001b7	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  001bc	48 89 44 24 68	 mov	 QWORD PTR tv199[rsp], rax
  001c1	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001c9	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  001ce	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv199[rsp]
  001d3	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  001d6	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  001d9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001e1	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@IEBAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range

; 1292 : 			this->_Getal().construct(_Unfancy(this->_Mylast()),

  001e6	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001ee	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  001f3	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  001f6	e8 00 00 00 00	 call	 ??$_Unfancy@I@std@@YAPEAIPEAI@Z ; std::_Unfancy<unsigned int>
  001fb	48 89 44 24 70	 mov	 QWORD PTR tv216[rsp], rax
  00200	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00208	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Getal
  0020d	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR _Val$[rsp]
  00215	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv216[rsp]
  0021a	48 8b d1	 mov	 rdx, rcx
  0021d	48 8b c8	 mov	 rcx, rax
  00220	e8 00 00 00 00	 call	 ??$construct@IAEBI@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAIAEBI@Z ; std::_Wrap_alloc<std::allocator<unsigned int> >::construct<unsigned int,unsigned int const & __ptr64>

; 1293 : 				_Val);
; 1294 : 			++this->_Mylast();

  00225	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0022d	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  00232	48 89 44 24 28	 mov	 QWORD PTR tv231[rsp], rax
  00237	48 8b 44 24 28	 mov	 rax, QWORD PTR tv231[rsp]
  0023c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0023f	48 83 c0 04	 add	 rax, 4
  00243	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv231[rsp]
  00248	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN3@push_back:

; 1295 : 			}
; 1296 : 		}

  0024b	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00252	c3		 ret	 0
?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAXAEBI@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z
_TEXT	SEGMENT
this$ = 48
_Pos$ = 56
??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::operator[], COMDAT

; 1230 : 		{	// subscript mutable sequence

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1231 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1232 : 		if (size() <= _Pos)
; 1233 : 			{	// report error
; 1234 : 			_DEBUG_ERROR("vector subscript out of range");
; 1235 : 			_SCL_SECURE_OUT_OF_RANGE;
; 1236 : 			}
; 1237 : 
; 1238 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1239 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1240 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1241 : 
; 1242 : 		return (*(this->_Myfirst() + _Pos));

  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  00018	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Pos$[rsp]
  00020	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]

; 1243 : 		}

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
??A?$vector@IV?$allocator@I@std@@@std@@QEAAAEAI_K@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::max_size, COMDAT

; 1184 : 		{	// return maximum possible length of sequence

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1185 : 		return (this->_Getal().max_size());

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Getal
  00013	0f b6 54 24 20	 movzx	 edx, BYTE PTR $T1[rsp]
  00018	48 8b c8	 mov	 rcx, rax
  0001b	e8 00 00 00 00	 call	 ?max_size@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEBA_KU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<unsigned int> >::max_size

; 1186 : 		}

  00020	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00024	c3		 ret	 0
?max_size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
tv69 = 32
this$ = 64
?size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::size, COMDAT

; 1179 : 		{	// return length of sequence

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1180 : 		return (this->_Mylast() - this->_Myfirst());

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  00013	48 89 44 24 20	 mov	 QWORD PTR tv69[rsp], rax
  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  00022	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00025	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv69[rsp]
  0002a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0002d	48 2b c8	 sub	 rcx, rax
  00030	48 8b c1	 mov	 rax, rcx
  00033	48 c1 f8 02	 sar	 rax, 2

; 1181 : 		}

  00037	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003b	c3		 ret	 0
?size@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?end@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ
_TEXT	SEGMENT
tv74 = 32
$T1 = 40
this$ = 64
__$ReturnUdt$ = 72
?end@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::end, COMDAT

; 1067 : 		{	// return iterator for end of mutable sequence

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 c7 44 24 28
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 1068 : 		return (iterator(this->_Mylast(), &this->_Get_data()));

  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001c	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Get_data
  00021	90		 npad	 1
  00022	48 89 44 24 20	 mov	 QWORD PTR tv74[rsp], rax
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  00031	90		 npad	 1
  00032	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv74[rsp]
  00037	4c 8b c1	 mov	 r8, rcx
  0003a	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0003d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00042	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >
  00047	90		 npad	 1
  00048	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1069 : 		}

  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
?end@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::end
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?begin@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ
_TEXT	SEGMENT
tv74 = 32
$T1 = 40
this$ = 64
__$ReturnUdt$ = 72
?begin@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::begin, COMDAT

; 1057 : 		{	// return iterator for beginning of mutable sequence

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 c7 44 24 28
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 1058 : 		return (iterator(this->_Myfirst(), &this->_Get_data()));

  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001c	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Get_data
  00021	90		 npad	 1
  00022	48 89 44 24 20	 mov	 QWORD PTR tv74[rsp], rax
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  00031	90		 npad	 1
  00032	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv74[rsp]
  00037	4c 8b c1	 mov	 r8, rcx
  0003a	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0003d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00042	e8 00 00 00 00	 call	 ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@std@@QEAA@PEAIPEBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<unsigned int> > >
  00047	90		 npad	 1
  00048	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1059 : 		}

  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
?begin@?$vector@IV?$allocator@I@std@@@std@@QEAA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@I@std@@@std@@@2@XZ ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Unused_capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
tv69 = 32
this$ = 64
?_Unused_capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Unused_capacity, COMDAT

; 1047 : 		{	// micro-optimization for capacity() - size()

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1048 : 		return (this->_Myend() - this->_Mylast());

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myend
  00013	48 89 44 24 20	 mov	 QWORD PTR tv69[rsp], rax
  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  00022	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00025	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv69[rsp]
  0002a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0002d	48 2b c8	 sub	 rcx, rax
  00030	48 8b c1	 mov	 rax, rcx
  00033	48 c1 f8 02	 sar	 rax, 2

; 1049 : 		}

  00037	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003b	c3		 ret	 0
?_Unused_capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Unused_capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ
_TEXT	SEGMENT
tv69 = 32
this$ = 64
?capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::capacity, COMDAT

; 1042 : 		{	// return current length of allocated storage

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1043 : 		return (this->_Myend() - this->_Myfirst());

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myend
  00013	48 89 44 24 20	 mov	 QWORD PTR tv69[rsp], rax
  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  00022	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00025	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv69[rsp]
  0002a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0002d	48 2b c8	 sub	 rcx, rax
  00030	48 8b c1	 mov	 rax, rcx
  00033	48 c1 f8 02	 sar	 rax, 2

; 1044 : 		}

  00037	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003b	c3		 ret	 0
?capacity@?$vector@IV?$allocator@I@std@@@std@@QEBA_KXZ ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >, COMDAT

; 975  : 		{	// destroy the object

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 976  : 		_Tidy();

  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00017	e8 00 00 00 00	 call	 ?_Tidy@?$vector@IV?$allocator@I@std@@@std@@IEAAXXZ ; std::vector<unsigned int,std::allocator<unsigned int> >::_Tidy
  0001c	90		 npad	 1

; 977  : 		}

  0001d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00021	c3		 ret	 0
??1?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::~vector<unsigned int,std::allocator<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAI@Z
_TEXT	SEGMENT
tv178 = 32
tv235 = 40
tv71 = 48
tv88 = 56
tv136 = 64
_Idx$1 = 72
tv152 = 80
tv163 = 88
tv185 = 96
tv201 = 104
tv217 = 112
tv220 = 120
this$ = 144
_Val$ = 152
?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAI@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::push_back, COMDAT

; 896  : 		{	// insert by moving into element at end

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 897  : 		if (_Inside(_STD addressof(_Val)))

  00011	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Val$[rsp]
  00019	e8 00 00 00 00	 call	 ??$addressof@I@std@@YAPEAIAEAI@Z ; std::addressof<unsigned int>
  0001e	48 8b d0	 mov	 rdx, rax
  00021	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00029	e8 00 00 00 00	 call	 ?_Inside@?$vector@IV?$allocator@I@std@@@std@@IEBA_NPEBI@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Inside
  0002e	0f b6 c0	 movzx	 eax, al
  00031	85 c0		 test	 eax, eax
  00033	0f 84 40 01 00
	00		 je	 $LN2@push_back

; 898  : 			{	// push back an element
; 899  : 			size_type _Idx = _STD addressof(_Val) - _Unfancy(this->_Myfirst());

  00039	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Val$[rsp]
  00041	e8 00 00 00 00	 call	 ??$addressof@I@std@@YAPEAIAEAI@Z ; std::addressof<unsigned int>
  00046	48 89 44 24 30	 mov	 QWORD PTR tv71[rsp], rax
  0004b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00053	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  00058	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0005b	e8 00 00 00 00	 call	 ??$_Unfancy@I@std@@YAPEAIPEAI@Z ; std::_Unfancy<unsigned int>
  00060	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv71[rsp]
  00065	48 2b c8	 sub	 rcx, rax
  00068	48 8b c1	 mov	 rax, rcx
  0006b	48 c1 f8 02	 sar	 rax, 2
  0006f	48 89 44 24 48	 mov	 QWORD PTR _Idx$1[rsp], rax

; 900  : 			if (this->_Mylast() == this->_Myend())

  00074	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0007c	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  00081	48 89 44 24 38	 mov	 QWORD PTR tv88[rsp], rax
  00086	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0008e	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myend
  00093	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00096	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv88[rsp]
  0009b	48 39 01	 cmp	 QWORD PTR [rcx], rax
  0009e	75 12		 jne	 SHORT $LN4@push_back

; 901  : 				_Reserve(1);

  000a0	ba 01 00 00 00	 mov	 edx, 1
  000a5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000ad	e8 00 00 00 00	 call	 ?_Reserve@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Reserve
$LN4@push_back:

; 902  : 			_Orphan_range(this->_Mylast(), this->_Mylast());

  000b2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000ba	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  000bf	48 89 44 24 40	 mov	 QWORD PTR tv136[rsp], rax
  000c4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000cc	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  000d1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv136[rsp]
  000d6	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  000d9	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000dc	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000e4	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@IEBAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range

; 903  : 			this->_Getal().construct(_Unfancy(this->_Mylast()),

  000e9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000f1	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  000f6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Idx$1[rsp]
  000fe	48 8d 04 88	 lea	 rax, QWORD PTR [rax+rcx*4]
  00102	48 8b c8	 mov	 rcx, rax
  00105	e8 00 00 00 00	 call	 ??$forward@I@std@@YA$$QEAIAEAI@Z ; std::forward<unsigned int>
  0010a	48 89 44 24 50	 mov	 QWORD PTR tv152[rsp], rax
  0010f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00117	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  0011c	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0011f	e8 00 00 00 00	 call	 ??$_Unfancy@I@std@@YAPEAIPEAI@Z ; std::_Unfancy<unsigned int>
  00124	48 89 44 24 58	 mov	 QWORD PTR tv163[rsp], rax
  00129	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00131	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Getal
  00136	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv152[rsp]
  0013b	4c 8b c1	 mov	 r8, rcx
  0013e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv163[rsp]
  00143	48 8b d1	 mov	 rdx, rcx
  00146	48 8b c8	 mov	 rcx, rax
  00149	e8 00 00 00 00	 call	 ??$construct@II@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAI$$QEAI@Z ; std::_Wrap_alloc<std::allocator<unsigned int> >::construct<unsigned int,unsigned int>

; 904  : 				_STD forward<value_type>(this->_Myfirst()[_Idx]));
; 905  : 			++this->_Mylast();

  0014e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00156	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  0015b	48 89 44 24 20	 mov	 QWORD PTR tv178[rsp], rax
  00160	48 8b 44 24 20	 mov	 rax, QWORD PTR tv178[rsp]
  00165	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00168	48 83 c0 04	 add	 rax, 4
  0016c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv178[rsp]
  00171	48 89 01	 mov	 QWORD PTR [rcx], rax

; 906  : 			}
; 907  : 		else

  00174	e9 ec 00 00 00	 jmp	 $LN3@push_back
$LN2@push_back:

; 908  : 			{	// push back a non-element
; 909  : 			if (this->_Mylast() == this->_Myend())

  00179	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00181	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  00186	48 89 44 24 60	 mov	 QWORD PTR tv185[rsp], rax
  0018b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00193	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myend
  00198	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0019b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv185[rsp]
  001a0	48 39 01	 cmp	 QWORD PTR [rcx], rax
  001a3	75 12		 jne	 SHORT $LN5@push_back

; 910  : 				_Reserve(1);

  001a5	ba 01 00 00 00	 mov	 edx, 1
  001aa	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001b2	e8 00 00 00 00	 call	 ?_Reserve@?$vector@IV?$allocator@I@std@@@std@@IEAAX_K@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Reserve
$LN5@push_back:

; 911  : 			_Orphan_range(this->_Mylast(), this->_Mylast());

  001b7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001bf	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  001c4	48 89 44 24 68	 mov	 QWORD PTR tv201[rsp], rax
  001c9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001d1	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  001d6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv201[rsp]
  001db	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  001de	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  001e1	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001e9	e8 00 00 00 00	 call	 ?_Orphan_range@?$vector@IV?$allocator@I@std@@@std@@IEBAXPEAI0@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Orphan_range

; 912  : 			this->_Getal().construct(_Unfancy(this->_Mylast()),

  001ee	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _Val$[rsp]
  001f6	e8 00 00 00 00	 call	 ??$forward@I@std@@YA$$QEAIAEAI@Z ; std::forward<unsigned int>
  001fb	48 89 44 24 70	 mov	 QWORD PTR tv217[rsp], rax
  00200	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00208	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  0020d	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00210	e8 00 00 00 00	 call	 ??$_Unfancy@I@std@@YAPEAIPEAI@Z ; std::_Unfancy<unsigned int>
  00215	48 89 44 24 78	 mov	 QWORD PTR tv220[rsp], rax
  0021a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00222	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Getal
  00227	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv217[rsp]
  0022c	4c 8b c1	 mov	 r8, rcx
  0022f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv220[rsp]
  00234	48 8b d1	 mov	 rdx, rcx
  00237	48 8b c8	 mov	 rcx, rax
  0023a	e8 00 00 00 00	 call	 ??$construct@II@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAI$$QEAI@Z ; std::_Wrap_alloc<std::allocator<unsigned int> >::construct<unsigned int,unsigned int>

; 913  : 				_STD forward<value_type>(_Val));
; 914  : 			++this->_Mylast();

  0023f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00247	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  0024c	48 89 44 24 28	 mov	 QWORD PTR tv235[rsp], rax
  00251	48 8b 44 24 28	 mov	 rax, QWORD PTR tv235[rsp]
  00256	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00259	48 83 c0 04	 add	 rax, 4
  0025d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv235[rsp]
  00262	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN3@push_back:

; 915  : 			}
; 916  : 		}

  00265	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0026c	c3		 ret	 0
?push_back@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAI@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Assign_rv@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
tv85 = 32
tv129 = 40
tv141 = 48
this$ = 80
_Right$ = 88
__formal$ = 96
?_Assign_rv@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::_Assign_rv, COMDAT

; 868  : 		{	// move from _Right, stealing its contents

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 869  : 		this->_Swap_all((_Myt&)_Right);

  00013	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Right$[rsp]
  00018	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAXAEAV12@@Z ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Swap_all

; 870  : 		this->_Myfirst() = _Right._Myfirst();

  00022	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  00027	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  0002c	48 89 44 24 20	 mov	 QWORD PTR tv85[rsp], rax
  00031	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00036	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  0003b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv85[rsp]
  00040	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00043	48 89 08	 mov	 QWORD PTR [rax], rcx

; 871  : 		this->_Mylast() = _Right._Mylast();

  00046	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  0004b	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  00050	48 89 44 24 28	 mov	 QWORD PTR tv129[rsp], rax
  00055	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0005a	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  0005f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv129[rsp]
  00064	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00067	48 89 08	 mov	 QWORD PTR [rax], rcx

; 872  : 		this->_Myend() = _Right._Myend();

  0006a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  0006f	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myend
  00074	48 89 44 24 30	 mov	 QWORD PTR tv141[rsp], rax
  00079	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0007e	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myend
  00083	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv141[rsp]
  00088	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 873  : 
; 874  : 		_Right._Myfirst() = pointer();

  0008e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  00093	e8 00 00 00 00	 call	 ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
  00098	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 875  : 		_Right._Mylast() = pointer();

  0009f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  000a4	e8 00 00 00 00	 call	 ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
  000a9	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 876  : 		_Right._Myend() = pointer();

  000b0	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  000b5	e8 00 00 00 00	 call	 ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myend
  000ba	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 877  : 		}

  000c1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000c5	c3		 ret	 0
?_Assign_rv@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::_Assign_rv
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@IV?$allocator@I@std@@@std@@QEAA@$$QEAV01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
_Right$ = 72
??0?$vector@IV?$allocator@I@std@@@std@@QEAA@$$QEAV01@@Z PROC ; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >, COMDAT

; 841  : 		{	// construct by moving _Right

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 c7 44 24 28
	fe ff ff ff	 mov	 QWORD PTR $T2[rsp], -2

; 840  : 		: _Mybase(_STD move(_Right._Getal()))

  00017	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  0001c	e8 00 00 00 00	 call	 ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Getal
  00021	90		 npad	 1
  00022	48 8b c8	 mov	 rcx, rax
  00025	e8 00 00 00 00	 call	 ??$move@AEAU?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@AEAU10@@Z ; std::move<std::_Wrap_alloc<std::allocator<unsigned int> > & __ptr64>
  0002a	90		 npad	 1
  0002b	48 8b d0	 mov	 rdx, rax
  0002e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00033	e8 00 00 00 00	 call	 ??$?0U?$_Wrap_alloc@V?$allocator@I@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAA@$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > ><std::_Wrap_alloc<std::allocator<unsigned int> >,void>
  00038	90		 npad	 1

; 842  : 		_Assign_rv(_STD forward<_Myt>(_Right), true_type());

  00039	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  0003e	e8 00 00 00 00	 call	 ??$forward@V?$vector@IV?$allocator@I@std@@@std@@@std@@YA$$QEAV?$vector@IV?$allocator@I@std@@@0@AEAV10@@Z ; std::forward<std::vector<unsigned int,std::allocator<unsigned int> > >
  00043	90		 npad	 1
  00044	44 0f b6 44 24
	20		 movzx	 r8d, BYTE PTR $T1[rsp]
  0004a	48 8b d0	 mov	 rdx, rax
  0004d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00052	e8 00 00 00 00	 call	 ?_Assign_rv@?$vector@IV?$allocator@I@std@@@std@@QEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<unsigned int,std::allocator<unsigned int> >::_Assign_rv
  00057	90		 npad	 1

; 843  : 		}

  00058	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0005d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00061	c3		 ret	 0
??0?$vector@IV?$allocator@I@std@@@std@@QEAA@$$QEAV01@@Z ENDP ; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ PROC	; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >, COMDAT

; 707  : 		{	// construct empty vector

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 706  : 		: _Mybase()

  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00017	e8 00 00 00 00	 call	 ??0?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAA@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >
  0001c	90		 npad	 1

; 708  : 		}

  0001d	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00026	c3		 ret	 0
??0?$vector@IV?$allocator@I@std@@@std@@QEAA@XZ ENDP	; std::vector<unsigned int,std::allocator<unsigned int> >::vector<unsigned int,std::allocator<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_second, COMDAT

; 319  : 		{	// return const reference to second

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 320  : 		return (_Myval2);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 321  : 		}

  0000a	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_second, COMDAT

; 314  : 		{	// return reference to second

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 315  : 		return (_Myval2);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 316  : 		}

  0000a	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first, COMDAT

; 299  : 		{	// return const reference to first

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 300  : 		return (*this);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 301  : 		}

  0000a	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first, COMDAT

; 294  : 		{	// return reference to first

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 295  : 		return (*this);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 296  : 		}

  0000a	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@I@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Vector_val@U?$_Simple_types@I@std@@@std@@QEAA@XZ PROC ; std::_Vector_val<std::_Simple_types<unsigned int> >::_Vector_val<std::_Simple_types<unsigned int> >, COMDAT

; 488  : 		{	// initialize values

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 485  : 		: _Myfirst(),

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 486  : 		_Mylast(),

  00011	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00016	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 487  : 		_Myend()

  0001e	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 489  : 		}

  0002b	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00030	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@I@std@@@std@@QEAA@XZ ENDP ; std::_Vector_val<std::_Simple_types<unsigned int> >::_Vector_val<std::_Simple_types<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ
_TEXT	SEGMENT
this$ = 48
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myend, COMDAT

; 667  : 		{	// return const reference to _Myend

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 668  : 		return (_Get_data()._Myend);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Get_data
  00013	48 83 c0 10	 add	 rax, 16

; 669  : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ
_TEXT	SEGMENT
this$ = 48
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myend, COMDAT

; 662  : 		{	// return reference to _Myend

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 663  : 		return (_Get_data()._Myend);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Get_data
  00013	48 83 c0 10	 add	 rax, 16

; 664  : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ
_TEXT	SEGMENT
this$ = 48
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast, COMDAT

; 657  : 		{	// return const reference to _Mylast

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 658  : 		return (_Get_data()._Mylast);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Get_data
  00013	48 83 c0 08	 add	 rax, 8

; 659  : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ
_TEXT	SEGMENT
this$ = 48
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast, COMDAT

; 652  : 		{	// return reference to _Mylast

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 653  : 		return (_Get_data()._Mylast);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Get_data
  00013	48 83 c0 08	 add	 rax, 8

; 654  : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ
_TEXT	SEGMENT
this$ = 48
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst, COMDAT

; 647  : 		{	// return const reference to _Myfirst

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 648  : 		return (_Get_data()._Myfirst);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Get_data

; 649  : 		}

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBQEAIXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ
_TEXT	SEGMENT
this$ = 48
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst, COMDAT

; 642  : 		{	// return reference to _Myfirst

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 643  : 		return (_Get_data()._Myfirst);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Get_data

; 644  : 		}

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAPEAIXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Get_data, COMDAT

; 637  : 		{	// return const reference to _Vector_val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 638  : 		return (_Mypair._Get_second());

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_second

; 639  : 		}

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Get_data, COMDAT

; 632  : 		{	// return reference to _Vector_val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 633  : 		return (_Mypair._Get_second());

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_second

; 634  : 		}

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Getal, COMDAT

; 627  : 		{	// return const reference to allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 628  : 		return (_Mypair._Get_first());

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first

; 629  : 		}

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Getal, COMDAT

; 622  : 		{	// return reference to allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 623  : 		return (_Mypair._Get_first());

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Get_first

; 624  : 		}

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@I@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAXAEAV12@@Z
_TEXT	SEGMENT
tv75 = 32
this$ = 64
_Right$ = 72
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAXAEAV12@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Swap_all, COMDAT

; 617  : 		{	// swap all iterators

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 618  : 		_Get_data()._Swap_all(_Right._Get_data());

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  00013	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Get_data
  00018	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  0001d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Get_data
  00027	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv75[rsp]
  0002c	48 8b d1	 mov	 rdx, rcx
  0002f	48 8b c8	 mov	 rcx, rax
  00032	e8 00 00 00 00	 call	 ?_Swap_all@_Container_base0@std@@QEAAXAEAU12@@Z ; std::_Container_base0::_Swap_all

; 619  : 		}

  00037	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003b	c3		 ret	 0
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAXAEAV12@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Swap_all
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Orphan_all, COMDAT

; 612  : 		{	// orphan all iterators

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 613  : 		_Get_data()._Orphan_all();

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAAEAV?$_Vector_val@U?$_Simple_types@I@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Get_data
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base0@std@@QEAAXXZ ; std::_Container_base0::_Orphan_all

; 614  : 		}

  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAAXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??0?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAA@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >, COMDAT

; 520  : 		{	// default construct allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 519  : 		: _Mypair(_Zero_then_variadic_args_t())

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	0f b6 54 24 20	 movzx	 edx, BYTE PTR $T1[rsp]
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@I@std@@@std@@V?$_Vector_val@U?$_Simple_types@I@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned int> >,std::_Vector_val<std::_Simple_types<unsigned int> >,1><>

; 521  : 		}

  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00020	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00024	c3		 ret	 0
??0?$_Vector_alloc@U?$_Vec_base_types@IV?$allocator@I@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >::_Vector_alloc<std::_Vec_base_types<unsigned int,std::allocator<unsigned int> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEBA_KU_Nil@2@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
?max_size@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEBA_KU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned int> >::max_size, COMDAT

; 1007 : 		{	// get maximum size

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1008 : 		return (_Mytraits::max_size(*this));

  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ?max_size@?$allocator_traits@V?$allocator@I@std@@@std@@SA_KAEBV?$allocator@I@2@@Z ; std::allocator_traits<std::allocator<unsigned int> >::max_size

; 1009 : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEBA_KU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAI_K@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAI_K@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned int> >::deallocate, COMDAT

; 986  : 		{	// deallocate object at _Ptr, ignore size

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 987  : 		_Mybase::deallocate(_Ptr, _Count);

  00013	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Count$[rsp]
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ?deallocate@?$allocator@I@std@@QEAAXPEAI_K@Z ; std::allocator<unsigned int>::deallocate

; 988  : 		}

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
?deallocate@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAXPEAI_K@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned int> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAPEAI_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAPEAI_K@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned int> >::allocate, COMDAT

; 975  : 		{	// allocate array of _Count elements

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 976  : 		return (_Mybase::allocate(_Count));

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Count$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ?allocate@?$allocator@I@std@@QEAAPEAI_K@Z ; std::allocator<unsigned int>::allocate

; 977  : 		}

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
?allocate@?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAAPEAI_K@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned int> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAA@$$QEAU01@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
??0?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAA@$$QEAU01@@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned int> >::_Wrap_alloc<std::allocator<unsigned int> >, COMDAT

; 946  : 		{	// construct by moving

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 945  : 		: _Mybase(_STD move(_Right))

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Right$[rsp]
  00013	e8 00 00 00 00	 call	 ??$move@AEAU?$_Wrap_alloc@V?$allocator@I@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@I@std@@@0@AEAU10@@Z ; std::move<std::_Wrap_alloc<std::allocator<unsigned int> > & __ptr64>
  00018	48 8b d0	 mov	 rdx, rax
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00020	e8 00 00 00 00	 call	 ??0?$allocator@I@std@@QEAA@AEBV01@@Z ; std::allocator<unsigned int>::allocator<unsigned int>

; 947  : 		}

  00025	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAA@$$QEAU01@@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned int> >::_Wrap_alloc<std::allocator<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAA@XZ PROC	; std::_Wrap_alloc<std::allocator<unsigned int> >::_Wrap_alloc<std::allocator<unsigned int> >, COMDAT

; 936  : 		{	// construct default allocator (do nothing)

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 935  : 		: _Mybase()

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??0?$allocator@I@std@@QEAA@XZ ; std::allocator<unsigned int>::allocator<unsigned int>

; 937  : 		}

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@I@std@@@std@@QEAA@XZ ENDP	; std::_Wrap_alloc<std::allocator<unsigned int> >::_Wrap_alloc<std::allocator<unsigned int> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@I@std@@@std@@SA_KAEBV?$allocator@I@2@@Z
_TEXT	SEGMENT
_Al$ = 48
?max_size@?$allocator_traits@V?$allocator@I@std@@@std@@SA_KAEBV?$allocator@I@2@@Z PROC ; std::allocator_traits<std::allocator<unsigned int> >::max_size, COMDAT

; 868  : 		{	// get maximum size

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 869  : 		return (_Al.max_size());

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  0000e	e8 00 00 00 00	 call	 ?max_size@?$allocator@I@std@@QEBA_KXZ ; std::allocator<unsigned int>::max_size

; 870  : 		}

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@I@std@@@std@@SA_KAEBV?$allocator@I@2@@Z ENDP ; std::allocator_traits<std::allocator<unsigned int> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@I@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 8
?max_size@?$allocator@I@std@@QEBA_KXZ PROC		; std::allocator<unsigned int>::max_size, COMDAT

; 748  : 		{	// estimate maximum array size

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 749  : 		return ((size_t)(-1) / sizeof (_Ty));

  00005	48 b8 ff ff ff
	ff ff ff ff 3f	 mov	 rax, 4611686018427387903 ; 3fffffffffffffffH

; 750  : 		}

  0000f	c3		 ret	 0
?max_size@?$allocator@I@std@@QEBA_KXZ ENDP		; std::allocator<unsigned int>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@I@std@@QEAAPEAI_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@I@std@@QEAAPEAI_K@Z PROC		; std::allocator<unsigned int>::allocate, COMDAT

; 724  : 		{	// allocate array of _Count elements

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

  0000e	41 b0 01	 mov	 r8b, 1
  00011	ba 04 00 00 00	 mov	 edx, 4
  00016	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Count$[rsp]
  0001b	e8 00 00 00 00	 call	 ?_Allocate@std@@YAPEAX_K0_N@Z ; std::_Allocate

; 726  : 		}

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
?allocate@?$allocator@I@std@@QEAAPEAI_K@Z ENDP		; std::allocator<unsigned int>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@I@std@@QEAAXPEAI_K@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$allocator@I@std@@QEAAXPEAI_K@Z PROC	; std::allocator<unsigned int>::deallocate, COMDAT

; 719  : 		{	// deallocate object at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00013	41 b8 04 00 00
	00		 mov	 r8d, 4
  00019	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Count$[rsp]
  0001e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00023	e8 00 00 00 00	 call	 ?_Deallocate@std@@YAXPEAX_K1@Z ; std::_Deallocate

; 721  : 		}

  00028	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002c	c3		 ret	 0
?deallocate@?$allocator@I@std@@QEAAXPEAI_K@Z ENDP	; std::allocator<unsigned int>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@I@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$allocator@I@std@@QEAA@AEBV01@@Z PROC		; std::allocator<unsigned int>::allocator<unsigned int>, COMDAT

; 703  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 704  : 		{	// construct by copying (do nothing)
; 705  : 		}

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000f	c3		 ret	 0
??0?$allocator@I@std@@QEAA@AEBV01@@Z ENDP		; std::allocator<unsigned int>::allocator<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@I@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$allocator@I@std@@QEAA@XZ PROC			; std::allocator<unsigned int>::allocator<unsigned int>, COMDAT

; 699  : 	allocator() _THROW0()

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	c3		 ret	 0
??0?$allocator@I@std@@QEAA@XZ ENDP			; std::allocator<unsigned int>::allocator<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
_TEXT	SEGMENT
_State$ = 32
tv283 = 36
tv288 = 37
_Pad$1 = 40
tv65 = 48
tv285 = 52
$T2 = 56
$T3 = 60
tv287 = 64
$T4 = 68
$T5 = 72
tv290 = 76
$T6 = 80
$T7 = 84
tv130 = 88
tv284 = 96
tv286 = 104
tv289 = 112
$T8 = 120
_Ok$ = 128
$T9 = 144
_Ostr$ = 176
_Ch$ = 184
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 826  : 	{	// insert a char into char stream

$LN23:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  00010	48 c7 84 24 90
	00 00 00 fe ff
	ff ff		 mov	 QWORD PTR $T9[rsp], -2

; 827  : 	typedef char _Elem;
; 828  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 829  : 	ios_base::iostate _State = ios_base::goodbit;

  0001c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _State$[rsp], 0

; 830  : 	const typename _Myos::sentry _Ok(_Ostr);

  00024	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR _Ostr$[rsp]
  0002c	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR _Ok$[rsp]
  00034	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00039	90		 npad	 1

; 831  : 
; 832  : 	if (_Ok)

  0003a	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR _Ok$[rsp]
  00042	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00047	0f b6 c0	 movzx	 eax, al
  0004a	85 c0		 test	 eax, eax
  0004c	0f 84 a9 02 00
	00		 je	 $LN8@operator

; 833  : 		{	// state okay, insert
; 834  : 		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  00052	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0005a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00061	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00069	48 03 c8	 add	 rcx, rax
  0006c	48 8b c1	 mov	 rax, rcx
  0006f	48 8b c8	 mov	 rcx, rax
  00072	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  00077	48 83 f8 01	 cmp	 rax, 1
  0007b	7f 0b		 jg	 SHORT $LN15@operator
  0007d	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tv130[rsp], 0
  00086	eb 2d		 jmp	 SHORT $LN16@operator
$LN15@operator:
  00088	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00090	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00093	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00097	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0009f	48 03 c8	 add	 rcx, rax
  000a2	48 8b c1	 mov	 rax, rcx
  000a5	48 8b c8	 mov	 rcx, rax
  000a8	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  000ad	48 ff c8	 dec	 rax
  000b0	48 89 44 24 58	 mov	 QWORD PTR tv130[rsp], rax
$LN16@operator:
  000b5	48 8b 44 24 58	 mov	 rax, QWORD PTR tv130[rsp]
  000ba	48 89 44 24 28	 mov	 QWORD PTR _Pad$1[rsp], rax

; 835  : 
; 836  : 		_TRY_IO_BEGIN
; 837  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  000bf	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  000c7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ca	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000ce	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  000d6	48 03 c8	 add	 rcx, rax
  000d9	48 8b c1	 mov	 rax, rcx
  000dc	48 8b c8	 mov	 rcx, rax
  000df	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  000e4	89 44 24 30	 mov	 DWORD PTR tv65[rsp], eax
  000e8	8b 44 24 30	 mov	 eax, DWORD PTR tv65[rsp]
  000ec	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  000f1	83 f8 40	 cmp	 eax, 64			; 00000040H
  000f4	0f 84 c3 00 00
	00		 je	 $LN10@operator

; 838  : 			for (; _State == ios_base::goodbit && 0 < _Pad;

  000fa	eb 0d		 jmp	 SHORT $LN4@operator
$LN2@operator:

; 839  : 				--_Pad)	// pad on left

  000fc	48 8b 44 24 28	 mov	 rax, QWORD PTR _Pad$1[rsp]
  00101	48 ff c8	 dec	 rax
  00104	48 89 44 24 28	 mov	 QWORD PTR _Pad$1[rsp], rax
$LN4@operator:

; 838  : 			for (; _State == ios_base::goodbit && 0 < _Pad;

  00109	83 7c 24 20 00	 cmp	 DWORD PTR _State$[rsp], 0
  0010e	0f 85 a9 00 00
	00		 jne	 $LN10@operator
  00114	48 83 7c 24 28
	00		 cmp	 QWORD PTR _Pad$1[rsp], 0
  0011a	0f 8e 9d 00 00
	00		 jle	 $LN10@operator

; 840  : 				if (_Traits::eq_int_type(_Traits::eof(),

  00120	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00128	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0012b	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0012f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00137	48 03 c8	 add	 rcx, rax
  0013a	48 8b c1	 mov	 rax, rcx
  0013d	48 8b c8	 mov	 rcx, rax
  00140	e8 00 00 00 00	 call	 ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ ; std::basic_ios<char,std::char_traits<char> >::fill
  00145	88 44 24 24	 mov	 BYTE PTR tv283[rsp], al
  00149	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00151	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00154	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00158	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00160	48 03 c8	 add	 rcx, rax
  00163	48 8b c1	 mov	 rax, rcx
  00166	48 8b c8	 mov	 rcx, rax
  00169	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0016e	48 89 44 24 60	 mov	 QWORD PTR tv284[rsp], rax
  00173	0f b6 54 24 24	 movzx	 edx, BYTE PTR tv283[rsp]
  00178	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv284[rsp]
  0017d	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  00182	89 44 24 34	 mov	 DWORD PTR tv285[rsp], eax
  00186	8b 44 24 34	 mov	 eax, DWORD PTR tv285[rsp]
  0018a	89 44 24 38	 mov	 DWORD PTR $T2[rsp], eax
  0018e	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00193	89 44 24 3c	 mov	 DWORD PTR $T3[rsp], eax
  00197	48 8d 54 24 38	 lea	 rdx, QWORD PTR $T2[rsp]
  0019c	48 8d 4c 24 3c	 lea	 rcx, QWORD PTR $T3[rsp]
  001a1	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  001a6	0f b6 c0	 movzx	 eax, al
  001a9	85 c0		 test	 eax, eax
  001ab	74 0b		 je	 SHORT $LN11@operator

; 841  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 842  : 					_State |= ios_base::badbit;

  001ad	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  001b1	83 c8 04	 or	 eax, 4
  001b4	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax
$LN11@operator:

; 843  : 
; 844  : 		if (_State == ios_base::goodbit

  001b8	e9 3f ff ff ff	 jmp	 $LN2@operator
$LN10@operator:

; 845  : 			&& _Traits::eq_int_type(_Traits::eof(),

  001bd	83 7c 24 20 00	 cmp	 DWORD PTR _State$[rsp], 0
  001c2	75 72		 jne	 SHORT $LN12@operator
  001c4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  001cc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001cf	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  001d3	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  001db	48 03 c8	 add	 rcx, rax
  001de	48 8b c1	 mov	 rax, rcx
  001e1	48 8b c8	 mov	 rcx, rax
  001e4	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  001e9	48 89 44 24 68	 mov	 QWORD PTR tv286[rsp], rax
  001ee	0f b6 94 24 b8
	00 00 00	 movzx	 edx, BYTE PTR _Ch$[rsp]
  001f6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv286[rsp]
  001fb	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  00200	89 44 24 40	 mov	 DWORD PTR tv287[rsp], eax
  00204	8b 44 24 40	 mov	 eax, DWORD PTR tv287[rsp]
  00208	89 44 24 44	 mov	 DWORD PTR $T4[rsp], eax
  0020c	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00211	89 44 24 48	 mov	 DWORD PTR $T5[rsp], eax
  00215	48 8d 54 24 44	 lea	 rdx, QWORD PTR $T4[rsp]
  0021a	48 8d 4c 24 48	 lea	 rcx, QWORD PTR $T5[rsp]
  0021f	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  00224	0f b6 c0	 movzx	 eax, al
  00227	85 c0		 test	 eax, eax
  00229	74 0b		 je	 SHORT $LN12@operator

; 846  : 				_Ostr.rdbuf()->sputc(_Ch)))
; 847  : 			_State |= ios_base::badbit;

  0022b	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  0022f	83 c8 04	 or	 eax, 4
  00232	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax
$LN12@operator:

; 848  : 
; 849  : 		for (; _State == ios_base::goodbit && 0 < _Pad;

  00236	eb 0d		 jmp	 SHORT $LN7@operator
$LN5@operator:

; 850  : 			--_Pad)	// pad on right

  00238	48 8b 44 24 28	 mov	 rax, QWORD PTR _Pad$1[rsp]
  0023d	48 ff c8	 dec	 rax
  00240	48 89 44 24 28	 mov	 QWORD PTR _Pad$1[rsp], rax
$LN7@operator:

; 848  : 
; 849  : 		for (; _State == ios_base::goodbit && 0 < _Pad;

  00245	83 7c 24 20 00	 cmp	 DWORD PTR _State$[rsp], 0
  0024a	0f 85 a9 00 00
	00		 jne	 $LN6@operator
  00250	48 83 7c 24 28
	00		 cmp	 QWORD PTR _Pad$1[rsp], 0
  00256	0f 8e 9d 00 00
	00		 jle	 $LN6@operator

; 851  : 			if (_Traits::eq_int_type(_Traits::eof(),

  0025c	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00264	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00267	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0026b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00273	48 03 c8	 add	 rcx, rax
  00276	48 8b c1	 mov	 rax, rcx
  00279	48 8b c8	 mov	 rcx, rax
  0027c	e8 00 00 00 00	 call	 ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ ; std::basic_ios<char,std::char_traits<char> >::fill
  00281	88 44 24 25	 mov	 BYTE PTR tv288[rsp], al
  00285	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0028d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00290	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00294	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0029c	48 03 c8	 add	 rcx, rax
  0029f	48 8b c1	 mov	 rax, rcx
  002a2	48 8b c8	 mov	 rcx, rax
  002a5	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  002aa	48 89 44 24 70	 mov	 QWORD PTR tv289[rsp], rax
  002af	0f b6 54 24 25	 movzx	 edx, BYTE PTR tv288[rsp]
  002b4	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv289[rsp]
  002b9	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  002be	89 44 24 4c	 mov	 DWORD PTR tv290[rsp], eax
  002c2	8b 44 24 4c	 mov	 eax, DWORD PTR tv290[rsp]
  002c6	89 44 24 50	 mov	 DWORD PTR $T6[rsp], eax
  002ca	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  002cf	89 44 24 54	 mov	 DWORD PTR $T7[rsp], eax
  002d3	48 8d 54 24 50	 lea	 rdx, QWORD PTR $T6[rsp]
  002d8	48 8d 4c 24 54	 lea	 rcx, QWORD PTR $T7[rsp]
  002dd	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  002e2	0f b6 c0	 movzx	 eax, al
  002e5	85 c0		 test	 eax, eax
  002e7	74 0b		 je	 SHORT $LN13@operator

; 852  : 				_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 853  : 				_State |= ios_base::badbit;

  002e9	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  002ed	83 c8 04	 or	 eax, 4
  002f0	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax
$LN13@operator:

; 854  : 		_CATCH_IO_(_Ostr)

  002f4	e9 3f ff ff ff	 jmp	 $LN5@operator
$LN6@operator:
  002f9	eb 00		 jmp	 SHORT $LN8@operator
$LN21@operator:
$LN8@operator:

; 855  : 		}
; 856  : 
; 857  : 	_Ostr.width(0);

  002fb	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00303	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00306	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0030a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00312	48 03 c8	 add	 rcx, rax
  00315	48 8b c1	 mov	 rax, rcx
  00318	33 d2		 xor	 edx, edx
  0031a	48 8b c8	 mov	 rcx, rax
  0031d	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEAA_J_J@Z ; std::ios_base::width

; 858  : 	_Ostr.setstate(_State);

  00322	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0032a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0032d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00331	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00339	48 03 c8	 add	 rcx, rax
  0033c	48 8b c1	 mov	 rax, rcx
  0033f	45 33 c0	 xor	 r8d, r8d
  00342	8b 54 24 20	 mov	 edx, DWORD PTR _State$[rsp]
  00346	48 8b c8	 mov	 rcx, rax
  00349	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 859  : 	return (_Ostr);

  0034e	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00356	48 89 44 24 78	 mov	 QWORD PTR $T8[rsp], rax
  0035b	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR _Ok$[rsp]
  00363	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00368	48 8b 44 24 78	 mov	 rax, QWORD PTR $T8[rsp]

; 860  : 	}

  0036d	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00374	c3		 ret	 0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
tv283 = 36
tv288 = 37
_Pad$1 = 40
tv65 = 48
tv285 = 52
$T2 = 56
$T3 = 60
tv287 = 64
$T4 = 68
$T5 = 72
tv290 = 76
$T6 = 80
$T7 = 84
tv130 = 88
tv284 = 96
tv286 = 104
tv289 = 112
$T8 = 120
_Ok$ = 128
$T9 = 144
_Ostr$ = 176
_Ch$ = 184
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR _Ok$[rbp]
  00010	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
_State$ = 32
tv283 = 36
tv288 = 37
_Pad$1 = 40
tv65 = 48
tv285 = 52
$T2 = 56
$T3 = 60
tv287 = 64
$T4 = 68
$T5 = 72
tv290 = 76
$T6 = 80
$T7 = 84
tv130 = 88
tv284 = 96
tv286 = 104
tv289 = 112
$T8 = 120
_Ok$ = 128
$T9 = 144
_Ostr$ = 176
_Ch$ = 184
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 854  : 		_CATCH_IO_(_Ostr)

  0001b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00020	55		 push	 rbp
  00021	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00025	48 8b ea	 mov	 rbp, rdx
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$0:
  00028	48 8b 85 b0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0002f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00032	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00036	48 8b 8d b0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0003d	48 03 c8	 add	 rcx, rax
  00040	48 8b c1	 mov	 rax, rcx
  00043	41 b0 01	 mov	 r8b, 1
  00046	ba 04 00 00 00	 mov	 edx, 4
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  00053	90		 npad	 1
  00054	48 8d 05 00 00
	00 00		 lea	 rax, $LN21@catch$1
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5d		 pop	 rbp
  00060	c3		 ret	 0
  00061	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
tv283 = 36
tv288 = 37
_Pad$1 = 40
tv65 = 48
tv285 = 52
$T2 = 56
$T3 = 60
tv287 = 64
$T4 = 68
$T5 = 72
tv290 = 76
$T6 = 80
$T7 = 84
tv130 = 88
tv284 = 96
tv286 = 104
tv289 = 112
$T8 = 120
_Ok$ = 128
$T9 = 144
_Ostr$ = 176
_Ch$ = 184
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR _Ok$[rbp]
  00010	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
tv283 = 36
tv288 = 37
_Pad$1 = 40
tv65 = 48
tv285 = 52
$T2 = 56
$T3 = 60
tv287 = 64
$T4 = 68
$T5 = 72
tv290 = 76
$T6 = 80
$T7 = 84
tv130 = 88
tv284 = 96
tv286 = 104
tv289 = 112
$T8 = 120
_Ok$ = 128
$T9 = 144
_Ostr$ = 176
_Ch$ = 184
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 854  : 		_CATCH_IO_(_Ostr)

  0001b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00020	55		 push	 rbp
  00021	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00025	48 8b ea	 mov	 rbp, rdx
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$0:
  00028	48 8b 85 b0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0002f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00032	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00036	48 8b 8d b0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0003d	48 03 c8	 add	 rcx, rax
  00040	48 8b c1	 mov	 rax, rcx
  00043	41 b0 01	 mov	 r8b, 1
  00046	ba 04 00 00 00	 mov	 edx, 4
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  00053	90		 npad	 1
  00054	48 8d 05 00 00
	00 00		 lea	 rax, $LN21@catch$1
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5d		 pop	 rbp
  00060	c3		 ret	 0
  00061	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
_TEXT	SEGMENT
_State$ = 32
tv294 = 36
tv299 = 37
_Pad$ = 40
_Count$ = 48
tv139 = 56
tv296 = 60
$T1 = 64
$T2 = 68
tv301 = 72
$T3 = 76
$T4 = 80
tv137 = 88
tv295 = 96
tv297 = 104
tv298 = 112
tv300 = 120
$T5 = 128
_Ok$ = 136
$T6 = 152
_Ostr$ = 176
_Val$ = 184
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 780  : 	{	// insert NTBS into char stream

$LN25:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  00011	48 c7 84 24 98
	00 00 00 fe ff
	ff ff		 mov	 QWORD PTR $T6[rsp], -2

; 781  : 	typedef char _Elem;
; 782  : 	typedef basic_ostream<_Elem, _Traits> _Myos;
; 783  : 	ios_base::iostate _State = ios_base::goodbit;

  0001d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _State$[rsp], 0

; 784  : 	streamsize _Count = (streamsize)_Traits::length(_Val);	// may overflow

  00025	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR _Val$[rsp]
  0002d	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SA_KPEBD@Z ; std::char_traits<char>::length
  00032	48 89 44 24 30	 mov	 QWORD PTR _Count$[rsp], rax

; 785  : 	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count

  00037	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0003f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00042	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00046	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0004e	48 03 c8	 add	 rcx, rax
  00051	48 8b c1	 mov	 rax, rcx
  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  0005c	48 85 c0	 test	 rax, rax
  0005f	7e 5d		 jle	 SHORT $LN17@operator
  00061	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00069	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006c	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00070	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00078	48 03 c8	 add	 rcx, rax
  0007b	48 8b c1	 mov	 rax, rcx
  0007e	48 8b c8	 mov	 rcx, rax
  00081	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  00086	48 3b 44 24 30	 cmp	 rax, QWORD PTR _Count$[rsp]
  0008b	7e 31		 jle	 SHORT $LN17@operator
  0008d	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00095	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00098	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0009c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  000a4	48 03 c8	 add	 rcx, rax
  000a7	48 8b c1	 mov	 rax, rcx
  000aa	48 8b c8	 mov	 rcx, rax
  000ad	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEBA_JXZ ; std::ios_base::width
  000b2	48 2b 44 24 30	 sub	 rax, QWORD PTR _Count$[rsp]
  000b7	48 89 44 24 58	 mov	 QWORD PTR tv137[rsp], rax
  000bc	eb 09		 jmp	 SHORT $LN18@operator
$LN17@operator:
  000be	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tv137[rsp], 0
$LN18@operator:
  000c7	48 8b 44 24 58	 mov	 rax, QWORD PTR tv137[rsp]
  000cc	48 89 44 24 28	 mov	 QWORD PTR _Pad$[rsp], rax

; 786  : 		? 0 : _Ostr.width() - _Count;
; 787  : 	const typename _Myos::sentry _Ok(_Ostr);

  000d1	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR _Ostr$[rsp]
  000d9	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR _Ok$[rsp]
  000e1	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  000e6	90		 npad	 1

; 788  : 
; 789  : 	if (!_Ok)

  000e7	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR _Ok$[rsp]
  000ef	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  000f4	0f b6 c0	 movzx	 eax, al
  000f7	85 c0		 test	 eax, eax
  000f9	75 10		 jne	 SHORT $LN8@operator

; 790  : 		_State |= ios_base::badbit;

  000fb	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  000ff	83 c8 04	 or	 eax, 4
  00102	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 791  : 	else

  00106	e9 48 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 792  : 		{	// state okay, insert
; 793  : 		_TRY_IO_BEGIN
; 794  : 		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)

  0010b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00113	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00116	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0011a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00122	48 03 c8	 add	 rcx, rax
  00125	48 8b c1	 mov	 rax, rcx
  00128	48 8b c8	 mov	 rcx, rax
  0012b	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  00130	89 44 24 38	 mov	 DWORD PTR tv139[rsp], eax
  00134	8b 44 24 38	 mov	 eax, DWORD PTR tv139[rsp]
  00138	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0013d	83 f8 40	 cmp	 eax, 64			; 00000040H
  00140	0f 84 ba 00 00
	00		 je	 $LN11@operator

; 795  : 			for (; 0 < _Pad; --_Pad)	// pad on left

  00146	eb 0d		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00148	48 8b 44 24 28	 mov	 rax, QWORD PTR _Pad$[rsp]
  0014d	48 ff c8	 dec	 rax
  00150	48 89 44 24 28	 mov	 QWORD PTR _Pad$[rsp], rax
$LN4@operator:
  00155	48 83 7c 24 28
	00		 cmp	 QWORD PTR _Pad$[rsp], 0
  0015b	0f 8e 9f 00 00
	00		 jle	 $LN11@operator

; 796  : 				if (_Traits::eq_int_type(_Traits::eof(),

  00161	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00169	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0016c	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00170	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00178	48 03 c8	 add	 rcx, rax
  0017b	48 8b c1	 mov	 rax, rcx
  0017e	48 8b c8	 mov	 rcx, rax
  00181	e8 00 00 00 00	 call	 ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ ; std::basic_ios<char,std::char_traits<char> >::fill
  00186	88 44 24 24	 mov	 BYTE PTR tv294[rsp], al
  0018a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00192	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00195	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00199	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  001a1	48 03 c8	 add	 rcx, rax
  001a4	48 8b c1	 mov	 rax, rcx
  001a7	48 8b c8	 mov	 rcx, rax
  001aa	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  001af	48 89 44 24 60	 mov	 QWORD PTR tv295[rsp], rax
  001b4	0f b6 54 24 24	 movzx	 edx, BYTE PTR tv294[rsp]
  001b9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv295[rsp]
  001be	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  001c3	89 44 24 3c	 mov	 DWORD PTR tv296[rsp], eax
  001c7	8b 44 24 3c	 mov	 eax, DWORD PTR tv296[rsp]
  001cb	89 44 24 40	 mov	 DWORD PTR $T1[rsp], eax
  001cf	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  001d4	89 44 24 44	 mov	 DWORD PTR $T2[rsp], eax
  001d8	48 8d 54 24 40	 lea	 rdx, QWORD PTR $T1[rsp]
  001dd	48 8d 4c 24 44	 lea	 rcx, QWORD PTR $T2[rsp]
  001e2	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  001e7	0f b6 c0	 movzx	 eax, al
  001ea	85 c0		 test	 eax, eax
  001ec	74 0d		 je	 SHORT $LN12@operator

; 797  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 798  : 					{	// insertion failed, quit
; 799  : 					_State |= ios_base::badbit;

  001ee	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  001f2	83 c8 04	 or	 eax, 4
  001f5	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 800  : 					break;

  001f9	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 801  : 					}
; 802  : 
; 803  : 		if (_State == ios_base::goodbit

  001fb	e9 48 ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 804  : 			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)

  00200	83 7c 24 20 00	 cmp	 DWORD PTR _State$[rsp], 0
  00205	75 5d		 jne	 SHORT $LN13@operator
  00207	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0020f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00212	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00216	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0021e	48 03 c8	 add	 rcx, rax
  00221	48 8b c1	 mov	 rax, rcx
  00224	48 8b c8	 mov	 rcx, rax
  00227	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0022c	48 89 44 24 68	 mov	 QWORD PTR tv297[rsp], rax
  00231	4c 8b 44 24 30	 mov	 r8, QWORD PTR _Count$[rsp]
  00236	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR _Val$[rsp]
  0023e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv297[rsp]
  00243	e8 00 00 00 00	 call	 ?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputn
  00248	48 89 44 24 70	 mov	 QWORD PTR tv298[rsp], rax
  0024d	48 8b 44 24 30	 mov	 rax, QWORD PTR _Count$[rsp]
  00252	48 39 44 24 70	 cmp	 QWORD PTR tv298[rsp], rax
  00257	74 0b		 je	 SHORT $LN13@operator

; 805  : 			_State |= ios_base::badbit;

  00259	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  0025d	83 c8 04	 or	 eax, 4
  00260	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax
$LN13@operator:

; 806  : 
; 807  : 		if (_State == ios_base::goodbit)

  00264	83 7c 24 20 00	 cmp	 DWORD PTR _State$[rsp], 0
  00269	0f 85 ba 00 00
	00		 jne	 $LN14@operator

; 808  : 			for (; 0 < _Pad; --_Pad)	// pad on right

  0026f	eb 0d		 jmp	 SHORT $LN7@operator
$LN5@operator:
  00271	48 8b 44 24 28	 mov	 rax, QWORD PTR _Pad$[rsp]
  00276	48 ff c8	 dec	 rax
  00279	48 89 44 24 28	 mov	 QWORD PTR _Pad$[rsp], rax
$LN7@operator:
  0027e	48 83 7c 24 28
	00		 cmp	 QWORD PTR _Pad$[rsp], 0
  00284	0f 8e 9f 00 00
	00		 jle	 $LN14@operator

; 809  : 				if (_Traits::eq_int_type(_Traits::eof(),

  0028a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00292	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00295	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00299	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  002a1	48 03 c8	 add	 rcx, rax
  002a4	48 8b c1	 mov	 rax, rcx
  002a7	48 8b c8	 mov	 rcx, rax
  002aa	e8 00 00 00 00	 call	 ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ ; std::basic_ios<char,std::char_traits<char> >::fill
  002af	88 44 24 25	 mov	 BYTE PTR tv299[rsp], al
  002b3	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  002bb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002be	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002c2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  002ca	48 03 c8	 add	 rcx, rax
  002cd	48 8b c1	 mov	 rax, rcx
  002d0	48 8b c8	 mov	 rcx, rax
  002d3	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  002d8	48 89 44 24 78	 mov	 QWORD PTR tv300[rsp], rax
  002dd	0f b6 54 24 25	 movzx	 edx, BYTE PTR tv299[rsp]
  002e2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv300[rsp]
  002e7	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  002ec	89 44 24 48	 mov	 DWORD PTR tv301[rsp], eax
  002f0	8b 44 24 48	 mov	 eax, DWORD PTR tv301[rsp]
  002f4	89 44 24 4c	 mov	 DWORD PTR $T3[rsp], eax
  002f8	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  002fd	89 44 24 50	 mov	 DWORD PTR $T4[rsp], eax
  00301	48 8d 54 24 4c	 lea	 rdx, QWORD PTR $T3[rsp]
  00306	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T4[rsp]
  0030b	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  00310	0f b6 c0	 movzx	 eax, al
  00313	85 c0		 test	 eax, eax
  00315	74 0d		 je	 SHORT $LN15@operator

; 810  : 					_Ostr.rdbuf()->sputc(_Ostr.fill())))
; 811  : 					{	// insertion failed, quit
; 812  : 					_State |= ios_base::badbit;

  00317	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  0031b	83 c8 04	 or	 eax, 4
  0031e	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 813  : 					break;

  00322	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 814  : 					}

  00324	e9 48 ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 815  : 		_Ostr.width(0);

  00329	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00331	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00334	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00338	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  00340	48 03 c8	 add	 rcx, rax
  00343	48 8b c1	 mov	 rax, rcx
  00346	33 d2		 xor	 edx, edx
  00348	48 8b c8	 mov	 rcx, rax
  0034b	e8 00 00 00 00	 call	 ?width@ios_base@std@@QEAA_J_J@Z ; std::ios_base::width
  00350	90		 npad	 1
  00351	eb 00		 jmp	 SHORT $LN9@operator
$LN23@operator:
$LN9@operator:

; 816  : 		_CATCH_IO_(_Ostr)
; 817  : 		}
; 818  : 
; 819  : 	_Ostr.setstate(_State);

  00353	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  0035b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0035e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00362	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _Ostr$[rsp]
  0036a	48 03 c8	 add	 rcx, rax
  0036d	48 8b c1	 mov	 rax, rcx
  00370	45 33 c0	 xor	 r8d, r8d
  00373	8b 54 24 20	 mov	 edx, DWORD PTR _State$[rsp]
  00377	48 8b c8	 mov	 rcx, rax
  0037a	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 820  : 	return (_Ostr);

  0037f	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR _Ostr$[rsp]
  00387	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR $T5[rsp], rax
  0038f	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR _Ok$[rsp]
  00397	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0039c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR $T5[rsp]

; 821  : 	}

  003a4	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  003ab	c3		 ret	 0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
tv294 = 36
tv299 = 37
_Pad$ = 40
_Count$ = 48
tv139 = 56
tv296 = 60
$T1 = 64
$T2 = 68
tv301 = 72
$T3 = 76
$T4 = 80
tv137 = 88
tv295 = 96
tv297 = 104
tv298 = 112
tv300 = 120
$T5 = 128
_Ok$ = 136
$T6 = 152
_Ostr$ = 176
_Val$ = 184
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Ok$[rbp]
  00010	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
_State$ = 32
tv294 = 36
tv299 = 37
_Pad$ = 40
_Count$ = 48
tv139 = 56
tv296 = 60
$T1 = 64
$T2 = 68
tv301 = 72
$T3 = 76
$T4 = 80
tv137 = 88
tv295 = 96
tv297 = 104
tv298 = 112
tv300 = 120
$T5 = 128
_Ok$ = 136
$T6 = 152
_Ostr$ = 176
_Val$ = 184
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 816  : 		_CATCH_IO_(_Ostr)

  0001b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00020	55		 push	 rbp
  00021	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00025	48 8b ea	 mov	 rbp, rdx
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  00028	48 8b 85 b0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0002f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00032	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00036	48 8b 8d b0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0003d	48 03 c8	 add	 rcx, rax
  00040	48 8b c1	 mov	 rax, rcx
  00043	41 b0 01	 mov	 r8b, 1
  00046	ba 04 00 00 00	 mov	 edx, 4
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  00053	90		 npad	 1
  00054	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5d		 pop	 rbp
  00060	c3		 ret	 0
  00061	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
tv294 = 36
tv299 = 37
_Pad$ = 40
_Count$ = 48
tv139 = 56
tv296 = 60
$T1 = 64
$T2 = 68
tv301 = 72
$T3 = 76
$T4 = 80
tv137 = 88
tv295 = 96
tv297 = 104
tv298 = 112
tv300 = 120
$T5 = 128
_Ok$ = 136
$T6 = 152
_Ostr$ = 176
_Val$ = 184
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR _Ok$[rbp]
  00010	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
tv294 = 36
tv299 = 37
_Pad$ = 40
_Count$ = 48
tv139 = 56
tv296 = 60
$T1 = 64
$T2 = 68
tv301 = 72
$T3 = 76
$T4 = 80
tv137 = 88
tv295 = 96
tv297 = 104
tv298 = 112
tv300 = 120
$T5 = 128
_Ok$ = 136
$T6 = 152
_Ostr$ = 176
_Val$ = 184
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 816  : 		_CATCH_IO_(_Ostr)

  0001b	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00020	55		 push	 rbp
  00021	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00025	48 8b ea	 mov	 rbp, rdx
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  00028	48 8b 85 b0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0002f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00032	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00036	48 8b 8d b0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0003d	48 03 c8	 add	 rcx, rax
  00040	48 8b c1	 mov	 rax, rcx
  00043	41 b0 01	 mov	 r8b, 1
  00046	ba 04 00 00 00	 mov	 edx, 4
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  00053	90		 npad	 1
  00054	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  0005b	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0005f	5d		 pop	 rbp
  00060	c3		 ret	 0
  00061	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 48
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor', COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 c0 10	 add	 rax, 16
  00012	48 8b c8	 mov	 rcx, rax
  00015	e8 00 00 00 00	 call	 ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
  0001a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001f	48 83 c0 10	 add	 rax, 16
  00023	48 8b c8	 mov	 rcx, rax
  00026	e8 00 00 00 00	 call	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
  0002b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002f	c3		 ret	 0
??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00012	48 83 e8 10	 sub	 rax, 16
  00016	48 8b c8	 mov	 rcx, rax
  00019	e8 00 00 00 00	 call	 ??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  0001e	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  00022	83 e0 01	 and	 eax, 1
  00025	85 c0		 test	 eax, eax
  00027	74 16		 je	 SHORT $LN2@scalar
  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002e	48 83 e8 10	 sub	 rax, 16
  00032	ba 70 00 00 00	 mov	 edx, 112		; 00000070H
  00037	48 8b c8	 mov	 rcx, rax
  0003a	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  0003f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00044	48 83 e8 10	 sub	 rax, 16
  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	c3		 ret	 0
??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ
_TEXT	SEGMENT
$T1 = 32
_Ok$2 = 40
this$ = 80
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::flush, COMDAT

; 574  : 		{	// flush output stream

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 575  : 		if (_Myios::rdbuf() != 0)

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001a	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00023	48 03 c8	 add	 rcx, rax
  00026	48 8b c1	 mov	 rax, rcx
  00029	48 8b c8	 mov	 rcx, rax
  0002c	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00031	48 85 c0	 test	 rax, rax
  00034	74 7f		 je	 SHORT $LN2@flush

; 576  : 			{	// buffer exists, flush it
; 577  : 			const sentry _Ok(*this);

  00036	48 8b 54 24 50	 mov	 rdx, QWORD PTR this$[rsp]
  0003b	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Ok$2[rsp]
  00040	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00045	90		 npad	 1

; 578  : 
; 579  : 			if (_Ok && _Myios::rdbuf()->pubsync() == -1)

  00046	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Ok$2[rsp]
  0004b	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00050	0f b6 c0	 movzx	 eax, al
  00053	85 c0		 test	 eax, eax
  00055	74 54		 je	 SHORT $LN3@flush
  00057	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0005c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005f	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00063	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00068	48 03 c8	 add	 rcx, rax
  0006b	48 8b c1	 mov	 rax, rcx
  0006e	48 8b c8	 mov	 rcx, rax
  00071	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  00076	48 8b c8	 mov	 rcx, rax
  00079	e8 00 00 00 00	 call	 ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
  0007e	83 f8 ff	 cmp	 eax, -1
  00081	75 28		 jne	 SHORT $LN3@flush

; 580  : 				_Myios::setstate(ios_base::badbit);	// sync failed

  00083	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00088	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0008b	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0008f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00094	48 03 c8	 add	 rcx, rax
  00097	48 8b c1	 mov	 rax, rcx
  0009a	45 33 c0	 xor	 r8d, r8d
  0009d	ba 04 00 00 00	 mov	 edx, 4
  000a2	48 8b c8	 mov	 rcx, rax
  000a5	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  000aa	90		 npad	 1
$LN3@flush:

; 581  : 			}

  000ab	48 8d 4c 24 28	 lea	 rcx, QWORD PTR _Ok$2[rsp]
  000b0	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
$LN2@flush:

; 582  : 		return (*this);

  000b5	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]

; 583  : 		}

  000ba	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000be	c3		 ret	 0
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::flush
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
_Ok$2 = 40
this$ = 80
?dtor$0@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::flush'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 4d 28	 lea	 rcx, QWORD PTR _Ok$2[rbp]
  0000d	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::flush'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
_Ok$2 = 40
this$ = 80
?dtor$0@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::flush'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 4d 28	 lea	 rcx, QWORD PTR _Ok$2[rbp]
  0000d	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0??flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::flush'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z
_TEXT	SEGMENT
_State$ = 32
tv156 = 36
$T1 = 40
$T2 = 44
tv65 = 48
$T3 = 56
$T4 = 64
_Ok$ = 72
this$ = 112
_Ch$ = 120
?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::put, COMDAT

; 533  : 		{	// insert a character

$LN13:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  0000d	48 c7 44 24 40
	fe ff ff ff	 mov	 QWORD PTR $T4[rsp], -2

; 534  : 		ios_base::iostate _State = ios_base::goodbit;

  00016	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _State$[rsp], 0

; 535  : 		const sentry _Ok(*this);

  0001e	48 8b 54 24 70	 mov	 rdx, QWORD PTR this$[rsp]
  00023	48 8d 4c 24 48	 lea	 rcx, QWORD PTR _Ok$[rsp]
  00028	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0002d	90		 npad	 1

; 536  : 
; 537  : 		if (!_Ok)

  0002e	48 8d 4c 24 48	 lea	 rcx, QWORD PTR _Ok$[rsp]
  00033	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00038	0f b6 c0	 movzx	 eax, al
  0003b	85 c0		 test	 eax, eax
  0003d	75 0d		 jne	 SHORT $LN2@put

; 538  : 			_State |= ios_base::badbit;

  0003f	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  00043	83 c8 04	 or	 eax, 4
  00046	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax

; 539  : 		else

  0004a	eb 6b		 jmp	 SHORT $LN3@put
$LN2@put:

; 540  : 			{	// state okay, insert character
; 541  : 			_TRY_IO_BEGIN
; 542  : 			if (_Traits::eq_int_type(_Traits::eof(),

  0004c	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  00051	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00054	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00058	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  0005d	48 03 c8	 add	 rcx, rax
  00060	48 8b c1	 mov	 rax, rcx
  00063	48 8b c8	 mov	 rcx, rax
  00066	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0006b	48 89 44 24 30	 mov	 QWORD PTR tv65[rsp], rax
  00070	0f b6 54 24 78	 movzx	 edx, BYTE PTR _Ch$[rsp]
  00075	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv65[rsp]
  0007a	e8 00 00 00 00	 call	 ?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z ; std::basic_streambuf<char,std::char_traits<char> >::sputc
  0007f	89 44 24 24	 mov	 DWORD PTR tv156[rsp], eax
  00083	8b 44 24 24	 mov	 eax, DWORD PTR tv156[rsp]
  00087	89 44 24 28	 mov	 DWORD PTR $T1[rsp], eax
  0008b	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00090	89 44 24 2c	 mov	 DWORD PTR $T2[rsp], eax
  00094	48 8d 54 24 28	 lea	 rdx, QWORD PTR $T1[rsp]
  00099	48 8d 4c 24 2c	 lea	 rcx, QWORD PTR $T2[rsp]
  0009e	e8 00 00 00 00	 call	 ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ; std::char_traits<char>::eq_int_type
  000a3	0f b6 c0	 movzx	 eax, al
  000a6	85 c0		 test	 eax, eax
  000a8	74 0b		 je	 SHORT $LN5@put

; 543  : 				_Myios::rdbuf()->sputc(_Ch)))
; 544  : 				_State |= ios_base::badbit;

  000aa	8b 44 24 20	 mov	 eax, DWORD PTR _State$[rsp]
  000ae	83 c8 04	 or	 eax, 4
  000b1	89 44 24 20	 mov	 DWORD PTR _State$[rsp], eax
$LN5@put:
  000b5	eb 00		 jmp	 SHORT $LN3@put
$LN11@put:
$LN3@put:

; 545  : 			_CATCH_IO_END
; 546  : 			}
; 547  : 
; 548  : 		_Myios::setstate(_State);

  000b7	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  000bc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000bf	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000c3	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  000c8	48 03 c8	 add	 rcx, rax
  000cb	48 8b c1	 mov	 rax, rcx
  000ce	45 33 c0	 xor	 r8d, r8d
  000d1	8b 54 24 20	 mov	 edx, DWORD PTR _State$[rsp]
  000d5	48 8b c8	 mov	 rcx, rax
  000d8	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 549  : 		return (*this);

  000dd	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
  000e2	48 89 44 24 38	 mov	 QWORD PTR $T3[rsp], rax
  000e7	48 8d 4c 24 48	 lea	 rcx, QWORD PTR _Ok$[rsp]
  000ec	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  000f1	48 8b 44 24 38	 mov	 rax, QWORD PTR $T3[rsp]

; 550  : 		}

  000f6	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000fa	c3		 ret	 0
?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::put
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
tv156 = 36
$T1 = 40
$T2 = 44
tv65 = 48
$T3 = 56
$T4 = 64
_Ok$ = 72
this$ = 112
_Ch$ = 120
?dtor$0@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::put'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::put'::`1'::dtor$0
_State$ = 32
tv156 = 36
$T1 = 40
$T2 = 44
tv65 = 48
$T3 = 56
$T4 = 64
_Ok$ = 72
this$ = 112
_Ch$ = 120
?catch$1@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::put'::`1'::catch$1

; 545  : 			_CATCH_IO_END

  00018	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0001d	55		 push	 rbp
  0001e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00022	48 8b ea	 mov	 rbp, rdx
__catch$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z$0:
  00025	48 8b 45 70	 mov	 rax, QWORD PTR this$[rbp]
  00029	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002c	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00030	48 8b 4d 70	 mov	 rcx, QWORD PTR this$[rbp]
  00034	48 03 c8	 add	 rcx, rax
  00037	48 8b c1	 mov	 rax, rcx
  0003a	41 b0 01	 mov	 r8b, 1
  0003d	ba 04 00 00 00	 mov	 edx, 4
  00042	48 8b c8	 mov	 rcx, rax
  00045	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  0004a	90		 npad	 1
  0004b	48 8d 05 00 00
	00 00		 lea	 rax, $LN11@catch$1
  00052	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00056	5d		 pop	 rbp
  00057	c3		 ret	 0
  00058	cc		 int	 3
?catch$1@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::put'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
tv156 = 36
$T1 = 40
$T2 = 44
tv65 = 48
$T3 = 56
$T4 = 64
_Ok$ = 72
this$ = 112
_Ch$ = 120
?dtor$0@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::put'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::put'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_State$ = 32
tv156 = 36
$T1 = 40
$T2 = 44
tv65 = 48
$T3 = 56
$T4 = 64
_Ok$ = 72
this$ = 112
_Ch$ = 120
?catch$1@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::put'::`1'::catch$1

; 545  : 			_CATCH_IO_END

  00018	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0001d	55		 push	 rbp
  0001e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00022	48 8b ea	 mov	 rbp, rdx
__catch$?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z$0:
  00025	48 8b 45 70	 mov	 rax, QWORD PTR this$[rbp]
  00029	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002c	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00030	48 8b 4d 70	 mov	 rcx, QWORD PTR this$[rbp]
  00034	48 03 c8	 add	 rcx, rax
  00037	48 8b c1	 mov	 rax, rcx
  0003a	41 b0 01	 mov	 r8b, 1
  0003d	ba 04 00 00 00	 mov	 edx, 4
  00042	48 8b c8	 mov	 rcx, rax
  00045	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  0004a	90		 npad	 1
  0004b	48 8d 05 00 00
	00 00		 lea	 rax, $LN11@catch$1
  00052	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00056	5d		 pop	 rbp
  00057	c3		 ret	 0
  00058	cc		 int	 3
?catch$1@?0??put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::put'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z
_TEXT	SEGMENT
tv203 = 48
_State$ = 52
tv148 = 56
tv65 = 64
tv200 = 72
tv204 = 80
_Nput_fac$1 = 88
tv205 = 96
$T2 = 104
_Ok$ = 112
$T3 = 128
$T4 = 136
$T5 = 160
$T6 = 176
$T7 = 192
this$ = 240
_Val$ = 248
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT

; 316  : 		{	// insert an unsigned int

$LN15:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	56		 push	 rsi
  0000a	57		 push	 rdi
  0000b	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  00012	48 c7 84 24 80
	00 00 00 fe ff
	ff ff		 mov	 QWORD PTR $T3[rsp], -2

; 317  : 		ios_base::iostate _State = ios_base::goodbit;

  0001e	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR _State$[rsp], 0

; 318  : 		const sentry _Ok(*this);

  00026	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR this$[rsp]
  0002e	48 8d 4c 24 70	 lea	 rcx, QWORD PTR _Ok$[rsp]
  00033	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00038	90		 npad	 1

; 319  : 
; 320  : 		if (_Ok)

  00039	48 8d 4c 24 70	 lea	 rcx, QWORD PTR _Ok$[rsp]
  0003e	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00043	0f b6 c0	 movzx	 eax, al
  00046	85 c0		 test	 eax, eax
  00048	0f 84 61 01 00
	00		 je	 $LN2@operator

; 321  : 			{	// state okay, use facet to insert
; 322  : 			const _Nput& _Nput_fac = _USE(this->getloc(), _Nput);

  0004e	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00056	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00059	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0005d	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00065	48 03 c8	 add	 rcx, rax
  00068	48 8b c1	 mov	 rax, rcx
  0006b	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR $T4[rsp]
  00073	48 8b c8	 mov	 rcx, rax
  00076	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QEBA?AVlocale@2@XZ ; std::ios_base::getloc
  0007b	48 89 44 24 40	 mov	 QWORD PTR tv65[rsp], rax
  00080	48 8b 44 24 40	 mov	 rax, QWORD PTR tv65[rsp]
  00085	48 89 44 24 48	 mov	 QWORD PTR tv200[rsp], rax
  0008a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv200[rsp]
  0008f	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAAEBV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@AEBVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  00094	48 89 44 24 58	 mov	 QWORD PTR _Nput_fac$1[rsp], rax
  00099	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR $T4[rsp]
  000a1	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  000a6	90		 npad	 1

; 323  : 
; 324  : 			_TRY_IO_BEGIN
; 325  : 			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
; 326  : 				_Myios::fill(), (unsigned long)_Val).failed())

  000a7	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR this$[rsp], 0
  000b0	75 0b		 jne	 SHORT $LN6@operator
  000b2	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv148[rsp], 0
  000bb	eb 22		 jmp	 SHORT $LN7@operator
$LN6@operator:
  000bd	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000c5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c8	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000cc	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000d4	48 03 c8	 add	 rcx, rax
  000d7	48 8b c1	 mov	 rax, rcx
  000da	48 89 44 24 38	 mov	 QWORD PTR tv148[rsp], rax
$LN7@operator:
  000df	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000e7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ea	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000ee	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000f6	48 03 c8	 add	 rcx, rax
  000f9	48 8b c1	 mov	 rax, rcx
  000fc	48 8b c8	 mov	 rcx, rax
  000ff	e8 00 00 00 00	 call	 ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ ; std::basic_ios<char,std::char_traits<char> >::fill
  00104	88 44 24 30	 mov	 BYTE PTR tv203[rsp], al
  00108	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00110	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00113	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00117	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0011f	48 03 c8	 add	 rcx, rax
  00122	48 8b c1	 mov	 rax, rcx
  00125	48 8b c8	 mov	 rcx, rax
  00128	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0012d	48 89 44 24 50	 mov	 QWORD PTR tv204[rsp], rax
  00132	48 8b 54 24 50	 mov	 rdx, QWORD PTR tv204[rsp]
  00137	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR $T6[rsp]
  0013f	e8 00 00 00 00	 call	 ??0?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z ; std::ostreambuf_iterator<char,std::char_traits<char> >::ostreambuf_iterator<char,std::char_traits<char> >
  00144	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR $T5[rsp]
  0014c	48 8b f9	 mov	 rdi, rcx
  0014f	48 8b f0	 mov	 rsi, rax
  00152	b9 10 00 00 00	 mov	 ecx, 16
  00157	f3 a4		 rep movsb
  00159	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR _Val$[rsp]
  00160	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00164	0f b6 44 24 30	 movzx	 eax, BYTE PTR tv203[rsp]
  00169	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  0016d	4c 8b 4c 24 38	 mov	 r9, QWORD PTR tv148[rsp]
  00172	4c 8d 84 24 a0
	00 00 00	 lea	 r8, QWORD PTR $T5[rsp]
  0017a	48 8d 94 24 c0
	00 00 00	 lea	 rdx, QWORD PTR $T7[rsp]
  00182	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Nput_fac$1[rsp]
  00187	e8 00 00 00 00	 call	 ?put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@QEBA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AEAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::put
  0018c	48 89 44 24 60	 mov	 QWORD PTR tv205[rsp], rax
  00191	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv205[rsp]
  00196	e8 00 00 00 00	 call	 ?failed@?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::ostreambuf_iterator<char,std::char_traits<char> >::failed
  0019b	0f b6 c0	 movzx	 eax, al
  0019e	85 c0		 test	 eax, eax
  001a0	74 0b		 je	 SHORT $LN4@operator

; 327  : 				_State |= ios_base::badbit;

  001a2	8b 44 24 34	 mov	 eax, DWORD PTR _State$[rsp]
  001a6	83 c8 04	 or	 eax, 4
  001a9	89 44 24 34	 mov	 DWORD PTR _State$[rsp], eax
$LN4@operator:
  001ad	eb 00		 jmp	 SHORT $LN2@operator
$LN13@operator:
$LN2@operator:

; 328  : 			_CATCH_IO_END
; 329  : 			}
; 330  : 
; 331  : 		_Myios::setstate(_State);

  001af	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001b7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001ba	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  001be	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001c6	48 03 c8	 add	 rcx, rax
  001c9	48 8b c1	 mov	 rax, rcx
  001cc	45 33 c0	 xor	 r8d, r8d
  001cf	8b 54 24 34	 mov	 edx, DWORD PTR _State$[rsp]
  001d3	48 8b c8	 mov	 rcx, rax
  001d6	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate

; 332  : 		return (*this);

  001db	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  001e3	48 89 44 24 68	 mov	 QWORD PTR $T2[rsp], rax
  001e8	48 8d 4c 24 70	 lea	 rcx, QWORD PTR _Ok$[rsp]
  001ed	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  001f2	48 8b 44 24 68	 mov	 rax, QWORD PTR $T2[rsp]

; 333  : 		}

  001f7	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  001fe	5f		 pop	 rdi
  001ff	5e		 pop	 rsi
  00200	c3		 ret	 0
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
tv203 = 48
_State$ = 52
tv148 = 56
tv65 = 64
tv200 = 72
tv204 = 80
_Nput_fac$1 = 88
tv205 = 96
$T2 = 104
_Ok$ = 112
$T3 = 128
$T4 = 136
$T5 = 160
$T6 = 176
$T7 = 192
this$ = 240
_Val$ = 248
?dtor$0@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::operator<<'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 4d 70	 lea	 rcx, QWORD PTR _Ok$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::operator<<'::`1'::dtor$0
tv203 = 48
_State$ = 52
tv148 = 56
tv65 = 64
tv200 = 72
tv204 = 80
_Nput_fac$1 = 88
tv205 = 96
$T2 = 104
_Ok$ = 112
$T3 = 128
$T4 = 136
$T5 = 160
$T6 = 176
$T7 = 192
this$ = 240
_Val$ = 248
?dtor$1@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::operator<<'::`1'::dtor$1
  00018	40 55		 push	 rbp
  0001a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001e	48 8b ea	 mov	 rbp, rdx
  00021	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00028	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$1@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::operator<<'::`1'::dtor$1
tv203 = 48
_State$ = 52
tv148 = 56
tv65 = 64
tv200 = 72
tv204 = 80
_Nput_fac$1 = 88
tv205 = 96
$T2 = 104
_Ok$ = 112
$T3 = 128
$T4 = 136
$T5 = 160
$T6 = 176
$T7 = 192
this$ = 240
_Val$ = 248
?catch$2@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::operator<<'::`1'::catch$2

; 328  : 			_CATCH_IO_END

  00033	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00038	55		 push	 rbp
  00039	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0003d	48 8b ea	 mov	 rbp, rdx
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z$0:
  00040	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00047	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004a	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	48 03 c8	 add	 rcx, rax
  00058	48 8b c1	 mov	 rax, rcx
  0005b	41 b0 01	 mov	 r8b, 1
  0005e	ba 04 00 00 00	 mov	 edx, 4
  00063	48 8b c8	 mov	 rcx, rax
  00066	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  0006b	90		 npad	 1
  0006c	48 8d 05 00 00
	00 00		 lea	 rax, $LN13@catch$2
  00073	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
  00079	cc		 int	 3
?catch$2@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::operator<<'::`1'::catch$2
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
tv203 = 48
_State$ = 52
tv148 = 56
tv65 = 64
tv200 = 72
tv204 = 80
_Nput_fac$1 = 88
tv205 = 96
$T2 = 104
_Ok$ = 112
$T3 = 128
$T4 = 136
$T5 = 160
$T6 = 176
$T7 = 192
this$ = 240
_Val$ = 248
?dtor$0@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::operator<<'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 4d 70	 lea	 rcx, QWORD PTR _Ok$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::operator<<'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
tv203 = 48
_State$ = 52
tv148 = 56
tv65 = 64
tv200 = 72
tv204 = 80
_Nput_fac$1 = 88
tv205 = 96
$T2 = 104
_Ok$ = 112
$T3 = 128
$T4 = 136
$T5 = 160
$T6 = 176
$T7 = 192
this$ = 240
_Val$ = 248
?dtor$1@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::operator<<'::`1'::dtor$1
  00018	40 55		 push	 rbp
  0001a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001e	48 8b ea	 mov	 rbp, rdx
  00021	48 8d 8d 88 00
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00028	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$1@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::operator<<'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
tv203 = 48
_State$ = 52
tv148 = 56
tv65 = 64
tv200 = 72
tv204 = 80
_Nput_fac$1 = 88
tv205 = 96
$T2 = 104
_Ok$ = 112
$T3 = 128
$T4 = 136
$T5 = 160
$T6 = 176
$T7 = 192
this$ = 240
_Val$ = 248
?catch$2@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::operator<<'::`1'::catch$2

; 328  : 			_CATCH_IO_END

  00033	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00038	55		 push	 rbp
  00039	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0003d	48 8b ea	 mov	 rbp, rdx
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z$0:
  00040	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00047	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004a	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0004e	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	48 03 c8	 add	 rcx, rax
  00058	48 8b c1	 mov	 rax, rcx
  0005b	41 b0 01	 mov	 r8b, 1
  0005e	ba 04 00 00 00	 mov	 edx, 4
  00063	48 8b c8	 mov	 rcx, rax
  00066	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  0006b	90		 npad	 1
  0006c	48 8d 05 00 00
	00 00		 lea	 rax, $LN13@catch$2
  00073	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00077	5d		 pop	 rbp
  00078	c3		 ret	 0
  00079	cc		 int	 3
?catch$2@?0???6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@I@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::operator<<'::`1'::catch$2
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
_TEXT	SEGMENT
this$ = 48
_Pfn$ = 56
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT

; 197  : 		{	// call basic_ostream manipulator

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 198  : 		_DEBUG_POINTER(_Pfn);
; 199  : 		return ((*_Pfn)(*this));

  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00013	ff 54 24 38	 call	 QWORD PTR _Pfn$[rsp]

; 200  : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
_TEXT	SEGMENT
tv153 = 32
tv154 = 36
tv156 = 40
tv155 = 48
$T1 = 56
this$ = 80
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Osfx, COMDAT

; 165  : 		{	// perform any wrapup

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00009	48 c7 44 24 38
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 166  : 		_TRY_BEGIN
; 167  : 		if (this->good() && this->flags() & ios_base::unitbuf)

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001a	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00023	48 03 c8	 add	 rcx, rax
  00026	48 8b c1	 mov	 rax, rcx
  00029	48 8b c8	 mov	 rcx, rax
  0002c	e8 00 00 00 00	 call	 ?good@ios_base@std@@QEBA_NXZ ; std::ios_base::good
  00031	88 44 24 20	 mov	 BYTE PTR tv153[rsp], al
  00035	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv153[rsp]
  0003a	85 c0		 test	 eax, eax
  0003c	0f 84 8f 00 00
	00		 je	 $LN3@Osfx
  00042	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00047	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004a	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0004e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00053	48 03 c8	 add	 rcx, rax
  00056	48 8b c1	 mov	 rax, rcx
  00059	48 8b c8	 mov	 rcx, rax
  0005c	e8 00 00 00 00	 call	 ?flags@ios_base@std@@QEBAHXZ ; std::ios_base::flags
  00061	89 44 24 24	 mov	 DWORD PTR tv154[rsp], eax
  00065	8b 44 24 24	 mov	 eax, DWORD PTR tv154[rsp]
  00069	83 e0 02	 and	 eax, 2
  0006c	85 c0		 test	 eax, eax
  0006e	74 61		 je	 SHORT $LN3@Osfx

; 168  : 			if (_Myios::rdbuf()->pubsync() == -1)	// flush stream as needed

  00070	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00075	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00078	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0007c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00081	48 03 c8	 add	 rcx, rax
  00084	48 8b c1	 mov	 rax, rcx
  00087	48 8b c8	 mov	 rcx, rax
  0008a	e8 00 00 00 00	 call	 ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ; std::basic_ios<char,std::char_traits<char> >::rdbuf
  0008f	48 89 44 24 30	 mov	 QWORD PTR tv155[rsp], rax
  00094	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv155[rsp]
  00099	e8 00 00 00 00	 call	 ?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ ; std::basic_streambuf<char,std::char_traits<char> >::pubsync
  0009e	89 44 24 28	 mov	 DWORD PTR tv156[rsp], eax
  000a2	83 7c 24 28 ff	 cmp	 DWORD PTR tv156[rsp], -1
  000a7	75 28		 jne	 SHORT $LN3@Osfx

; 169  : 				_Myios::setstate(ios_base::badbit);

  000a9	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000ae	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000b1	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000b5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000ba	48 03 c8	 add	 rcx, rax
  000bd	48 8b c1	 mov	 rax, rcx
  000c0	45 33 c0	 xor	 r8d, r8d
  000c3	ba 04 00 00 00	 mov	 edx, 4
  000c8	48 8b c8	 mov	 rcx, rax
  000cb	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  000d0	90		 npad	 1
$LN3@Osfx:
  000d1	eb 00		 jmp	 SHORT $LN8@Osfx
$LN9@Osfx:
$LN8@Osfx:

; 170  : 		_CATCH_ALL
; 171  : 		_CATCH_END
; 172  : 		}

  000d3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d7	c3		 ret	 0
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
tv153 = 32
tv154 = 36
tv156 = 40
tv155 = 48
$T1 = 56
this$ = 80
?catch$0@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::_Osfx'::`1'::catch$0

; 170  : 		_CATCH_ALL

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ$0:

; 170  : 		_CATCH_ALL
; 171  : 		_CATCH_END

  0000d	48 8d 05 00 00
	00 00		 lea	 rax, $LN9@catch$0
  00014	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00018	5d		 pop	 rbp
  00019	c3		 ret	 0
  0001a	cc		 int	 3
?catch$0@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::_Osfx'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
tv153 = 32
tv154 = 36
tv156 = 40
tv155 = 48
$T1 = 56
this$ = 80
?catch$0@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::_Osfx'::`1'::catch$0

; 170  : 		_CATCH_ALL

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ$0:

; 171  : 		_CATCH_END

  0000d	48 8d 05 00 00
	00 00		 lea	 rax, $LN9@catch$0
  00014	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00018	5d		 pop	 rbp
  00019	c3		 ret	 0
  0001a	cc		 int	 3
?catch$0@?0??_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::_Osfx'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >, COMDAT

; 88   : 		{	// destroy the object

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8b 40 f0	 mov	 rax, QWORD PTR [rax-16]
  0000e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00012	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  0001e	48 89 54 01 f0	 mov	 QWORD PTR [rcx+rax-16], rdx
  00023	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00028	48 8b 40 f0	 mov	 rax, QWORD PTR [rax-16]
  0002c	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00030	48 83 e8 10	 sub	 rax, 16
  00034	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00039	48 8b 49 f0	 mov	 rcx, QWORD PTR [rcx-16]
  0003d	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  00041	48 8b 54 24 08	 mov	 rdx, QWORD PTR this$[rsp]
  00046	89 44 0a ec	 mov	 DWORD PTR [rdx+rcx-20], eax

; 89   : 		}

  0004a	c3		 ret	 0
??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::~basic_ostream<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ostream
;	COMDAT ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
_Strbuf$ = 72
_Isstd$ = 80
$initVBases$ = 88
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >, COMDAT

; 50   : 	explicit __CLR_OR_THIS_CALL basic_ostream(

$LN6:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00018	48 c7 44 24 28
	fe ff ff ff	 mov	 QWORD PTR $T2[rsp], -2
  00021	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 51   : 		basic_streambuf<_Elem, _Traits> *_Strbuf,
; 52   : 
; 53   : 		bool _Isstd = false)
; 54   : 		{	// construct from a stream buffer pointer

  00029	83 7c 24 58 00	 cmp	 DWORD PTR $initVBases$[rsp], 0
  0002e	74 2c		 je	 SHORT $LN2@basic_ostr
  00030	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_8?$basic_ostream@DU?$char_traits@D@std@@@std@@7B@
  0003c	48 89 08	 mov	 QWORD PTR [rax], rcx
  0003f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00044	48 83 c0 10	 add	 rax, 16
  00048	48 8b c8	 mov	 rcx, rax
  0004b	e8 00 00 00 00	 call	 ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IEAA@XZ ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
  00050	90		 npad	 1
  00051	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  00055	83 c8 01	 or	 eax, 1
  00058	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
$LN2@basic_ostr:
  0005c	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00061	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00064	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00068	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_7?$basic_ostream@DU?$char_traits@D@std@@@std@@6B@
  00074	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
  00078	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0007d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00080	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00084	48 83 e8 10	 sub	 rax, 16
  00088	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0008d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00090	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  00094	48 8b 54 24 40	 mov	 rdx, QWORD PTR this$[rsp]
  00099	89 44 0a fc	 mov	 DWORD PTR [rdx+rcx-4], eax

; 55   : 		_Myios::init(_Strbuf, _Isstd);

  0009d	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000a2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a5	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000a9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000ae	48 03 c8	 add	 rcx, rax
  000b1	48 8b c1	 mov	 rax, rcx
  000b4	44 0f b6 44 24
	50		 movzx	 r8d, BYTE PTR _Isstd$[rsp]
  000ba	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Strbuf$[rsp]
  000bf	48 8b c8	 mov	 rcx, rax
  000c2	e8 00 00 00 00	 call	 ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IEAAXPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ; std::basic_ios<char,std::char_traits<char> >::init
  000c7	90		 npad	 1

; 56   : 		}

  000c8	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000cd	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d1	c3		 ret	 0
??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
_Strbuf$ = 72
_Isstd$ = 80
$initVBases$ = 88
?dtor$0@?0???0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	8b 45 20	 mov	 eax, DWORD PTR $T1[rbp]
  0000c	83 e0 01	 and	 eax, 1
  0000f	85 c0		 test	 eax, eax
  00011	74 11		 je	 SHORT $LN5@dtor$0
  00013	83 65 20 fe	 and	 DWORD PTR $T1[rbp], -2
  00017	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0001b	48 83 c1 10	 add	 rcx, 16
  0001f	e8 00 00 00 00	 call	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@dtor$0:
  00024	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
?dtor$0@?0???0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
this$ = 64
_Strbuf$ = 72
_Isstd$ = 80
$initVBases$ = 88
?dtor$0@?0???0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	8b 45 20	 mov	 eax, DWORD PTR $T1[rbp]
  0000c	83 e0 01	 and	 eax, 1
  0000f	85 c0		 test	 eax, eax
  00011	74 11		 je	 SHORT $LN5@dtor$0
  00013	83 65 20 fe	 and	 DWORD PTR $T1[rbp], -2
  00017	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0001b	48 83 c1 10	 add	 rcx, 16
  0001f	e8 00 00 00 00	 call	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
$LN5@dtor$0:
  00024	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
?dtor$0@?0???0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::basic_ostream<char,std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z PROC ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IEAA@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >, COMDAT

; 183  : 	__CLR_OR_THIS_CALL basic_ios()

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 184  : 		{	// default constructor, do nothing

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??0ios_base@std@@IEAA@XZ ; std::ios_base::ios_base
  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  0001f	48 89 08	 mov	 QWORD PTR [rax], rcx

; 185  : 		}

  00022	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
??0?$basic_ios@DU?$char_traits@D@std@@@std@@IEAA@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::basic_ios<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IEAAXPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
_TEXT	SEGMENT
this$ = 48
_Strbuf$ = 56
_Isstd$ = 64
?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IEAAXPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::init, COMDAT

; 170  : 		{	// initialize with stream buffer pointer

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 171  : 		_Init();	// initialize ios_base

  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ?_Init@ios_base@std@@IEAAXXZ ; std::ios_base::_Init

; 172  : 		_Mystrbuf = _Strbuf;

  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Strbuf$[rsp]
  00027	48 89 48 48	 mov	 QWORD PTR [rax+72], rcx

; 173  : 		_Tiestr = 0;

  0002b	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00030	48 c7 40 50 00
	00 00 00	 mov	 QWORD PTR [rax+80], 0

; 174  : 		_Fillch = widen(' ');

  00038	b2 20		 mov	 dl, 32			; 00000020H
  0003a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0003f	e8 00 00 00 00	 call	 ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z ; std::basic_ios<char,std::char_traits<char> >::widen
  00044	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00049	88 41 58	 mov	 BYTE PTR [rcx+88], al

; 175  : 
; 176  : 		if (_Mystrbuf == 0)

  0004c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00051	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  00056	75 12		 jne	 SHORT $LN2@init

; 177  : 			setstate(badbit);

  00058	45 33 c0	 xor	 r8d, r8d
  0005b	ba 04 00 00 00	 mov	 edx, 4
  00060	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00065	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
$LN2@init:

; 178  : 
; 179  : 		if (_Isstd)

  0006a	0f b6 44 24 40	 movzx	 eax, BYTE PTR _Isstd$[rsp]
  0006f	85 c0		 test	 eax, eax
  00071	74 0a		 je	 SHORT $LN3@init

; 180  : 			_Addstd(this);	// special handling for standard streams

  00073	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00078	e8 00 00 00 00	 call	 ?_Addstd@ios_base@std@@SAXPEAV12@@Z ; std::ios_base::_Addstd
$LN3@init:

; 181  : 		}

  0007d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00081	c3		 ret	 0
?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IEAAXPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z
_TEXT	SEGMENT
tv80 = 32
tv79 = 40
_Ctype_fac$ = 48
$T1 = 56
$T2 = 64
this$ = 96
_Byte$ = 104
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z PROC ; std::basic_ios<char,std::char_traits<char> >::widen, COMDAT

; 130  : 		{	// convert _Byte to character using imbued locale

$LN4:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  0000d	48 c7 44 24 38
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 131  : 		const _Ctype& _Ctype_fac = _USE(getloc(), _Ctype);

  00016	48 8d 54 24 40	 lea	 rdx, QWORD PTR $T2[rsp]
  0001b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00020	e8 00 00 00 00	 call	 ?getloc@ios_base@std@@QEBA?AVlocale@2@XZ ; std::ios_base::getloc
  00025	48 89 44 24 20	 mov	 QWORD PTR tv80[rsp], rax
  0002a	48 8b 44 24 20	 mov	 rax, QWORD PTR tv80[rsp]
  0002f	48 89 44 24 28	 mov	 QWORD PTR tv79[rsp], rax
  00034	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv79[rsp]
  00039	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  0003e	48 89 44 24 30	 mov	 QWORD PTR _Ctype_fac$[rsp], rax
  00043	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T2[rsp]
  00048	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale

; 132  : 		return (_Ctype_fac.widen(_Byte));

  0004d	0f b6 54 24 68	 movzx	 edx, BYTE PTR _Byte$[rsp]
  00052	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Ctype_fac$[rsp]
  00057	e8 00 00 00 00	 call	 ?widen@?$ctype@D@std@@QEBADD@Z ; std::ctype<char>::widen

; 133  : 		}

  0005c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00060	c3		 ret	 0
?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::widen
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
tv80 = 32
tv79 = 40
_Ctype_fac$ = 48
$T1 = 56
$T2 = 64
this$ = 96
_Byte$ = 104
?dtor$0@?0??widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z@4HA PROC ; `std::basic_ios<char,std::char_traits<char> >::widen'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 4d 40	 lea	 rcx, QWORD PTR $T2[rbp]
  0000d	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0??widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z@4HA ENDP ; `std::basic_ios<char,std::char_traits<char> >::widen'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
tv80 = 32
tv79 = 40
_Ctype_fac$ = 48
$T1 = 56
$T2 = 64
this$ = 96
_Byte$ = 104
?dtor$0@?0??widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z@4HA PROC ; `std::basic_ios<char,std::char_traits<char> >::widen'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 4d 40	 lea	 rcx, QWORD PTR $T2[rbp]
  0000d	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0??widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z@4HA ENDP ; `std::basic_ios<char,std::char_traits<char> >::widen'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
_TEXT	SEGMENT
this$ = 8
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ PROC ; std::basic_ios<char,std::char_traits<char> >::fill, COMDAT

; 112  : 		{	// return fill character

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 113  : 		return (_Fillch);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	0f b6 40 58	 movzx	 eax, BYTE PTR [rax+88]

; 114  : 		}

  0000e	c3		 ret	 0
?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ ENDP ; std::basic_ios<char,std::char_traits<char> >::fill
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::rdbuf, COMDAT

; 91   : 		{	// return stream buffer pointer

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 92   : 		return (_Mystrbuf);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]

; 93   : 		}

  0000e	c3		 ret	 0
?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::rdbuf
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::tie, COMDAT

; 79   : 		{	// return tie pointer

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 80   : 		return (_Tiestr);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]

; 81   : 		}

  0000e	c3		 ret	 0
?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::tie
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
_TEXT	SEGMENT
this$ = 48
_State$ = 56
_Reraise$ = 64
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::setstate, COMDAT

; 58   : 		{	// merge _State into state, possibly reraise exception

$LN4:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 59   : 		if (_State != goodbit)

  00012	83 7c 24 38 00	 cmp	 DWORD PTR _State$[rsp], 0
  00017	74 20		 je	 SHORT $LN2@setstate

; 60   : 			clear((iostate)((int)rdstate() | (int)_State), _Reraise);

  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001e	e8 00 00 00 00	 call	 ?rdstate@ios_base@std@@QEBAHXZ ; std::ios_base::rdstate
  00023	0b 44 24 38	 or	 eax, DWORD PTR _State$[rsp]
  00027	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR _Reraise$[rsp]
  0002d	8b d0		 mov	 edx, eax
  0002f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00034	e8 00 00 00 00	 call	 ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::clear
$LN2@setstate:

; 61   : 		}

  00039	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003d	c3		 ret	 0
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::setstate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
_TEXT	SEGMENT
tv73 = 32
this$ = 64
_State$ = 72
_Reraise$ = 80
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::clear, COMDAT

; 44   : 		{	// set state, possibly reraise exception

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 45   : 		ios_base::clear((iostate)(_Mystrbuf == 0

  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  0001c	75 0d		 jne	 SHORT $LN3@clear
  0001e	8b 44 24 48	 mov	 eax, DWORD PTR _State$[rsp]
  00022	83 c8 04	 or	 eax, 4
  00025	89 44 24 20	 mov	 DWORD PTR tv73[rsp], eax
  00029	eb 08		 jmp	 SHORT $LN4@clear
$LN3@clear:
  0002b	8b 44 24 48	 mov	 eax, DWORD PTR _State$[rsp]
  0002f	89 44 24 20	 mov	 DWORD PTR tv73[rsp], eax
$LN4@clear:
  00033	44 0f b6 44 24
	50		 movzx	 r8d, BYTE PTR _Reraise$[rsp]
  00039	8b 54 24 20	 mov	 edx, DWORD PTR tv73[rsp]
  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00042	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QEAAXH_N@Z ; std::ios_base::clear

; 46   : 			? (int)_State | (int)badbit : (int)_State), _Reraise);
; 47   : 		}

  00047	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004b	c3		 ret	 0
?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\ios
;	COMDAT ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ PROC ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >, COMDAT

; 39   : 		{	// destroy the object

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$basic_ios@DU?$char_traits@D@std@@@std@@6B@
  00015	48 89 08	 mov	 QWORD PTR [rax], rcx

; 40   : 		}

  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ??1ios_base@std@@UEAA@XZ ; std::ios_base::~ios_base
  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ ENDP ; std::basic_ios<char,std::char_traits<char> >::~basic_ios<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GRtAudioError@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_GRtAudioError@@UEAAPEAXI@Z PROC			; RtAudioError::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1RtAudioError@@UEAA@XZ
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_GRtAudioError@@UEAAPEAXI@Z ENDP			; RtAudioError::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0RtAudioError@@QEAA@AEBV0@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0RtAudioError@@QEAA@AEBV0@@Z PROC			; RtAudioError::RtAudioError, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ??0runtime_error@std@@QEAA@AEBV01@@Z
  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7RtAudioError@@6B@
  00029	48 89 08	 mov	 QWORD PTR [rax], rcx
  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00031	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __that$[rsp]
  00036	8b 49 18	 mov	 ecx, DWORD PTR [rcx+24]
  00039	89 48 18	 mov	 DWORD PTR [rax+24], ecx
  0003c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	c3		 ret	 0
??0RtAudioError@@QEAA@AEBV0@@Z ENDP			; RtAudioError::RtAudioError
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1RtAudioError@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1RtAudioError@@UEAA@XZ PROC				; RtAudioError::~RtAudioError, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??1runtime_error@std@@UEAA@XZ
  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
??1RtAudioError@@UEAA@XZ ENDP				; RtAudioError::~RtAudioError
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.h
;	COMDAT ?getMessage@RtAudioError@@UEBA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
?getMessage@RtAudioError@@UEBA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; RtAudioError::getMessage, COMDAT

; 245  :     { return std::string(what()); }

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0
  00016	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00023	ff 50 08	 call	 QWORD PTR [rax+8]
  00026	48 8b d0	 mov	 rdx, rax
  00029	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0002e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00033	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  00037	83 c8 01	 or	 eax, 1
  0003a	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  0003e	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
  00043	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00047	c3		 ret	 0
?getMessage@RtAudioError@@UEBA?BV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; RtAudioError::getMessage
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.h
;	COMDAT ?getType@RtAudioError@@UEBAAEBW4Type@1@XZ
_TEXT	SEGMENT
this$ = 8
?getType@RtAudioError@@UEBAAEBW4Type@1@XZ PROC		; RtAudioError::getType, COMDAT

; 241  :   virtual const Type& getType(void) const { return type_; }

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 83 c0 18	 add	 rax, 24
  0000e	c3		 ret	 0
?getType@RtAudioError@@UEBAAEBW4Type@1@XZ ENDP		; RtAudioError::getType
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.h
;	COMDAT ?printMessage@RtAudioError@@UEBAXXZ
_TEXT	SEGMENT
tv74 = 32
this$ = 64
?printMessage@RtAudioError@@UEBAXXZ PROC		; RtAudioError::printMessage, COMDAT

; 238  :     { std::cerr << '\n' << what() << "\n\n"; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00016	ff 50 08	 call	 QWORD PTR [rax+8]
  00019	48 89 44 24 20	 mov	 QWORD PTR tv74[rsp], rax
  0001e	b2 0a		 mov	 dl, 10
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cerr
  00027	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  0002c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv74[rsp]
  00031	48 8b d1	 mov	 rdx, rcx
  00034	48 8b c8	 mov	 rcx, rax
  00037	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02PHMGELLB@?6?6?$AA@
  00043	48 8b c8	 mov	 rcx, rax
  00046	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
?printMessage@RtAudioError@@UEBAXXZ ENDP		; RtAudioError::printMessage
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\rtaudiojs\lib\rtaudio\rtaudio.h
;	COMDAT ??0RtAudioError@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Type@0@@Z
_TEXT	SEGMENT
this$ = 48
message$ = 56
type$ = 64
??0RtAudioError@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Type@0@@Z PROC ; RtAudioError::RtAudioError, COMDAT

; 232  :   RtAudioError( const std::string& message,

$LN4:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 233  :                 Type type = RtAudioError::UNSPECIFIED )
; 234  :     : std::runtime_error(message), type_(type) {}

  00013	48 8b 54 24 38	 mov	 rdx, QWORD PTR message$[rsp]
  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ??0runtime_error@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  00022	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7RtAudioError@@6B@
  0002e	48 89 08	 mov	 QWORD PTR [rax], rcx
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	8b 4c 24 40	 mov	 ecx, DWORD PTR type$[rsp]
  0003a	89 48 18	 mov	 DWORD PTR [rax+24], ecx
  0003d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00042	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00046	c3		 ret	 0
??0RtAudioError@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@W4Type@0@@Z ENDP ; RtAudioError::RtAudioError
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gios_base@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gios_base@std@@UEAAPEAXI@Z PROC			; std::ios_base::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1ios_base@std@@UEAA@XZ ; std::ios_base::~ios_base
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_Gios_base@std@@UEAAPEAXI@Z ENDP			; std::ios_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ?_Init@ios_base@std@@IEAAXXZ
_TEXT	SEGMENT
$T1 = 32
tv83 = 40
this$ = 64
?_Init@ios_base@std@@IEAAXXZ PROC			; std::ios_base::_Init, COMDAT

; 538  : 		{	// initialize a new ios_base

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 539  : 		_Ploc = 0;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0

; 540  : 		_Stdstr = 0;

  00016	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0001b	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 541  : 		_Except = goodbit;

  00023	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00028	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [rax+20], 0

; 542  : 		_Fmtfl = (fmtflags)(skipws | dec);

  0002f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00034	c7 40 18 01 02
	00 00		 mov	 DWORD PTR [rax+24], 513	; 00000201H

; 543  : 		_Prec = 6;

  0003b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00040	48 c7 40 20 06
	00 00 00	 mov	 QWORD PTR [rax+32], 6

; 544  : 		_Wide = 0;

  00048	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0004d	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0

; 545  : 		_Arr = 0;

  00055	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0005a	48 c7 40 30 00
	00 00 00	 mov	 QWORD PTR [rax+48], 0

; 546  : 		_Calls = 0;

  00062	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00067	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 547  : 		clear(goodbit);

  0006f	33 d2		 xor	 edx, edx
  00071	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00076	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QEAAXH@Z ; std::ios_base::clear

; 548  : 		_Ploc = new locale;

  0007b	b9 10 00 00 00	 mov	 ecx, 16
  00080	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00085	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  0008a	48 83 7c 24 20
	00		 cmp	 QWORD PTR $T1[rsp], 0
  00090	74 11		 je	 SHORT $LN3@Init
  00092	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  00097	e8 00 00 00 00	 call	 ??0locale@std@@QEAA@XZ	; std::locale::locale
  0009c	48 89 44 24 28	 mov	 QWORD PTR tv83[rsp], rax
  000a1	eb 09		 jmp	 SHORT $LN4@Init
$LN3@Init:
  000a3	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv83[rsp], 0
$LN4@Init:
  000ac	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  000b1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv83[rsp]
  000b6	48 89 48 40	 mov	 QWORD PTR [rax+64], rcx

; 549  : 		}

  000ba	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000be	c3		 ret	 0
?_Init@ios_base@std@@IEAAXXZ ENDP			; std::ios_base::_Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ??0ios_base@std@@IEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0ios_base@std@@IEAA@XZ PROC				; std::ios_base::ios_base, COMDAT

; 533  : 	__CLR_OR_THIS_CALL ios_base()

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 534  : 		{	// default constructor

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7ios_base@std@@6B@
  00011	48 89 08	 mov	 QWORD PTR [rax], rcx

; 535  : 		}

  00014	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00019	c3		 ret	 0
??0ios_base@std@@IEAA@XZ ENDP				; std::ios_base::ios_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ??1ios_base@std@@UEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1ios_base@std@@UEAA@XZ PROC				; std::ios_base::~ios_base, COMDAT

; 523  : 		{	// destroy the object

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7ios_base@std@@6B@
  0001e	48 89 08	 mov	 QWORD PTR [rax], rcx

; 524  : 		_Ios_base_dtor(this);

  00021	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00026	e8 00 00 00 00	 call	 ?_Ios_base_dtor@ios_base@std@@CAXPEAV12@@Z ; std::ios_base::_Ios_base_dtor
  0002b	90		 npad	 1

; 525  : 		}

  0002c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00030	c3		 ret	 0
??1ios_base@std@@UEAA@XZ ENDP				; std::ios_base::~ios_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ?getloc@ios_base@std@@QEBA?AVlocale@2@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
?getloc@ios_base@std@@QEBA?AVlocale@2@XZ PROC		; std::ios_base::getloc, COMDAT

; 434  : 		{	// get locale

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 435  : 		return (*_Ploc);

  00016	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0001b	48 8b 50 40	 mov	 rdx, QWORD PTR [rax+64]
  0001f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00024	e8 00 00 00 00	 call	 ??0locale@std@@QEAA@AEBV01@@Z ; std::locale::locale
  00029	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  0002d	83 c8 01	 or	 eax, 1
  00030	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  00034	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 436  : 		}

  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
?getloc@ios_base@std@@QEBA?AVlocale@2@XZ ENDP		; std::ios_base::getloc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ?width@ios_base@std@@QEAA_J_J@Z
_TEXT	SEGMENT
_Oldwidth$ = 0
this$ = 32
_Newwidth$ = 40
?width@ios_base@std@@QEAA_J_J@Z PROC			; std::ios_base::width, COMDAT

; 427  : 		{	// set width to argument

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 428  : 		streamsize _Oldwidth = _Wide;

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00017	48 89 04 24	 mov	 QWORD PTR _Oldwidth$[rsp], rax

; 429  : 		_Wide = _Newwidth;

  0001b	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00020	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Newwidth$[rsp]
  00025	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 430  : 		return (_Oldwidth);

  00029	48 8b 04 24	 mov	 rax, QWORD PTR _Oldwidth$[rsp]

; 431  : 		}

  0002d	48 83 c4 18	 add	 rsp, 24
  00031	c3		 ret	 0
?width@ios_base@std@@QEAA_J_J@Z ENDP			; std::ios_base::width
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ?width@ios_base@std@@QEBA_JXZ
_TEXT	SEGMENT
this$ = 8
?width@ios_base@std@@QEBA_JXZ PROC			; std::ios_base::width, COMDAT

; 422  : 		{	// return width

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 423  : 		return (_Wide);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]

; 424  : 		}

  0000e	c3		 ret	 0
?width@ios_base@std@@QEBA_JXZ ENDP			; std::ios_base::width
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ?precision@ios_base@std@@QEBA_JXZ
_TEXT	SEGMENT
this$ = 8
?precision@ios_base@std@@QEBA_JXZ PROC			; std::ios_base::precision, COMDAT

; 410  : 		{	// return precision

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 411  : 		return (_Prec);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]

; 412  : 		}

  0000e	c3		 ret	 0
?precision@ios_base@std@@QEBA_JXZ ENDP			; std::ios_base::precision
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ?flags@ios_base@std@@QEBAHXZ
_TEXT	SEGMENT
this$ = 8
?flags@ios_base@std@@QEBAHXZ PROC			; std::ios_base::flags, COMDAT

; 377  : 		{	// return format flags

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 378  : 		return (_Fmtfl);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	8b 40 18	 mov	 eax, DWORD PTR [rax+24]

; 379  : 		}

  0000d	c3		 ret	 0
?flags@ios_base@std@@QEBAHXZ ENDP			; std::ios_base::flags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ?good@ios_base@std@@QEBA_NXZ
_TEXT	SEGMENT
tv67 = 32
this$ = 64
?good@ios_base@std@@QEBA_NXZ PROC			; std::ios_base::good, COMDAT

; 338  : 		{	// test if no state bits are set

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 339  : 		return (rdstate() == goodbit);

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?rdstate@ios_base@std@@QEBAHXZ ; std::ios_base::rdstate
  00013	85 c0		 test	 eax, eax
  00015	75 0a		 jne	 SHORT $LN3@good
  00017	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv67[rsp], 1
  0001f	eb 08		 jmp	 SHORT $LN4@good
$LN3@good:
  00021	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv67[rsp], 0
$LN4@good:
  00029	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv67[rsp]

; 340  : 		}

  0002e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00032	c3		 ret	 0
?good@ios_base@std@@QEBA_NXZ ENDP			; std::ios_base::good
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ?rdstate@ios_base@std@@QEBAHXZ
_TEXT	SEGMENT
this$ = 8
?rdstate@ios_base@std@@QEBAHXZ PROC			; std::ios_base::rdstate, COMDAT

; 314  : 		{	// return stream state

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 315  : 		return (_Mystate);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	8b 40 10	 mov	 eax, DWORD PTR [rax+16]

; 316  : 		}

  0000d	c3		 ret	 0
?rdstate@ios_base@std@@QEBAHXZ ENDP			; std::ios_base::rdstate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ?clear@ios_base@std@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 48
_State$ = 56
?clear@ios_base@std@@QEAAXH@Z PROC			; std::ios_base::clear, COMDAT

; 302  : 		{	// set state to argument

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 303  : 		clear(_State, false);

  0000d	45 33 c0	 xor	 r8d, r8d
  00010	8b 54 24 38	 mov	 edx, DWORD PTR _State$[rsp]
  00014	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00019	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QEAAXH_N@Z ; std::ios_base::clear

; 304  : 		}

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
?clear@ios_base@std@@QEAAXH@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ?clear@ios_base@std@@QEAAXH_N@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 80
$T5 = 120
$T6 = 160
this$ = 224
_State$ = 232
_Reraise$ = 240
?clear@ios_base@std@@QEAAXH_N@Z PROC			; std::ios_base::clear, COMDAT

; 287  : 		{	// set state, possibly reraise exception

$LN11:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H

; 288  : 		_Mystate = (iostate)(_State & _Statmask);

  00015	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR _State$[rsp]
  0001c	83 e0 17	 and	 eax, 23
  0001f	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00027	89 41 10	 mov	 DWORD PTR [rcx+16], eax

; 289  : 		if ((_Mystate & _Except) == 0)

  0002a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00032	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0003a	8b 49 14	 mov	 ecx, DWORD PTR [rcx+20]
  0003d	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00040	23 c1		 and	 eax, ecx
  00042	85 c0		 test	 eax, eax
  00044	75 05		 jne	 SHORT $LN2@clear
  00046	e9 01 01 00 00	 jmp	 $LN3@clear
$LN2@clear:

; 290  : 			;
; 291  : 		else if (_Reraise)

  0004b	0f b6 84 24 f0
	00 00 00	 movzx	 eax, BYTE PTR _Reraise$[rsp]
  00053	85 c0		 test	 eax, eax
  00055	74 0e		 je	 SHORT $LN4@clear

; 292  : 			_RERAISE;

  00057	33 d2		 xor	 edx, edx
  00059	33 c9		 xor	 ecx, ecx
  0005b	e8 00 00 00 00	 call	 _CxxThrowException
  00060	e9 e7 00 00 00	 jmp	 $LN5@clear
$LN4@clear:

; 293  : 		else if (_Mystate & _Except & badbit)

  00065	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  0006d	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00075	8b 49 14	 mov	 ecx, DWORD PTR [rcx+20]
  00078	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0007b	23 c1		 and	 eax, ecx
  0007d	83 e0 04	 and	 eax, 4
  00080	85 c0		 test	 eax, eax
  00082	74 39		 je	 SHORT $LN6@clear

; 294  : 			_THROW_NCEE(failure, "ios_base::badbit set");

  00084	ba 01 00 00 00	 mov	 edx, 1
  00089	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  0008e	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  00093	4c 8b c0	 mov	 r8, rax
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set?$AA@
  0009d	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T4[rsp]
  000a2	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z ; std::ios_base::failure::failure
  000a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI5?AVfailure@ios_base@std@@
  000ae	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T4[rsp]
  000b3	e8 00 00 00 00	 call	 _CxxThrowException
  000b8	e9 8f 00 00 00	 jmp	 $LN7@clear
$LN6@clear:

; 295  : 		else if (_Mystate & _Except & failbit)

  000bd	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000c5	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000cd	8b 49 14	 mov	 ecx, DWORD PTR [rcx+20]
  000d0	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  000d3	23 c1		 and	 eax, ecx
  000d5	83 e0 02	 and	 eax, 2
  000d8	85 c0		 test	 eax, eax
  000da	74 36		 je	 SHORT $LN8@clear

; 296  : 			_THROW_NCEE(failure, "ios_base::failbit set");

  000dc	ba 01 00 00 00	 mov	 edx, 1
  000e1	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T2[rsp]
  000e6	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  000eb	4c 8b c0	 mov	 r8, rax
  000ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set?$AA@
  000f5	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T5[rsp]
  000fa	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z ; std::ios_base::failure::failure
  000ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI5?AVfailure@ios_base@std@@
  00106	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T5[rsp]
  0010b	e8 00 00 00 00	 call	 _CxxThrowException

; 297  : 		else

  00110	eb 3a		 jmp	 SHORT $LN9@clear
$LN8@clear:

; 298  : 			_THROW_NCEE(failure, "ios_base::eofbit set");

  00112	ba 01 00 00 00	 mov	 edx, 1
  00117	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T3[rsp]
  0011c	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  00121	4c 8b c0	 mov	 r8, rax
  00124	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set?$AA@
  0012b	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR $T6[rsp]
  00133	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z ; std::ios_base::failure::failure
  00138	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI5?AVfailure@ios_base@std@@
  0013f	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR $T6[rsp]
  00147	e8 00 00 00 00	 call	 _CxxThrowException
$LN9@clear:
$LN7@clear:
$LN5@clear:
$LN3@clear:
$LN10@clear:

; 299  : 		}

  0014c	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  00153	c3		 ret	 0
?clear@ios_base@std@@QEAAXH_N@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gfailure@ios_base@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gfailure@ios_base@std@@UEAAPEAXI@Z PROC		; std::ios_base::failure::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1failure@ios_base@std@@UEAA@XZ
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_Gfailure@ios_base@std@@UEAAPEAXI@Z ENDP		; std::ios_base::failure::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0failure@ios_base@std@@QEAA@AEBV012@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0failure@ios_base@std@@QEAA@AEBV012@@Z PROC		; std::ios_base::failure::failure, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ??0system_error@std@@QEAA@AEBV01@@Z
  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7failure@ios_base@std@@6B@
  00029	48 89 08	 mov	 QWORD PTR [rax], rcx
  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
??0failure@ios_base@std@@QEAA@AEBV012@@Z ENDP		; std::ios_base::failure::failure
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1failure@ios_base@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1failure@ios_base@std@@UEAA@XZ PROC			; std::ios_base::failure::~failure, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??1system_error@std@@UEAA@XZ
  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
??1failure@ios_base@std@@UEAA@XZ ENDP			; std::ios_base::failure::~failure
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xiosbase
;	COMDAT ??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 80
_Message$ = 88
_Errcode$ = 96
??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z PROC ; std::ios_base::failure::failure, COMDAT

; 238  : 			{	// construct with message

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 237  : 			: system_error(_Errcode, _Message)

  00015	48 8d 44 24 20	 lea	 rax, QWORD PTR $T1[rsp]
  0001a	48 8b f8	 mov	 rdi, rax
  0001d	48 8b 74 24 60	 mov	 rsi, QWORD PTR _Errcode$[rsp]
  00022	b9 10 00 00 00	 mov	 ecx, 16
  00027	f3 a4		 rep movsb
  00029	4c 8b 44 24 58	 mov	 r8, QWORD PTR _Message$[rsp]
  0002e	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00033	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00038	e8 00 00 00 00	 call	 ??0system_error@std@@QEAA@Verror_code@1@PEBD@Z ; std::system_error::system_error

; 238  : 			{	// construct with message

  0003d	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7failure@ios_base@std@@6B@
  00049	48 89 08	 mov	 QWORD PTR [rax], rcx

; 239  : 			}

  0004c	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00051	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00055	5f		 pop	 rdi
  00056	5e		 pop	 rsi
  00057	c3		 ret	 0
??0failure@ios_base@std@@QEAA@PEBDAEBVerror_code@2@@Z ENDP ; std::ios_base::failure::failure
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ
_TEXT	SEGMENT
$T1 = 32
??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ PROC ; std::_Immortalize<std::_Iostream_error_category>, COMDAT

; 697  : 	{	// return a reference to an object that will live forever

$LN5:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 698  : 	/* MAGIC */ static _Immortalizer<_Ty> _Static;

  0000d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Init_thread_epoch
  00012	8b c0		 mov	 eax, eax
  00014	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00023	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00027	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  0002a	39 05 00 00 00
	00		 cmp	 DWORD PTR ?$TSS0@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@1@XZ@4HA, eax ; TSS0<`template-parameter-2',unsigned int,std::V_Iostream_error_category::mortalize>
  00030	7e 3a		 jle	 SHORT $LN2@Immortaliz
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@1@XZ@4HA ; TSS0<`template-parameter-2',unsigned int,std::V_Iostream_error_category::mortalize>
  00039	e8 00 00 00 00	 call	 _Init_thread_header
  0003e	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@1@XZ@4HA, -1 ; TSS0<`template-parameter-2',unsigned int,std::V_Iostream_error_category::mortalize>
  00045	75 25		 jne	 SHORT $LN2@Immortaliz
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@1@XZ@4U?$_Immortalizer@V_Iostream_error_category@std@@@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Static
  0004e	e8 00 00 00 00	 call	 ??0?$_Immortalizer@V_Iostream_error_category@std@@@std@@QEAA@XZ ; std::_Immortalizer<std::_Iostream_error_category>::_Immortalizer<std::_Iostream_error_category>
  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__F_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ@YAXXZ ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::`dynamic atexit destructor for '_Static''
  0005a	e8 00 00 00 00	 call	 atexit
  0005f	90		 npad	 1
  00060	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@1@XZ@4HA ; TSS0<`template-parameter-2',unsigned int,std::V_Iostream_error_category::mortalize>
  00067	e8 00 00 00 00	 call	 _Init_thread_footer
$LN2@Immortaliz:

; 699  : 	return (*reinterpret_cast<_Ty *>(&_Static._Storage));

  0006c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_Static@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@1@XZ@4U?$_Immortalizer@V_Iostream_error_category@std@@@1@A ; `std::_Immortalize<std::_Iostream_error_category>'::`2'::_Static

; 700  : 	}

  00073	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00077	c3		 ret	 0
??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ ENDP ; std::_Immortalize<std::_Iostream_error_category>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
?dtor$0@?0???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ@4HA PROC ; `std::_Immortalize<std::_Iostream_error_category>'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@1@XZ@4HA ; TSS0<`template-parameter-2',unsigned int,std::V_Iostream_error_category::mortalize>
  00010	e8 00 00 00 00	 call	 _Init_thread_abort
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$0@?0???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ@4HA ENDP ; `std::_Immortalize<std::_Iostream_error_category>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
?dtor$0@?0???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ@4HA PROC ; `std::_Immortalize<std::_Iostream_error_category>'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?$TSS0@?1???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@1@XZ@4HA ; TSS0<`template-parameter-2',unsigned int,std::V_Iostream_error_category::mortalize>
  00010	e8 00 00 00 00	 call	 _Init_thread_abort
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$0@?0???$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ@4HA ENDP ; `std::_Immortalize<std::_Iostream_error_category>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Iostream_error_category@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_G_Iostream_error_category@std@@UEAAPEAXI@Z PROC	; std::_Iostream_error_category::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1_Iostream_error_category@std@@UEAA@XZ
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 10 00 00 00	 mov	 edx, 16
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_G_Iostream_error_category@std@@UEAAPEAXI@Z ENDP	; std::_Iostream_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Iostream_error_category@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1_Iostream_error_category@std@@UEAA@XZ PROC		; std::_Iostream_error_category::~_Iostream_error_category, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??1_Generic_error_category@std@@UEAA@XZ
  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
??1_Iostream_error_category@std@@UEAA@XZ ENDP		; std::_Iostream_error_category::~_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?message@_Iostream_error_category@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
_Errcode$ = 80
?message@_Iostream_error_category@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category::message, COMDAT

; 626  : 		{	// convert to name of error

$LN7:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00013	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 627  : 		if (_Errcode == (int)io_errc::stream)

  0001b	83 7c 24 50 01	 cmp	 DWORD PTR _Errcode$[rsp], 1
  00020	75 25		 jne	 SHORT $LN2@message

; 628  : 			return ("iostream stream error");

  00022	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
  00029	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0002e	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00033	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  00037	83 c8 01	 or	 eax, 1
  0003a	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  0003e	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
  00043	eb 26		 jmp	 SHORT $LN1@message

; 629  : 		else

  00045	eb 24		 jmp	 SHORT $LN1@message
$LN2@message:

; 630  : 			return (_Generic_error_category::message(_Errcode));

  00047	44 8b 44 24 50	 mov	 r8d, DWORD PTR _Errcode$[rsp]
  0004c	48 8b 54 24 48	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  00051	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00056	e8 00 00 00 00	 call	 ?message@_Generic_error_category@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message
  0005b	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  0005f	83 c8 01	 or	 eax, 1
  00062	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  00066	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]
$LN1@message:

; 631  : 		}

  0006b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006f	c3		 ret	 0
?message@_Iostream_error_category@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?name@_Iostream_error_category@std@@UEBAPEBDXZ
_TEXT	SEGMENT
this$ = 8
?name@_Iostream_error_category@std@@UEBAPEBDXZ PROC	; std::_Iostream_error_category::name, COMDAT

; 621  : 		{	// get name of category

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 622  : 		return ("iostream");

  00005	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08LLGCOLLL@iostream?$AA@

; 623  : 		}

  0000c	c3		 ret	 0
?name@_Iostream_error_category@std@@UEBAPEBDXZ ENDP	; std::_Iostream_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??0_Iostream_error_category@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0_Iostream_error_category@std@@QEAA@XZ PROC		; std::_Iostream_error_category::_Iostream_error_category, COMDAT

; 615  : 	_Iostream_error_category() _NOEXCEPT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 616  : 		{	// default constructor

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??0_Generic_error_category@std@@QEAA@XZ ; std::_Generic_error_category::_Generic_error_category
  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7_Iostream_error_category@std@@6B@
  0001f	48 89 08	 mov	 QWORD PTR [rax], rcx

; 617  : 		_Addr = _Iostream_addr;

  00022	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00027	48 c7 40 08 05
	00 00 00	 mov	 QWORD PTR [rax+8], 5

; 618  : 		}

  0002f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00034	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00038	c3		 ret	 0
??0_Iostream_error_category@std@@QEAA@XZ ENDP		; std::_Iostream_error_category::_Iostream_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Generic_error_category@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_G_Generic_error_category@std@@UEAAPEAXI@Z PROC	; std::_Generic_error_category::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1_Generic_error_category@std@@UEAA@XZ
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 10 00 00 00	 mov	 edx, 16
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_G_Generic_error_category@std@@UEAAPEAXI@Z ENDP	; std::_Generic_error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_Generic_error_category@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1_Generic_error_category@std@@UEAA@XZ PROC		; std::_Generic_error_category::~_Generic_error_category, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??1error_category@std@@UEAA@XZ ; std::error_category::~error_category
  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
??1_Generic_error_category@std@@UEAA@XZ ENDP		; std::_Generic_error_category::~_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?message@_Generic_error_category@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
_Errcode$ = 80
?message@_Generic_error_category@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Generic_error_category::message, COMDAT

; 605  : 		{	// convert to name of error

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00013	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 606  : 		return (_Syserror_map(_Errcode));

  0001b	8b 4c 24 50	 mov	 ecx, DWORD PTR _Errcode$[rsp]
  0001f	e8 00 00 00 00	 call	 ?_Syserror_map@std@@YAPEBDH@Z ; std::_Syserror_map
  00024	48 8b d0	 mov	 rdx, rax
  00027	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0002c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00031	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  00035	83 c8 01	 or	 eax, 1
  00038	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  0003c	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 607  : 		}

  00041	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00045	c3		 ret	 0
?message@_Generic_error_category@std@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Generic_error_category::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?name@_Generic_error_category@std@@UEBAPEBDXZ
_TEXT	SEGMENT
this$ = 8
?name@_Generic_error_category@std@@UEBAPEBDXZ PROC	; std::_Generic_error_category::name, COMDAT

; 600  : 		{	// get name of category

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 601  : 		return ("generic");

  00005	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07DCLBNMLN@generic?$AA@

; 602  : 		}

  0000c	c3		 ret	 0
?name@_Generic_error_category@std@@UEBAPEBDXZ ENDP	; std::_Generic_error_category::name
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??0_Generic_error_category@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0_Generic_error_category@std@@QEAA@XZ PROC		; std::_Generic_error_category::_Generic_error_category, COMDAT

; 594  : 	_Generic_error_category() _NOEXCEPT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 595  : 		{	// default constructor

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??0error_category@std@@QEAA@XZ ; std::error_category::error_category
  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7_Generic_error_category@std@@6B@
  0001f	48 89 08	 mov	 QWORD PTR [rax], rcx

; 596  : 		_Addr = _Generic_addr;

  00022	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00027	48 c7 40 08 03
	00 00 00	 mov	 QWORD PTR [rax+8], 3

; 597  : 		}

  0002f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00034	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00038	c3		 ret	 0
??0_Generic_error_category@std@@QEAA@XZ ENDP		; std::_Generic_error_category::_Generic_error_category
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gsystem_error@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gsystem_error@std@@UEAAPEAXI@Z PROC			; std::system_error::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1system_error@std@@UEAA@XZ
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_Gsystem_error@std@@UEAAPEAXI@Z ENDP			; std::system_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0system_error@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0system_error@std@@QEAA@AEBV01@@Z PROC		; std::system_error::system_error, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ??0_System_error@std@@QEAA@AEBV01@@Z
  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7system_error@std@@6B@
  00029	48 89 08	 mov	 QWORD PTR [rax], rcx
  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
??0system_error@std@@QEAA@AEBV01@@Z ENDP		; std::system_error::system_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1system_error@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1system_error@std@@UEAA@XZ PROC			; std::system_error::~system_error, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??1_System_error@std@@UEAA@XZ
  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
??1system_error@std@@UEAA@XZ ENDP			; std::system_error::~system_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??0system_error@std@@QEAA@Verror_code@1@PEBD@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
__$ArrayPad$ = 96
this$ = 144
_Errcode$ = 152
_Message$ = 160
??0system_error@std@@QEAA@Verror_code@1@PEBD@Z PROC	; std::system_error::system_error, COMDAT

; 548  : 		{	// construct from error code and message string

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  00015	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  0001e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00025	48 33 c4	 xor	 rax, rsp
  00028	48 89 44 24 60	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 547  : 		: _Mybase(_Errcode, _Message)

  0002d	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR _Message$[rsp]
  00035	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T3[rsp]
  0003a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0003f	90		 npad	 1
  00040	48 8d 44 24 30	 lea	 rax, QWORD PTR $T2[rsp]
  00045	48 8b f8	 mov	 rdi, rax
  00048	48 8b b4 24 98
	00 00 00	 mov	 rsi, QWORD PTR _Errcode$[rsp]
  00050	b9 10 00 00 00	 mov	 ecx, 16
  00055	f3 a4		 rep movsb
  00057	4c 8d 44 24 40	 lea	 r8, QWORD PTR $T3[rsp]
  0005c	48 8d 54 24 30	 lea	 rdx, QWORD PTR $T2[rsp]
  00061	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00069	e8 00 00 00 00	 call	 ??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
  0006e	90		 npad	 1
  0006f	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T3[rsp]
  00074	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 548  : 		{	// construct from error code and message string

  00079	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00081	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7system_error@std@@6B@
  00088	48 89 08	 mov	 QWORD PTR [rax], rcx

; 549  : 		}

  0008b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  00093	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00098	48 33 cc	 xor	 rcx, rsp
  0009b	e8 00 00 00 00	 call	 __security_check_cookie
  000a0	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000a4	5f		 pop	 rdi
  000a5	5e		 pop	 rsi
  000a6	c3		 ret	 0
??0system_error@std@@QEAA@Verror_code@1@PEBD@Z ENDP	; std::system_error::system_error
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
__$ArrayPad$ = 96
this$ = 144
_Errcode$ = 152
_Message$ = 160
?dtor$0@?0???0system_error@std@@QEAA@Verror_code@1@PEBD@Z@4HA PROC ; `std::system_error::system_error'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 4d 40	 lea	 rcx, QWORD PTR $T3[rbp]
  0000d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0system_error@std@@QEAA@Verror_code@1@PEBD@Z@4HA ENDP ; `std::system_error::system_error'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
__$ArrayPad$ = 96
this$ = 144
_Errcode$ = 152
_Message$ = 160
?dtor$0@?0???0system_error@std@@QEAA@Verror_code@1@PEBD@Z@4HA PROC ; `std::system_error::system_error'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 4d 40	 lea	 rcx, QWORD PTR $T3[rbp]
  0000d	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0system_error@std@@QEAA@Verror_code@1@PEBD@Z@4HA ENDP ; `std::system_error::system_error'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_System_error@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_G_System_error@std@@UEAAPEAXI@Z PROC			; std::_System_error::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1_System_error@std@@UEAA@XZ
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 28 00 00 00	 mov	 edx, 40			; 00000028H
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_G_System_error@std@@UEAAPEAXI@Z ENDP			; std::_System_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_System_error@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 64
__that$ = 72
??0_System_error@std@@QEAA@AEBV01@@Z PROC		; std::_System_error::_System_error, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8b 54 24 48	 mov	 rdx, QWORD PTR __that$[rsp]
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001a	e8 00 00 00 00	 call	 ??0runtime_error@std@@QEAA@AEBV01@@Z
  0001f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7_System_error@std@@6B@
  0002b	48 89 08	 mov	 QWORD PTR [rax], rcx
  0002e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00033	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __that$[rsp]
  00038	48 8d 78 18	 lea	 rdi, QWORD PTR [rax+24]
  0003c	48 8d 71 18	 lea	 rsi, QWORD PTR [rcx+24]
  00040	b9 10 00 00 00	 mov	 ecx, 16
  00045	f3 a4		 rep movsb
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0004c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00050	5f		 pop	 rdi
  00051	5e		 pop	 rsi
  00052	c3		 ret	 0
??0_System_error@std@@QEAA@AEBV01@@Z ENDP		; std::_System_error::_System_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1_System_error@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1_System_error@std@@UEAA@XZ PROC			; std::_System_error::~_System_error, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??1runtime_error@std@@UEAA@XZ
  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
??1_System_error@std@@UEAA@XZ ENDP			; std::_System_error::~_System_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
$T1 = 32
tv131 = 40
tv69 = 48
tv133 = 56
$T2 = 64
$T3 = 80
$T4 = 96
$T5 = 128
__$ArrayPad$ = 160
this$ = 208
_Errcode$ = 216
_Message$ = 224
??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_System_error::_System_error, COMDAT

; 523  : 		{	// construct from error code and message string

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  00018	48 c7 44 24 40
	fe ff ff ff	 mov	 QWORD PTR $T2[rsp], -2
  00021	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00028	48 33 c4	 xor	 rax, rsp
  0002b	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 522  : 		: runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode)

  00033	48 8d 44 24 60	 lea	 rax, QWORD PTR $T4[rsp]
  00038	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  0003d	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR _Message$[rsp]
  00045	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  0004a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0004f	48 89 44 24 28	 mov	 QWORD PTR tv131[rsp], rax
  00054	48 8d 44 24 50	 lea	 rax, QWORD PTR $T3[rsp]
  00059	48 8b f8	 mov	 rdi, rax
  0005c	48 8b b4 24 d8
	00 00 00	 mov	 rsi, QWORD PTR _Errcode$[rsp]
  00064	b9 10 00 00 00	 mov	 ecx, 16
  00069	f3 a4		 rep movsb
  0006b	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv131[rsp]
  00070	48 8d 54 24 50	 lea	 rdx, QWORD PTR $T3[rsp]
  00075	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T5[rsp]
  0007d	e8 00 00 00 00	 call	 ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ; std::_System_error::_Makestr
  00082	48 89 44 24 30	 mov	 QWORD PTR tv69[rsp], rax
  00087	48 8b 44 24 30	 mov	 rax, QWORD PTR tv69[rsp]
  0008c	48 89 44 24 38	 mov	 QWORD PTR tv133[rsp], rax
  00091	48 8b 54 24 38	 mov	 rdx, QWORD PTR tv133[rsp]
  00096	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0009e	e8 00 00 00 00	 call	 ??0runtime_error@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::runtime_error::runtime_error
  000a3	90		 npad	 1
  000a4	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR $T5[rsp]
  000ac	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 523  : 		{	// construct from error code and message string

  000b1	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7_System_error@std@@6B@
  000c0	48 89 08	 mov	 QWORD PTR [rax], rcx

; 522  : 		: runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode)

  000c3	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000cb	48 8d 78 18	 lea	 rdi, QWORD PTR [rax+24]
  000cf	48 8b b4 24 d8
	00 00 00	 mov	 rsi, QWORD PTR _Errcode$[rsp]
  000d7	b9 10 00 00 00	 mov	 ecx, 16
  000dc	f3 a4		 rep movsb

; 524  : 		}

  000de	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
  000e6	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000ee	48 33 cc	 xor	 rcx, rsp
  000f1	e8 00 00 00 00	 call	 __security_check_cookie
  000f6	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  000fd	5f		 pop	 rdi
  000fe	5e		 pop	 rsi
  000ff	c3		 ret	 0
??0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_System_error::_System_error
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
tv131 = 40
tv69 = 48
tv133 = 56
$T2 = 64
$T3 = 80
$T4 = 96
$T5 = 128
__$ArrayPad$ = 160
this$ = 208
_Errcode$ = 216
_Message$ = 224
?dtor$1@?0???0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z@4HA PROC ; `std::_System_error::_System_error'::`1'::dtor$1
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00010	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$1@?0???0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z@4HA ENDP ; `std::_System_error::_System_error'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
tv131 = 40
tv69 = 48
tv133 = 56
$T2 = 64
$T3 = 80
$T4 = 96
$T5 = 128
__$ArrayPad$ = 160
this$ = 208
_Errcode$ = 216
_Message$ = 224
?dtor$1@?0???0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z@4HA PROC ; `std::_System_error::_System_error'::`1'::dtor$1
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 8d 80 00
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00010	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$1@?0???0_System_error@std@@IEAA@Verror_code@1@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z@4HA ENDP ; `std::_System_error::_System_error'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
_TEXT	SEGMENT
$T1 = 32
tv79 = 40
tv84 = 48
$T2 = 56
$T3 = 64
__$ArrayPad$ = 96
__$ReturnUdt$ = 128
_Errcode$ = 136
_Message$ = 144
?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z PROC ; std::_System_error::_Makestr, COMDAT

; 513  : 		{	// compose error message

$LN8:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  00013	48 c7 44 24 38
	fe ff ff ff	 mov	 QWORD PTR $T2[rsp], -2
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 44 24 60	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
  0002b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 514  : 		if (!_Message.empty())

  00033	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR _Message$[rsp]
  0003b	e8 00 00 00 00	 call	 ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
  00040	0f b6 c0	 movzx	 eax, al
  00043	85 c0		 test	 eax, eax
  00045	75 14		 jne	 SHORT $LN2@Makestr

; 515  : 			_Message.append(": ");

  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02LMMGGCAJ@?3?5?$AA@
  0004e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR _Message$[rsp]
  00056	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN2@Makestr:

; 516  : 		_Message.append(_Errcode.message());

  0005b	48 8d 54 24 40	 lea	 rdx, QWORD PTR $T3[rsp]
  00060	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _Errcode$[rsp]
  00068	e8 00 00 00 00	 call	 ?message@error_code@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::error_code::message
  0006d	48 89 44 24 28	 mov	 QWORD PTR tv79[rsp], rax
  00072	48 8b 44 24 28	 mov	 rax, QWORD PTR tv79[rsp]
  00077	48 89 44 24 30	 mov	 QWORD PTR tv84[rsp], rax
  0007c	48 8b 54 24 30	 mov	 rdx, QWORD PTR tv84[rsp]
  00081	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR _Message$[rsp]
  00089	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  0008e	90		 npad	 1
  0008f	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T3[rsp]
  00094	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 517  : 		return (_Message);

  00099	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR _Message$[rsp]
  000a1	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  000a9	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000ae	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  000b2	83 c8 01	 or	 eax, 1
  000b5	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  000b9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR _Message$[rsp]
  000c1	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000c6	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 518  : 		}

  000ce	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000d3	48 33 cc	 xor	 rcx, rsp
  000d6	e8 00 00 00 00	 call	 __security_check_cookie
  000db	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000df	c3		 ret	 0
?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z ENDP ; std::_System_error::_Makestr
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
tv79 = 40
tv84 = 48
$T2 = 56
$T3 = 64
__$ArrayPad$ = 96
__$ReturnUdt$ = 128
_Errcode$ = 136
_Message$ = 144
?dtor$0@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA PROC ; `std::_System_error::_Makestr'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 8d 90 00
	00 00		 mov	 rcx, QWORD PTR _Message$[rbp]
  00010	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$0@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA ENDP ; `std::_System_error::_Makestr'::`1'::dtor$0
$T1 = 32
tv79 = 40
tv84 = 48
$T2 = 56
$T3 = 64
__$ArrayPad$ = 96
__$ReturnUdt$ = 128
_Errcode$ = 136
_Message$ = 144
?dtor$1@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA PROC ; `std::_System_error::_Makestr'::`1'::dtor$1
  0001b	40 55		 push	 rbp
  0001d	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00021	48 8b ea	 mov	 rbp, rdx
  00024	48 8d 4d 40	 lea	 rcx, QWORD PTR $T3[rbp]
  00028	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$1@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA ENDP ; `std::_System_error::_Makestr'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
tv79 = 40
tv84 = 48
$T2 = 56
$T3 = 64
__$ArrayPad$ = 96
__$ReturnUdt$ = 128
_Errcode$ = 136
_Message$ = 144
?dtor$0@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA PROC ; `std::_System_error::_Makestr'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 8d 90 00
	00 00		 mov	 rcx, QWORD PTR _Message$[rbp]
  00010	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00015	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00019	5d		 pop	 rbp
  0001a	c3		 ret	 0
?dtor$0@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA ENDP ; `std::_System_error::_Makestr'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
tv79 = 40
tv84 = 48
$T2 = 56
$T3 = 64
__$ArrayPad$ = 96
__$ReturnUdt$ = 128
_Errcode$ = 136
_Message$ = 144
?dtor$1@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA PROC ; `std::_System_error::_Makestr'::`1'::dtor$1
  0001b	40 55		 push	 rbp
  0001d	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00021	48 8b ea	 mov	 rbp, rdx
  00024	48 8d 4d 40	 lea	 rcx, QWORD PTR $T3[rbp]
  00028	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$1@?0??_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z@4HA ENDP ; `std::_System_error::_Makestr'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??8std@@YA_NAEBVerror_condition@0@0@Z
_TEXT	SEGMENT
tv78 = 32
tv72 = 36
tv69 = 40
_Left$ = 64
_Right$ = 72
??8std@@YA_NAEBVerror_condition@0@0@Z PROC		; std::operator==, COMDAT

; 392  : 	{	// test errors for equality

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 393  : 	return (_Left.category() == _Right.category()

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  00013	e8 00 00 00 00	 call	 ?category@error_condition@std@@QEBAAEBVerror_category@2@XZ ; std::error_condition::category
  00018	48 89 44 24 28	 mov	 QWORD PTR tv69[rsp], rax
  0001d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Left$[rsp]
  00022	e8 00 00 00 00	 call	 ?category@error_condition@std@@QEBAAEBVerror_category@2@XZ ; std::error_condition::category
  00027	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv69[rsp]
  0002c	48 8b d1	 mov	 rdx, rcx
  0002f	48 8b c8	 mov	 rcx, rax
  00032	e8 00 00 00 00	 call	 ??8error_category@std@@QEBA_NAEBV01@@Z ; std::error_category::operator==
  00037	0f b6 c0	 movzx	 eax, al
  0003a	85 c0		 test	 eax, eax
  0003c	74 2a		 je	 SHORT $LN3@operator
  0003e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Left$[rsp]
  00043	e8 00 00 00 00	 call	 ?value@error_condition@std@@QEBAHXZ ; std::error_condition::value
  00048	89 44 24 24	 mov	 DWORD PTR tv72[rsp], eax
  0004c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  00051	e8 00 00 00 00	 call	 ?value@error_condition@std@@QEBAHXZ ; std::error_condition::value
  00056	8b 4c 24 24	 mov	 ecx, DWORD PTR tv72[rsp]
  0005a	3b c8		 cmp	 ecx, eax
  0005c	75 0a		 jne	 SHORT $LN3@operator
  0005e	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv78[rsp], 1
  00066	eb 08		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00068	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv78[rsp], 0
$LN4@operator:
  00070	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv78[rsp]

; 394  : 		&& _Left.value() == _Right.value());
; 395  : 	}

  00075	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00079	c3		 ret	 0
??8std@@YA_NAEBVerror_condition@0@0@Z ENDP		; std::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?category@error_condition@std@@QEBAAEBVerror_category@2@XZ
_TEXT	SEGMENT
this$ = 8
?category@error_condition@std@@QEBAAEBVerror_category@2@XZ PROC ; std::error_condition::category, COMDAT

; 345  : 		{	// get category

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 346  : 		return (*_Mycat);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 347  : 		}

  0000e	c3		 ret	 0
?category@error_condition@std@@QEBAAEBVerror_category@2@XZ ENDP ; std::error_condition::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?value@error_condition@std@@QEBAHXZ
_TEXT	SEGMENT
this$ = 8
?value@error_condition@std@@QEBAHXZ PROC		; std::error_condition::value, COMDAT

; 340  : 		{	// get error code

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 341  : 		return (_Myval);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	8b 00		 mov	 eax, DWORD PTR [rax]

; 342  : 		}

  0000c	c3		 ret	 0
?value@error_condition@std@@QEBAHXZ ENDP		; std::error_condition::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??0error_condition@std@@QEAA@HAEBVerror_category@1@@Z
_TEXT	SEGMENT
this$ = 8
_Val$ = 16
_Cat$ = 24
??0error_condition@std@@QEAA@HAEBVerror_category@1@@Z PROC ; std::error_condition::error_condition, COMDAT

; 307  : 		{	// construct from error code and category

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 306  : 		: _Myval(_Val), _Mycat(&_Cat)

  0000e	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00013	8b 4c 24 10	 mov	 ecx, DWORD PTR _Val$[rsp]
  00017	89 08		 mov	 DWORD PTR [rax], ecx
  00019	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0001e	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Cat$[rsp]
  00023	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 308  : 		}

  00027	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0002c	c3		 ret	 0
??0error_condition@std@@QEAA@HAEBVerror_category@1@@Z ENDP ; std::error_condition::error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?message@error_code@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = 32
tv67 = 40
tv70 = 48
this$ = 80
__$ReturnUdt$ = 88
?message@error_code@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::error_code::message, COMDAT

; 279  : 		{	// get name of error code

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 280  : 		return (category().message(value()));

  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0001b	e8 00 00 00 00	 call	 ?category@error_code@std@@QEBAAEBVerror_category@2@XZ ; std::error_code::category
  00020	48 89 44 24 28	 mov	 QWORD PTR tv67[rsp], rax
  00025	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0002a	e8 00 00 00 00	 call	 ?value@error_code@std@@QEBAHXZ ; std::error_code::value
  0002f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv67[rsp]
  00034	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00037	48 89 4c 24 30	 mov	 QWORD PTR tv70[rsp], rcx
  0003c	44 8b c0	 mov	 r8d, eax
  0003f	48 8b 54 24 58	 mov	 rdx, QWORD PTR __$ReturnUdt$[rsp]
  00044	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv67[rsp]
  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR tv70[rsp]
  0004e	ff 50 10	 call	 QWORD PTR [rax+16]
  00051	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  00055	83 c8 01	 or	 eax, 1
  00058	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  0005c	48 8b 44 24 58	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 281  : 		}

  00061	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00065	c3		 ret	 0
?message@error_code@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::error_code::message
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?category@error_code@std@@QEBAAEBVerror_category@2@XZ
_TEXT	SEGMENT
this$ = 8
?category@error_code@std@@QEBAAEBVerror_category@2@XZ PROC ; std::error_code::category, COMDAT

; 272  : 		{	// get category

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 273  : 		return (*_Mycat);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 274  : 		}

  0000e	c3		 ret	 0
?category@error_code@std@@QEBAAEBVerror_category@2@XZ ENDP ; std::error_code::category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?value@error_code@std@@QEBAHXZ
_TEXT	SEGMENT
this$ = 8
?value@error_code@std@@QEBAHXZ PROC			; std::error_code::value, COMDAT

; 267  : 		{	// get error code

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 268  : 		return (_Myval);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	8b 00		 mov	 eax, DWORD PTR [rax]

; 269  : 		}

  0000c	c3		 ret	 0
?value@error_code@std@@QEBAHXZ ENDP			; std::error_code::value
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??0error_code@std@@QEAA@HAEBVerror_category@1@@Z
_TEXT	SEGMENT
this$ = 8
_Val$ = 16
_Cat$ = 24
??0error_code@std@@QEAA@HAEBVerror_category@1@@Z PROC	; std::error_code::error_code, COMDAT

; 234  : 		{	// construct from error code and category

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 233  : 		: _Myval(_Val), _Mycat(&_Cat)

  0000e	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00013	8b 4c 24 10	 mov	 ecx, DWORD PTR _Val$[rsp]
  00017	89 08		 mov	 DWORD PTR [rax], ecx
  00019	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0001e	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Cat$[rsp]
  00023	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 235  : 		}

  00027	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0002c	c3		 ret	 0
??0error_code@std@@QEAA@HAEBVerror_category@1@@Z ENDP	; std::error_code::error_code
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gerror_category@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gerror_category@std@@UEAAPEAXI@Z PROC		; std::error_category::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1error_category@std@@UEAA@XZ ; std::error_category::~error_category
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 10 00 00 00	 mov	 edx, 16
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_Gerror_category@std@@UEAAPEAXI@Z ENDP		; std::error_category::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??8error_category@std@@QEBA_NAEBV01@@Z
_TEXT	SEGMENT
tv67 = 0
this$ = 32
_Right$ = 40
??8error_category@std@@QEBA_NAEBV01@@Z PROC		; std::error_category::operator==, COMDAT

; 191  : 		{	// compare categories for equality

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 192  : 		return (_Addr == _Right._Addr);

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Right$[rsp]
  00018	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0001c	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  00020	75 09		 jne	 SHORT $LN3@operator
  00022	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv67[rsp], 1
  00029	eb 07		 jmp	 SHORT $LN4@operator
$LN3@operator:
  0002b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv67[rsp], 0
$LN4@operator:
  00032	0f b6 04 24	 movzx	 eax, BYTE PTR tv67[rsp]

; 193  : 		}

  00036	48 83 c4 18	 add	 rsp, 24
  0003a	c3		 ret	 0
??8error_category@std@@QEBA_NAEBV01@@Z ENDP		; std::error_category::operator==
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z
_TEXT	SEGMENT
tv74 = 32
this$ = 64
_Code$ = 72
_Errval$ = 80
?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT

; 462  : 	{	// test if conditions same for this category

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 463  : 	return (*this == _Code.category() && _Code.value() == _Errval);

  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Code$[rsp]
  00018	e8 00 00 00 00	 call	 ?category@error_code@std@@QEBAAEBVerror_category@2@XZ ; std::error_code::category
  0001d	48 8b d0	 mov	 rdx, rax
  00020	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00025	e8 00 00 00 00	 call	 ??8error_category@std@@QEBA_NAEBV01@@Z ; std::error_category::operator==
  0002a	0f b6 c0	 movzx	 eax, al
  0002d	85 c0		 test	 eax, eax
  0002f	74 1a		 je	 SHORT $LN3@equivalent
  00031	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Code$[rsp]
  00036	e8 00 00 00 00	 call	 ?value@error_code@std@@QEBAHXZ ; std::error_code::value
  0003b	3b 44 24 50	 cmp	 eax, DWORD PTR _Errval$[rsp]
  0003f	75 0a		 jne	 SHORT $LN3@equivalent
  00041	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  00049	eb 08		 jmp	 SHORT $LN4@equivalent
$LN3@equivalent:
  0004b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN4@equivalent:
  00053	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv74[rsp]

; 464  : 	}

  00058	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005c	c3		 ret	 0
?equivalent@error_category@std@@UEBA_NAEBVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Errval$ = 72
_Cond$ = 80
?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT

; 455  : 	{	// test if error code same condition

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 456  : 	return (default_error_condition(_Errval) == _Cond);

  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001a	44 8b 44 24 48	 mov	 r8d, DWORD PTR _Errval$[rsp]
  0001f	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00024	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00029	ff 50 18	 call	 QWORD PTR [rax+24]
  0002c	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Cond$[rsp]
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 ??8std@@YA_NAEBVerror_condition@0@0@Z ; std::operator==

; 457  : 	}

  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
?equivalent@error_category@std@@UEBA_NHAEBVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z
_TEXT	SEGMENT
this$ = 48
__$ReturnUdt$ = 56
_Errval$ = 64
?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT

; 448  : 	{	// make error_condition for error code

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 449  : 	return (error_condition(_Errval, *this));

  00013	4c 8b 44 24 30	 mov	 r8, QWORD PTR this$[rsp]
  00018	8b 54 24 40	 mov	 edx, DWORD PTR _Errval$[rsp]
  0001c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00021	e8 00 00 00 00	 call	 ??0error_condition@std@@QEAA@HAEBVerror_category@1@@Z ; std::error_condition::error_condition
  00026	48 8b 44 24 38	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 450  : 	}

  0002b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002f	c3		 ret	 0
?default_error_condition@error_category@std@@UEBA?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??1error_category@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1error_category@std@@UEAA@XZ PROC			; std::error_category::~error_category, COMDAT

; 174  : 		{	// destroy the object

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7error_category@std@@6B@
  00011	48 89 08	 mov	 QWORD PTR [rax], rcx

; 175  : 		}

  00014	c3		 ret	 0
??1error_category@std@@UEAA@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ??0error_category@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0error_category@std@@QEAA@XZ PROC			; std::error_category::error_category, COMDAT

; 168  : 	/* constexpr */ error_category() _NOEXCEPT	// TRANSITION

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 169  : 		{	// default constructor

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7error_category@std@@6B@
  00011	48 89 08	 mov	 QWORD PTR [rax], rcx

; 170  : 		_Addr = reinterpret_cast<uintptr_t>(this);

  00014	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00019	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  0001e	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 171  : 		}

  00022	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00027	c3		 ret	 0
??0error_category@std@@QEAA@XZ ENDP			; std::error_category::error_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?iostream_category@std@@YAAEBVerror_category@1@XZ
_TEXT	SEGMENT
$T1 = 32
?iostream_category@std@@YAAEBVerror_category@1@XZ PROC	; std::iostream_category, COMDAT

; 708  : 	{	// get iostream_category

$LN3:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00004	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 709  : 	return (_Immortalize<_Iostream_error_category>());

  0000d	e8 00 00 00 00	 call	 ??$_Immortalize@V_Iostream_error_category@std@@@std@@YAAEAV_Iostream_error_category@0@XZ ; std::_Immortalize<std::_Iostream_error_category>
  00012	90		 npad	 1

; 710  : 	}

  00013	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00017	c3		 ret	 0
?iostream_category@std@@YAAEBVerror_category@1@XZ ENDP	; std::iostream_category
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\system_error
;	COMDAT ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
_Errno$ = 56
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z PROC ; std::make_error_code, COMDAT

; 479  : 	{	// make an error_code

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 480  : 	return (error_code((int)_Errno, iostream_category()));

  0000d	e8 00 00 00 00	 call	 ?iostream_category@std@@YAAEBVerror_category@1@XZ ; std::iostream_category
  00012	4c 8b c0	 mov	 r8, rax
  00015	8b 54 24 38	 mov	 edx, DWORD PTR _Errno$[rsp]
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0001e	e8 00 00 00 00	 call	 ??0error_code@std@@QEAA@HAEBVerror_category@1@@Z ; std::error_code::error_code
  00023	48 8b 44 24 30	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 481  : 	}

  00028	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002c	c3		 ret	 0
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ENDP ; std::make_error_code
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z
_TEXT	SEGMENT
_Psave$1 = 32
_Pf$2 = 40
_Lock$3 = 48
_Pfmod$4 = 56
_Id$5 = 64
$T6 = 72
$T7 = 80
$T8 = 88
_Loc$ = 128
??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 553  : 	{	// get facet reference from locale

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  00009	48 c7 44 24 50
	fe ff ff ff	 mov	 QWORD PTR $T7[rsp], -2

; 554  :  #if _NO_LOCALES
; 555  : 	static _Wrap_facet<_Facet> _Wfac;
; 556  : 	return (*(_Facet *)&_Wfac);
; 557  : 
; 558  :  #else /* _NO_LOCALES */
; 559  : 	_BEGIN_LOCK(_LOCK_LOCALE)	// the thread lock, make get atomic

  00012	33 d2		 xor	 edx, edx
  00014	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Lock$3[rsp]
  00019	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit
  0001e	90		 npad	 1

; 560  : 		const locale::facet *_Psave =
; 561  : 			_Facetptr<_Facet>::_Psave;	// static pointer to lazy facet

  0001f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB ; std::_Facetptr<std::ctype<char> >::_Psave
  00026	48 89 44 24 20	 mov	 QWORD PTR _Psave$1[rsp], rax

; 562  : 
; 563  : 		size_t _Id = _Facet::id;

  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id
  00032	e8 00 00 00 00	 call	 ??Bid@locale@std@@QEAA_KXZ ; std::locale::id::operator unsigned __int64
  00037	48 89 44 24 40	 mov	 QWORD PTR _Id$5[rsp], rax

; 564  : 		const locale::facet *_Pf = _Loc._Getfacet(_Id);

  0003c	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Id$5[rsp]
  00041	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Loc$[rsp]
  00049	e8 00 00 00 00	 call	 ?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z ; std::locale::_Getfacet
  0004e	48 89 44 24 28	 mov	 QWORD PTR _Pf$2[rsp], rax

; 565  : 
; 566  : 		if (_Pf != 0)

  00053	48 83 7c 24 28
	00		 cmp	 QWORD PTR _Pf$2[rsp], 0
  00059	74 05		 je	 SHORT $LN2@use_facet
  0005b	e9 84 00 00 00	 jmp	 $LN3@use_facet
$LN2@use_facet:

; 567  : 			;	// got facet from locale
; 568  : 		else if (_Psave != 0)

  00060	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Psave$1[rsp], 0
  00066	74 0c		 je	 SHORT $LN4@use_facet

; 569  : 			_Pf = _Psave;	// lazy facet already allocated

  00068	48 8b 44 24 20	 mov	 rax, QWORD PTR _Psave$1[rsp]
  0006d	48 89 44 24 28	 mov	 QWORD PTR _Pf$2[rsp], rax
  00072	eb 70		 jmp	 SHORT $LN3@use_facet
$LN4@use_facet:

; 570  : 		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

  00074	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR _Loc$[rsp]
  0007c	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Psave$1[rsp]
  00081	e8 00 00 00 00	 call	 ?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z ; std::ctype<char>::_Getcat
  00086	48 83 f8 ff	 cmp	 rax, -1
  0008a	75 1e		 jne	 SHORT $LN6@use_facet

; 571  : 
; 572  :  #if _HAS_EXCEPTIONS
; 573  : 
; 574  : 			_THROW_NCEE(_XSTD bad_cast, _EMPTY_ARGUMENT);	// lazy disallowed

  0008c	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T8[rsp]
  00091	e8 00 00 00 00	 call	 ??0bad_cast@std@@QEAA@XZ ; std::bad_cast::bad_cast
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVbad_cast@std@@
  0009d	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T8[rsp]
  000a2	e8 00 00 00 00	 call	 _CxxThrowException
  000a7	90		 npad	 1

; 575  : 
; 576  :  #else /* _HAS_EXCEPTIONS */
; 577  : 			abort();	// lazy disallowed
; 578  :  #endif /* _HAS_EXCEPTIONS */
; 579  : 
; 580  : 		else

  000a8	eb 3a		 jmp	 SHORT $LN3@use_facet
$LN6@use_facet:

; 581  : 			{	// queue up lazy facet for destruction
; 582  : 			_Pf = _Psave;

  000aa	48 8b 44 24 20	 mov	 rax, QWORD PTR _Psave$1[rsp]
  000af	48 89 44 24 28	 mov	 QWORD PTR _Pf$2[rsp], rax

; 583  : 			_Facetptr<_Facet>::_Psave = _Psave;

  000b4	48 8b 44 24 20	 mov	 rax, QWORD PTR _Psave$1[rsp]
  000b9	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PEBVfacet@locale@2@EB, rax ; std::_Facetptr<std::ctype<char> >::_Psave

; 584  : 
; 585  : 			locale::facet *_Pfmod = (_Facet *)_Psave;

  000c0	48 8b 44 24 20	 mov	 rax, QWORD PTR _Psave$1[rsp]
  000c5	48 89 44 24 38	 mov	 QWORD PTR _Pfmod$4[rsp], rax

; 586  : 			_Pfmod->_Incref();

  000ca	48 8b 44 24 38	 mov	 rax, QWORD PTR _Pfmod$4[rsp]
  000cf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Pfmod$4[rsp]
  000d7	ff 50 08	 call	 QWORD PTR [rax+8]

; 587  : 
; 588  :  #if defined(_M_CEE)
; 589  : 			_Facet_Register_m(_Pfmod);
; 590  : 
; 591  :  #else /* defined(_M_CEE) */
; 592  : 			_Facet_Register(_Pfmod);

  000da	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Pfmod$4[rsp]
  000df	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z ; std::_Facet_Register
$LN3@use_facet:

; 593  :  #endif /* defined(_M_CEE) */
; 594  : 			}
; 595  : 
; 596  : 		return ((const _Facet&)(*_Pf));	// should be dynamic_cast

  000e4	48 8b 44 24 28	 mov	 rax, QWORD PTR _Pf$2[rsp]
  000e9	48 89 44 24 48	 mov	 QWORD PTR $T6[rsp], rax
  000ee	48 8d 4c 24 30	 lea	 rcx, QWORD PTR _Lock$3[rsp]
  000f3	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit
  000f8	48 8b 44 24 48	 mov	 rax, QWORD PTR $T6[rsp]

; 597  : 	_END_LOCK()
; 598  :  #endif /* _NO_LOCALES */
; 599  : 	}	// end of use_facet body

  000fd	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00101	c3		 ret	 0
$LN10@use_facet:
??$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Psave$1 = 32
_Pf$2 = 40
_Lock$3 = 48
_Pfmod$4 = 56
_Id$5 = 64
$T6 = 72
$T7 = 80
$T8 = 88
_Loc$ = 128
?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA PROC ; `std::use_facet<std::ctype<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 4d 30	 lea	 rcx, QWORD PTR _Lock$3[rbp]
  0000d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA ENDP ; `std::use_facet<std::ctype<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_Psave$1 = 32
_Pf$2 = 40
_Lock$3 = 48
_Pfmod$4 = 56
_Id$5 = 64
$T6 = 72
$T7 = 80
$T8 = 88
_Loc$ = 128
?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA PROC ; `std::use_facet<std::ctype<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8d 4d 30	 lea	 rcx, QWORD PTR _Lock$3[rbp]
  0000d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???$use_facet@V?$ctype@D@std@@@std@@YAAEBV?$ctype@D@0@AEBVlocale@0@@Z@4HA ENDP ; `std::use_facet<std::ctype<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G?$ctype@D@std@@MEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_G?$ctype@D@std@@MEAAPEAXI@Z PROC			; std::ctype<char>::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1?$ctype@D@std@@MEAA@XZ ; std::ctype<char>::~ctype<char>
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_G?$ctype@D@std@@MEAAPEAXI@Z ENDP			; std::ctype<char>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
__formal$ = 72
_Dest$ = 80
?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z PROC	; std::ctype<char>::do_narrow, COMDAT

; 2558 : 		{	// narrow elements in [_First, _Last) to chars

$LN3:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2559 : 		_DEBUG_RANGE_PTR(_First, _Last, _Dest);
; 2560 : 		_CSTD memcpy(_Dest, _First, _Last - _First);

  00018	48 8b 44 24 38	 mov	 rax, QWORD PTR _First$[rsp]
  0001d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Last$[rsp]
  00022	48 2b c8	 sub	 rcx, rax
  00025	48 8b c1	 mov	 rax, rcx
  00028	4c 8b c0	 mov	 r8, rax
  0002b	48 8b 54 24 38	 mov	 rdx, QWORD PTR _First$[rsp]
  00030	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Dest$[rsp]
  00035	e8 00 00 00 00	 call	 memcpy

; 2561 : 		return (_Last);

  0003a	48 8b 44 24 40	 mov	 rax, QWORD PTR _Last$[rsp]

; 2562 : 		}

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
?do_narrow@?$ctype@D@std@@MEBAPEBDPEBD0DPEAD@Z ENDP	; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MEBADDD@Z
_TEXT	SEGMENT
this$ = 8
_Ch$ = 16
__formal$ = 24
?do_narrow@?$ctype@D@std@@MEBADDD@Z PROC		; std::ctype<char>::do_narrow, COMDAT

; 2552 : 		{	// narrow char

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 2553 : 		return (_Ch);

  0000e	0f b6 44 24 10	 movzx	 eax, BYTE PTR _Ch$[rsp]

; 2554 : 		}

  00013	c3		 ret	 0
?do_narrow@?$ctype@D@std@@MEBADDD@Z ENDP		; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
_Dest$ = 72
?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z PROC	; std::ctype<char>::do_widen, COMDAT

; 2545 : 		{	// widen chars in [_First, _Last)

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2546 : 		_DEBUG_RANGE_PTR(_First, _Last, _Dest);
; 2547 : 		_CSTD memcpy(_Dest, _First, _Last - _First);

  00018	48 8b 44 24 38	 mov	 rax, QWORD PTR _First$[rsp]
  0001d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Last$[rsp]
  00022	48 2b c8	 sub	 rcx, rax
  00025	48 8b c1	 mov	 rax, rcx
  00028	4c 8b c0	 mov	 r8, rax
  0002b	48 8b 54 24 38	 mov	 rdx, QWORD PTR _First$[rsp]
  00030	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Dest$[rsp]
  00035	e8 00 00 00 00	 call	 memcpy

; 2548 : 		return (_Last);

  0003a	48 8b 44 24 40	 mov	 rax, QWORD PTR _Last$[rsp]

; 2549 : 		}

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
?do_widen@?$ctype@D@std@@MEBAPEBDPEBD0PEAD@Z ENDP	; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MEBADD@Z
_TEXT	SEGMENT
this$ = 8
_Byte$ = 16
?do_widen@?$ctype@D@std@@MEBADD@Z PROC			; std::ctype<char>::do_widen, COMDAT

; 2539 : 		{	// widen char

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 2540 : 		return (_Byte);

  00009	0f b6 44 24 10	 movzx	 eax, BYTE PTR _Byte$[rsp]

; 2541 : 		}

  0000e	c3		 ret	 0
?do_widen@?$ctype@D@std@@MEBADD@Z ENDP			; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?do_toupper@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z PROC	; std::ctype<char>::do_toupper, COMDAT

; 2531 : 		{	// convert [_First, _Last) in place to upper case

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2532 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2533 : 		for (; _First != _Last; ++_First)

  00013	eb 0d		 jmp	 SHORT $LN4@do_toupper
$LN2@do_toupper:
  00015	48 8b 44 24 38	 mov	 rax, QWORD PTR _First$[rsp]
  0001a	48 ff c0	 inc	 rax
  0001d	48 89 44 24 38	 mov	 QWORD PTR _First$[rsp], rax
$LN4@do_toupper:
  00022	48 8b 44 24 40	 mov	 rax, QWORD PTR _Last$[rsp]
  00027	48 39 44 24 38	 cmp	 QWORD PTR _First$[rsp], rax
  0002c	74 22		 je	 SHORT $LN3@do_toupper

; 2534 : 			*_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);

  0002e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00033	48 83 c0 10	 add	 rax, 16
  00037	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _First$[rsp]
  0003c	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0003f	48 8b d0	 mov	 rdx, rax
  00042	e8 00 00 00 00	 call	 _Toupper
  00047	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _First$[rsp]
  0004c	88 01		 mov	 BYTE PTR [rcx], al
  0004e	eb c5		 jmp	 SHORT $LN2@do_toupper
$LN3@do_toupper:

; 2535 : 		return ((const _Elem *)_First);

  00050	48 8b 44 24 38	 mov	 rax, QWORD PTR _First$[rsp]

; 2536 : 		}

  00055	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00059	c3		 ret	 0
?do_toupper@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z ENDP	; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MEBADD@Z
_TEXT	SEGMENT
this$ = 48
_Ch$ = 56
?do_toupper@?$ctype@D@std@@MEBADD@Z PROC		; std::ctype<char>::do_toupper, COMDAT

; 2525 : 		{	// convert element to upper case

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2526 : 		return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));

  0000d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00012	48 83 c0 10	 add	 rax, 16
  00016	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR _Ch$[rsp]
  0001b	48 8b d0	 mov	 rdx, rax
  0001e	e8 00 00 00 00	 call	 _Toupper

; 2527 : 		}

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
?do_toupper@?$ctype@D@std@@MEBADD@Z ENDP		; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
?do_tolower@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z PROC	; std::ctype<char>::do_tolower, COMDAT

; 2517 : 		{	// convert [_First, _Last) in place to lower case

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2518 : 		_DEBUG_RANGE((const _Elem *)_First, _Last);
; 2519 : 		for (; _First != _Last; ++_First)

  00013	eb 0d		 jmp	 SHORT $LN4@do_tolower
$LN2@do_tolower:
  00015	48 8b 44 24 38	 mov	 rax, QWORD PTR _First$[rsp]
  0001a	48 ff c0	 inc	 rax
  0001d	48 89 44 24 38	 mov	 QWORD PTR _First$[rsp], rax
$LN4@do_tolower:
  00022	48 8b 44 24 40	 mov	 rax, QWORD PTR _Last$[rsp]
  00027	48 39 44 24 38	 cmp	 QWORD PTR _First$[rsp], rax
  0002c	74 22		 je	 SHORT $LN3@do_tolower

; 2520 : 			*_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);

  0002e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00033	48 83 c0 10	 add	 rax, 16
  00037	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _First$[rsp]
  0003c	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0003f	48 8b d0	 mov	 rdx, rax
  00042	e8 00 00 00 00	 call	 _Tolower
  00047	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _First$[rsp]
  0004c	88 01		 mov	 BYTE PTR [rcx], al
  0004e	eb c5		 jmp	 SHORT $LN2@do_tolower
$LN3@do_tolower:

; 2521 : 		return ((const _Elem *)_First);

  00050	48 8b 44 24 38	 mov	 rax, QWORD PTR _First$[rsp]

; 2522 : 		}

  00055	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00059	c3		 ret	 0
?do_tolower@?$ctype@D@std@@MEBAPEBDPEADPEBD@Z ENDP	; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MEBADD@Z
_TEXT	SEGMENT
this$ = 48
_Ch$ = 56
?do_tolower@?$ctype@D@std@@MEBADD@Z PROC		; std::ctype<char>::do_tolower, COMDAT

; 2511 : 		{	// convert element to lower case

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2512 : 		return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));

  0000d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00012	48 83 c0 10	 add	 rax, 16
  00016	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR _Ch$[rsp]
  0001b	48 8b d0	 mov	 rdx, rax
  0001e	e8 00 00 00 00	 call	 _Tolower

; 2513 : 		}

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
?do_tolower@?$ctype@D@std@@MEBADD@Z ENDP		; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?_Tidy@?$ctype@D@std@@IEAAXXZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
?_Tidy@?$ctype@D@std@@IEAAXXZ PROC			; std::ctype<char>::_Tidy, COMDAT

; 2501 : 		{	// free any allocated storage

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2502 : 		if (0 < _Ctype._Delfl)

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	83 78 20 00	 cmp	 DWORD PTR [rax+32], 0
  00012	7e 10		 jle	 SHORT $LN2@Tidy

; 2503 : 			_CSTD free((void *)_Ctype._Table);

  00014	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00019	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  0001d	e8 00 00 00 00	 call	 free
  00022	eb 23		 jmp	 SHORT $LN3@Tidy
$LN2@Tidy:

; 2504 : 		else if (_Ctype._Delfl < 0)

  00024	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00029	83 78 20 00	 cmp	 DWORD PTR [rax+32], 0
  0002d	7d 18		 jge	 SHORT $LN4@Tidy

; 2505 : 			delete[] _Ctype._Table;

  0002f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00034	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00038	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  0003d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  00042	e8 00 00 00 00	 call	 ??_V@YAXPEAX@Z		; operator delete[]
$LN4@Tidy:
$LN3@Tidy:

; 2506 : 
; 2507 : 		_CSTD free(_Ctype._LocaleName);

  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0004c	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  00050	e8 00 00 00 00	 call	 free

; 2508 : 		}

  00055	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00059	c3		 ret	 0
?_Tidy@?$ctype@D@std@@IEAAXXZ ENDP			; std::ctype<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?_Init@?$ctype@D@std@@IEAAXAEBV_Locinfo@2@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 96
_Lobj$ = 104
?_Init@?$ctype@D@std@@IEAAXAEBV_Locinfo@2@@Z PROC	; std::ctype<char>::_Init, COMDAT

; 2496 : 		{	// initialize from _Lobj

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2497 : 		_Ctype = _Lobj._Getctype();

  00010	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00015	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Lobj$[rsp]
  0001a	e8 00 00 00 00	 call	 ?_Getctype@_Locinfo@std@@QEBA?AU_Ctypevec@@XZ ; std::_Locinfo::_Getctype
  0001f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00024	48 8d 79 10	 lea	 rdi, QWORD PTR [rcx+16]
  00028	48 8b f0	 mov	 rsi, rax
  0002b	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00030	f3 a4		 rep movsb

; 2498 : 		}

  00032	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00036	5f		 pop	 rdi
  00037	5e		 pop	 rsi
  00038	c3		 ret	 0
?_Init@?$ctype@D@std@@IEAAXAEBV_Locinfo@2@@Z ENDP	; std::ctype<char>::_Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??1?$ctype@D@std@@MEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1?$ctype@D@std@@MEAA@XZ PROC				; std::ctype<char>::~ctype<char>, COMDAT

; 2491 : 		{	// destroy the object

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2
  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$ctype@D@std@@6B@
  0001e	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2492 : 		_Tidy();

  00021	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00026	e8 00 00 00 00	 call	 ?_Tidy@?$ctype@D@std@@IEAAXXZ ; std::ctype<char>::_Tidy
  0002b	90		 npad	 1

; 2493 : 		}

  0002c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00031	e8 00 00 00 00	 call	 ??1ctype_base@std@@UEAA@XZ ; std::ctype_base::~ctype_base
  00036	90		 npad	 1
  00037	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003b	c3		 ret	 0
??1?$ctype@D@std@@MEAA@XZ ENDP				; std::ctype<char>::~ctype<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
tv89 = 48
tv132 = 56
tv128 = 64
$T3 = 72
$T4 = 80
$T5 = 88
_Ppf$ = 208
_Ploc$ = 216
?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z PROC ; std::ctype<char>::_Getcat, COMDAT

; 2468 : 		{	// return locale category mask and construct standard facet

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00011	48 c7 44 24 50
	fe ff ff ff	 mov	 QWORD PTR $T4[rsp], -2
  0001a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR $T1[rsp], 0

; 2469 : 		if (_Ppf != 0 && *_Ppf == 0)

  00022	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR _Ppf$[rsp], 0
  0002b	0f 84 b3 00 00
	00		 je	 $LN2@Getcat
  00031	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR _Ppf$[rsp]
  00039	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0003d	0f 85 a1 00 00
	00		 jne	 $LN2@Getcat

; 2470 : 			*_Ppf = new ctype<_Elem>(

  00043	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00048	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  0004d	48 89 44 24 28	 mov	 QWORD PTR $T2[rsp], rax
  00052	48 83 7c 24 28
	00		 cmp	 QWORD PTR $T2[rsp], 0
  00058	74 4d		 je	 SHORT $LN4@Getcat
  0005a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR _Ploc$[rsp]
  00062	e8 00 00 00 00	 call	 ?c_str@locale@std@@QEBAPEBDXZ ; std::locale::c_str
  00067	48 8b d0	 mov	 rdx, rax
  0006a	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T5[rsp]
  0006f	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QEAA@PEBD@Z ; std::_Locinfo::_Locinfo
  00074	48 89 44 24 38	 mov	 QWORD PTR tv132[rsp], rax
  00079	48 8b 44 24 38	 mov	 rax, QWORD PTR tv132[rsp]
  0007e	48 89 44 24 40	 mov	 QWORD PTR tv128[rsp], rax
  00083	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  00087	83 c8 01	 or	 eax, 1
  0008a	89 44 24 20	 mov	 DWORD PTR $T1[rsp], eax
  0008e	45 33 c0	 xor	 r8d, r8d
  00091	48 8b 54 24 40	 mov	 rdx, QWORD PTR tv128[rsp]
  00096	48 8b 4c 24 28	 mov	 rcx, QWORD PTR $T2[rsp]
  0009b	e8 00 00 00 00	 call	 ??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z ; std::ctype<char>::ctype<char>
  000a0	48 89 44 24 30	 mov	 QWORD PTR tv89[rsp], rax
  000a5	eb 09		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  000a7	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv89[rsp], 0
$LN5@Getcat:
  000b0	48 8b 44 24 30	 mov	 rax, QWORD PTR tv89[rsp]
  000b5	48 89 44 24 48	 mov	 QWORD PTR $T3[rsp], rax
  000ba	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR _Ppf$[rsp]
  000c2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR $T3[rsp]
  000c7	48 89 08	 mov	 QWORD PTR [rax], rcx
  000ca	8b 44 24 20	 mov	 eax, DWORD PTR $T1[rsp]
  000ce	83 e0 01	 and	 eax, 1
  000d1	85 c0		 test	 eax, eax
  000d3	74 0f		 je	 SHORT $LN2@Getcat
  000d5	83 64 24 20 fe	 and	 DWORD PTR $T1[rsp], -2
  000da	48 8d 4c 24 58	 lea	 rcx, QWORD PTR $T5[rsp]
  000df	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QEAA@XZ ; std::_Locinfo::~_Locinfo
$LN2@Getcat:

; 2471 : 				_Locinfo(_Ploc->c_str()));
; 2472 : 		return (_X_CTYPE);

  000e4	b8 02 00 00 00	 mov	 eax, 2

; 2473 : 		}

  000e9	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000f0	c3		 ret	 0
?_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z ENDP ; std::ctype<char>::_Getcat
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
tv89 = 48
tv132 = 56
tv128 = 64
$T3 = 72
$T4 = 80
$T5 = 88
_Ppf$ = 208
_Ploc$ = 216
?dtor$0@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA PROC ; `std::ctype<char>::_Getcat'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0000e	48 8b 4d 28	 mov	 rcx, QWORD PTR $T2[rbp]
  00012	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5d		 pop	 rbp
  0001c	c3		 ret	 0
?dtor$0@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA ENDP ; `std::ctype<char>::_Getcat'::`1'::dtor$0
$T1 = 32
$T2 = 40
tv89 = 48
tv132 = 56
tv128 = 64
$T3 = 72
$T4 = 80
$T5 = 88
_Ppf$ = 208
_Ploc$ = 216
?dtor$1@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA PROC ; `std::ctype<char>::_Getcat'::`1'::dtor$1
  0001d	40 55		 push	 rbp
  0001f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00023	48 8b ea	 mov	 rbp, rdx
  00026	8b 45 20	 mov	 eax, DWORD PTR $T1[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 0d		 je	 SHORT $LN8@dtor$1
  00030	83 65 20 fe	 and	 DWORD PTR $T1[rbp], -2
  00034	48 8d 4d 58	 lea	 rcx, QWORD PTR $T5[rbp]
  00038	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QEAA@XZ ; std::_Locinfo::~_Locinfo
$LN8@dtor$1:
  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?dtor$1@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA ENDP ; `std::ctype<char>::_Getcat'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
tv89 = 48
tv132 = 56
tv128 = 64
$T3 = 72
$T4 = 80
$T5 = 88
_Ppf$ = 208
_Ploc$ = 216
?dtor$0@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA PROC ; `std::ctype<char>::_Getcat'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	ba 30 00 00 00	 mov	 edx, 48			; 00000030H
  0000e	48 8b 4d 28	 mov	 rcx, QWORD PTR $T2[rbp]
  00012	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00017	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0001b	5d		 pop	 rbp
  0001c	c3		 ret	 0
?dtor$0@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA ENDP ; `std::ctype<char>::_Getcat'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
tv89 = 48
tv132 = 56
tv128 = 64
$T3 = 72
$T4 = 80
$T5 = 88
_Ppf$ = 208
_Ploc$ = 216
?dtor$1@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA PROC ; `std::ctype<char>::_Getcat'::`1'::dtor$1
  0001d	40 55		 push	 rbp
  0001f	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00023	48 8b ea	 mov	 rbp, rdx
  00026	8b 45 20	 mov	 eax, DWORD PTR $T1[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 0d		 je	 SHORT $LN8@dtor$1
  00030	83 65 20 fe	 and	 DWORD PTR $T1[rbp], -2
  00034	48 8d 4d 58	 lea	 rcx, QWORD PTR $T5[rbp]
  00038	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QEAA@XZ ; std::_Locinfo::~_Locinfo
$LN8@dtor$1:
  0003d	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?dtor$1@?0??_Getcat@?$ctype@D@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z@4HA ENDP ; `std::ctype<char>::_Getcat'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Lobj$ = 72
_Refs$ = 80
??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z PROC		; std::ctype<char>::ctype<char>, COMDAT

; 2462 : 		{	// construct from current locale

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00013	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 2461 : 		: ctype_base(_Refs)

  0001c	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Refs$[rsp]
  00021	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00026	e8 00 00 00 00	 call	 ??0ctype_base@std@@QEAA@_K@Z ; std::ctype_base::ctype_base
  0002b	90		 npad	 1

; 2462 : 		{	// construct from current locale

  0002c	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$ctype@D@std@@6B@
  00038	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2463 : 		_Init(_Lobj);

  0003b	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Lobj$[rsp]
  00040	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00045	e8 00 00 00 00	 call	 ?_Init@?$ctype@D@std@@IEAAXAEBV_Locinfo@2@@Z ; std::ctype<char>::_Init
  0004a	90		 npad	 1

; 2464 : 		}

  0004b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00050	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00054	c3		 ret	 0
??0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z ENDP		; std::ctype<char>::ctype<char>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
_Lobj$ = 72
_Refs$ = 80
?dtor$0@?0???0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z@4HA PROC ; `std::ctype<char>::ctype<char>'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1ctype_base@std@@UEAA@XZ ; std::ctype_base::~ctype_base
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z@4HA ENDP ; `std::ctype<char>::ctype<char>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
_Lobj$ = 72
_Refs$ = 80
?dtor$0@?0???0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z@4HA PROC ; `std::ctype<char>::ctype<char>'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1ctype_base@std@@UEAA@XZ ; std::ctype_base::~ctype_base
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0?$ctype@D@std@@QEAA@AEBV_Locinfo@1@_K@Z@4HA ENDP ; `std::ctype<char>::ctype<char>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z
_TEXT	SEGMENT
this$ = 48
_First$ = 56
_Last$ = 64
_Dest$ = 72
?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z PROC		; std::ctype<char>::widen, COMDAT

; 2421 : 		{	// widen chars in [_First, _Last)

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2422 : 		return (do_widen(_First, _Last, _Dest));

  00018	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00020	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Dest$[rsp]
  00025	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Last$[rsp]
  0002a	48 8b 54 24 38	 mov	 rdx, QWORD PTR _First$[rsp]
  0002f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00034	ff 50 38	 call	 QWORD PTR [rax+56]

; 2423 : 		}

  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
?widen@?$ctype@D@std@@QEBAPEBDPEBD0PEAD@Z ENDP		; std::ctype<char>::widen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?widen@?$ctype@D@std@@QEBADD@Z
_TEXT	SEGMENT
this$ = 48
_Byte$ = 56
?widen@?$ctype@D@std@@QEBADD@Z PROC			; std::ctype<char>::widen, COMDAT

; 2415 : 		{	// widen char

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2416 : 		return (do_widen(_Byte));

  0000d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00012	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00015	0f b6 54 24 38	 movzx	 edx, BYTE PTR _Byte$[rsp]
  0001a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001f	ff 50 40	 call	 QWORD PTR [rax+64]

; 2417 : 		}

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
?widen@?$ctype@D@std@@QEBADD@Z ENDP			; std::ctype<char>::widen
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gctype_base@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gctype_base@std@@UEAAPEAXI@Z PROC			; std::ctype_base::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1ctype_base@std@@UEAA@XZ ; std::ctype_base::~ctype_base
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 10 00 00 00	 mov	 edx, 16
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_Gctype_base@std@@UEAAPEAXI@Z ENDP			; std::ctype_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??1ctype_base@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1ctype_base@std@@UEAA@XZ PROC				; std::ctype_base::~ctype_base, COMDAT

; 2107 : 		{	// destroy the object

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7ctype_base@std@@6B@
  00015	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2108 : 		}

  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ??1facet@locale@std@@MEAA@XZ ; std::locale::facet::~facet
  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
??1ctype_base@std@@UEAA@XZ ENDP				; std::ctype_base::~ctype_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??0ctype_base@std@@QEAA@_K@Z
_TEXT	SEGMENT
this$ = 48
_Refs$ = 56
??0ctype_base@std@@QEAA@_K@Z PROC			; std::ctype_base::ctype_base, COMDAT

; 2103 : 		{	// default constructor

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2102 : 		: locale::facet(_Refs)

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Refs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ??0facet@locale@std@@IEAA@_K@Z ; std::locale::facet::facet

; 2103 : 		{	// default constructor

  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7ctype_base@std@@6B@
  00029	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2104 : 		}

  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
??0ctype_base@std@@QEAA@_K@Z ENDP			; std::ctype_base::ctype_base
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Glocale@std@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Glocale@std@@QEAAPEAXI@Z PROC			; std::locale::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1locale@std@@QEAA@XZ	; std::locale::~locale
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 10 00 00 00	 mov	 edx, 16
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_Glocale@std@@QEAAPEAXI@Z ENDP			; std::locale::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z
_TEXT	SEGMENT
tv71 = 32
_Facptr$ = 40
_Ptr0$1 = 48
tv83 = 56
this$ = 80
_Id$ = 88
?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z PROC	; std::locale::_Getfacet, COMDAT

; 458  : 		{	// look up a facet in locale object

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 459  : 		const facet *_Facptr = _Id < _Ptr->_Facetcount

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00013	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00017	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0001b	48 39 44 24 58	 cmp	 QWORD PTR _Id$[rsp], rax
  00020	73 1d		 jae	 SHORT $LN6@Getfacet
  00022	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00027	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0002b	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0002f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Id$[rsp]
  00034	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00038	48 89 44 24 20	 mov	 QWORD PTR tv71[rsp], rax
  0003d	eb 09		 jmp	 SHORT $LN7@Getfacet
$LN6@Getfacet:
  0003f	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR tv71[rsp], 0
$LN7@Getfacet:
  00048	48 8b 44 24 20	 mov	 rax, QWORD PTR tv71[rsp]
  0004d	48 89 44 24 28	 mov	 QWORD PTR _Facptr$[rsp], rax

; 460  : 			? _Ptr->_Facetvec[_Id] : 0;	// null if id off end
; 461  : 		if (_Facptr != 0 || !_Ptr->_Xparent)

  00052	48 83 7c 24 28
	00		 cmp	 QWORD PTR _Facptr$[rsp], 0
  00058	75 11		 jne	 SHORT $LN4@Getfacet
  0005a	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0005f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00063	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  00067	85 c0		 test	 eax, eax
  00069	75 09		 jne	 SHORT $LN2@Getfacet
$LN4@Getfacet:

; 462  : 			return (_Facptr);	// found facet or not transparent

  0006b	48 8b 44 24 28	 mov	 rax, QWORD PTR _Facptr$[rsp]
  00070	eb 43		 jmp	 SHORT $LN1@Getfacet

; 463  : 		else

  00072	eb 41		 jmp	 SHORT $LN3@Getfacet
$LN2@Getfacet:

; 464  : 			{	// look in current locale
; 465  : 			locale::_Locimp *_Ptr0 = _Getgloballocale();

  00074	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPEAV_Locimp@12@XZ ; std::locale::_Getgloballocale
  00079	48 89 44 24 30	 mov	 QWORD PTR _Ptr0$1[rsp], rax

; 466  : 			return (_Id < _Ptr0->_Facetcount

  0007e	48 8b 44 24 30	 mov	 rax, QWORD PTR _Ptr0$1[rsp]
  00083	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00087	48 39 44 24 58	 cmp	 QWORD PTR _Id$[rsp], rax
  0008c	73 19		 jae	 SHORT $LN8@Getfacet
  0008e	48 8b 44 24 30	 mov	 rax, QWORD PTR _Ptr0$1[rsp]
  00093	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00097	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Id$[rsp]
  0009c	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  000a0	48 89 44 24 38	 mov	 QWORD PTR tv83[rsp], rax
  000a5	eb 09		 jmp	 SHORT $LN9@Getfacet
$LN8@Getfacet:
  000a7	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv83[rsp], 0
$LN9@Getfacet:
  000b0	48 8b 44 24 38	 mov	 rax, QWORD PTR tv83[rsp]
$LN3@Getfacet:
$LN1@Getfacet:

; 467  : 				? _Ptr0->_Facetvec[_Id]	// get from current locale
; 468  : 				: 0);	// no entry in current locale
; 469  : 			}
; 470  : 		}

  000b5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b9	c3		 ret	 0
?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z ENDP	; std::locale::_Getfacet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?c_str@locale@std@@QEBAPEBDXZ
_TEXT	SEGMENT
tv70 = 32
this$ = 64
?c_str@locale@std@@QEBAPEBDXZ PROC			; std::locale::c_str, COMDAT

; 453  : 		{	// return locale name as NTBS

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 454  : 		return (_Ptr == 0 ? "" : _Ptr->_Name.c_str());

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00013	75 0e		 jne	 SHORT $LN3@c_str
  00015	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0001c	48 89 44 24 20	 mov	 QWORD PTR tv70[rsp], rax
  00021	eb 1a		 jmp	 SHORT $LN4@c_str
$LN3@c_str:
  00023	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00028	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0002c	48 83 c0 28	 add	 rax, 40			; 00000028H
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 ?c_str@?$_Yarn@D@std@@QEBAPEBDXZ ; std::_Yarn<char>::c_str
  00038	48 89 44 24 20	 mov	 QWORD PTR tv70[rsp], rax
$LN4@c_str:
  0003d	48 8b 44 24 20	 mov	 rax, QWORD PTR tv70[rsp]

; 455  : 		}

  00042	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00046	c3		 ret	 0
?c_str@locale@std@@QEBAPEBDXZ ENDP			; std::locale::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??1locale@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
tv84 = 48
$T3 = 56
this$ = 80
??1locale@std@@QEAA@XZ PROC				; std::locale::~locale, COMDAT

; 430  : 		{	// destroy the object

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  00009	48 c7 44 24 38
	fe ff ff ff	 mov	 QWORD PTR $T3[rsp], -2

; 431  : 		if (_Ptr != 0)

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00017	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0001c	74 55		 je	 SHORT $LN2@locale

; 432  : 			delete _Ptr->_Decref();

  0001e	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00030	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00033	ff 50 10	 call	 QWORD PTR [rax+16]
  00036	90		 npad	 1
  00037	48 89 44 24 28	 mov	 QWORD PTR $T2[rsp], rax
  0003c	48 8b 44 24 28	 mov	 rax, QWORD PTR $T2[rsp]
  00041	48 89 44 24 20	 mov	 QWORD PTR $T1[rsp], rax
  00046	48 83 7c 24 20
	00		 cmp	 QWORD PTR $T1[rsp], 0
  0004c	74 1c		 je	 SHORT $LN4@locale
  0004e	48 8b 44 24 20	 mov	 rax, QWORD PTR $T1[rsp]
  00053	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00056	ba 01 00 00 00	 mov	 edx, 1
  0005b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR $T1[rsp]
  00060	ff 10		 call	 QWORD PTR [rax]
  00062	90		 npad	 1
  00063	48 89 44 24 30	 mov	 QWORD PTR tv84[rsp], rax
  00068	eb 09		 jmp	 SHORT $LN2@locale
$LN4@locale:
  0006a	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv84[rsp], 0
$LN2@locale:

; 433  : 		}

  00073	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00077	c3		 ret	 0
??1locale@std@@QEAA@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??0locale@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??0locale@std@@QEAA@XZ PROC				; std::locale::locale, COMDAT

; 331  : 		{	// construct from current locale

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 330  : 		: _Ptr(_Init(true))

  00012	b1 01		 mov	 cl, 1
  00014	e8 00 00 00 00	 call	 ?_Init@locale@std@@CAPEAV_Locimp@12@_N@Z ; std::locale::_Init
  00019	90		 npad	 1
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001f	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 332  : 		}

  00023	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00028	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0002c	c3		 ret	 0
??0locale@std@@QEAA@XZ ENDP				; std::locale::locale
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??0locale@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Right$ = 72
??0locale@std@@QEAA@AEBV01@@Z PROC			; std::locale::locale, COMDAT

; 325  : 		{	// construct by copying

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 324  : 		: _Ptr(_Right._Ptr)

  00017	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0001c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  00021	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00025	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 326  : 		_Ptr->_Incref();

  00029	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0002e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00037	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0003b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003e	ff 50 08	 call	 QWORD PTR [rax+8]
  00041	90		 npad	 1

; 327  : 		}

  00042	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00047	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004b	c3		 ret	 0
??0locale@std@@QEAA@AEBV01@@Z ENDP			; std::locale::locale
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gfacet@locale@std@@MEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gfacet@locale@std@@MEAAPEAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1facet@locale@std@@MEAA@XZ ; std::locale::facet::~facet
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 10 00 00 00	 mov	 edx, 16
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_Gfacet@locale@std@@MEAAPEAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??1facet@locale@std@@MEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1facet@locale@std@@MEAA@XZ PROC			; std::locale::facet::~facet, COMDAT

; 171  : 			{	// ensure that derived classes can be destroyed properly

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7facet@locale@std@@6B@
  00015	48 89 08	 mov	 QWORD PTR [rax], rcx

; 172  : 			}

  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ??1_Facet_base@std@@UEAA@XZ ; std::_Facet_base::~_Facet_base
  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
??1facet@locale@std@@MEAA@XZ ENDP			; std::locale::facet::~facet
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??0facet@locale@std@@IEAA@_K@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Initrefs$ = 72
??0facet@locale@std@@IEAA@_K@Z PROC			; std::locale::facet::facet, COMDAT

; 165  : 		explicit __CLR_OR_THIS_CALL facet(size_t _Initrefs = 0)

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 166  : 			{	// construct with initial reference count

  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001c	e8 00 00 00 00	 call	 ??0_Facet_base@std@@QEAA@XZ
  00021	90		 npad	 1
  00022	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7facet@locale@std@@6B@
  0002e	48 89 08	 mov	 QWORD PTR [rax], rcx

; 167  : 			_Init_atomic_counter(_Myrefs, (_Atomic_integral_t)_Initrefs);

  00031	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c0 08	 add	 rax, 8
  0003a	8b 54 24 48	 mov	 edx, DWORD PTR _Initrefs$[rsp]
  0003e	48 8b c8	 mov	 rcx, rax
  00041	e8 00 00 00 00	 call	 ?_Init_atomic_counter@std@@YAXAEAKK@Z ; std::_Init_atomic_counter
  00046	90		 npad	 1

; 168  : 			}

  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0004c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00050	c3		 ret	 0
??0facet@locale@std@@IEAA@_K@Z ENDP			; std::locale::facet::facet
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
_Initrefs$ = 72
?dtor$0@?0???0facet@locale@std@@IEAA@_K@Z@4HA PROC	; `std::locale::facet::facet'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1_Facet_base@std@@UEAA@XZ ; std::_Facet_base::~_Facet_base
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0facet@locale@std@@IEAA@_K@Z@4HA ENDP	; `std::locale::facet::facet'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
_Initrefs$ = 72
?dtor$0@?0???0facet@locale@std@@IEAA@_K@Z@4HA PROC	; `std::locale::facet::facet'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1_Facet_base@std@@UEAA@XZ ; std::_Facet_base::~_Facet_base
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0facet@locale@std@@IEAA@_K@Z@4HA ENDP	; `std::locale::facet::facet'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ
_TEXT	SEGMENT
this$ = 8
?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ PROC ; std::locale::facet::_Decref, COMDAT

; 154  : 			{	// decrement use count

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 155  : 			if (_MT_DECR(_Myrefs) == 0)

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 83 c0 08	 add	 rax, 8
  0000e	b9 ff ff ff ff	 mov	 ecx, -1
  00013	f0 0f c1 08	 lock xadd DWORD PTR [rax], ecx
  00017	ff c9		 dec	 ecx
  00019	8b c1		 mov	 eax, ecx
  0001b	85 c0		 test	 eax, eax
  0001d	75 09		 jne	 SHORT $LN2@Decref

; 156  : 				return (this);

  0001f	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00024	eb 04		 jmp	 SHORT $LN1@Decref

; 157  : 			else

  00026	eb 02		 jmp	 SHORT $LN3@Decref
$LN2@Decref:

; 158  : 				return (0);

  00028	33 c0		 xor	 eax, eax
$LN3@Decref:
$LN1@Decref:

; 159  : 			}

  0002a	c3		 ret	 0
?_Decref@facet@locale@std@@UEAAPEAV_Facet_base@3@XZ ENDP ; std::locale::facet::_Decref
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ?_Incref@facet@locale@std@@UEAAXXZ
_TEXT	SEGMENT
this$ = 8
?_Incref@facet@locale@std@@UEAAXXZ PROC			; std::locale::facet::_Incref, COMDAT

; 149  : 			{	// increment use count

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 150  : 			_MT_INCR(_Myrefs);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 83 c0 08	 add	 rax, 8
  0000e	f0 ff 00	 lock inc DWORD PTR [rax]

; 151  : 			}

  00011	c3		 ret	 0
?_Incref@facet@locale@std@@UEAAXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??Bid@locale@std@@QEAA_KXZ
_TEXT	SEGMENT
_Lock$1 = 32
this$ = 64
??Bid@locale@std@@QEAA_KXZ PROC				; std::locale::id::operator unsigned __int64, COMDAT

; 114  : 			{	// get stamp, with lazy allocation

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 115  : 			if (_Id == 0)

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00012	75 3e		 jne	 SHORT $LN2@operator

; 116  : 				{	// still zero, allocate stamp
; 117  : 				_BEGIN_LOCK(_LOCK_LOCALE)

  00014	33 d2		 xor	 edx, edx
  00016	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  0001b	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit

; 118  : 					if (_Id == 0)

  00020	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00025	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00029	75 1d		 jne	 SHORT $LN3@operator

; 119  : 						_Id = ++_Id_cnt;

  0002b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00031	ff c0		 inc	 eax
  00033	89 05 00 00 00
	00		 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00039	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00040	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00045	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN3@operator:

; 120  : 				_END_LOCK()

  00048	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Lock$1[rsp]
  0004d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit
$LN2@operator:

; 121  : 				}
; 122  : 			return (_Id);

  00052	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00057	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 123  : 			}

  0005a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005e	c3		 ret	 0
??Bid@locale@std@@QEAA_KXZ ENDP				; std::locale::id::operator unsigned __int64
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocale
;	COMDAT ??0id@locale@std@@QEAA@_K@Z
_TEXT	SEGMENT
this$ = 8
_Val$ = 16
??0id@locale@std@@QEAA@_K@Z PROC			; std::locale::id::id, COMDAT

; 110  : 			{	// construct with specified stamp value

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 109  : 			: _Id(_Val)

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR _Val$[rsp]
  00014	48 89 08	 mov	 QWORD PTR [rax], rcx

; 111  : 			}

  00017	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0001c	c3		 ret	 0
??0id@locale@std@@QEAA@_K@Z ENDP			; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_G_Facet_base@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_G_Facet_base@std@@UEAAPEAXI@Z PROC			; std::_Facet_base::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1_Facet_base@std@@UEAA@XZ ; std::_Facet_base::~_Facet_base
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 08 00 00 00	 mov	 edx, 8
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_G_Facet_base@std@@UEAAPEAXI@Z ENDP			; std::_Facet_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0_Facet_base@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0_Facet_base@std@@QEAA@XZ PROC			; std::_Facet_base::_Facet_base, COMDAT
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7_Facet_base@std@@6B@
  00011	48 89 08	 mov	 QWORD PTR [rax], rcx
  00014	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00019	c3		 ret	 0
??0_Facet_base@std@@QEAA@XZ ENDP			; std::_Facet_base::_Facet_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xfacet
;	COMDAT ??1_Facet_base@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1_Facet_base@std@@UEAA@XZ PROC			; std::_Facet_base::~_Facet_base, COMDAT

; 24   : 		{	// ensure that derived classes can be destroyed properly

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7_Facet_base@std@@6B@
  00011	48 89 08	 mov	 QWORD PTR [rax], rcx

; 25   : 		}

  00014	c3		 ret	 0
??1_Facet_base@std@@UEAA@XZ ENDP			; std::_Facet_base::~_Facet_base
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Tidy@?$_Yarn@_W@std@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Tidy@?$_Yarn@_W@std@@AEAAXXZ PROC			; std::_Yarn<wchar_t>::_Tidy, COMDAT

; 3796 : 		{	// discard any string

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3797 : 		if (_Myptr != 0)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00012	74 0d		 je	 SHORT $LN2@Tidy

; 3798 : 
; 3799 :  #ifdef _DEBUG
; 3800 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 3801 : 
; 3802 :  #else /* _DEBUG */
; 3803 : 			_CSTD free(_Myptr);

  00014	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00019	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0001c	e8 00 00 00 00	 call	 free
$LN2@Tidy:

; 3804 :  #endif /* _DEBUG */
; 3805 : 
; 3806 : 		_Myptr = 0;

  00021	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00026	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 3807 : 		}

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
?_Tidy@?$_Yarn@_W@std@@AEAAXXZ ENDP			; std::_Yarn<wchar_t>::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??1?$_Yarn@_W@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1?$_Yarn@_W@std@@QEAA@XZ PROC				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>, COMDAT

; 3770 : 		{	// destroy the object

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 3771 : 		_Tidy();

  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00017	e8 00 00 00 00	 call	 ?_Tidy@?$_Yarn@_W@std@@AEAAXXZ ; std::_Yarn<wchar_t>::_Tidy
  0001c	90		 npad	 1

; 3772 : 		}

  0001d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00021	c3		 ret	 0
??1?$_Yarn@_W@std@@QEAA@XZ ENDP				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??0?$_Yarn@_W@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Yarn@_W@std@@QEAA@XZ PROC				; std::_Yarn<wchar_t>::_Yarn<wchar_t>, COMDAT

; 3720 : 		{	// default construct

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 3719 : 		: _Myptr(0), _Nul(0)

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00011	33 c0		 xor	 eax, eax
  00013	48 8b 4c 24 08	 mov	 rcx, QWORD PTR this$[rsp]
  00018	66 89 41 08	 mov	 WORD PTR [rcx+8], ax

; 3721 : 		}

  0001c	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00021	c3		 ret	 0
??0?$_Yarn@_W@std@@QEAA@XZ ENDP				; std::_Yarn<wchar_t>::_Yarn<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Tidy@?$_Yarn@D@std@@AEAAXXZ
_TEXT	SEGMENT
this$ = 48
?_Tidy@?$_Yarn@D@std@@AEAAXXZ PROC			; std::_Yarn<char>::_Tidy, COMDAT

; 3796 : 		{	// discard any string

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3797 : 		if (_Myptr != 0)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00012	74 0d		 je	 SHORT $LN2@Tidy

; 3798 : 
; 3799 :  #ifdef _DEBUG
; 3800 : 			_free_dbg(_Myptr, _CRT_BLOCK);
; 3801 : 
; 3802 :  #else /* _DEBUG */
; 3803 : 			_CSTD free(_Myptr);

  00014	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00019	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0001c	e8 00 00 00 00	 call	 free
$LN2@Tidy:

; 3804 :  #endif /* _DEBUG */
; 3805 : 
; 3806 : 		_Myptr = 0;

  00021	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00026	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 3807 : 		}

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
?_Tidy@?$_Yarn@D@std@@AEAAXXZ ENDP			; std::_Yarn<char>::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?c_str@?$_Yarn@D@std@@QEBAPEBDXZ
_TEXT	SEGMENT
tv68 = 0
this$ = 32
?c_str@?$_Yarn@D@std@@QEBAPEBDXZ PROC			; std::_Yarn<char>::c_str, COMDAT

; 3780 : 		{	// return NTBS

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 3781 : 		return (_Myptr != 0 ? _Myptr : &_Nul);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00012	74 0e		 je	 SHORT $LN3@c_str
  00014	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00019	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001c	48 89 04 24	 mov	 QWORD PTR tv68[rsp], rax
  00020	eb 0d		 jmp	 SHORT $LN4@c_str
$LN3@c_str:
  00022	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  00027	48 83 c0 08	 add	 rax, 8
  0002b	48 89 04 24	 mov	 QWORD PTR tv68[rsp], rax
$LN4@c_str:
  0002f	48 8b 04 24	 mov	 rax, QWORD PTR tv68[rsp]

; 3782 : 		}

  00033	48 83 c4 18	 add	 rsp, 24
  00037	c3		 ret	 0
?c_str@?$_Yarn@D@std@@QEBAPEBDXZ ENDP			; std::_Yarn<char>::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??1?$_Yarn@D@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1?$_Yarn@D@std@@QEAA@XZ PROC				; std::_Yarn<char>::~_Yarn<char>, COMDAT

; 3770 : 		{	// destroy the object

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 3771 : 		_Tidy();

  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00017	e8 00 00 00 00	 call	 ?_Tidy@?$_Yarn@D@std@@AEAAXXZ ; std::_Yarn<char>::_Tidy
  0001c	90		 npad	 1

; 3772 : 		}

  0001d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00021	c3		 ret	 0
??1?$_Yarn@D@std@@QEAA@XZ ENDP				; std::_Yarn<char>::~_Yarn<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ??0?$_Yarn@D@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$_Yarn@D@std@@QEAA@XZ PROC				; std::_Yarn<char>::_Yarn<char>, COMDAT

; 3720 : 		{	// default construct

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 3719 : 		: _Myptr(0), _Nul(0)

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00011	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  00016	c6 40 08 00	 mov	 BYTE PTR [rax+8], 0

; 3721 : 		}

  0001a	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0001f	c3		 ret	 0
??0?$_Yarn@D@std@@QEAA@XZ ENDP				; std::_Yarn<char>::_Yarn<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocinfo
;	COMDAT ?_Gettrue@_Locinfo@std@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 8
?_Gettrue@_Locinfo@std@@QEBAPEBDXZ PROC			; std::_Locinfo::_Gettrue, COMDAT

; 171  : 		{	// return true name (no C source)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 172  : 		return ("true");

  00005	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04LOAJBDKD@true?$AA@

; 173  : 		}

  0000c	c3		 ret	 0
?_Gettrue@_Locinfo@std@@QEBAPEBDXZ ENDP			; std::_Locinfo::_Gettrue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocinfo
;	COMDAT ?_Getfalse@_Locinfo@std@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 8
?_Getfalse@_Locinfo@std@@QEBAPEBDXZ PROC		; std::_Locinfo::_Getfalse, COMDAT

; 166  : 		{	// return false name (no C source)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 167  : 		return ("false");

  00005	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05LAPONLG@false?$AA@

; 168  : 		}

  0000c	c3		 ret	 0
?_Getfalse@_Locinfo@std@@QEBAPEBDXZ ENDP		; std::_Locinfo::_Getfalse
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocinfo
;	COMDAT ?_Getlconv@_Locinfo@std@@QEBAPEBUlconv@@XZ
_TEXT	SEGMENT
this$ = 48
?_Getlconv@_Locinfo@std@@QEBAPEBUlconv@@XZ PROC		; std::_Locinfo::_Getlconv, COMDAT

; 126  : 		{	// return localeconv stuff

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 127  : 		return (localeconv());

  00009	e8 00 00 00 00	 call	 localeconv

; 128  : 		}

  0000e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00012	c3		 ret	 0
?_Getlconv@_Locinfo@std@@QEBAPEBUlconv@@XZ ENDP		; std::_Locinfo::_Getlconv
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocinfo
;	COMDAT ?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 80
__$ArrayPad$ = 128
this$ = 176
__$ReturnUdt$ = 184
?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ PROC		; std::_Locinfo::_Getcvt, COMDAT

; 121  : 		{	// return codecvt stuff

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 122  : 		return (::_Getcvt());

  00025	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  0002a	e8 00 00 00 00	 call	 _Getcvt
  0002f	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T2[rsp]
  00034	48 8b f9	 mov	 rdi, rcx
  00037	48 8b f0	 mov	 rsi, rax
  0003a	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  0003f	f3 a4		 rep movsb
  00041	48 8d 44 24 50	 lea	 rax, QWORD PTR $T2[rsp]
  00046	48 8b bc 24 b8
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnUdt$[rsp]
  0004e	48 8b f0	 mov	 rsi, rax
  00051	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00056	f3 a4		 rep movsb
  00058	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 123  : 		}

  00060	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00068	48 33 cc	 xor	 rcx, rsp
  0006b	e8 00 00 00 00	 call	 __security_check_cookie
  00070	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00077	5f		 pop	 rdi
  00078	5e		 pop	 rsi
  00079	c3		 ret	 0
?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ ENDP		; std::_Locinfo::_Getcvt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocinfo
;	COMDAT ?_Getctype@_Locinfo@std@@QEBA?AU_Ctypevec@@XZ
_TEXT	SEGMENT
$T1 = 32
$T2 = 64
this$ = 128
__$ReturnUdt$ = 136
?_Getctype@_Locinfo@std@@QEBA?AU_Ctypevec@@XZ PROC	; std::_Locinfo::_Getctype, COMDAT

; 116  : 		{	// return ctype stuff

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 117  : 		return (::_Getctype());

  00010	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T2[rsp]
  00015	e8 00 00 00 00	 call	 _Getctype
  0001a	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  0001f	48 8b f9	 mov	 rdi, rcx
  00022	48 8b f0	 mov	 rsi, rax
  00025	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0002a	f3 a4		 rep movsb
  0002c	48 8d 44 24 20	 lea	 rax, QWORD PTR $T1[rsp]
  00031	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnUdt$[rsp]
  00039	48 8b f0	 mov	 rsi, rax
  0003c	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00041	f3 a4		 rep movsb
  00043	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 118  : 		}

  0004b	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0004f	5f		 pop	 rdi
  00050	5e		 pop	 rsi
  00051	c3		 ret	 0
?_Getctype@_Locinfo@std@@QEBA?AU_Ctypevec@@XZ ENDP	; std::_Locinfo::_Getctype
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocinfo
;	COMDAT ??1_Locinfo@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1_Locinfo@std@@QEAA@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT

; 94   : 		{	// destroy the object

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 95   : 		_Locinfo_dtor(this);

  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00017	e8 00 00 00 00	 call	 ?_Locinfo_dtor@_Locinfo@std@@SAXPEAV12@@Z ; std::_Locinfo::_Locinfo_dtor
  0001c	90		 npad	 1

; 96   : 		}

  0001d	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 83 c0 58	 add	 rax, 88			; 00000058H
  00026	48 8b c8	 mov	 rcx, rax
  00029	e8 00 00 00 00	 call	 ??1?$_Yarn@D@std@@QEAA@XZ ; std::_Yarn<char>::~_Yarn<char>
  0002e	90		 npad	 1
  0002f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00034	48 83 c0 48	 add	 rax, 72			; 00000048H
  00038	48 8b c8	 mov	 rcx, rax
  0003b	e8 00 00 00 00	 call	 ??1?$_Yarn@D@std@@QEAA@XZ ; std::_Yarn<char>::~_Yarn<char>
  00040	90		 npad	 1
  00041	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00046	48 83 c0 38	 add	 rax, 56			; 00000038H
  0004a	48 8b c8	 mov	 rcx, rax
  0004d	e8 00 00 00 00	 call	 ??1?$_Yarn@_W@std@@QEAA@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
  00052	90		 npad	 1
  00053	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00058	48 83 c0 28	 add	 rax, 40			; 00000028H
  0005c	48 8b c8	 mov	 rcx, rax
  0005f	e8 00 00 00 00	 call	 ??1?$_Yarn@_W@std@@QEAA@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
  00064	90		 npad	 1
  00065	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0006a	48 83 c0 18	 add	 rax, 24
  0006e	48 8b c8	 mov	 rcx, rax
  00071	e8 00 00 00 00	 call	 ??1?$_Yarn@D@std@@QEAA@XZ ; std::_Yarn<char>::~_Yarn<char>
  00076	90		 npad	 1
  00077	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0007c	48 83 c0 08	 add	 rax, 8
  00080	48 8b c8	 mov	 rcx, rax
  00083	e8 00 00 00 00	 call	 ??1?$_Yarn@D@std@@QEAA@XZ ; std::_Yarn<char>::~_Yarn<char>
  00088	90		 npad	 1
  00089	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0008e	48 8b c8	 mov	 rcx, rax
  00091	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit
  00096	90		 npad	 1
  00097	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009b	c3		 ret	 0
??1_Locinfo@std@@QEAA@XZ ENDP				; std::_Locinfo::~_Locinfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xlocinfo
;	COMDAT ??0_Locinfo@std@@QEAA@PEBD@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 40
this$ = 80
_Pch$ = 88
??0_Locinfo@std@@QEAA@PEBD@Z PROC			; std::_Locinfo::_Locinfo, COMDAT

; 76   : 		{	// construct from NTBS

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 73   : 		: _Lock(_LOCK_LOCALE)

  00017	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0001c	33 d2		 xor	 edx, edx
  0001e	48 8b c8	 mov	 rcx, rax
  00021	e8 00 00 00 00	 call	 ??0_Lockit@std@@QEAA@H@Z ; std::_Lockit::_Lockit
  00026	90		 npad	 1

; 76   : 		{	// construct from NTBS

  00027	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0002c	48 83 c0 08	 add	 rax, 8
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 ??0?$_Yarn@D@std@@QEAA@XZ ; std::_Yarn<char>::_Yarn<char>
  00038	90		 npad	 1
  00039	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  0003e	48 83 c0 18	 add	 rax, 24
  00042	48 8b c8	 mov	 rcx, rax
  00045	e8 00 00 00 00	 call	 ??0?$_Yarn@D@std@@QEAA@XZ ; std::_Yarn<char>::_Yarn<char>
  0004a	90		 npad	 1
  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00050	48 83 c0 28	 add	 rax, 40			; 00000028H
  00054	48 8b c8	 mov	 rcx, rax
  00057	e8 00 00 00 00	 call	 ??0?$_Yarn@_W@std@@QEAA@XZ ; std::_Yarn<wchar_t>::_Yarn<wchar_t>
  0005c	90		 npad	 1
  0005d	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00062	48 83 c0 38	 add	 rax, 56			; 00000038H
  00066	48 8b c8	 mov	 rcx, rax
  00069	e8 00 00 00 00	 call	 ??0?$_Yarn@_W@std@@QEAA@XZ ; std::_Yarn<wchar_t>::_Yarn<wchar_t>
  0006e	90		 npad	 1
  0006f	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00074	48 83 c0 48	 add	 rax, 72			; 00000048H
  00078	48 8b c8	 mov	 rcx, rax
  0007b	e8 00 00 00 00	 call	 ??0?$_Yarn@D@std@@QEAA@XZ ; std::_Yarn<char>::_Yarn<char>
  00080	90		 npad	 1
  00081	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  00086	48 83 c0 58	 add	 rax, 88			; 00000058H
  0008a	48 8b c8	 mov	 rcx, rax
  0008d	e8 00 00 00 00	 call	 ??0?$_Yarn@D@std@@QEAA@XZ ; std::_Yarn<char>::_Yarn<char>
  00092	90		 npad	 1

; 77   : 		if (_Pch == 0)

  00093	48 83 7c 24 58
	00		 cmp	 QWORD PTR _Pch$[rsp], 0
  00099	75 22		 jne	 SHORT $LN2@Locinfo

; 78   : 			_THROW_NCEE(runtime_error, "bad locale name");

  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@ELKIONDK@bad?5locale?5name?$AA@
  000a2	48 8d 4c 24 28	 lea	 rcx, QWORD PTR $T2[rsp]
  000a7	e8 00 00 00 00	 call	 ??0runtime_error@std@@QEAA@PEBD@Z ; std::runtime_error::runtime_error
  000ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVruntime_error@std@@
  000b3	48 8d 4c 24 28	 lea	 rcx, QWORD PTR $T2[rsp]
  000b8	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@Locinfo:

; 79   : 		_Locinfo_ctor(this, _Pch);

  000bd	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Pch$[rsp]
  000c2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000c7	e8 00 00 00 00	 call	 ?_Locinfo_ctor@_Locinfo@std@@SAXPEAV12@PEBD@Z ; std::_Locinfo::_Locinfo_ctor
  000cc	90		 npad	 1

; 80   : 		}

  000cd	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
  000d2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d6	c3		 ret	 0
$LN11@Locinfo:
??0_Locinfo@std@@QEAA@PEBD@Z ENDP			; std::_Locinfo::_Locinfo
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
this$ = 80
_Pch$ = 88
?dtor$0@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA PROC	; `std::_Locinfo::_Locinfo'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 50	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA ENDP	; `std::_Locinfo::_Locinfo'::`1'::dtor$0
$T1 = 32
$T2 = 40
this$ = 80
_Pch$ = 88
?dtor$1@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA PROC	; `std::_Locinfo::_Locinfo'::`1'::dtor$1
  00018	40 55		 push	 rbp
  0001a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001e	48 8b ea	 mov	 rbp, rdx
  00021	48 8b 4d 50	 mov	 rcx, QWORD PTR this$[rbp]
  00025	48 83 c1 08	 add	 rcx, 8
  00029	e8 00 00 00 00	 call	 ??1?$_Yarn@D@std@@QEAA@XZ ; std::_Yarn<char>::~_Yarn<char>
  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
?dtor$1@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA ENDP	; `std::_Locinfo::_Locinfo'::`1'::dtor$1
$T1 = 32
$T2 = 40
this$ = 80
_Pch$ = 88
?dtor$2@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA PROC	; `std::_Locinfo::_Locinfo'::`1'::dtor$2
  00034	40 55		 push	 rbp
  00036	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0003a	48 8b ea	 mov	 rbp, rdx
  0003d	48 8b 4d 50	 mov	 rcx, QWORD PTR this$[rbp]
  00041	48 83 c1 18	 add	 rcx, 24
  00045	e8 00 00 00 00	 call	 ??1?$_Yarn@D@std@@QEAA@XZ ; std::_Yarn<char>::~_Yarn<char>
  0004a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004e	5d		 pop	 rbp
  0004f	c3		 ret	 0
?dtor$2@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA ENDP	; `std::_Locinfo::_Locinfo'::`1'::dtor$2
$T1 = 32
$T2 = 40
this$ = 80
_Pch$ = 88
?dtor$3@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA PROC	; `std::_Locinfo::_Locinfo'::`1'::dtor$3
  00050	40 55		 push	 rbp
  00052	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00056	48 8b ea	 mov	 rbp, rdx
  00059	48 8b 4d 50	 mov	 rcx, QWORD PTR this$[rbp]
  0005d	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00061	e8 00 00 00 00	 call	 ??1?$_Yarn@_W@std@@QEAA@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
  00066	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006a	5d		 pop	 rbp
  0006b	c3		 ret	 0
?dtor$3@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA ENDP	; `std::_Locinfo::_Locinfo'::`1'::dtor$3
$T1 = 32
$T2 = 40
this$ = 80
_Pch$ = 88
?dtor$4@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA PROC	; `std::_Locinfo::_Locinfo'::`1'::dtor$4
  0006c	40 55		 push	 rbp
  0006e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00072	48 8b ea	 mov	 rbp, rdx
  00075	48 8b 4d 50	 mov	 rcx, QWORD PTR this$[rbp]
  00079	48 83 c1 38	 add	 rcx, 56			; 00000038H
  0007d	e8 00 00 00 00	 call	 ??1?$_Yarn@_W@std@@QEAA@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
  00082	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00086	5d		 pop	 rbp
  00087	c3		 ret	 0
?dtor$4@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA ENDP	; `std::_Locinfo::_Locinfo'::`1'::dtor$4
$T1 = 32
$T2 = 40
this$ = 80
_Pch$ = 88
?dtor$5@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA PROC	; `std::_Locinfo::_Locinfo'::`1'::dtor$5
  00088	40 55		 push	 rbp
  0008a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0008e	48 8b ea	 mov	 rbp, rdx
  00091	48 8b 4d 50	 mov	 rcx, QWORD PTR this$[rbp]
  00095	48 83 c1 48	 add	 rcx, 72			; 00000048H
  00099	e8 00 00 00 00	 call	 ??1?$_Yarn@D@std@@QEAA@XZ ; std::_Yarn<char>::~_Yarn<char>
  0009e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a2	5d		 pop	 rbp
  000a3	c3		 ret	 0
?dtor$5@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA ENDP	; `std::_Locinfo::_Locinfo'::`1'::dtor$5
$T1 = 32
$T2 = 40
this$ = 80
_Pch$ = 88
?dtor$6@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA PROC	; `std::_Locinfo::_Locinfo'::`1'::dtor$6
  000a4	40 55		 push	 rbp
  000a6	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  000aa	48 8b ea	 mov	 rbp, rdx
  000ad	48 8b 4d 50	 mov	 rcx, QWORD PTR this$[rbp]
  000b1	48 83 c1 58	 add	 rcx, 88			; 00000058H
  000b5	e8 00 00 00 00	 call	 ??1?$_Yarn@D@std@@QEAA@XZ ; std::_Yarn<char>::~_Yarn<char>
  000ba	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000be	5d		 pop	 rbp
  000bf	c3		 ret	 0
?dtor$6@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA ENDP	; `std::_Locinfo::_Locinfo'::`1'::dtor$6
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
this$ = 80
_Pch$ = 88
?dtor$0@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA PROC	; `std::_Locinfo::_Locinfo'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 50	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1_Lockit@std@@QEAA@XZ	; std::_Lockit::~_Lockit
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA ENDP	; `std::_Locinfo::_Locinfo'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
this$ = 80
_Pch$ = 88
?dtor$1@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA PROC	; `std::_Locinfo::_Locinfo'::`1'::dtor$1
  00018	40 55		 push	 rbp
  0001a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0001e	48 8b ea	 mov	 rbp, rdx
  00021	48 8b 4d 50	 mov	 rcx, QWORD PTR this$[rbp]
  00025	48 83 c1 08	 add	 rcx, 8
  00029	e8 00 00 00 00	 call	 ??1?$_Yarn@D@std@@QEAA@XZ ; std::_Yarn<char>::~_Yarn<char>
  0002e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
?dtor$1@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA ENDP	; `std::_Locinfo::_Locinfo'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
this$ = 80
_Pch$ = 88
?dtor$2@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA PROC	; `std::_Locinfo::_Locinfo'::`1'::dtor$2
  00034	40 55		 push	 rbp
  00036	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0003a	48 8b ea	 mov	 rbp, rdx
  0003d	48 8b 4d 50	 mov	 rcx, QWORD PTR this$[rbp]
  00041	48 83 c1 18	 add	 rcx, 24
  00045	e8 00 00 00 00	 call	 ??1?$_Yarn@D@std@@QEAA@XZ ; std::_Yarn<char>::~_Yarn<char>
  0004a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0004e	5d		 pop	 rbp
  0004f	c3		 ret	 0
?dtor$2@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA ENDP	; `std::_Locinfo::_Locinfo'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
this$ = 80
_Pch$ = 88
?dtor$3@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA PROC	; `std::_Locinfo::_Locinfo'::`1'::dtor$3
  00050	40 55		 push	 rbp
  00052	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00056	48 8b ea	 mov	 rbp, rdx
  00059	48 8b 4d 50	 mov	 rcx, QWORD PTR this$[rbp]
  0005d	48 83 c1 28	 add	 rcx, 40			; 00000028H
  00061	e8 00 00 00 00	 call	 ??1?$_Yarn@_W@std@@QEAA@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
  00066	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0006a	5d		 pop	 rbp
  0006b	c3		 ret	 0
?dtor$3@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA ENDP	; `std::_Locinfo::_Locinfo'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
this$ = 80
_Pch$ = 88
?dtor$4@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA PROC	; `std::_Locinfo::_Locinfo'::`1'::dtor$4
  0006c	40 55		 push	 rbp
  0006e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00072	48 8b ea	 mov	 rbp, rdx
  00075	48 8b 4d 50	 mov	 rcx, QWORD PTR this$[rbp]
  00079	48 83 c1 38	 add	 rcx, 56			; 00000038H
  0007d	e8 00 00 00 00	 call	 ??1?$_Yarn@_W@std@@QEAA@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
  00082	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00086	5d		 pop	 rbp
  00087	c3		 ret	 0
?dtor$4@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA ENDP	; `std::_Locinfo::_Locinfo'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
this$ = 80
_Pch$ = 88
?dtor$5@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA PROC	; `std::_Locinfo::_Locinfo'::`1'::dtor$5
  00088	40 55		 push	 rbp
  0008a	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0008e	48 8b ea	 mov	 rbp, rdx
  00091	48 8b 4d 50	 mov	 rcx, QWORD PTR this$[rbp]
  00095	48 83 c1 48	 add	 rcx, 72			; 00000048H
  00099	e8 00 00 00 00	 call	 ??1?$_Yarn@D@std@@QEAA@XZ ; std::_Yarn<char>::~_Yarn<char>
  0009e	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000a2	5d		 pop	 rbp
  000a3	c3		 ret	 0
?dtor$5@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA ENDP	; `std::_Locinfo::_Locinfo'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 40
this$ = 80
_Pch$ = 88
?dtor$6@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA PROC	; `std::_Locinfo::_Locinfo'::`1'::dtor$6
  000a4	40 55		 push	 rbp
  000a6	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  000aa	48 8b ea	 mov	 rbp, rdx
  000ad	48 8b 4d 50	 mov	 rcx, QWORD PTR this$[rbp]
  000b1	48 83 c1 58	 add	 rcx, 88			; 00000058H
  000b5	e8 00 00 00 00	 call	 ??1?$_Yarn@D@std@@QEAA@XZ ; std::_Yarn<char>::~_Yarn<char>
  000ba	48 83 c4 20	 add	 rsp, 32			; 00000020H
  000be	5d		 pop	 rbp
  000bf	c3		 ret	 0
?dtor$6@?0???0_Locinfo@std@@QEAA@PEBD@Z@4HA ENDP	; `std::_Locinfo::_Locinfo'::`1'::dtor$6
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gbad_cast@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gbad_cast@std@@UEAAPEAXI@Z PROC			; std::bad_cast::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1bad_cast@std@@UEAA@XZ
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 18 00 00 00	 mov	 edx, 24
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_Gbad_cast@std@@UEAAPEAXI@Z ENDP			; std::bad_cast::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0bad_cast@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0bad_cast@std@@QEAA@AEBV01@@Z PROC			; std::bad_cast::bad_cast, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@AEBV01@@Z ; std::exception::exception
  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_cast@std@@6B@
  00029	48 89 08	 mov	 QWORD PTR [rax], rcx
  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
??0bad_cast@std@@QEAA@AEBV01@@Z ENDP			; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1bad_cast@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1bad_cast@std@@UEAA@XZ PROC				; std::bad_cast::~bad_cast, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
??1bad_cast@std@@UEAA@XZ ENDP				; std::bad_cast::~bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_typeinfo.h
;	COMDAT ??0bad_cast@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0bad_cast@std@@QEAA@XZ PROC				; std::bad_cast::bad_cast, COMDAT

; 125  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 124  :         : exception("bad cast", 1)

  00009	41 b8 01 00 00
	00		 mov	 r8d, 1
  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08EPJLHIJG@bad?5cast?$AA@
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001b	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@QEBDH@Z ; std::exception::exception

; 125  :     {

  00020	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_cast@std@@6B@
  0002c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 126  :     }

  0002f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00034	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00038	c3		 ret	 0
??0bad_cast@std@@QEAA@XZ ENDP				; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gruntime_error@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gruntime_error@std@@UEAAPEAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1runtime_error@std@@UEAA@XZ
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 18 00 00 00	 mov	 edx, 24
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_Gruntime_error@std@@UEAAPEAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0runtime_error@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
__that$ = 56
??0runtime_error@std@@QEAA@AEBV01@@Z PROC		; std::runtime_error::runtime_error, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR __that$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@AEBV01@@Z ; std::exception::exception
  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7runtime_error@std@@6B@
  00029	48 89 08	 mov	 QWORD PTR [rax], rcx
  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
??0runtime_error@std@@QEAA@AEBV01@@Z ENDP		; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1runtime_error@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1runtime_error@std@@UEAA@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
??1runtime_error@std@@UEAA@XZ ENDP			; std::runtime_error::~runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\stdexcept
;	COMDAT ??0runtime_error@std@@QEAA@PEBD@Z
_TEXT	SEGMENT
this$ = 48
_Message$ = 56
??0runtime_error@std@@QEAA@PEBD@Z PROC			; std::runtime_error::runtime_error, COMDAT

; 168  : 		{	// construct from message string

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 167  : 		: _Mybase(_Message)

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Message$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@QEBD@Z ; std::exception::exception

; 168  : 		{	// construct from message string

  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7runtime_error@std@@6B@
  00029	48 89 08	 mov	 QWORD PTR [rax], rcx

; 169  : 		}

  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
??0runtime_error@std@@QEAA@PEBD@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\stdexcept
;	COMDAT ??0runtime_error@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
this$ = 48
_Message$ = 56
??0runtime_error@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::runtime_error::runtime_error, COMDAT

; 163  : 		{	// construct from message string

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 162  : 		: _Mybase(_Message.c_str())

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Message$[rsp]
  00013	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00018	48 8b d0	 mov	 rdx, rax
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00020	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@QEBD@Z ; std::exception::exception

; 163  : 		{	// construct from message string

  00025	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7runtime_error@std@@6B@
  00031	48 89 08	 mov	 QWORD PTR [rax], rcx

; 164  : 		}

  00034	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00039	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003d	c3		 ret	 0
??0runtime_error@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ
_TEXT	SEGMENT
this$ = 48
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT

; 2282 : 		{	// report an out_of_range error

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2283 : 		_Xout_of_range("invalid string position");

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
  00010	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPEBD@Z ; std::_Xout_of_range
$LN2@Xran:

; 2284 : 		}

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAX_K@Z
_TEXT	SEGMENT
this$ = 48
_Off$ = 56
?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAX_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Check_offset, COMDAT

; 2270 : 		{	// checks whether _Off is in the bounds of [0, this->size()]

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2271 : 		if (this->_Mysize() < _Off)

  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEB_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  00018	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Off$[rsp]
  0001d	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00020	73 0a		 jae	 SHORT $LN2@Check_offs

; 2272 : 			_Xran();

  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00027	e8 00 00 00 00	 call	 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN2@Check_offs:
$LN3@Check_offs:

; 2273 : 		}

  0002c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00030	c3		 ret	 0
?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAX_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ
_TEXT	SEGMENT
this$ = 48
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT

; 2265 : 		{	// report a length_error

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2266 : 		_Xlength_error("string too long");

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
  00010	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
$LN2@Xlen:

; 2267 : 		}

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z
_TEXT	SEGMENT
_Ptr$1 = 32
tv87 = 40
tv132 = 48
tv155 = 56
this$ = 80
_Built$ = 88
_Newsize$ = 96
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT

; 2248 : 		{	// initialize buffer, deallocating any storage

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2249 : 		if (!_Built)

  00012	0f b6 44 24 58	 movzx	 eax, BYTE PTR _Built$[rsp]
  00017	85 c0		 test	 eax, eax
  00019	75 05		 jne	 SHORT $LN2@Tidy
  0001b	e9 c1 00 00 00	 jmp	 $LN3@Tidy
$LN2@Tidy:

; 2250 : 			;
; 2251 : 		else if (this->_BUF_SIZE <= this->_Myres())

  00020	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00025	e8 00 00 00 00	 call	 ?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres
  0002a	48 83 38 10	 cmp	 QWORD PTR [rax], 16
  0002e	0f 82 ad 00 00
	00		 jb	 $LN4@Tidy

; 2252 : 			{	// copy any leftovers to small buffer and deallocate
; 2253 : 			pointer _Ptr = this->_Bx()._Ptr;

  00034	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00039	e8 00 00 00 00	 call	 ?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Bx
  0003e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00041	48 89 44 24 20	 mov	 QWORD PTR _Ptr$1[rsp], rax

; 2254 : 			this->_Getal().destroy(_STD addressof(this->_Bx()._Ptr));

  00046	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0004b	e8 00 00 00 00	 call	 ?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Bx
  00050	48 8b c8	 mov	 rcx, rax
  00053	e8 00 00 00 00	 call	 ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char * __ptr64>
  00058	48 89 44 24 28	 mov	 QWORD PTR tv87[rsp], rax
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00062	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00067	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv87[rsp]
  0006c	48 8b d1	 mov	 rdx, rcx
  0006f	48 8b c8	 mov	 rcx, rax
  00072	e8 00 00 00 00	 call	 ??$destroy@PEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char * __ptr64>

; 2255 : 			if (0 < _Newsize)

  00077	48 83 7c 24 60
	00		 cmp	 QWORD PTR _Newsize$[rsp], 0
  0007d	76 2e		 jbe	 SHORT $LN5@Tidy

; 2256 : 				_Traits::copy(this->_Bx()._Buf,

  0007f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Ptr$1[rsp]
  00084	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00089	48 89 44 24 30	 mov	 QWORD PTR tv132[rsp], rax
  0008e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00093	e8 00 00 00 00	 call	 ?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Bx
  00098	4c 8b 44 24 60	 mov	 r8, QWORD PTR _Newsize$[rsp]
  0009d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv132[rsp]
  000a2	48 8b d1	 mov	 rdx, rcx
  000a5	48 8b c8	 mov	 rcx, rax
  000a8	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::copy
$LN5@Tidy:

; 2257 : 					_Unfancy(_Ptr), _Newsize);
; 2258 : 			this->_Getal().deallocate(_Ptr, this->_Myres() + 1);

  000ad	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000b2	e8 00 00 00 00	 call	 ?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres
  000b7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ba	48 ff c0	 inc	 rax
  000bd	48 89 44 24 38	 mov	 QWORD PTR tv155[rsp], rax
  000c2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000c7	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  000cc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv155[rsp]
  000d1	4c 8b c1	 mov	 r8, rcx
  000d4	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Ptr$1[rsp]
  000d9	48 8b c8	 mov	 rcx, rax
  000dc	e8 00 00 00 00	 call	 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAD_K@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
$LN4@Tidy:
$LN3@Tidy:

; 2259 : 			}
; 2260 : 		this->_Myres() = this->_BUF_SIZE - 1;

  000e1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000e6	e8 00 00 00 00	 call	 ?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres
  000eb	48 c7 00 0f 00
	00 00		 mov	 QWORD PTR [rax], 15

; 2261 : 		_Eos(_Newsize);

  000f2	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Newsize$[rsp]
  000f7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000fc	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2262 : 		}

  00101	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00105	c3		 ret	 0
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_NPEBD@Z
_TEXT	SEGMENT
tv77 = 32
this$ = 64
_Ptr$ = 72
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_NPEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT

; 2238 : 		{	// test if _Ptr points inside string

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2239 : 		if (_Ptr == nullptr_t{} || _Ptr < this->_Myptr()
; 2240 : 			|| this->_Myptr() + this->_Mysize() <= _Ptr)

  0000e	48 83 7c 24 48
	00		 cmp	 QWORD PTR _Ptr$[rsp], 0
  00014	74 3c		 je	 SHORT $LN4@Inside
  00016	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001b	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  00020	48 39 44 24 48	 cmp	 QWORD PTR _Ptr$[rsp], rax
  00025	72 2b		 jb	 SHORT $LN4@Inside
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  00031	48 89 44 24 20	 mov	 QWORD PTR tv77[rsp], rax
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0003b	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  00040	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv77[rsp]
  00045	48 03 08	 add	 rcx, QWORD PTR [rax]
  00048	48 8b c1	 mov	 rax, rcx
  0004b	48 3b 44 24 48	 cmp	 rax, QWORD PTR _Ptr$[rsp]
  00050	77 06		 ja	 SHORT $LN2@Inside
$LN4@Inside:

; 2241 : 			return (false);	// don't ask

  00052	32 c0		 xor	 al, al
  00054	eb 04		 jmp	 SHORT $LN1@Inside

; 2242 : 		else

  00056	eb 02		 jmp	 SHORT $LN3@Inside
$LN2@Inside:

; 2243 : 			return (true);

  00058	b0 01		 mov	 al, 1
$LN3@Inside:
$LN1@Inside:

; 2244 : 		}

  0005a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005e	c3		 ret	 0
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_NPEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_N_K_N@Z
_TEXT	SEGMENT
tv140 = 32
tv133 = 40
this$ = 64
_Newsize$ = 72
_Trim$ = 80
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_N_K_N@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT

; 2224 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

$LN13:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2225 : 		if (max_size() < _Newsize)

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  0001d	48 3b 44 24 48	 cmp	 rax, QWORD PTR _Newsize$[rsp]
  00022	73 0a		 jae	 SHORT $LN2@Grow

; 2226 : 			_Xlen();	// result too long

  00024	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00029	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@Grow:

; 2227 : 		if (this->_Myres() < _Newsize)

  0002e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00033	e8 00 00 00 00	 call	 ?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres
  00038	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Newsize$[rsp]
  0003d	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00040	73 1e		 jae	 SHORT $LN3@Grow

; 2228 : 			_Copy(_Newsize, this->_Mysize());	// reallocate to grow

  00042	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00047	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  0004c	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  0004f	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Newsize$[rsp]
  00054	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00059	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  0005e	eb 6a		 jmp	 SHORT $LN4@Grow
$LN3@Grow:

; 2229 : 		else if (_Trim && _Newsize < this->_BUF_SIZE)

  00060	0f b6 44 24 50	 movzx	 eax, BYTE PTR _Trim$[rsp]
  00065	85 c0		 test	 eax, eax
  00067	74 4d		 je	 SHORT $LN5@Grow
  00069	48 83 7c 24 48
	10		 cmp	 QWORD PTR _Newsize$[rsp], 16
  0006f	73 45		 jae	 SHORT $LN5@Grow

; 2230 : 			_Tidy(true,	// copy and deallocate if trimming to small string

  00071	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00076	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  0007b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007e	48 39 44 24 48	 cmp	 QWORD PTR _Newsize$[rsp], rax
  00083	73 0c		 jae	 SHORT $LN9@Grow
  00085	48 8b 44 24 48	 mov	 rax, QWORD PTR _Newsize$[rsp]
  0008a	48 89 44 24 28	 mov	 QWORD PTR tv133[rsp], rax
  0008f	eb 12		 jmp	 SHORT $LN10@Grow
$LN9@Grow:
  00091	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00096	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  0009b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0009e	48 89 44 24 28	 mov	 QWORD PTR tv133[rsp], rax
$LN10@Grow:
  000a3	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv133[rsp]
  000a8	b2 01		 mov	 dl, 1
  000aa	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000af	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  000b4	eb 14		 jmp	 SHORT $LN6@Grow
$LN5@Grow:

; 2231 : 				_Newsize < this->_Mysize() ? _Newsize : this->_Mysize());
; 2232 : 		else if (_Newsize == 0)

  000b6	48 83 7c 24 48
	00		 cmp	 QWORD PTR _Newsize$[rsp], 0
  000bc	75 0c		 jne	 SHORT $LN7@Grow

; 2233 : 			_Eos(0);	// new size is zero, just null terminate

  000be	33 d2		 xor	 edx, edx
  000c0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000c5	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN7@Grow:
$LN6@Grow:
$LN4@Grow:

; 2234 : 		return (0 < _Newsize);	// return true only if more work to do

  000ca	48 83 7c 24 48
	00		 cmp	 QWORD PTR _Newsize$[rsp], 0
  000d0	76 0a		 jbe	 SHORT $LN11@Grow
  000d2	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv140[rsp], 1
  000da	eb 08		 jmp	 SHORT $LN12@Grow
$LN11@Grow:
  000dc	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv140[rsp], 0
$LN12@Grow:
  000e4	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv140[rsp]
$LN8@Grow:

; 2235 : 		}

  000e9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ed	c3		 ret	 0
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_N_K_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
_TEXT	SEGMENT
$T1 = 32
_Dx$ = 40
this$ = 64
_Newsize$ = 72
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT

; 2217 : 		{	// set new length and null terminator

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2218 : 		auto& _Dx = this->_Get_data();

  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00018	48 89 44 24 28	 mov	 QWORD PTR _Dx$[rsp], rax

; 2219 : 		_Traits::assign(_Dx._Myptr()[_Dx._Mysize = _Newsize], _Elem());

  0001d	c6 44 24 20 00	 mov	 BYTE PTR $T1[rsp], 0
  00022	48 8b 44 24 28	 mov	 rax, QWORD PTR _Dx$[rsp]
  00027	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Newsize$[rsp]
  0002c	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
  00030	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Dx$[rsp]
  00035	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0003a	48 03 44 24 48	 add	 rax, QWORD PTR _Newsize$[rsp]
  0003f	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  00044	48 8b c8	 mov	 rcx, rax
  00047	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign

; 2220 : 		}

  0004c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00050	c3		 ret	 0
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z
_TEXT	SEGMENT
_Newres$ = 32
_Ptr$ = 40
tv75 = 48
tv91 = 56
tv92 = 64
tv138 = 72
tv152 = 80
tv216 = 88
tv165 = 96
tv217 = 104
tv181 = 112
tv196 = 120
$T1 = 128
this$ = 160
_Newsize$ = 168
_Oldlen$ = 176
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT

; 2182 : 		{	// copy _Oldlen elements to newly allocated buffer

$LN23:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
  00016	48 c7 84 24 80
	00 00 00 fe ff
	ff ff		 mov	 QWORD PTR $T1[rsp], -2

; 2183 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

  00022	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR _Newsize$[rsp]
  0002a	48 83 c8 0f	 or	 rax, 15
  0002e	48 89 44 24 20	 mov	 QWORD PTR _Newres$[rsp], rax

; 2184 : 		if (max_size() < _Newres)

  00033	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0003b	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00040	48 3b 44 24 20	 cmp	 rax, QWORD PTR _Newres$[rsp]
  00045	73 12		 jae	 SHORT $LN2@Copy

; 2185 : 			_Newres = _Newsize;	// undo roundup if too big

  00047	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR _Newsize$[rsp]
  0004f	48 89 44 24 20	 mov	 QWORD PTR _Newres$[rsp], rax
  00054	e9 dd 00 00 00	 jmp	 $LN3@Copy
$LN2@Copy:

; 2186 : 		else if (this->_Myres() / 2 <= _Newres / 3)

  00059	33 d2		 xor	 edx, edx
  0005b	48 8b 44 24 20	 mov	 rax, QWORD PTR _Newres$[rsp]
  00060	b9 03 00 00 00	 mov	 ecx, 3
  00065	48 f7 f1	 div	 rcx
  00068	48 89 44 24 30	 mov	 QWORD PTR tv75[rsp], rax
  0006d	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00075	e8 00 00 00 00	 call	 ?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres
  0007a	33 d2		 xor	 edx, edx
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	b9 02 00 00 00	 mov	 ecx, 2
  00084	48 f7 f1	 div	 rcx
  00087	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv75[rsp]
  0008c	48 3b c1	 cmp	 rax, rcx
  0008f	77 05		 ja	 SHORT $LN4@Copy
  00091	e9 a0 00 00 00	 jmp	 $LN3@Copy
$LN4@Copy:

; 2187 : 			;
; 2188 : 		else if (this->_Myres() <= max_size() - this->_Myres() / 2)

  00096	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0009e	e8 00 00 00 00	 call	 ?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres
  000a3	33 d2		 xor	 edx, edx
  000a5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a8	b9 02 00 00 00	 mov	 ecx, 2
  000ad	48 f7 f1	 div	 rcx
  000b0	48 89 44 24 38	 mov	 QWORD PTR tv91[rsp], rax
  000b5	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000bd	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  000c2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv91[rsp]
  000c7	48 2b c1	 sub	 rax, rcx
  000ca	48 89 44 24 40	 mov	 QWORD PTR tv92[rsp], rax
  000cf	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000d7	e8 00 00 00 00	 call	 ?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres
  000dc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv92[rsp]
  000e1	48 39 08	 cmp	 QWORD PTR [rax], rcx
  000e4	77 3e		 ja	 SHORT $LN6@Copy

; 2189 : 			_Newres = this->_Myres()

  000e6	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000ee	e8 00 00 00 00	 call	 ?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres
  000f3	33 d2		 xor	 edx, edx
  000f5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f8	b9 02 00 00 00	 mov	 ecx, 2
  000fd	48 f7 f1	 div	 rcx
  00100	48 89 44 24 48	 mov	 QWORD PTR tv138[rsp], rax
  00105	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0010d	e8 00 00 00 00	 call	 ?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres
  00112	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv138[rsp]
  00117	48 03 08	 add	 rcx, QWORD PTR [rax]
  0011a	48 8b c1	 mov	 rax, rcx
  0011d	48 89 44 24 20	 mov	 QWORD PTR _Newres$[rsp], rax

; 2190 : 				+ this->_Myres() / 2;	// grow exponentially if possible
; 2191 : 		else

  00122	eb 12		 jmp	 SHORT $LN3@Copy
$LN6@Copy:

; 2192 : 			_Newres = max_size();	// settle for max_size()

  00124	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0012c	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00131	48 89 44 24 20	 mov	 QWORD PTR _Newres$[rsp], rax
$LN3@Copy:

; 2193 : 
; 2194 : 		pointer _Ptr;
; 2195 : 		_TRY_BEGIN
; 2196 : 			_Ptr = this->_Getal().allocate(_Newres + 1);

  00136	48 8b 44 24 20	 mov	 rax, QWORD PTR _Newres$[rsp]
  0013b	48 ff c0	 inc	 rax
  0013e	48 89 44 24 50	 mov	 QWORD PTR tv152[rsp], rax
  00143	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0014b	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00150	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv152[rsp]
  00155	48 8b d1	 mov	 rdx, rcx
  00158	48 8b c8	 mov	 rcx, rax
  0015b	e8 00 00 00 00	 call	 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAPEAD_K@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
  00160	48 89 44 24 58	 mov	 QWORD PTR tv216[rsp], rax
  00165	48 8b 44 24 58	 mov	 rax, QWORD PTR tv216[rsp]
  0016a	48 89 44 24 28	 mov	 QWORD PTR _Ptr$[rsp], rax
  0016f	eb 00		 jmp	 SHORT $LN18@Copy
$LN19@Copy:
$LN18@Copy:

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END
; 2206 : 
; 2207 : 		if (0 < _Oldlen)

  00171	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR _Oldlen$[rsp], 0
  0017a	76 34		 jbe	 SHORT $LN10@Copy

; 2208 : 			_Traits::copy(_Unfancy(_Ptr), this->_Myptr(),

  0017c	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00184	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  00189	48 89 44 24 70	 mov	 QWORD PTR tv181[rsp], rax
  0018e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00193	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00198	4c 8b 84 24 b0
	00 00 00	 mov	 r8, QWORD PTR _Oldlen$[rsp]
  001a0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv181[rsp]
  001a5	48 8b d1	 mov	 rdx, rcx
  001a8	48 8b c8	 mov	 rcx, rax
  001ab	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::copy
$LN10@Copy:

; 2209 : 				_Oldlen);	// copy existing elements
; 2210 : 		_Tidy(true);

  001b0	45 33 c0	 xor	 r8d, r8d
  001b3	b2 01		 mov	 dl, 1
  001b5	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001bd	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2211 : 		this->_Getal().construct(_STD addressof(this->_Bx()._Ptr), _Ptr);

  001c2	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001ca	e8 00 00 00 00	 call	 ?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Bx
  001cf	48 8b c8	 mov	 rcx, rax
  001d2	e8 00 00 00 00	 call	 ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char * __ptr64>
  001d7	48 89 44 24 78	 mov	 QWORD PTR tv196[rsp], rax
  001dc	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001e4	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  001e9	4c 8d 44 24 28	 lea	 r8, QWORD PTR _Ptr$[rsp]
  001ee	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv196[rsp]
  001f3	48 8b d1	 mov	 rdx, rcx
  001f6	48 8b c8	 mov	 rcx, rax
  001f9	e8 00 00 00 00	 call	 ??$construct@PEADAEAPEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEADAEAPEAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 & __ptr64>

; 2212 : 		this->_Myres() = _Newres;

  001fe	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00206	e8 00 00 00 00	 call	 ?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres
  0020b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Newres$[rsp]
  00210	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2213 : 		_Eos(_Oldlen);

  00213	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR _Oldlen$[rsp]
  0021b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00223	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 2214 : 		}

  00228	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0022f	c3		 ret	 0
$LN20@Copy:
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Newres$ = 32
_Ptr$ = 40
tv75 = 48
tv91 = 56
tv92 = 64
tv138 = 72
tv152 = 80
tv216 = 88
tv165 = 96
tv217 = 104
tv181 = 112
tv196 = 120
$T1 = 128
this$ = 160
_Newsize$ = 168
_Oldlen$ = 176
?catch$1@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy'::`1'::catch$1

; 2197 : 		_CATCH_ALL

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z$0:

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0000d	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR _Newsize$[rbp]
  00014	48 89 45 20	 mov	 QWORD PTR _Newres$[rbp], rax

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

  00018	48 8b 45 20	 mov	 rax, QWORD PTR _Newres$[rbp]
  0001c	48 ff c0	 inc	 rax
  0001f	48 89 45 60	 mov	 QWORD PTR tv165[rbp], rax
  00023	48 8b 8d a0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002a	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0002f	48 8b 4d 60	 mov	 rcx, QWORD PTR tv165[rbp]
  00033	48 8b d1	 mov	 rdx, rcx
  00036	48 8b c8	 mov	 rcx, rax
  00039	e8 00 00 00 00	 call	 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAPEAD_K@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
  0003e	48 89 45 68	 mov	 QWORD PTR tv217[rbp], rax
  00042	48 8b 45 68	 mov	 rax, QWORD PTR tv217[rbp]
  00046	48 89 45 28	 mov	 QWORD PTR _Ptr$[rbp], rax
  0004a	eb 00		 jmp	 SHORT $LN16@catch$1
$LN17@catch$1:
$LN16@catch$1:

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END

  0004c	48 8d 05 00 00
	00 00		 lea	 rax, $LN19@catch$1
  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5d		 pop	 rbp
  00058	c3		 ret	 0
  00059	cc		 int	 3
?catch$1@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy'::`1'::catch$1
_Newres$ = 32
_Ptr$ = 40
tv75 = 48
tv91 = 56
tv92 = 64
tv138 = 72
tv152 = 80
tv216 = 88
tv165 = 96
tv217 = 104
tv181 = 112
tv196 = 120
$T1 = 128
this$ = 160
_Newsize$ = 168
_Oldlen$ = 176
?catch$0@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy'::`1'::catch$0

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL

  0005a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0005f	55		 push	 rbp
  00060	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00064	48 8b ea	 mov	 rbp, rdx
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z$1:

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

  00067	45 33 c0	 xor	 r8d, r8d
  0006a	b2 01		 mov	 dl, 1
  0006c	48 8b 8d a0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;

  00078	33 d2		 xor	 edx, edx
  0007a	33 c9		 xor	 ecx, ecx
  0007c	e8 00 00 00 00	 call	 _CxxThrowException
  00081	90		 npad	 1

; 2197 : 		_CATCH_ALL
; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry
; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);
; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END

  00082	48 8d 05 00 00
	00 00		 lea	 rax, $LN17@catch$0
  00089	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008d	5d		 pop	 rbp
  0008e	c3		 ret	 0
  0008f	cc		 int	 3
?catch$0@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_Newres$ = 32
_Ptr$ = 40
tv75 = 48
tv91 = 56
tv92 = 64
tv138 = 72
tv152 = 80
tv216 = 88
tv165 = 96
tv217 = 104
tv181 = 112
tv196 = 120
$T1 = 128
this$ = 160
_Newsize$ = 168
_Oldlen$ = 176
?catch$1@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy'::`1'::catch$1

; 2197 : 		_CATCH_ALL

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	55		 push	 rbp
  00006	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000a	48 8b ea	 mov	 rbp, rdx
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z$0:

; 2198 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  0000d	48 8b 85 a8 00
	00 00		 mov	 rax, QWORD PTR _Newsize$[rbp]
  00014	48 89 45 20	 mov	 QWORD PTR _Newres$[rbp], rax

; 2199 : 			_TRY_BEGIN
; 2200 : 				_Ptr = this->_Getal().allocate(_Newres + 1);

  00018	48 8b 45 20	 mov	 rax, QWORD PTR _Newres$[rbp]
  0001c	48 ff c0	 inc	 rax
  0001f	48 89 45 60	 mov	 QWORD PTR tv165[rbp], rax
  00023	48 8b 8d a0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002a	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0002f	48 8b 4d 60	 mov	 rcx, QWORD PTR tv165[rbp]
  00033	48 8b d1	 mov	 rdx, rcx
  00036	48 8b c8	 mov	 rcx, rax
  00039	e8 00 00 00 00	 call	 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAPEAD_K@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
  0003e	48 89 45 68	 mov	 QWORD PTR tv217[rbp], rax
  00042	48 8b 45 68	 mov	 rax, QWORD PTR tv217[rbp]
  00046	48 89 45 28	 mov	 QWORD PTR _Ptr$[rbp], rax
  0004a	eb 00		 jmp	 SHORT $LN16@catch$1
$LN17@catch$1:
$LN16@catch$1:

; 2201 : 			_CATCH_ALL
; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise
; 2203 : 			_RERAISE;
; 2204 : 			_CATCH_END
; 2205 : 		_CATCH_END

  0004c	48 8d 05 00 00
	00 00		 lea	 rax, $LN19@catch$1
  00053	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00057	5d		 pop	 rbp
  00058	c3		 ret	 0
  00059	cc		 int	 3
?catch$1@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
_Newres$ = 32
_Ptr$ = 40
tv75 = 48
tv91 = 56
tv92 = 64
tv138 = 72
tv152 = 80
tv216 = 88
tv165 = 96
tv217 = 104
tv181 = 112
tv196 = 120
$T1 = 128
this$ = 160
_Newsize$ = 168
_Oldlen$ = 176
?catch$0@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy'::`1'::catch$0

; 2201 : 			_CATCH_ALL

  0005a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0005f	55		 push	 rbp
  00060	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00064	48 8b ea	 mov	 rbp, rdx
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z$1:

; 2202 : 			_Tidy(true);	// failed again, discard storage and reraise

  00067	45 33 c0	 xor	 r8d, r8d
  0006a	b2 01		 mov	 dl, 1
  0006c	48 8b 8d a0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00073	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 2203 : 			_RERAISE;

  00078	33 d2		 xor	 edx, edx
  0007a	33 c9		 xor	 ecx, ecx
  0007c	e8 00 00 00 00	 call	 _CxxThrowException
  00081	90		 npad	 1

; 2204 : 			_CATCH_END

  00082	48 8d 05 00 00
	00 00		 lea	 rax, $LN17@catch$0
  00089	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0008d	5d		 pop	 rbp
  0008e	c3		 ret	 0
  0008f	cc		 int	 3
?catch$0@?0??_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy'::`1'::catch$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0D@Z
_TEXT	SEGMENT
this$ = 48
_Off$ = 56
_Count$ = 64
_Ch$ = 72
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign, COMDAT

; 2174 : 		{	// assign _Count copies of _Ch beginning at _Off

$LN5:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2175 : 		if (_Count == 1)

  00018	48 83 7c 24 40
	01		 cmp	 QWORD PTR _Count$[rsp], 1
  0001e	75 1e		 jne	 SHORT $LN2@Chassign

; 2176 : 			_Traits::assign(*(this->_Myptr() + _Off), _Ch);

  00020	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00025	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  0002a	48 03 44 24 38	 add	 rax, QWORD PTR _Off$[rsp]
  0002f	48 8d 54 24 48	 lea	 rdx, QWORD PTR _Ch$[rsp]
  00034	48 8b c8	 mov	 rcx, rax
  00037	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ; std::char_traits<char>::assign

; 2177 : 		else

  0003c	eb 22		 jmp	 SHORT $LN3@Chassign
$LN2@Chassign:

; 2178 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);

  0003e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00043	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  00048	48 03 44 24 38	 add	 rax, QWORD PTR _Off$[rsp]
  0004d	44 0f b6 44 24
	48		 movzx	 r8d, BYTE PTR _Ch$[rsp]
  00053	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Count$[rsp]
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 ?assign@?$char_traits@D@std@@SAPEADPEAD_KD@Z ; std::char_traits<char>::assign
$LN3@Chassign:

; 2179 : 		}

  00060	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00064	c3		 ret	 0
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
_Ret$ = 32
this$ = 64
__$ReturnUdt$ = 72
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT

; 2168 : 		{	// return allocator object for values

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2169 : 		allocator_type _Ret(this->_Getal());

  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00018	48 8b d0	 mov	 rdx, rax
  0001b	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _Ret$[rsp]
  00020	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QEAA@AEBV01@@Z ; std::allocator<char>::allocator<char>

; 2170 : 		return (_Ret);

  00025	48 8d 54 24 20	 lea	 rdx, QWORD PTR _Ret$[rsp]
  0002a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0002f	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QEAA@AEBV01@@Z ; std::allocator<char>::allocator<char>
  00034	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 2171 : 		}

  00039	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003d	c3		 ret	 0
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAHAEBV12@@Z
_TEXT	SEGMENT
tv70 = 32
tv77 = 40
tv84 = 48
$T1 = 56
this$ = 80
_Right$ = 88
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAHAEBV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT

; 2120 : 		{	// compare [0, _Mysize()) with _Right

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 c7 44 24 38
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 2121 : 		return (_Traits_compare(this->_Myptr(), this->_Mysize(),

  00017	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  0001c	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEB_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  00021	90		 npad	 1
  00022	48 89 44 24 20	 mov	 QWORD PTR tv70[rsp], rax
  00027	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  0002c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAPEBDXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  00031	90		 npad	 1
  00032	48 89 44 24 28	 mov	 QWORD PTR tv77[rsp], rax
  00037	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0003c	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEB_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  00041	90		 npad	 1
  00042	48 89 44 24 30	 mov	 QWORD PTR tv84[rsp], rax
  00047	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0004c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAPEBDXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  00051	90		 npad	 1
  00052	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv70[rsp]
  00057	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  0005a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv77[rsp]
  0005f	4c 8b c1	 mov	 r8, rcx
  00062	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv84[rsp]
  00067	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  0006a	48 8b c8	 mov	 rcx, rax
  0006d	e8 00 00 00 00	 call	 ?_Traits_compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAHQEBD_K01@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Traits_compare
  00072	90		 npad	 1

; 2122 : 			_Right._Myptr(), _Right._Mysize()));
; 2123 : 		}

  00073	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00077	c3		 ret	 0
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAHAEBV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K0@Z
_TEXT	SEGMENT
_Max_effective_size$ = 32
this$ = 64
_Off$ = 72
_Size$ = 80
?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Clamp_suffix_size, COMDAT

; 2111 : 		{	// trims _Size to the longest it can be assuming a string starting at _Off

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2112 : 		const size_type _Max_effective_size = this->_Mysize() - _Off;

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEB_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  0001d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Off$[rsp]
  00022	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00025	48 2b c1	 sub	 rax, rcx
  00028	48 89 44 24 20	 mov	 QWORD PTR _Max_effective_size$[rsp], rax

; 2113 : 		if (_Size <= _Max_effective_size)

  0002d	48 8b 44 24 20	 mov	 rax, QWORD PTR _Max_effective_size$[rsp]
  00032	48 39 44 24 50	 cmp	 QWORD PTR _Size$[rsp], rax
  00037	77 09		 ja	 SHORT $LN2@Clamp_suff

; 2114 : 			return (_Size);

  00039	48 8b 44 24 50	 mov	 rax, QWORD PTR _Size$[rsp]
  0003e	eb 07		 jmp	 SHORT $LN1@Clamp_suff

; 2115 : 		else

  00040	eb 05		 jmp	 SHORT $LN3@Clamp_suff
$LN2@Clamp_suff:

; 2116 : 			return (_Max_effective_size);

  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR _Max_effective_size$[rsp]
$LN3@Clamp_suff:
$LN1@Clamp_suff:

; 2117 : 		}

  00047	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004b	c3		 ret	 0
?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Clamp_suffix_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Traits_compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAHQEBD_K01@Z
_TEXT	SEGMENT
_Ans$ = 32
tv65 = 40
_Min_size$ = 48
_Left$ = 80
_Left_size$ = 88
_Right$ = 96
_Right_size$ = 104
?_Traits_compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAHQEBD_K01@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Traits_compare, COMDAT

; 2094 : 		{	// compare [_Left, _Left + _Left_size) to [_Right, _Right + _Right_size) using _Traits

$LN8:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2095 : 		const size_type _Min_size = _Left_size < _Right_size ? _Left_size : _Right_size;

  00018	48 8b 44 24 68	 mov	 rax, QWORD PTR _Right_size$[rsp]
  0001d	48 39 44 24 58	 cmp	 QWORD PTR _Left_size$[rsp], rax
  00022	73 0c		 jae	 SHORT $LN6@Traits_com
  00024	48 8b 44 24 58	 mov	 rax, QWORD PTR _Left_size$[rsp]
  00029	48 89 44 24 28	 mov	 QWORD PTR tv65[rsp], rax
  0002e	eb 0a		 jmp	 SHORT $LN7@Traits_com
$LN6@Traits_com:
  00030	48 8b 44 24 68	 mov	 rax, QWORD PTR _Right_size$[rsp]
  00035	48 89 44 24 28	 mov	 QWORD PTR tv65[rsp], rax
$LN7@Traits_com:
  0003a	48 8b 44 24 28	 mov	 rax, QWORD PTR tv65[rsp]
  0003f	48 89 44 24 30	 mov	 QWORD PTR _Min_size$[rsp], rax

; 2096 : 		const int _Ans = _Traits::compare(_Left, _Right, _Min_size);

  00044	4c 8b 44 24 30	 mov	 r8, QWORD PTR _Min_size$[rsp]
  00049	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Right$[rsp]
  0004e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Left$[rsp]
  00053	e8 00 00 00 00	 call	 ?compare@?$char_traits@D@std@@SAHPEBD0_K@Z ; std::char_traits<char>::compare
  00058	89 44 24 20	 mov	 DWORD PTR _Ans$[rsp], eax

; 2097 : 
; 2098 : 		if (_Ans != 0)

  0005c	83 7c 24 20 00	 cmp	 DWORD PTR _Ans$[rsp], 0
  00061	74 06		 je	 SHORT $LN2@Traits_com

; 2099 : 			return (_Ans);

  00063	8b 44 24 20	 mov	 eax, DWORD PTR _Ans$[rsp]
  00067	eb 28		 jmp	 SHORT $LN1@Traits_com
$LN2@Traits_com:

; 2100 : 
; 2101 : 		if (_Left_size < _Right_size)

  00069	48 8b 44 24 68	 mov	 rax, QWORD PTR _Right_size$[rsp]
  0006e	48 39 44 24 58	 cmp	 QWORD PTR _Left_size$[rsp], rax
  00073	73 07		 jae	 SHORT $LN3@Traits_com

; 2102 : 			return (-1);

  00075	b8 ff ff ff ff	 mov	 eax, -1
  0007a	eb 15		 jmp	 SHORT $LN1@Traits_com
$LN3@Traits_com:

; 2103 : 
; 2104 : 		if (_Left_size > _Right_size)

  0007c	48 8b 44 24 68	 mov	 rax, QWORD PTR _Right_size$[rsp]
  00081	48 39 44 24 58	 cmp	 QWORD PTR _Left_size$[rsp], rax
  00086	76 07		 jbe	 SHORT $LN4@Traits_com

; 2105 : 			return (1);

  00088	b8 01 00 00 00	 mov	 eax, 1
  0008d	eb 02		 jmp	 SHORT $LN1@Traits_com
$LN4@Traits_com:

; 2106 : 
; 2107 : 		return (0);

  0008f	33 c0		 xor	 eax, eax
$LN1@Traits_com:

; 2108 : 		}

  00091	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00095	c3		 ret	 0
?_Traits_compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAHQEBD_K01@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Traits_compare
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ
_TEXT	SEGMENT
tv71 = 32
this$ = 64
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty, COMDAT

; 1803 : 		{	// test if sequence is empty

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1804 : 		return (this->_Mysize() == 0);

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEB_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  00013	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00017	75 0a		 jne	 SHORT $LN3@empty
  00019	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv71[rsp], 1
  00021	eb 08		 jmp	 SHORT $LN4@empty
$LN3@empty:
  00023	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
$LN4@empty:
  0002b	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv71[rsp]

; 1805 : 		}

  00030	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00034	c3		 ret	 0
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_NXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::empty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z
_TEXT	SEGMENT
this$ = 48
_Newsize$ = 56
_Ch$ = 64
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize, COMDAT

; 1780 : 		{	// determine new length, padding with _Ch elements as needed

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1781 : 		if (_Newsize <= this->_Mysize())

  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  0001d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00020	48 39 44 24 38	 cmp	 QWORD PTR _Newsize$[rsp], rax
  00025	77 11		 ja	 SHORT $LN2@resize

; 1782 : 			_Eos(_Newsize);

  00027	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Newsize$[rsp]
  0002c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00031	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1783 : 		else

  00036	eb 2b		 jmp	 SHORT $LN3@resize
$LN2@resize:

; 1784 : 			append(_Newsize - this->_Mysize(), _Ch);

  00038	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0003d	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  00042	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00045	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Newsize$[rsp]
  0004a	48 2b c8	 sub	 rcx, rax
  0004d	48 8b c1	 mov	 rax, rcx
  00050	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR _Ch$[rsp]
  00056	48 8b d0	 mov	 rdx, rax
  00059	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0005e	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN3@resize:

; 1785 : 		}

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 48
_Newsize$ = 56
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize, COMDAT

; 1775 : 		{	// determine new length, padding with null elements as needed

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1776 : 		resize(_Newsize, _Elem());

  0000e	45 33 c0	 xor	 r8d, r8d
  00011	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Newsize$[rsp]
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001b	e8 00 00 00 00	 call	 ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize

; 1777 : 		}

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
$T1 = 32
_Num$ = 40
tv75 = 48
this$ = 80
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT

; 1769 : 		{	// return maximum possible length of sequence

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1770 : 		const size_type _Num = this->_Getal().max_size();

  00009	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00013	0f b6 54 24 20	 movzx	 edx, BYTE PTR $T1[rsp]
  00018	48 8b c8	 mov	 rcx, rax
  0001b	e8 00 00 00 00	 call	 ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBA_KU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<char> >::max_size
  00020	48 89 44 24 28	 mov	 QWORD PTR _Num$[rsp], rax

; 1771 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00025	48 83 7c 24 28
	01		 cmp	 QWORD PTR _Num$[rsp], 1
  0002b	77 0b		 ja	 SHORT $LN3@max_size
  0002d	48 c7 44 24 30
	01 00 00 00	 mov	 QWORD PTR tv75[rsp], 1
  00036	eb 0d		 jmp	 SHORT $LN4@max_size
$LN3@max_size:
  00038	48 8b 44 24 28	 mov	 rax, QWORD PTR _Num$[rsp]
  0003d	48 ff c8	 dec	 rax
  00040	48 89 44 24 30	 mov	 QWORD PTR tv75[rsp], rax
$LN4@max_size:
  00045	48 8b 44 24 30	 mov	 rax, QWORD PTR tv75[rsp]

; 1772 : 		}

  0004a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0004e	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 48
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT

; 1764 : 		{	// return length of sequence

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1765 : 		return (this->_Mysize());

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEB_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 1766 : 		}

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT

; 1742 : 		{	// return pointer to null-terminated nonmutable array

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 1743 : 		return (this->_Myptr());

  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00017	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAPEBDXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  0001c	90		 npad	 1

; 1744 : 		}

  0001d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00021	c3		 ret	 0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z
_TEXT	SEGMENT
this$ = 48
_Off$ = 56
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT

; 1692 : 		{	// subscript nonmutable sequence

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1693 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1694 : 		if (this->_Mysize() < _Off)	// sic
; 1695 : 			_DEBUG_ERROR("string subscript out of range");
; 1696 : 
; 1697 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1698 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1699 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1700 : 
; 1701 : 		return (this->_Myptr()[_Off]);

  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAPEBDXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  00018	48 03 44 24 38	 add	 rax, QWORD PTR _Off$[rsp]

; 1702 : 		}

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAAEBD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z
_TEXT	SEGMENT
this$ = 48
_Off$ = 56
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[], COMDAT

; 1679 : 		{	// subscript mutable sequence

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1680 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1681 : 		if (this->_Mysize() < _Off)	// sic
; 1682 : 			_DEBUG_ERROR("string subscript out of range");
; 1683 : 
; 1684 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1685 : 		_SCL_SECURE_VALIDATE_RANGE(_Off <= this->_Mysize());	// sic
; 1686 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1687 : 
; 1688 : 		return (this->_Myptr()[_Off]);

  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  00018	48 03 44 24 38	 add	 rax, QWORD PTR _Off$[rsp]

; 1689 : 		}

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
_Mydata$ = 32
tv86 = 40
$T1 = 48
this$ = 80
__$ReturnUdt$ = 88
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end, COMDAT

; 1606 : 		{	// return iterator for end of mutable sequence

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 c7 44 24 30
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 1607 : 		auto _Mydata = &this->_Get_data();

  00017	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0001c	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00021	90		 npad	 1
  00022	48 89 44 24 20	 mov	 QWORD PTR _Mydata$[rsp], rax

; 1608 : 		return (iterator(this->_Getal().address(*_Mydata->_Myptr()) + _Mydata->_Mysize, _Mydata));

  00027	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Mydata$[rsp]
  0002c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00031	90		 npad	 1
  00032	48 89 44 24 28	 mov	 QWORD PTR tv86[rsp], rax
  00037	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0003c	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00041	90		 npad	 1
  00042	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv86[rsp]
  00047	48 8b d1	 mov	 rdx, rcx
  0004a	48 8b c8	 mov	 rcx, rax
  0004d	e8 00 00 00 00	 call	 ?address@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBAPEADAEAD@Z ; std::_Wrap_alloc<std::allocator<char> >::address
  00052	90		 npad	 1
  00053	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Mydata$[rsp]
  00058	48 03 41 10	 add	 rax, QWORD PTR [rcx+16]
  0005c	4c 8b 44 24 20	 mov	 r8, QWORD PTR _Mydata$[rsp]
  00061	48 8b d0	 mov	 rdx, rax
  00064	48 8b 4c 24 58	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00069	e8 00 00 00 00	 call	 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base0@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
  0006e	90		 npad	 1
  0006f	48 8b 44 24 58	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1609 : 		}

  00074	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00078	c3		 ret	 0
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
_Mydata$ = 32
tv86 = 40
$T1 = 48
this$ = 80
__$ReturnUdt$ = 88
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT

; 1594 : 		{	// return iterator for beginning of mutable sequence

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 c7 44 24 30
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 1595 : 		auto _Mydata = &this->_Get_data();

  00017	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0001c	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00021	90		 npad	 1
  00022	48 89 44 24 20	 mov	 QWORD PTR _Mydata$[rsp], rax

; 1596 : 		return (iterator(this->_Getal().address(*_Mydata->_Myptr()), _Mydata));

  00027	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Mydata$[rsp]
  0002c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00031	90		 npad	 1
  00032	48 89 44 24 28	 mov	 QWORD PTR tv86[rsp], rax
  00037	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0003c	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00041	90		 npad	 1
  00042	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv86[rsp]
  00047	48 8b d1	 mov	 rdx, rcx
  0004a	48 8b c8	 mov	 rcx, rax
  0004d	e8 00 00 00 00	 call	 ?address@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBAPEADAEAD@Z ; std::_Wrap_alloc<std::allocator<char> >::address
  00052	90		 npad	 1
  00053	4c 8b 44 24 20	 mov	 r8, QWORD PTR _Mydata$[rsp]
  00058	48 8b d0	 mov	 rdx, rax
  0005b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00060	e8 00 00 00 00	 call	 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEAA@PEADPEBU_Container_base0@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
  00065	90		 npad	 1
  00066	48 8b 44 24 58	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 1597 : 		}

  0006b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006f	c3		 ret	 0
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z
_TEXT	SEGMENT
tv80 = 48
tv128 = 56
tv136 = 64
tv139 = 72
$T1 = 80
$T2 = 88
this$ = 112
_First$ = 120
_Last$ = 128
_First2$ = 136
_Last2$ = 144
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace, COMDAT

; 1584 : 		{	// replace [_First, _Last) with [_First2, _Last2), const_iterators

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1585 : 		if (_First2 == _Last2)

  00018	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR _Last2$[rsp]
  00020	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR _First2$[rsp]
  00028	e8 00 00 00 00	 call	 ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_NAEBV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator==
  0002d	0f b6 c0	 movzx	 eax, al
  00030	85 c0		 test	 eax, eax
  00032	74 4d		 je	 SHORT $LN2@replace

; 1586 : 			erase(_First - begin(), _Last - _First);

  00034	48 8d 54 24 78	 lea	 rdx, QWORD PTR _First$[rsp]
  00039	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR _Last$[rsp]
  00041	e8 00 00 00 00	 call	 ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_JAEBV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator-
  00046	48 89 44 24 30	 mov	 QWORD PTR tv80[rsp], rax
  0004b	48 8d 54 24 50	 lea	 rdx, QWORD PTR $T1[rsp]
  00050	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00055	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  0005a	48 8b d0	 mov	 rdx, rax
  0005d	48 8d 4c 24 78	 lea	 rcx, QWORD PTR _First$[rsp]
  00062	e8 00 00 00 00	 call	 ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_JAEBV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator-
  00067	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv80[rsp]
  0006c	4c 8b c1	 mov	 r8, rcx
  0006f	48 8b d0	 mov	 rdx, rax
  00072	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00077	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 1587 : 		else

  0007c	e9 86 00 00 00	 jmp	 $LN3@replace
$LN2@replace:

; 1588 : 			replace(_First - begin(), _Last - _First,

  00081	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR _First2$[rsp]
  00089	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR _Last2$[rsp]
  00091	e8 00 00 00 00	 call	 ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_JAEBV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator-
  00096	48 89 44 24 38	 mov	 QWORD PTR tv128[rsp], rax
  0009b	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR _First2$[rsp]
  000a3	e8 00 00 00 00	 call	 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBAAEADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
  000a8	48 89 44 24 40	 mov	 QWORD PTR tv136[rsp], rax
  000ad	48 8d 54 24 78	 lea	 rdx, QWORD PTR _First$[rsp]
  000b2	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR _Last$[rsp]
  000ba	e8 00 00 00 00	 call	 ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_JAEBV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator-
  000bf	48 89 44 24 48	 mov	 QWORD PTR tv139[rsp], rax
  000c4	48 8d 54 24 58	 lea	 rdx, QWORD PTR $T2[rsp]
  000c9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  000ce	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  000d3	48 8b d0	 mov	 rdx, rax
  000d6	48 8d 4c 24 78	 lea	 rcx, QWORD PTR _First$[rsp]
  000db	e8 00 00 00 00	 call	 ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QEBA_JAEBV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator-
  000e0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv128[rsp]
  000e5	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000ea	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv136[rsp]
  000ef	4c 8b c9	 mov	 r9, rcx
  000f2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv139[rsp]
  000f7	4c 8b c1	 mov	 r8, rcx
  000fa	48 8b d0	 mov	 rdx, rax
  000fd	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00102	e8 00 00 00 00	 call	 ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0PEBD0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
$LN3@replace:

; 1589 : 				&*_First2, _Last2 - _First2);
; 1590 : 		return (*this);

  00107	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]

; 1591 : 		}

  0010c	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00110	c3		 ret	 0
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@1@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0PEBD0@Z
_TEXT	SEGMENT
_Nm$ = 48
_Num$ = 56
tv89 = 64
tv149 = 72
tv185 = 80
this$ = 112
_Off$ = 120
_N0$ = 128
_Ptr$ = 136
_Count$ = 144
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0PEBD0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace, COMDAT

; 1453 : 		{	// replace [_Off, _Off + _N0) with [_Ptr, _Ptr + _Count)

$LN9:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1454 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1455 : 		if (_Inside(_Ptr))

  00018	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00020	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00025	e8 00 00 00 00	 call	 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_NPEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
  0002a	0f b6 c0	 movzx	 eax, al
  0002d	85 c0		 test	 eax, eax
  0002f	74 4b		 je	 SHORT $LN2@replace

; 1456 : 			return (replace(_Off, _N0, *this,

  00031	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00036	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  0003b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00043	48 2b c8	 sub	 rcx, rax
  00046	48 8b c1	 mov	 rax, rcx
  00049	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR _Count$[rsp]
  00051	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00056	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005b	4c 8b 4c 24 70	 mov	 r9, QWORD PTR this$[rsp]
  00060	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR _N0$[rsp]
  00068	48 8b 54 24 78	 mov	 rdx, QWORD PTR _Off$[rsp]
  0006d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00072	e8 00 00 00 00	 call	 ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0AEBV12@00@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
  00077	e9 d8 01 00 00	 jmp	 $LN1@replace
$LN2@replace:

; 1457 : 				_Ptr - this->_Myptr(),
; 1458 : 				_Count));	// substring, replace carefully
; 1459 : 		_Check_offset(_Off);

  0007c	48 8b 54 24 78	 mov	 rdx, QWORD PTR _Off$[rsp]
  00081	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00086	e8 00 00 00 00	 call	 ?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Check_offset

; 1460 : 		_N0 = _Clamp_suffix_size(_Off, _N0);

  0008b	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR _N0$[rsp]
  00093	48 8b 54 24 78	 mov	 rdx, QWORD PTR _Off$[rsp]
  00098	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  0009d	e8 00 00 00 00	 call	 ?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Clamp_suffix_size
  000a2	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR _N0$[rsp], rax

; 1461 : 		if (npos - _Count <= this->_Mysize() - _N0)

  000aa	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  000b1	48 2b 84 24 90
	00 00 00	 sub	 rax, QWORD PTR _Count$[rsp]
  000b9	48 89 44 24 40	 mov	 QWORD PTR tv89[rsp], rax
  000be	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  000c3	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  000c8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _N0$[rsp]
  000d0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d3	48 2b c1	 sub	 rax, rcx
  000d6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv89[rsp]
  000db	48 3b c8	 cmp	 rcx, rax
  000de	77 0a		 ja	 SHORT $LN3@replace

; 1462 : 			_Xlen();	// result too long

  000e0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  000e5	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN3@replace:

; 1463 : 		size_type _Nm = this->_Mysize() - _N0 - _Off;

  000ea	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  000ef	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  000f4	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _N0$[rsp]
  000fc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ff	48 2b c1	 sub	 rax, rcx
  00102	48 2b 44 24 78	 sub	 rax, QWORD PTR _Off$[rsp]
  00107	48 89 44 24 30	 mov	 QWORD PTR _Nm$[rsp], rax

; 1464 : 
; 1465 : 		if (_Count < _N0)

  0010c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR _N0$[rsp]
  00114	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR _Count$[rsp], rax
  0011c	73 48		 jae	 SHORT $LN4@replace

; 1466 : 			_Traits::move(this->_Myptr() + _Off + _Count,

  0011e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  00123	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  00128	48 03 44 24 78	 add	 rax, QWORD PTR _Off$[rsp]
  0012d	48 03 84 24 80
	00 00 00	 add	 rax, QWORD PTR _N0$[rsp]
  00135	48 89 44 24 48	 mov	 QWORD PTR tv149[rsp], rax
  0013a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  0013f	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  00144	48 03 44 24 78	 add	 rax, QWORD PTR _Off$[rsp]
  00149	48 03 84 24 90
	00 00 00	 add	 rax, QWORD PTR _Count$[rsp]
  00151	4c 8b 44 24 30	 mov	 r8, QWORD PTR _Nm$[rsp]
  00156	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv149[rsp]
  0015b	48 8b d1	 mov	 rdx, rcx
  0015e	48 8b c8	 mov	 rcx, rax
  00161	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::move
$LN4@replace:

; 1467 : 				this->_Myptr() + _Off + _N0,
; 1468 : 				_Nm);	// smaller hole, move tail up
; 1469 : 		const size_type _Num = this->_Mysize() + _Count - _N0;

  00166	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  0016b	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  00170	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00173	48 03 84 24 90
	00 00 00	 add	 rax, QWORD PTR _Count$[rsp]
  0017b	48 2b 84 24 80
	00 00 00	 sub	 rax, QWORD PTR _N0$[rsp]
  00183	48 89 44 24 38	 mov	 QWORD PTR _Num$[rsp], rax

; 1470 : 		if ((0 < _Count || 0 < _N0)
; 1471 : 			&& _Grow(_Num))

  00188	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR _Count$[rsp], 0
  00191	77 0f		 ja	 SHORT $LN6@replace
  00193	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR _N0$[rsp], 0
  0019c	0f 86 ad 00 00
	00		 jbe	 $LN5@replace
$LN6@replace:
  001a2	45 33 c0	 xor	 r8d, r8d
  001a5	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Num$[rsp]
  001aa	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  001af	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_N_K_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  001b4	0f b6 c0	 movzx	 eax, al
  001b7	85 c0		 test	 eax, eax
  001b9	0f 84 90 00 00
	00		 je	 $LN5@replace

; 1472 : 			{	// make room and rearrange
; 1473 : 			if (_N0 < _Count)

  001bf	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR _Count$[rsp]
  001c7	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR _N0$[rsp], rax
  001cf	73 48		 jae	 SHORT $LN7@replace

; 1474 : 				_Traits::move(this->_Myptr() + _Off + _Count,

  001d1	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  001d6	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  001db	48 03 44 24 78	 add	 rax, QWORD PTR _Off$[rsp]
  001e0	48 03 84 24 80
	00 00 00	 add	 rax, QWORD PTR _N0$[rsp]
  001e8	48 89 44 24 50	 mov	 QWORD PTR tv185[rsp], rax
  001ed	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  001f2	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  001f7	48 03 44 24 78	 add	 rax, QWORD PTR _Off$[rsp]
  001fc	48 03 84 24 90
	00 00 00	 add	 rax, QWORD PTR _Count$[rsp]
  00204	4c 8b 44 24 30	 mov	 r8, QWORD PTR _Nm$[rsp]
  00209	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv185[rsp]
  0020e	48 8b d1	 mov	 rdx, rcx
  00211	48 8b c8	 mov	 rcx, rax
  00214	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::move
$LN7@replace:

; 1475 : 					this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1476 : 			_Traits::copy(this->_Myptr() + _Off, _Ptr, _Count);	// fill hole

  00219	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  0021e	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  00223	48 03 44 24 78	 add	 rax, QWORD PTR _Off$[rsp]
  00228	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR _Count$[rsp]
  00230	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00238	48 8b c8	 mov	 rcx, rax
  0023b	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::copy

; 1477 : 			_Eos(_Num);

  00240	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Num$[rsp]
  00245	48 8b 4c 24 70	 mov	 rcx, QWORD PTR this$[rsp]
  0024a	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN5@replace:

; 1478 : 			}
; 1479 : 		return (*this);

  0024f	48 8b 44 24 70	 mov	 rax, QWORD PTR this$[rsp]
$LN1@replace:
$LN8@replace:

; 1480 : 		}

  00254	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00258	c3		 ret	 0
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0PEBD0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0AEBV12@00@Z
_TEXT	SEGMENT
_Nm$ = 32
_Newsize$ = 40
tv76 = 48
tv153 = 56
tv172 = 64
tv190 = 72
tv208 = 80
tv226 = 88
tv246 = 96
tv264 = 104
tv284 = 112
tv304 = 120
tv321 = 128
tv339 = 136
tv350 = 144
tv359 = 152
this$ = 176
_Off$ = 184
_N0$ = 192
_Right$ = 200
_Roff$ = 208
_Count$ = 216
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0AEBV12@00@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace, COMDAT

; 1389 : 		{	// replace [_Off, _Off + _N0) with _Right [_Roff, _Roff + _Count)

$LN15:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1390 : 		_Check_offset(_Off);

  0001b	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR _Off$[rsp]
  00023	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0002b	e8 00 00 00 00	 call	 ?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Check_offset

; 1391 : 		_Right._Check_offset(_Roff);

  00030	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR _Roff$[rsp]
  00038	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR _Right$[rsp]
  00040	e8 00 00 00 00	 call	 ?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Check_offset

; 1392 : 		_N0 = _Clamp_suffix_size(_Off, _N0);

  00045	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR _N0$[rsp]
  0004d	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR _Off$[rsp]
  00055	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0005d	e8 00 00 00 00	 call	 ?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Clamp_suffix_size
  00062	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR _N0$[rsp], rax

; 1393 : 		_Count = _Right._Clamp_suffix_size(_Roff, _Count);

  0006a	4c 8b 84 24 d8
	00 00 00	 mov	 r8, QWORD PTR _Count$[rsp]
  00072	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR _Roff$[rsp]
  0007a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR _Right$[rsp]
  00082	e8 00 00 00 00	 call	 ?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Clamp_suffix_size
  00087	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR _Count$[rsp], rax

; 1394 : 		if (npos - _Count <= this->_Mysize() - _N0)

  0008f	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00096	48 2b 84 24 d8
	00 00 00	 sub	 rax, QWORD PTR _Count$[rsp]
  0009e	48 89 44 24 30	 mov	 QWORD PTR tv76[rsp], rax
  000a3	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000ab	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  000b0	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR _N0$[rsp]
  000b8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000bb	48 2b c1	 sub	 rax, rcx
  000be	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv76[rsp]
  000c3	48 3b c8	 cmp	 rcx, rax
  000c6	77 0d		 ja	 SHORT $LN2@replace

; 1395 : 			_Xlen();	// result too long

  000c8	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000d0	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@replace:

; 1396 : 
; 1397 : 		const size_type _Nm = this->_Mysize() - _N0 - _Off;	// length of kept tail

  000d5	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  000dd	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  000e2	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR _N0$[rsp]
  000ea	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ed	48 2b c1	 sub	 rax, rcx
  000f0	48 2b 84 24 b8
	00 00 00	 sub	 rax, QWORD PTR _Off$[rsp]
  000f8	48 89 44 24 20	 mov	 QWORD PTR _Nm$[rsp], rax

; 1398 : 		const size_type _Newsize = this->_Mysize() + _Count - _N0;

  000fd	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00105	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  0010a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0010d	48 03 84 24 d8
	00 00 00	 add	 rax, QWORD PTR _Count$[rsp]
  00115	48 2b 84 24 c0
	00 00 00	 sub	 rax, QWORD PTR _N0$[rsp]
  0011d	48 89 44 24 28	 mov	 QWORD PTR _Newsize$[rsp], rax

; 1399 : 		if (this->_Mysize() < _Newsize)

  00122	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0012a	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  0012f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Newsize$[rsp]
  00134	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00137	73 15		 jae	 SHORT $LN3@replace

; 1400 : 			_Grow(_Newsize);

  00139	45 33 c0	 xor	 r8d, r8d
  0013c	48 8b 54 24 28	 mov	 rdx, QWORD PTR _Newsize$[rsp]
  00141	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00149	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_N_K_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
$LN3@replace:

; 1401 : 
; 1402 : 		if (_Count == _N0)

  0014e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR _N0$[rsp]
  00156	48 39 84 24 d8
	00 00 00	 cmp	 QWORD PTR _Count$[rsp], rax
  0015e	75 4c		 jne	 SHORT $LN4@replace

; 1403 : 			{	// only one movement required, so _Traits::move handles any overlap
; 1404 : 			_Traits::move(this->_Myptr() + _Off,

  00160	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR _Right$[rsp]
  00168	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAPEBDXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  0016d	48 03 84 24 d0
	00 00 00	 add	 rax, QWORD PTR _Roff$[rsp]
  00175	48 89 44 24 38	 mov	 QWORD PTR tv153[rsp], rax
  0017a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00182	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  00187	48 03 84 24 b8
	00 00 00	 add	 rax, QWORD PTR _Off$[rsp]
  0018f	4c 8b 84 24 d8
	00 00 00	 mov	 r8, QWORD PTR _Count$[rsp]
  00197	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv153[rsp]
  0019c	48 8b d1	 mov	 rdx, rcx
  0019f	48 8b c8	 mov	 rcx, rax
  001a2	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::move
  001a7	e9 24 04 00 00	 jmp	 $LN5@replace
$LN4@replace:

; 1405 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1406 : 			}
; 1407 : 		else if (this != &_Right)

  001ac	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR _Right$[rsp]
  001b4	48 39 84 24 b0
	00 00 00	 cmp	 QWORD PTR this$[rsp], rax
  001bc	0f 84 a0 00 00
	00		 je	 $LN6@replace

; 1408 : 			{	// no overlap, just move down and copy in new stuff
; 1409 : 			_Traits::move(this->_Myptr() + _Off + _Count,

  001c2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001ca	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  001cf	48 03 84 24 b8
	00 00 00	 add	 rax, QWORD PTR _Off$[rsp]
  001d7	48 03 84 24 c0
	00 00 00	 add	 rax, QWORD PTR _N0$[rsp]
  001df	48 89 44 24 40	 mov	 QWORD PTR tv172[rsp], rax
  001e4	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  001ec	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  001f1	48 03 84 24 b8
	00 00 00	 add	 rax, QWORD PTR _Off$[rsp]
  001f9	48 03 84 24 d8
	00 00 00	 add	 rax, QWORD PTR _Count$[rsp]
  00201	4c 8b 44 24 20	 mov	 r8, QWORD PTR _Nm$[rsp]
  00206	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv172[rsp]
  0020b	48 8b d1	 mov	 rdx, rcx
  0020e	48 8b c8	 mov	 rcx, rax
  00211	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::move

; 1410 : 				this->_Myptr() + _Off + _N0, _Nm);	// empty hole
; 1411 : 			_Traits::copy(this->_Myptr() + _Off,

  00216	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR _Right$[rsp]
  0021e	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAPEBDXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  00223	48 03 84 24 d0
	00 00 00	 add	 rax, QWORD PTR _Roff$[rsp]
  0022b	48 89 44 24 48	 mov	 QWORD PTR tv190[rsp], rax
  00230	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00238	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  0023d	48 03 84 24 b8
	00 00 00	 add	 rax, QWORD PTR _Off$[rsp]
  00245	4c 8b 84 24 d8
	00 00 00	 mov	 r8, QWORD PTR _Count$[rsp]
  0024d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv190[rsp]
  00252	48 8b d1	 mov	 rdx, rcx
  00255	48 8b c8	 mov	 rcx, rax
  00258	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::copy
  0025d	e9 6e 03 00 00	 jmp	 $LN7@replace
$LN6@replace:

; 1412 : 				_Right._Myptr() + _Roff, _Count);	// fill hole
; 1413 : 			}
; 1414 : 		else if (_Count < _N0)

  00262	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR _N0$[rsp]
  0026a	48 39 84 24 d8
	00 00 00	 cmp	 QWORD PTR _Count$[rsp], rax
  00272	0f 83 a0 00 00
	00		 jae	 $LN8@replace

; 1415 : 			{	// hole doesn't get larger, just copy in substring
; 1416 : 			_Traits::move(this->_Myptr() + _Off,

  00278	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00280	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  00285	48 03 84 24 d0
	00 00 00	 add	 rax, QWORD PTR _Roff$[rsp]
  0028d	48 89 44 24 50	 mov	 QWORD PTR tv208[rsp], rax
  00292	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0029a	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  0029f	48 03 84 24 b8
	00 00 00	 add	 rax, QWORD PTR _Off$[rsp]
  002a7	4c 8b 84 24 d8
	00 00 00	 mov	 r8, QWORD PTR _Count$[rsp]
  002af	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv208[rsp]
  002b4	48 8b d1	 mov	 rdx, rcx
  002b7	48 8b c8	 mov	 rcx, rax
  002ba	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::move

; 1417 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1418 : 			_Traits::move(this->_Myptr() + _Off + _Count,

  002bf	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  002c7	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  002cc	48 03 84 24 b8
	00 00 00	 add	 rax, QWORD PTR _Off$[rsp]
  002d4	48 03 84 24 c0
	00 00 00	 add	 rax, QWORD PTR _N0$[rsp]
  002dc	48 89 44 24 58	 mov	 QWORD PTR tv226[rsp], rax
  002e1	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  002e9	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  002ee	48 03 84 24 b8
	00 00 00	 add	 rax, QWORD PTR _Off$[rsp]
  002f6	48 03 84 24 d8
	00 00 00	 add	 rax, QWORD PTR _Count$[rsp]
  002fe	4c 8b 44 24 20	 mov	 r8, QWORD PTR _Nm$[rsp]
  00303	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv226[rsp]
  00308	48 8b d1	 mov	 rdx, rcx
  0030b	48 8b c8	 mov	 rcx, rax
  0030e	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::move
  00313	e9 b8 02 00 00	 jmp	 $LN9@replace
$LN8@replace:

; 1419 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1420 : 			}
; 1421 : 		else if (_Roff <= _Off)

  00318	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR _Off$[rsp]
  00320	48 39 84 24 d0
	00 00 00	 cmp	 QWORD PTR _Roff$[rsp], rax
  00328	0f 87 a0 00 00
	00		 ja	 $LN10@replace

; 1422 : 			{	// hole gets larger, substring begins before hole
; 1423 : 			_Traits::move(this->_Myptr() + _Off + _Count,

  0032e	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00336	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  0033b	48 03 84 24 b8
	00 00 00	 add	 rax, QWORD PTR _Off$[rsp]
  00343	48 03 84 24 c0
	00 00 00	 add	 rax, QWORD PTR _N0$[rsp]
  0034b	48 89 44 24 60	 mov	 QWORD PTR tv246[rsp], rax
  00350	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00358	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  0035d	48 03 84 24 b8
	00 00 00	 add	 rax, QWORD PTR _Off$[rsp]
  00365	48 03 84 24 d8
	00 00 00	 add	 rax, QWORD PTR _Count$[rsp]
  0036d	4c 8b 44 24 20	 mov	 r8, QWORD PTR _Nm$[rsp]
  00372	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv246[rsp]
  00377	48 8b d1	 mov	 rdx, rcx
  0037a	48 8b c8	 mov	 rcx, rax
  0037d	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::move

; 1424 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1425 : 			_Traits::move(this->_Myptr() + _Off,

  00382	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0038a	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  0038f	48 03 84 24 d0
	00 00 00	 add	 rax, QWORD PTR _Roff$[rsp]
  00397	48 89 44 24 68	 mov	 QWORD PTR tv264[rsp], rax
  0039c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  003a4	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  003a9	48 03 84 24 b8
	00 00 00	 add	 rax, QWORD PTR _Off$[rsp]
  003b1	4c 8b 84 24 d8
	00 00 00	 mov	 r8, QWORD PTR _Count$[rsp]
  003b9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv264[rsp]
  003be	48 8b d1	 mov	 rdx, rcx
  003c1	48 8b c8	 mov	 rcx, rax
  003c4	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::move
  003c9	e9 02 02 00 00	 jmp	 $LN11@replace
$LN10@replace:

; 1426 : 				this->_Myptr() + _Roff, _Count);	// fill hole
; 1427 : 			}
; 1428 : 		else if (_Off + _N0 <= _Roff)

  003ce	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR _N0$[rsp]
  003d6	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR _Off$[rsp]
  003de	48 03 c8	 add	 rcx, rax
  003e1	48 8b c1	 mov	 rax, rcx
  003e4	48 3b 84 24 d0
	00 00 00	 cmp	 rax, QWORD PTR _Roff$[rsp]
  003ec	0f 87 b9 00 00
	00		 ja	 $LN12@replace

; 1429 : 			{	// hole gets larger, substring begins after hole
; 1430 : 			_Traits::move(this->_Myptr() + _Off + _Count,

  003f2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  003fa	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  003ff	48 03 84 24 b8
	00 00 00	 add	 rax, QWORD PTR _Off$[rsp]
  00407	48 03 84 24 c0
	00 00 00	 add	 rax, QWORD PTR _N0$[rsp]
  0040f	48 89 44 24 70	 mov	 QWORD PTR tv284[rsp], rax
  00414	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0041c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  00421	48 03 84 24 b8
	00 00 00	 add	 rax, QWORD PTR _Off$[rsp]
  00429	48 03 84 24 d8
	00 00 00	 add	 rax, QWORD PTR _Count$[rsp]
  00431	4c 8b 44 24 20	 mov	 r8, QWORD PTR _Nm$[rsp]
  00436	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv284[rsp]
  0043b	48 8b d1	 mov	 rdx, rcx
  0043e	48 8b c8	 mov	 rcx, rax
  00441	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::move

; 1431 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1432 : 			_Traits::move(this->_Myptr() + _Off,

  00446	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0044e	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  00453	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR _Count$[rsp]
  0045b	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR _Roff$[rsp]
  00463	48 03 d1	 add	 rdx, rcx
  00466	48 8b ca	 mov	 rcx, rdx
  00469	48 2b 8c 24 c0
	00 00 00	 sub	 rcx, QWORD PTR _N0$[rsp]
  00471	48 03 c1	 add	 rax, rcx
  00474	48 89 44 24 78	 mov	 QWORD PTR tv304[rsp], rax
  00479	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00481	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  00486	48 03 84 24 b8
	00 00 00	 add	 rax, QWORD PTR _Off$[rsp]
  0048e	4c 8b 84 24 d8
	00 00 00	 mov	 r8, QWORD PTR _Count$[rsp]
  00496	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv304[rsp]
  0049b	48 8b d1	 mov	 rdx, rcx
  0049e	48 8b c8	 mov	 rcx, rax
  004a1	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::move

; 1433 : 				this->_Myptr() + (_Roff + _Count - _N0),
; 1434 : 				_Count);	// fill hole
; 1435 : 			}
; 1436 : 		else

  004a6	e9 25 01 00 00	 jmp	 $LN13@replace
$LN12@replace:

; 1437 : 			{	// hole gets larger, substring begins in hole
; 1438 : 			_Traits::move(this->_Myptr() + _Off,

  004ab	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  004b3	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  004b8	48 03 84 24 d0
	00 00 00	 add	 rax, QWORD PTR _Roff$[rsp]
  004c0	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv321[rsp], rax
  004c8	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  004d0	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  004d5	48 03 84 24 b8
	00 00 00	 add	 rax, QWORD PTR _Off$[rsp]
  004dd	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR _N0$[rsp]
  004e5	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv321[rsp]
  004ed	48 8b d1	 mov	 rdx, rcx
  004f0	48 8b c8	 mov	 rcx, rax
  004f3	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::move

; 1439 : 				this->_Myptr() + _Roff, _N0);	// fill old hole
; 1440 : 			_Traits::move(this->_Myptr() + _Off + _Count,

  004f8	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00500	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  00505	48 03 84 24 b8
	00 00 00	 add	 rax, QWORD PTR _Off$[rsp]
  0050d	48 03 84 24 c0
	00 00 00	 add	 rax, QWORD PTR _N0$[rsp]
  00515	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv339[rsp], rax
  0051d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00525	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  0052a	48 03 84 24 b8
	00 00 00	 add	 rax, QWORD PTR _Off$[rsp]
  00532	48 03 84 24 d8
	00 00 00	 add	 rax, QWORD PTR _Count$[rsp]
  0053a	4c 8b 44 24 20	 mov	 r8, QWORD PTR _Nm$[rsp]
  0053f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv339[rsp]
  00547	48 8b d1	 mov	 rdx, rcx
  0054a	48 8b c8	 mov	 rcx, rax
  0054d	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::move

; 1441 : 				this->_Myptr() + _Off + _N0, _Nm);	// move tail down
; 1442 : 			_Traits::move(this->_Myptr() + _Off + _N0,

  00552	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR _N0$[rsp]
  0055a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR _Count$[rsp]
  00562	48 2b c8	 sub	 rcx, rax
  00565	48 8b c1	 mov	 rax, rcx
  00568	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv350[rsp], rax
  00570	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  00578	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  0057d	48 03 84 24 d0
	00 00 00	 add	 rax, QWORD PTR _Roff$[rsp]
  00585	48 03 84 24 d8
	00 00 00	 add	 rax, QWORD PTR _Count$[rsp]
  0058d	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv359[rsp], rax
  00595	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  0059d	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  005a2	48 03 84 24 b8
	00 00 00	 add	 rax, QWORD PTR _Off$[rsp]
  005aa	48 03 84 24 c0
	00 00 00	 add	 rax, QWORD PTR _N0$[rsp]
  005b2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv350[rsp]
  005ba	4c 8b c1	 mov	 r8, rcx
  005bd	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv359[rsp]
  005c5	48 8b d1	 mov	 rdx, rcx
  005c8	48 8b c8	 mov	 rcx, rax
  005cb	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::move
$LN13@replace:
$LN11@replace:
$LN9@replace:
$LN7@replace:
$LN5@replace:

; 1443 : 				this->_Myptr() + _Roff + _Count,
; 1444 : 				_Count - _N0);	// fill rest of new hole
; 1445 : 			}
; 1446 : 
; 1447 : 		_Eos(_Newsize);

  005d0	48 8b 54 24 28	 mov	 rdx, QWORD PTR _Newsize$[rsp]
  005d5	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR this$[rsp]
  005dd	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1448 : 		return (*this);

  005e2	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR this$[rsp]
$LN14@replace:

; 1449 : 		}

  005ea	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  005f1	c3		 ret	 0
?replace@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0AEBV12@00@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::replace
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z
_TEXT	SEGMENT
_Ptr$1 = 32
_Newsize$2 = 40
this$ = 64
_Off$ = 72
_Count$ = 80
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT

; 1347 : 		{	// erase elements [_Off, _Off + _Count)

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1348 : 		_Check_offset(_Off);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Off$[rsp]
  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Check_offset

; 1349 : 		if (this->_Mysize() - _Off <= _Count)

  00022	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00027	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  0002c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Off$[rsp]
  00031	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00034	48 2b c1	 sub	 rax, rcx
  00037	48 3b 44 24 50	 cmp	 rax, QWORD PTR _Count$[rsp]
  0003c	77 11		 ja	 SHORT $LN2@erase

; 1350 : 			_Eos(_Off);	// erase elements [_Off, ...)

  0003e	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Off$[rsp]
  00043	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00048	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
  0004d	eb 75		 jmp	 SHORT $LN3@erase
$LN2@erase:

; 1351 : 		else if (0 < _Count)

  0004f	48 83 7c 24 50
	00		 cmp	 QWORD PTR _Count$[rsp], 0
  00055	76 6d		 jbe	 SHORT $LN4@erase

; 1352 : 			{	// move elements down
; 1353 : 			value_type *_Ptr = this->_Myptr() + _Off;

  00057	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0005c	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  00061	48 03 44 24 48	 add	 rax, QWORD PTR _Off$[rsp]
  00066	48 89 44 24 20	 mov	 QWORD PTR _Ptr$1[rsp], rax

; 1354 : 			size_type _Newsize = this->_Mysize() - _Count;

  0006b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00070	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  00075	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Count$[rsp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 2b c1	 sub	 rax, rcx
  00080	48 89 44 24 28	 mov	 QWORD PTR _Newsize$2[rsp], rax

; 1355 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

  00085	48 8b 44 24 48	 mov	 rax, QWORD PTR _Off$[rsp]
  0008a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Newsize$2[rsp]
  0008f	48 2b c8	 sub	 rcx, rax
  00092	48 8b c1	 mov	 rax, rcx
  00095	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Count$[rsp]
  0009a	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Ptr$1[rsp]
  0009f	48 03 d1	 add	 rdx, rcx
  000a2	48 8b ca	 mov	 rcx, rdx
  000a5	4c 8b c0	 mov	 r8, rax
  000a8	48 8b d1	 mov	 rdx, rcx
  000ab	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Ptr$1[rsp]
  000b0	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::move

; 1356 : 			_Eos(_Newsize);

  000b5	48 8b 54 24 28	 mov	 rdx, QWORD PTR _Newsize$2[rsp]
  000ba	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000bf	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@erase:
$LN3@erase:

; 1357 : 			}
; 1358 : 		return (*this);

  000c4	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]

; 1359 : 		}

  000c9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cd	c3		 ret	 0
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z
_TEXT	SEGMENT
this$ = 48
_Off$ = 56
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT

; 1340 : 		{	// erase elements [_Off, ...)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1341 : 		_Check_offset(_Off);

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Off$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Check_offset

; 1342 : 		_Eos(_Off);

  0001d	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Off$[rsp]
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00027	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos

; 1343 : 		return (*this);

  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]

; 1344 : 		}

  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z
_TEXT	SEGMENT
_Num$ = 32
tv128 = 40
tv136 = 48
this$ = 80
_Off$ = 88
_Count$ = 96
_Ch$ = 104
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT

; 1278 : 		{	// insert _Count * _Ch at _Off

$LN5:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1279 : 		_Check_offset(_Off);

  00018	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Off$[rsp]
  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Check_offset

; 1280 : 		if (npos - this->_Mysize() <= _Count)

  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  00031	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00034	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2_KB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  0003b	48 2b c8	 sub	 rcx, rax
  0003e	48 8b c1	 mov	 rax, rcx
  00041	48 3b 44 24 60	 cmp	 rax, QWORD PTR _Count$[rsp]
  00046	77 0a		 ja	 SHORT $LN2@insert

; 1281 : 			_Xlen();	// result too long

  00048	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  0004d	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@insert:

; 1282 : 		const size_type _Num = this->_Mysize() + _Count;

  00052	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00057	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  0005c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0005f	48 03 44 24 60	 add	 rax, QWORD PTR _Count$[rsp]
  00064	48 89 44 24 20	 mov	 QWORD PTR _Num$[rsp], rax

; 1283 : 		if (0 < _Count && _Grow(_Num))

  00069	48 83 7c 24 60
	00		 cmp	 QWORD PTR _Count$[rsp], 0
  0006f	0f 86 a0 00 00
	00		 jbe	 $LN3@insert
  00075	45 33 c0	 xor	 r8d, r8d
  00078	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Num$[rsp]
  0007d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00082	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_N_K_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00087	0f b6 c0	 movzx	 eax, al
  0008a	85 c0		 test	 eax, eax
  0008c	0f 84 83 00 00
	00		 je	 $LN3@insert

; 1284 : 			{	// make room and insert new stuff
; 1285 : 			_Traits::move(this->_Myptr() + _Off + _Count,

  00092	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00097	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  0009c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Off$[rsp]
  000a1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a4	48 2b c1	 sub	 rax, rcx
  000a7	48 89 44 24 28	 mov	 QWORD PTR tv128[rsp], rax
  000ac	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000b1	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  000b6	48 03 44 24 58	 add	 rax, QWORD PTR _Off$[rsp]
  000bb	48 89 44 24 30	 mov	 QWORD PTR tv136[rsp], rax
  000c0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000c5	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  000ca	48 03 44 24 58	 add	 rax, QWORD PTR _Off$[rsp]
  000cf	48 03 44 24 60	 add	 rax, QWORD PTR _Count$[rsp]
  000d4	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv128[rsp]
  000d9	4c 8b c1	 mov	 r8, rcx
  000dc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv136[rsp]
  000e1	48 8b d1	 mov	 rdx, rcx
  000e4	48 8b c8	 mov	 rcx, rax
  000e7	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::move

; 1286 : 				this->_Myptr() + _Off,
; 1287 : 				this->_Mysize() - _Off);	// empty out hole
; 1288 : 			_Chassign(_Off, _Count, _Ch);	// fill hole

  000ec	44 0f b6 4c 24
	68		 movzx	 r9d, BYTE PTR _Ch$[rsp]
  000f2	4c 8b 44 24 60	 mov	 r8, QWORD PTR _Count$[rsp]
  000f7	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Off$[rsp]
  000fc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00101	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1289 : 			_Eos(_Num);

  00106	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Num$[rsp]
  0010b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00110	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN3@insert:

; 1290 : 			}
; 1291 : 		return (*this);

  00115	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
$LN4@insert:

; 1292 : 		}

  0011a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0011e	c3		 ret	 0
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
_Ch$ = 64
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 1186 : 		{	// assign _Count * _Ch

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1187 : 		if (_Count == npos)

  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2_KB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  0001a	48 39 44 24 38	 cmp	 QWORD PTR _Count$[rsp], rax
  0001f	75 0a		 jne	 SHORT $LN2@assign

; 1188 : 			_Xlen();	// result too long

  00021	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00026	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@assign:

; 1189 : 
; 1190 : 		if (_Grow(_Count))

  0002b	45 33 c0	 xor	 r8d, r8d
  0002e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Count$[rsp]
  00033	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00038	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_N_K_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0003d	0f b6 c0	 movzx	 eax, al
  00040	85 c0		 test	 eax, eax
  00042	74 26		 je	 SHORT $LN3@assign

; 1191 : 			{	// make room and assign new stuff
; 1192 : 			_Chassign(0, _Count, _Ch);

  00044	44 0f b6 4c 24
	40		 movzx	 r9d, BYTE PTR _Ch$[rsp]
  0004a	4c 8b 44 24 38	 mov	 r8, QWORD PTR _Count$[rsp]
  0004f	33 d2		 xor	 edx, edx
  00051	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00056	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1193 : 			_Eos(_Count);

  0005b	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Count$[rsp]
  00060	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00065	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN3@assign:

; 1194 : 			}
; 1195 : 		return (*this);

  0006a	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
$LN4@assign:

; 1196 : 		}

  0006f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00073	c3		 ret	 0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 1180 : 		{	// assign [_Ptr, <null>)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1181 : 		_DEBUG_POINTER(_Ptr);
; 1182 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00013	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SA_KPEBD@Z ; std::char_traits<char>::length
  00018	4c 8b c0	 mov	 r8, rax
  0001b	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00020	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00025	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1183 : 		}

  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
_Count$ = 64
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 1165 : 		{	// assign [_Ptr, _Ptr + _Count)

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1166 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1167 : 		if (_Inside(_Ptr))

  00013	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_NPEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
  00022	0f b6 c0	 movzx	 eax, al
  00025	85 c0		 test	 eax, eax
  00027	74 2e		 je	 SHORT $LN2@assign

; 1168 : 			return (assign(*this,

  00029	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002e	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  00033	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00038	48 2b c8	 sub	 rcx, rax
  0003b	48 8b c1	 mov	 rax, rcx
  0003e	4c 8b 4c 24 40	 mov	 r9, QWORD PTR _Count$[rsp]
  00043	4c 8b c0	 mov	 r8, rax
  00046	48 8b 54 24 30	 mov	 rdx, QWORD PTR this$[rsp]
  0004b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00050	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00055	eb 49		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 1169 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1170 : 
; 1171 : 		if (_Grow(_Count))

  00057	45 33 c0	 xor	 r8d, r8d
  0005a	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Count$[rsp]
  0005f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00064	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_N_K_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  00069	0f b6 c0	 movzx	 eax, al
  0006c	85 c0		 test	 eax, eax
  0006e	74 2b		 je	 SHORT $LN3@assign

; 1172 : 			{	// make room and assign new stuff
; 1173 : 			_Traits::copy(this->_Myptr(), _Ptr, _Count);

  00070	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00075	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  0007a	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Count$[rsp]
  0007f	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00084	48 8b c8	 mov	 rcx, rax
  00087	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::copy

; 1174 : 			_Eos(_Count);

  0008c	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Count$[rsp]
  00091	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00096	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN3@assign:

; 1175 : 			}
; 1176 : 		return (*this);

  0009b	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
$LN1@assign:

; 1177 : 		}

  000a0	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000a4	c3		 ret	 0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z
_TEXT	SEGMENT
tv91 = 32
this$ = 64
_Right$ = 72
_Roff$ = 80
_Count$ = 88
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 1149 : 		{	// assign _Right [_Roff, _Roff + _Count)

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1150 : 		_Right._Check_offset(_Roff);

  00018	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Roff$[rsp]
  0001d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  00022	e8 00 00 00 00	 call	 ?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Check_offset

; 1151 : 		_Count = _Right._Clamp_suffix_size(_Roff, _Count);

  00027	4c 8b 44 24 58	 mov	 r8, QWORD PTR _Count$[rsp]
  0002c	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Roff$[rsp]
  00031	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  00036	e8 00 00 00 00	 call	 ?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Clamp_suffix_size
  0003b	48 89 44 24 58	 mov	 QWORD PTR _Count$[rsp], rax

; 1152 : 
; 1153 : 		if (this == &_Right)

  00040	48 8b 44 24 48	 mov	 rax, QWORD PTR _Right$[rsp]
  00045	48 39 44 24 40	 cmp	 QWORD PTR this$[rsp], rax
  0004a	75 30		 jne	 SHORT $LN2@assign

; 1154 : 			erase((size_type)(_Roff + _Count)), erase(0, _Roff);	// substring

  0004c	48 8b 44 24 58	 mov	 rax, QWORD PTR _Count$[rsp]
  00051	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Roff$[rsp]
  00056	48 03 c8	 add	 rcx, rax
  00059	48 8b c1	 mov	 rax, rcx
  0005c	48 8b d0	 mov	 rdx, rax
  0005f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00064	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00069	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Roff$[rsp]
  0006e	33 d2		 xor	 edx, edx
  00070	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00075	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  0007a	eb 5b		 jmp	 SHORT $LN3@assign
$LN2@assign:

; 1155 : 		else if (_Grow(_Count))

  0007c	45 33 c0	 xor	 r8d, r8d
  0007f	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Count$[rsp]
  00084	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00089	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_N_K_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0008e	0f b6 c0	 movzx	 eax, al
  00091	85 c0		 test	 eax, eax
  00093	74 42		 je	 SHORT $LN4@assign

; 1156 : 			{	// make room and assign new stuff
; 1157 : 			_Traits::copy(this->_Myptr(),

  00095	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  0009a	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAPEBDXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  0009f	48 03 44 24 50	 add	 rax, QWORD PTR _Roff$[rsp]
  000a4	48 89 44 24 20	 mov	 QWORD PTR tv91[rsp], rax
  000a9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000ae	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  000b3	4c 8b 44 24 58	 mov	 r8, QWORD PTR _Count$[rsp]
  000b8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv91[rsp]
  000bd	48 8b d1	 mov	 rdx, rcx
  000c0	48 8b c8	 mov	 rcx, rax
  000c3	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::copy

; 1158 : 				_Right._Myptr() + _Roff, _Count);
; 1159 : 			_Eos(_Count);

  000c8	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Count$[rsp]
  000cd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000d2	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@assign:
$LN3@assign:

; 1160 : 			}
; 1161 : 		return (*this);

  000d7	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]

; 1162 : 		}

  000dc	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e0	c3		 ret	 0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 1143 : 		{	// assign _Right

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1144 : 		return (assign(_Right, 0, npos));

  0000e	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2_KB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  00015	45 33 c0	 xor	 r8d, r8d
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Right$[rsp]
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1145 : 		}

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z
_TEXT	SEGMENT
_Num$ = 32
this$ = 64
_Count$ = 72
_Ch$ = 80
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT

; 1111 : 		{	// append _Count * _Ch

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1112 : 		if (npos - this->_Mysize() <= _Count)

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  0001d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00020	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2_KB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  00027	48 2b c8	 sub	 rcx, rax
  0002a	48 8b c1	 mov	 rax, rcx
  0002d	48 3b 44 24 48	 cmp	 rax, QWORD PTR _Count$[rsp]
  00032	77 0a		 ja	 SHORT $LN2@append

; 1113 : 			_Xlen();	// result too long

  00034	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00039	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@append:

; 1114 : 
; 1115 : 		const size_type _Num = this->_Mysize() + _Count;

  0003e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00043	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  00048	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004b	48 03 44 24 48	 add	 rax, QWORD PTR _Count$[rsp]
  00050	48 89 44 24 20	 mov	 QWORD PTR _Num$[rsp], rax

; 1116 : 		if (0 < _Count && _Grow(_Num))

  00055	48 83 7c 24 48
	00		 cmp	 QWORD PTR _Count$[rsp], 0
  0005b	76 4a		 jbe	 SHORT $LN3@append
  0005d	45 33 c0	 xor	 r8d, r8d
  00060	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Num$[rsp]
  00065	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0006a	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_N_K_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0006f	0f b6 c0	 movzx	 eax, al
  00072	85 c0		 test	 eax, eax
  00074	74 31		 je	 SHORT $LN3@append

; 1117 : 			{	// make room and append new stuff using assign
; 1118 : 			_Chassign(this->_Mysize(), _Count, _Ch);

  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0007b	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  00080	44 0f b6 4c 24
	50		 movzx	 r9d, BYTE PTR _Ch$[rsp]
  00086	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Count$[rsp]
  0008b	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0008e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00093	e8 00 00 00 00	 call	 ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K0D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1119 : 			_Eos(_Num);

  00098	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Num$[rsp]
  0009d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000a2	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN3@append:

; 1120 : 			}
; 1121 : 		return (*this);

  000a7	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
$LN4@append:

; 1122 : 		}

  000ac	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b0	c3		 ret	 0
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT

; 1105 : 		{	// append [_Ptr, <null>)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1106 : 		_DEBUG_POINTER(_Ptr);
; 1107 : 		return (append(_Ptr, _Traits::length(_Ptr)));

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00013	e8 00 00 00 00	 call	 ?length@?$char_traits@D@std@@SA_KPEBD@Z ; std::char_traits<char>::length
  00018	4c 8b c0	 mov	 r8, rax
  0001b	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00020	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00025	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1108 : 		}

  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z
_TEXT	SEGMENT
_Num$ = 32
tv144 = 40
this$ = 64
_Ptr$ = 72
_Count$ = 80
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT

; 1087 : 		{	// append [_Ptr, _Ptr + _Count)

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1088 : 		_DEBUG_POINTER_IF(_Count != 0, _Ptr);
; 1089 : 		if (_Inside(_Ptr))

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001d	e8 00 00 00 00	 call	 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_NPEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
  00022	0f b6 c0	 movzx	 eax, al
  00025	85 c0		 test	 eax, eax
  00027	74 31		 je	 SHORT $LN2@append

; 1090 : 			return (append(*this,

  00029	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0002e	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  00033	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00038	48 2b c8	 sub	 rcx, rax
  0003b	48 8b c1	 mov	 rax, rcx
  0003e	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Count$[rsp]
  00043	4c 8b c0	 mov	 r8, rax
  00046	48 8b 54 24 40	 mov	 rdx, QWORD PTR this$[rsp]
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00050	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00055	e9 ad 00 00 00	 jmp	 $LN1@append
$LN2@append:

; 1091 : 				_Ptr - this->_Myptr(), _Count));	// substring
; 1092 : 		if (npos - this->_Mysize() <= _Count)

  0005a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0005f	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  00064	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00067	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2_KB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  0006e	48 2b c8	 sub	 rcx, rax
  00071	48 8b c1	 mov	 rax, rcx
  00074	48 3b 44 24 50	 cmp	 rax, QWORD PTR _Count$[rsp]
  00079	77 0a		 ja	 SHORT $LN3@append

; 1093 : 			_Xlen();	// result too long

  0007b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00080	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN3@append:

; 1094 : 
; 1095 : 		const size_type _Num = this->_Mysize() + _Count;

  00085	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0008a	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  0008f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00092	48 03 44 24 50	 add	 rax, QWORD PTR _Count$[rsp]
  00097	48 89 44 24 20	 mov	 QWORD PTR _Num$[rsp], rax

; 1096 : 		if (0 < _Count && _Grow(_Num))

  0009c	48 83 7c 24 50
	00		 cmp	 QWORD PTR _Count$[rsp], 0
  000a2	76 5e		 jbe	 SHORT $LN4@append
  000a4	45 33 c0	 xor	 r8d, r8d
  000a7	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Num$[rsp]
  000ac	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000b1	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_N_K_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  000b6	0f b6 c0	 movzx	 eax, al
  000b9	85 c0		 test	 eax, eax
  000bb	74 45		 je	 SHORT $LN4@append

; 1097 : 			{	// make room and append new stuff
; 1098 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);

  000bd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000c2	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  000c7	48 89 44 24 28	 mov	 QWORD PTR tv144[rsp], rax
  000cc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000d1	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  000d6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv144[rsp]
  000db	48 03 08	 add	 rcx, QWORD PTR [rax]
  000de	48 8b c1	 mov	 rax, rcx
  000e1	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Count$[rsp]
  000e6	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  000eb	48 8b c8	 mov	 rcx, rax
  000ee	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::copy

; 1099 : 			_Eos(_Num);

  000f3	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Num$[rsp]
  000f8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  000fd	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN4@append:

; 1100 : 			}
; 1101 : 		return (*this);

  00102	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
$LN1@append:
$LN5@append:

; 1102 : 		}

  00107	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0010b	c3		 ret	 0
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z
_TEXT	SEGMENT
_Num$ = 32
tv140 = 40
tv133 = 48
this$ = 80
_Right$ = 88
_Roff$ = 96
_Count$ = 104
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT

; 1070 : 		{	// append _Right [_Roff, _Roff + _Count)

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1071 : 		_Right._Check_offset(_Roff);

  00018	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Roff$[rsp]
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  00022	e8 00 00 00 00	 call	 ?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Check_offset

; 1072 : 		_Count = _Right._Clamp_suffix_size(_Roff, _Count);

  00027	4c 8b 44 24 68	 mov	 r8, QWORD PTR _Count$[rsp]
  0002c	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Roff$[rsp]
  00031	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  00036	e8 00 00 00 00	 call	 ?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_K_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Clamp_suffix_size
  0003b	48 89 44 24 68	 mov	 QWORD PTR _Count$[rsp], rax

; 1073 : 		if (npos - this->_Mysize() <= _Count)

  00040	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00045	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  0004a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2_KB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  00054	48 2b c8	 sub	 rcx, rax
  00057	48 8b c1	 mov	 rax, rcx
  0005a	48 3b 44 24 68	 cmp	 rax, QWORD PTR _Count$[rsp]
  0005f	77 0a		 ja	 SHORT $LN2@append

; 1074 : 			_Xlen();	// result too long

  00061	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00066	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN2@append:

; 1075 : 
; 1076 : 		const size_type _Num = this->_Mysize() + _Count;

  0006b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00070	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  00075	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00078	48 03 44 24 68	 add	 rax, QWORD PTR _Count$[rsp]
  0007d	48 89 44 24 20	 mov	 QWORD PTR _Num$[rsp], rax

; 1077 : 		if (0 < _Count && _Grow(_Num))

  00082	48 83 7c 24 68
	00		 cmp	 QWORD PTR _Count$[rsp], 0
  00088	76 75		 jbe	 SHORT $LN3@append
  0008a	45 33 c0	 xor	 r8d, r8d
  0008d	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Num$[rsp]
  00092	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00097	e8 00 00 00 00	 call	 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA_N_K_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
  0009c	0f b6 c0	 movzx	 eax, al
  0009f	85 c0		 test	 eax, eax
  000a1	74 5c		 je	 SHORT $LN3@append

; 1078 : 			{	// make room and append new stuff
; 1079 : 			_Traits::copy(this->_Myptr() + this->_Mysize(),

  000a3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  000a8	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAPEBDXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  000ad	48 03 44 24 60	 add	 rax, QWORD PTR _Roff$[rsp]
  000b2	48 89 44 24 30	 mov	 QWORD PTR tv133[rsp], rax
  000b7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000bc	e8 00 00 00 00	 call	 ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
  000c1	48 89 44 24 28	 mov	 QWORD PTR tv140[rsp], rax
  000c6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000cb	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  000d0	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv140[rsp]
  000d5	48 03 08	 add	 rcx, QWORD PTR [rax]
  000d8	48 8b c1	 mov	 rax, rcx
  000db	4c 8b 44 24 68	 mov	 r8, QWORD PTR _Count$[rsp]
  000e0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv133[rsp]
  000e5	48 8b d1	 mov	 rdx, rcx
  000e8	48 8b c8	 mov	 rcx, rax
  000eb	e8 00 00 00 00	 call	 ?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::copy

; 1080 : 				_Right._Myptr() + _Roff, _Count);
; 1081 : 			_Eos(_Num);

  000f0	48 8b 54 24 20	 mov	 rdx, QWORD PTR _Num$[rsp]
  000f5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000fa	e8 00 00 00 00	 call	 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
$LN3@append:

; 1082 : 			}
; 1083 : 		return (*this);

  000ff	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]
$LN4@append:

; 1084 : 		}

  00104	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00108	c3		 ret	 0
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT

; 1064 : 		{	// append _Right

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1065 : 		return (append(_Right, 0, npos));

  0000e	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2_KB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  00015	45 33 c0	 xor	 r8d, r8d
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Right$[rsp]
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 1066 : 		}

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT

; 1039 : 		{	// assign [_Ptr, <null>)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1040 : 		return (assign(_Ptr));

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1041 : 		}

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@PEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z
_TEXT	SEGMENT
tv71 = 32
this$ = 64
_Right$ = 72
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT

; 1023 : 		{	// assign _Right

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1024 : 		if (this != &_Right)

  0000e	48 8b 44 24 48	 mov	 rax, QWORD PTR _Right$[rsp]
  00013	48 39 44 24 40	 cmp	 QWORD PTR this$[rsp], rax
  00018	74 6b		 je	 SHORT $LN2@operator

; 1025 : 			{	// different, assign it
; 1026 : 			if (this->_Getal() != _Right._Getal()
; 1027 : 				&& _Alty::propagate_on_container_copy_assignment::value)

  0001a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  0001f	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00024	48 89 44 24 20	 mov	 QWORD PTR tv71[rsp], rax
  00029	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0002e	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00033	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv71[rsp]
  00038	48 8b d1	 mov	 rdx, rcx
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	e8 00 00 00 00	 call	 ??$?9V?$allocator@D@std@@V01@@std@@YA_NAEBU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z ; std::operator!=<std::allocator<char>,std::allocator<char> >
  00043	0f b6 c0	 movzx	 eax, al
  00046	85 c0		 test	 eax, eax
  00048	74 2c		 je	 SHORT $LN3@operator
  0004a	33 c0		 xor	 eax, eax
  0004c	85 c0		 test	 eax, eax
  0004e	74 26		 je	 SHORT $LN3@operator

; 1028 : 				{	// change allocator before copying
; 1029 : 				_Tidy(true);

  00050	45 33 c0	 xor	 r8d, r8d
  00053	b2 01		 mov	 dl, 1
  00055	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0005a	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 1030 : 				this->_Copy_alloc(_Right._Getal());

  0005f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  00064	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00069	48 8b d0	 mov	 rdx, rax
  0006c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00071	e8 00 00 00 00	 call	 ?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Copy_alloc
$LN3@operator:

; 1031 : 				}
; 1032 : 
; 1033 : 			assign(_Right);

  00076	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Right$[rsp]
  0007b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00080	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN2@operator:

; 1034 : 			}
; 1035 : 		return (*this);

  00085	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]

; 1036 : 		}

  0008a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008e	c3		 ret	 0
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 1016 : 		{	// destroy the string

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 1017 : 		_Tidy(true);

  00012	45 33 c0	 xor	 r8d, r8d
  00015	b2 01		 mov	 dl, 1
  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001c	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00021	90		 npad	 1

; 1018 : 		}

  00022	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00027	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
  0002c	90		 npad	 1
  0002d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00031	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@@Z
_TEXT	SEGMENT
tv78 = 32
tv86 = 40
tv140 = 48
tv142 = 56
tv170 = 64
tv182 = 72
this$ = 96
_Right$ = 104
?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv, COMDAT

; 961  : 		{	// assign by moving _Right

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 962  : 		if (_Right._Myres() < this->_BUF_SIZE)

  0000e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Right$[rsp]
  00013	e8 00 00 00 00	 call	 ?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres
  00018	48 83 38 10	 cmp	 QWORD PTR [rax], 16
  0001c	73 48		 jae	 SHORT $LN2@Assign_rv

; 963  : 			_Traits::move(this->_Bx()._Buf, _Right._Bx()._Buf,

  0001e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Right$[rsp]
  00023	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  00028	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002b	48 ff c0	 inc	 rax
  0002e	48 89 44 24 20	 mov	 QWORD PTR tv78[rsp], rax
  00033	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Right$[rsp]
  00038	e8 00 00 00 00	 call	 ?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Bx
  0003d	48 89 44 24 28	 mov	 QWORD PTR tv86[rsp], rax
  00042	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00047	e8 00 00 00 00	 call	 ?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Bx
  0004c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv78[rsp]
  00051	4c 8b c1	 mov	 r8, rcx
  00054	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv86[rsp]
  00059	48 8b d1	 mov	 rdx, rcx
  0005c	48 8b c8	 mov	 rcx, rax
  0005f	e8 00 00 00 00	 call	 ?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ; std::char_traits<char>::move

; 964  : 				_Right._Mysize() + 1);
; 965  : 		else

  00064	eb 59		 jmp	 SHORT $LN3@Assign_rv
$LN2@Assign_rv:

; 966  : 			{	// copy pointer
; 967  : 			this->_Getal().construct(_STD addressof(this->_Bx()._Ptr), _Right._Bx()._Ptr);

  00066	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Right$[rsp]
  0006b	e8 00 00 00 00	 call	 ?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Bx
  00070	48 89 44 24 30	 mov	 QWORD PTR tv140[rsp], rax
  00075	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0007a	e8 00 00 00 00	 call	 ?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Bx
  0007f	48 8b c8	 mov	 rcx, rax
  00082	e8 00 00 00 00	 call	 ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char * __ptr64>
  00087	48 89 44 24 38	 mov	 QWORD PTR tv142[rsp], rax
  0008c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00091	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00096	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv140[rsp]
  0009b	4c 8b c1	 mov	 r8, rcx
  0009e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv142[rsp]
  000a3	48 8b d1	 mov	 rdx, rcx
  000a6	48 8b c8	 mov	 rcx, rax
  000a9	e8 00 00 00 00	 call	 ??$construct@PEADAEAPEAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAPEADAEAPEAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char * __ptr64,char * __ptr64 & __ptr64>

; 968  : 			_Right._Bx()._Ptr = pointer();

  000ae	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Right$[rsp]
  000b3	e8 00 00 00 00	 call	 ?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Bx
  000b8	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN3@Assign_rv:

; 969  : 			}
; 970  : 		this->_Mysize() = _Right._Mysize();

  000bf	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Right$[rsp]
  000c4	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  000c9	48 89 44 24 40	 mov	 QWORD PTR tv170[rsp], rax
  000ce	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000d3	e8 00 00 00 00	 call	 ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
  000d8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv170[rsp]
  000dd	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000e0	48 89 08	 mov	 QWORD PTR [rax], rcx

; 971  : 		this->_Myres() = _Right._Myres();

  000e3	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Right$[rsp]
  000e8	e8 00 00 00 00	 call	 ?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres
  000ed	48 89 44 24 48	 mov	 QWORD PTR tv182[rsp], rax
  000f2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000f7	e8 00 00 00 00	 call	 ?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres
  000fc	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv182[rsp]
  00101	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00104	48 89 08	 mov	 QWORD PTR [rax], rcx

; 972  : 		_Right._Tidy();

  00107	45 33 c0	 xor	 r8d, r8d
  0010a	33 d2		 xor	 edx, edx
  0010c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Right$[rsp]
  00111	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 973  : 		}

  00116	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0011a	c3		 ret	 0
?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
tv67 = 40
$T3 = 48
this$ = 80
_Right$ = 88
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 946  : 		{	// assign by moving _Right

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 c7 44 24 30
	fe ff ff ff	 mov	 QWORD PTR $T3[rsp], -2

; 947  : 		if (this == &_Right)

  00017	48 8b 44 24 58	 mov	 rax, QWORD PTR _Right$[rsp]
  0001c	48 39 44 24 50	 cmp	 QWORD PTR this$[rsp], rax
  00021	75 05		 jne	 SHORT $LN2@assign

; 948  : 			;
; 949  : 		else if (get_allocator() != _Right.get_allocator()

  00023	e9 89 00 00 00	 jmp	 $LN3@assign
$LN2@assign:

; 950  : 			&& this->_BUF_SIZE <= _Right._Myres())

  00028	48 8d 54 24 20	 lea	 rdx, QWORD PTR $T1[rsp]
  0002d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  00032	e8 00 00 00 00	 call	 ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
  00037	90		 npad	 1
  00038	48 89 44 24 28	 mov	 QWORD PTR tv67[rsp], rax
  0003d	48 8d 54 24 21	 lea	 rdx, QWORD PTR $T2[rsp]
  00042	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00047	e8 00 00 00 00	 call	 ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
  0004c	90		 npad	 1
  0004d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv67[rsp]
  00052	48 8b d1	 mov	 rdx, rcx
  00055	48 8b c8	 mov	 rcx, rax
  00058	e8 00 00 00 00	 call	 ??$?9DD@std@@YA_NAEBV?$allocator@D@0@0@Z ; std::operator!=<char,char>
  0005d	90		 npad	 1
  0005e	0f b6 c0	 movzx	 eax, al
  00061	85 c0		 test	 eax, eax
  00063	74 23		 je	 SHORT $LN4@assign
  00065	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  0006a	e8 00 00 00 00	 call	 ?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres
  0006f	90		 npad	 1
  00070	48 83 38 10	 cmp	 QWORD PTR [rax], 16
  00074	72 12		 jb	 SHORT $LN4@assign

; 951  : 			*this = _Right;

  00076	48 8b 54 24 58	 mov	 rdx, QWORD PTR _Right$[rsp]
  0007b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00080	e8 00 00 00 00	 call	 ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@AEBV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
  00085	90		 npad	 1

; 952  : 		else

  00086	eb 29		 jmp	 SHORT $LN3@assign
$LN4@assign:

; 953  : 			{	// not same, clear this and steal from _Right
; 954  : 			_Tidy(true);

  00088	45 33 c0	 xor	 r8d, r8d
  0008b	b2 01		 mov	 dl, 1
  0008d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  00092	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00097	90		 npad	 1

; 955  : 			_Assign_rv(_STD forward<_Myt>(_Right));

  00098	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _Right$[rsp]
  0009d	e8 00 00 00 00	 call	 ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  000a2	90		 npad	 1
  000a3	48 8b d0	 mov	 rdx, rax
  000a6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR this$[rsp]
  000ab	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
  000b0	90		 npad	 1
$LN3@assign:

; 956  : 			}
; 957  : 		return (*this);

  000b1	48 8b 44 24 50	 mov	 rax, QWORD PTR this$[rsp]

; 958  : 		}

  000b6	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ba	c3		 ret	 0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@$$QEAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z
_TEXT	SEGMENT
tv75 = 32
tv136 = 40
tv150 = 48
$T1 = 56
$T2 = 64
$T3 = 72
this$ = 96
_Right$ = 104
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT

; 928  : 		{	// assign by moving _Right

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  0000e	48 c7 44 24 38
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 929  : 		if (this != &_Right)

  00017	48 8b 44 24 68	 mov	 rax, QWORD PTR _Right$[rsp]
  0001c	48 39 44 24 60	 cmp	 QWORD PTR this$[rsp], rax
  00021	0f 84 ec 00 00
	00		 je	 $LN2@operator

; 930  : 			{	// different, assign it
; 931  : 			_Tidy(true);

  00027	45 33 c0	 xor	 r8d, r8d
  0002a	b2 01		 mov	 dl, 1
  0002c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00031	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00036	90		 npad	 1

; 932  : 
; 933  : 			if (_Alty::propagate_on_container_move_assignment::value
; 934  : 				&& this->_Getal() != _Right._Getal())

  00037	33 c0		 xor	 eax, eax
  00039	83 f8 01	 cmp	 eax, 1
  0003c	74 4c		 je	 SHORT $LN3@operator
  0003e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Right$[rsp]
  00043	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00048	90		 npad	 1
  00049	48 89 44 24 20	 mov	 QWORD PTR tv75[rsp], rax
  0004e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00053	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00058	90		 npad	 1
  00059	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv75[rsp]
  0005e	48 8b d1	 mov	 rdx, rcx
  00061	48 8b c8	 mov	 rcx, rax
  00064	e8 00 00 00 00	 call	 ??$?9V?$allocator@D@std@@V01@@std@@YA_NAEBU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z ; std::operator!=<std::allocator<char>,std::allocator<char> >
  00069	90		 npad	 1
  0006a	0f b6 c0	 movzx	 eax, al
  0006d	85 c0		 test	 eax, eax
  0006f	74 19		 je	 SHORT $LN3@operator

; 935  : 				this->_Move_alloc(_Right._Getal());

  00071	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Right$[rsp]
  00076	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  0007b	90		 npad	 1
  0007c	48 8b d0	 mov	 rdx, rax
  0007f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  00084	e8 00 00 00 00	 call	 ?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc
  00089	90		 npad	 1
$LN3@operator:

; 936  : 
; 937  : 			if (this->_Getal() != _Right._Getal())

  0008a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Right$[rsp]
  0008f	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00094	90		 npad	 1
  00095	48 89 44 24 28	 mov	 QWORD PTR tv136[rsp], rax
  0009a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0009f	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  000a4	90		 npad	 1
  000a5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv136[rsp]
  000aa	48 8b d1	 mov	 rdx, rcx
  000ad	48 8b c8	 mov	 rcx, rax
  000b0	e8 00 00 00 00	 call	 ??$?9V?$allocator@D@std@@V01@@std@@YA_NAEBU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z ; std::operator!=<std::allocator<char>,std::allocator<char> >
  000b5	90		 npad	 1
  000b6	0f b6 c0	 movzx	 eax, al
  000b9	85 c0		 test	 eax, eax
  000bb	74 3d		 je	 SHORT $LN4@operator

; 938  : 				assign(_Right.begin(), _Right.end());

  000bd	48 8d 54 24 40	 lea	 rdx, QWORD PTR $T2[rsp]
  000c2	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Right$[rsp]
  000c7	e8 00 00 00 00	 call	 ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
  000cc	90		 npad	 1
  000cd	48 89 44 24 30	 mov	 QWORD PTR tv150[rsp], rax
  000d2	48 8d 54 24 48	 lea	 rdx, QWORD PTR $T3[rsp]
  000d7	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Right$[rsp]
  000dc	e8 00 00 00 00	 call	 ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
  000e1	90		 npad	 1
  000e2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv150[rsp]
  000e7	4c 8b 01	 mov	 r8, QWORD PTR [rcx]
  000ea	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  000ed	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  000f2	e8 00 00 00 00	 call	 ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@1@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign<std::_String_iterator<std::_String_val<std::_Simple_types<char> > > >
  000f7	90		 npad	 1

; 939  : 			else

  000f8	eb 19		 jmp	 SHORT $LN2@operator
$LN4@operator:

; 940  : 				_Assign_rv(_STD forward<_Myt>(_Right));

  000fa	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Right$[rsp]
  000ff	e8 00 00 00 00	 call	 ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00104	90		 npad	 1
  00105	48 8b d0	 mov	 rdx, rax
  00108	48 8b 4c 24 60	 mov	 rcx, QWORD PTR this$[rsp]
  0010d	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
  00112	90		 npad	 1
$LN2@operator:

; 941  : 			}
; 942  : 		return (*this);

  00113	48 8b 44 24 60	 mov	 rax, QWORD PTR this$[rsp]

; 943  : 		}

  00118	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0011c	c3		 ret	 0
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV01@$$QEAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Right$ = 72
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 911  : 		{	// construct by moving _Right

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 910  : 		: _Mybase(_STD move(_Right._Getal()))

  00017	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  0001c	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00021	90		 npad	 1
  00022	48 8b c8	 mov	 rcx, rax
  00025	e8 00 00 00 00	 call	 ??$move@AEAU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEAU10@@Z ; std::move<std::_Wrap_alloc<std::allocator<char> > & __ptr64>
  0002a	90		 npad	 1
  0002b	48 8b d0	 mov	 rdx, rax
  0002e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00033	e8 00 00 00 00	 call	 ??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::_Wrap_alloc<std::allocator<char> >,void>
  00038	90		 npad	 1

; 912  : 		_Tidy();

  00039	45 33 c0	 xor	 r8d, r8d
  0003c	33 d2		 xor	 edx, edx
  0003e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00043	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  00048	90		 npad	 1

; 913  : 		_Assign_rv(_STD forward<_Myt>(_Right));

  00049	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  0004e	e8 00 00 00 00	 call	 ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  00053	90		 npad	 1
  00054	48 8b d0	 mov	 rdx, rax
  00057	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0005c	e8 00 00 00 00	 call	 ?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX$$QEAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv
  00061	90		 npad	 1

; 914  : 		}

  00062	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00067	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006b	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Count$ = 72
_Ch$ = 80
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 850  : 		{	// construct from _Count * _Ch

$LN4:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00013	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 849  : 		: _Mybase()

  0001c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00021	e8 00 00 00 00	 call	 ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  00026	90		 npad	 1

; 851  : 		_Tidy();

  00027	45 33 c0	 xor	 r8d, r8d
  0002a	33 d2		 xor	 edx, edx
  0002c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00031	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 852  : 		assign(_Count, _Ch);

  00036	44 0f b6 44 24
	50		 movzx	 r8d, BYTE PTR _Ch$[rsp]
  0003c	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Count$[rsp]
  00041	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004b	90		 npad	 1

; 853  : 		}

  0004c	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00051	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00055	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
_Count$ = 72
_Ch$ = 80
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
_Count$ = 72
_Ch$ = 80
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Ptr$ = 72
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 836  : 		{	// construct from [_Ptr, <null>)

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 835  : 		: _Mybase()

  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0001c	e8 00 00 00 00	 call	 ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  00021	90		 npad	 1

; 837  : 		_Tidy();

  00022	45 33 c0	 xor	 r8d, r8d
  00025	33 d2		 xor	 edx, edx
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 838  : 		assign(_Ptr);

  00031	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0003b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00040	90		 npad	 1

; 839  : 		}

  00041	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00046	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004a	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
_Ptr$ = 72
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
_Ptr$ = 72
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
_Ptr$ = 72
_Count$ = 80
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 822  : 		{	// construct from [_Ptr, _Ptr + _Count)

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00013	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 821  : 		: _Mybase()

  0001c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00021	e8 00 00 00 00	 call	 ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  00026	90		 npad	 1

; 823  : 		_Tidy();

  00027	45 33 c0	 xor	 r8d, r8d
  0002a	33 d2		 xor	 edx, edx
  0002c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00031	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 824  : 		assign(_Ptr, _Count);

  00036	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Count$[rsp]
  0003b	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  00040	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00045	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@PEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004a	90		 npad	 1

; 825  : 		}

  0004b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00050	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00054	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
_Ptr$ = 72
_Count$ = 80
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
this$ = 64
_Ptr$ = 72
_Count$ = 80
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@PEBD_K@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 794  : 		{	// construct empty string

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR $T1[rsp], -2

; 793  : 		: _Mybase()

  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00017	e8 00 00 00 00	 call	 ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
  0001c	90		 npad	 1

; 795  : 		_Tidy();

  0001d	45 33 c0	 xor	 r8d, r8d
  00020	33 d2		 xor	 edx, edx
  00022	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00027	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
  0002c	90		 npad	 1

; 796  : 		}

  0002d	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00032	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00036	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 33
$T3 = 40
this$ = 64
_Right$ = 72
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 780  : 		{	// construct by copying _Right

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  0000e	48 c7 44 24 28
	fe ff ff ff	 mov	 QWORD PTR $T3[rsp], -2

; 777  : 		: _Mybase(_Right._Getal().select_on_container_copy_construction())

  00017	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _Right$[rsp]
  0001c	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00021	44 0f b6 44 24
	20		 movzx	 r8d, BYTE PTR $T1[rsp]
  00027	48 8d 54 24 21	 lea	 rdx, QWORD PTR $T2[rsp]
  0002c	48 8b c8	 mov	 rcx, rax
  0002f	e8 00 00 00 00	 call	 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBA?AU12@U_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<char> >::select_on_container_copy_construction
  00034	48 8b d0	 mov	 rdx, rax
  00037	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0003c	e8 00 00 00 00	 call	 ??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::_Wrap_alloc<std::allocator<char> >,void>
  00041	90		 npad	 1

; 781  : 		_Tidy();

  00042	45 33 c0	 xor	 r8d, r8d
  00045	33 d2		 xor	 edx, edx
  00047	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  0004c	e8 00 00 00 00	 call	 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_N_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 782  : 		assign(_Right, 0, npos);

  00051	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2_KB ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::npos
  00058	45 33 c0	 xor	 r8d, r8d
  0005b	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Right$[rsp]
  00060	48 8b 4c 24 40	 mov	 rcx, QWORD PTR this$[rsp]
  00065	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K1@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0006a	90		 npad	 1

; 783  : 		}

  0006b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00070	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00074	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 33
$T3 = 40
this$ = 64
_Right$ = 72
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT text$x
text$x	SEGMENT
$T1 = 32
$T2 = 33
$T3 = 40
this$ = 64
_Right$ = 72
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
  00009	48 8b 4d 40	 mov	 rcx, QWORD PTR this$[rbp]
  0000d	e8 00 00 00 00	 call	 ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
  00012	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00016	5d		 pop	 rbp
  00017	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT

; 319  : 		{	// return const reference to second

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 320  : 		return (_Myval2);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 321  : 		}

  0000a	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT

; 314  : 		{	// return reference to second

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 315  : 		return (_Myval2);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 316  : 		}

  0000a	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT

; 299  : 		{	// return const reference to first

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 300  : 		return (*this);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 301  : 		}

  0000a	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 8
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT

; 294  : 		{	// return reference to first

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 295  : 		return (*this);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]

; 296  : 		}

  0000a	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ
_TEXT	SEGMENT
this$ = 48
?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres, COMDAT

; 733  : 		{	// return reference to _Myres

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 734  : 		return (_Get_data()._Myres);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00013	48 83 c0 18	 add	 rax, 24

; 735  : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEB_KXZ
_TEXT	SEGMENT
this$ = 48
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEB_KXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize, COMDAT

; 728  : 		{	// return const reference to _Mysize

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 729  : 		return (_Get_data()._Mysize);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00013	48 83 c0 10	 add	 rax, 16

; 730  : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEB_KXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ
_TEXT	SEGMENT
this$ = 48
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize, COMDAT

; 723  : 		{	// return reference to _Mysize

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 724  : 		return (_Get_data()._Mysize);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00013	48 83 c0 10	 add	 rax, 16

; 725  : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEA_KXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Bx, COMDAT

; 713  : 		{	// return reference to _Bx

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 714  : 		return (_Get_data()._Bx);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data

; 715  : 		}

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
?_Bx@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAT_Bxty@?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Bx
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT

; 706  : 		{	// return const reference to _String_val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 707  : 		return (_Mypair._Get_second());

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second

; 708  : 		}

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT

; 701  : 		{	// return reference to _String_val

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 702  : 		return (_Mypair._Get_second());

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second

; 703  : 		}

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT

; 696  : 		{	// return const reference to allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 697  : 		return (_Mypair._Get_first());

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 698  : 		}

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
this$ = 48
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT

; 691  : 		{	// return reference to allocator

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 692  : 		return (_Mypair._Get_first());

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 693  : 		}

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z
_TEXT	SEGMENT
this$ = 48
_Al$ = 56
?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc, COMDAT

; 606  : 		{	// replace old allocator

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 607  : 		_Pocma(_Getal(), _Al);

  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Al$[rsp]
  0001d	48 8b c8	 mov	 rcx, rax
  00020	e8 00 00 00 00	 call	 ??$_Pocma@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@0@Z ; std::_Pocma<std::_Wrap_alloc<std::allocator<char> > >

; 608  : 		}

  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
?_Move_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Move_alloc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z
_TEXT	SEGMENT
this$ = 48
_Al$ = 56
?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Copy_alloc, COMDAT

; 601  : 		{	// replace old allocator

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 602  : 		_Pocca(_Getal(), _Al);

  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00013	e8 00 00 00 00	 call	 ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Al$[rsp]
  0001d	48 8b c8	 mov	 rcx, rax
  00020	e8 00 00 00 00	 call	 ??$_Pocca@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXAEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEBU10@@Z ; std::_Pocca<std::_Wrap_alloc<std::allocator<char> > >

; 603  : 		}

  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
?_Copy_alloc@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAXAEBU?$_Wrap_alloc@V?$allocator@D@std@@@2@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Copy_alloc
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 32
this$ = 64
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT

; 589  : 		{	// default construct allocator

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 588  : 		: _Mypair(_Zero_then_variadic_args_t())

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	0f b6 54 24 20	 movzx	 edx, BYTE PTR $T1[rsp]
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><>

; 590  : 		}

  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00020	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00024	c3		 ret	 0
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAA@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 48
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAPEBDXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr, COMDAT

; 582  : 		{	// determine current pointer to buffer for nonmutable string

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 583  : 		return (_Get_data()._Myptr());

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 584  : 		}

  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEBAPEBDXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ
_TEXT	SEGMENT
this$ = 48
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr, COMDAT

; 577  : 		{	// determine current pointer to buffer for mutable string

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 578  : 		return (_Get_data()._Myptr());

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 579  : 		}

  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QEAAPEADXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT

; 533  : 			{	// user-provided, for fancy pointers

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 534  : 			}

  00005	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT

; 528  : 		_Bxty()

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 529  : 			{	// user-provided, for fancy pointers
; 530  : 			}

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
tv72 = 32
this$ = 64
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT

; 520  : 		{	// determine current pointer to buffer for nonmutable string

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 521  : 		return (this->_BUF_SIZE <= _Myres

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 78 18 10	 cmp	 QWORD PTR [rax+24], 16
  00013	72 14		 jb	 SHORT $LN3@Myptr
  00015	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0001a	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0001d	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00022	48 89 44 24 20	 mov	 QWORD PTR tv72[rsp], rax
  00027	eb 0a		 jmp	 SHORT $LN4@Myptr
$LN3@Myptr:
  00029	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0002e	48 89 44 24 20	 mov	 QWORD PTR tv72[rsp], rax
$LN4@Myptr:
  00033	48 8b 44 24 20	 mov	 rax, QWORD PTR tv72[rsp]

; 522  : 			? _Unfancy(_Bx._Ptr)
; 523  : 			: _Bx._Buf);
; 524  : 		}

  00038	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003c	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
_TEXT	SEGMENT
tv72 = 32
this$ = 64
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT

; 513  : 		{	// determine current pointer to buffer for mutable string

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 514  : 		return (this->_BUF_SIZE <= _Myres

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 78 18 10	 cmp	 QWORD PTR [rax+24], 16
  00013	72 14		 jb	 SHORT $LN3@Myptr
  00015	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0001a	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0001d	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00022	48 89 44 24 20	 mov	 QWORD PTR tv72[rsp], rax
  00027	eb 0a		 jmp	 SHORT $LN4@Myptr
$LN3@Myptr:
  00029	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0002e	48 89 44 24 20	 mov	 QWORD PTR tv72[rsp], rax
$LN4@Myptr:
  00033	48 8b 44 24 20	 mov	 rax, QWORD PTR tv72[rsp]

; 515  : 			? _Unfancy(_Bx._Ptr)
; 516  : 			: _Bx._Buf);
; 517  : 		}

  00038	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003c	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT

; 498  : 		{	// initialize values

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 495  : 		: _Bx(),

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8b c8	 mov	 rcx, rax
  00011	e8 00 00 00 00	 call	 ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty

; 496  : 		_Mysize(0),

  00016	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001b	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 497  : 		_Myres(0)

  00023	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00028	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 499  : 		}

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00035	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00039	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBA_KU_Nil@2@@Z
_TEXT	SEGMENT
this$ = 48
__formal$ = 56
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBA_KU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT

; 1007 : 		{	// get maximum size

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1008 : 		return (_Mytraits::max_size(*this));

  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size

; 1009 : 		}

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBA_KU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAD_K@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAD_K@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT

; 986  : 		{	// deallocate object at _Ptr, ignore size

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 987  : 		_Mybase::deallocate(_Ptr, _Count);

  00013	4c 8b 44 24 40	 mov	 r8, QWORD PTR _Count$[rsp]
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Ptr$[rsp]
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00022	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXPEAD_K@Z ; std::allocator<char>::deallocate

; 988  : 		}

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAXPEAD_K@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAPEAD_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAPEAD_K@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT

; 975  : 		{	// allocate array of _Count elements

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 976  : 		return (_Mybase::allocate(_Count));

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Count$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00018	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate

; 977  : 		}

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAPEAD_K@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??4?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAAEAU01@$$QEAU01@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
??4?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAAEAU01@$$QEAU01@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::operator=, COMDAT

; 962  : 		{	// assign by moving

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 963  : 		_Mybase::operator=(_STD move(_Right));

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Right$[rsp]
  00013	e8 00 00 00 00	 call	 ??$move@AEAU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEAU10@@Z ; std::move<std::_Wrap_alloc<std::allocator<char> > & __ptr64>

; 964  : 		return (*this);

  00018	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]

; 965  : 		}

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
??4?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAAAEAU01@$$QEAU01@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@$$QEAU01@@Z
_TEXT	SEGMENT
this$ = 48
_Right$ = 56
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@$$QEAU01@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT

; 946  : 		{	// construct by moving

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 945  : 		: _Mybase(_STD move(_Right))

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Right$[rsp]
  00013	e8 00 00 00 00	 call	 ??$move@AEAU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QEAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AEAU10@@Z ; std::move<std::_Wrap_alloc<std::allocator<char> > & __ptr64>
  00018	48 8b d0	 mov	 rdx, rax
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00020	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QEAA@AEBV01@@Z ; std::allocator<char>::allocator<char>

; 947  : 		}

  00025	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@$$QEAU01@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT

; 936  : 		{	// construct default allocator (do nothing)

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 935  : 		: _Mybase()

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0000e	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QEAA@XZ ; std::allocator<char>::allocator<char>

; 937  : 		}

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?address@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBAPEADAEAD@Z
_TEXT	SEGMENT
this$ = 48
_Val$ = 56
?address@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBAPEADAEAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::address, COMDAT

; 925  : 		{	// return address of mutable _Val

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 926  : 		return (pointer_traits<pointer>::pointer_to(_Val));

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Val$[rsp]
  00013	e8 00 00 00 00	 call	 ?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z ; std::pointer_traits<char * __ptr64>::pointer_to

; 927  : 		}

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
?address@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBAPEADAEAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::address
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBA?AU12@U_Nil@2@@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 64
__$ReturnUdt$ = 72
__formal$ = 80
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBA?AU12@U_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::select_on_container_copy_construction, COMDAT

; 912  : 		{	// get allocator to use

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 913  : 		return (_Mytraits::select_on_container_copy_construction(*this));

  00013	48 8b 54 24 40	 mov	 rdx, QWORD PTR this$[rsp]
  00018	48 8d 4c 24 20	 lea	 rcx, QWORD PTR $T1[rsp]
  0001d	e8 00 00 00 00	 call	 ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z ; std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction
  00022	48 8b d0	 mov	 rdx, rax
  00025	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  0002a	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEAA@$$QEAV?$allocator@D@1@@Z ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> ><std::allocator<char> >
  0002f	48 8b 44 24 48	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 914  : 		}

  00034	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00038	c3		 ret	 0
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QEBA?AU12@U_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
_Al$ = 56
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z PROC ; std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction, COMDAT

; 874  : 		{	// get allocator to use

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 875  : 		return (_Al);

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Al$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR __$ReturnUdt$[rsp]
  00018	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QEAA@AEBV01@@Z ; std::allocator<char>::allocator<char>
  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR __$ReturnUdt$[rsp]

; 876  : 		}

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@AEBV32@@Z ENDP ; std::allocator_traits<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
_TEXT	SEGMENT
_Al$ = 48
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 868  : 		{	// get maximum size

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 869  : 		return (_Al.max_size());

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _Al$[rsp]
  0000e	e8 00 00 00 00	 call	 ?max_size@?$allocator@D@std@@QEBA_KXZ ; std::allocator<char>::max_size

; 870  : 		}

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 8
?max_size@?$allocator@D@std@@QEBA_KXZ PROC		; std::allocator<char>::max_size, COMDAT

; 748  : 		{	// estimate maximum array size

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 749  : 		return ((size_t)(-1) / sizeof (_Ty));

  00005	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1

; 750  : 		}

  0000c	c3		 ret	 0
?max_size@?$allocator@D@std@@QEBA_KXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z
_TEXT	SEGMENT
this$ = 48
_Count$ = 56
?allocate@?$allocator@D@std@@QEAAPEAD_K@Z PROC		; std::allocator<char>::allocate, COMDAT

; 724  : 		{	// allocate array of _Count elements

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 725  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));

  0000e	41 b0 01	 mov	 r8b, 1
  00011	ba 01 00 00 00	 mov	 edx, 1
  00016	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Count$[rsp]
  0001b	e8 00 00 00 00	 call	 ?_Allocate@std@@YAPEAX_K0_N@Z ; std::_Allocate

; 726  : 		}

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QEAAXPEAD_K@Z
_TEXT	SEGMENT
this$ = 48
_Ptr$ = 56
_Count$ = 64
?deallocate@?$allocator@D@std@@QEAAXPEAD_K@Z PROC	; std::allocator<char>::deallocate, COMDAT

; 719  : 		{	// deallocate object at _Ptr

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 720  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

  00013	41 b8 01 00 00
	00		 mov	 r8d, 1
  00019	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Count$[rsp]
  0001e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  00023	e8 00 00 00 00	 call	 ?_Deallocate@std@@YAXPEAX_K1@Z ; std::_Deallocate

; 721  : 		}

  00028	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002c	c3		 ret	 0
?deallocate@?$allocator@D@std@@QEAAXPEAD_K@Z ENDP	; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
??0?$allocator@D@std@@QEAA@AEBV01@@Z PROC		; std::allocator<char>::allocator<char>, COMDAT

; 703  : 	allocator(const allocator<_Ty>&) _THROW0()

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 704  : 		{	// construct by copying (do nothing)
; 705  : 		}

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000f	c3		 ret	 0
??0?$allocator@D@std@@QEAA@AEBV01@@Z ENDP		; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0?$allocator@D@std@@QEAA@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT

; 699  : 	allocator() _THROW0()

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 700  : 		{	// construct default allocator (do nothing)
; 701  : 		}

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR this$[rsp]
  0000a	c3		 ret	 0
??0?$allocator@D@std@@QEAA@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xatomic0.h
;	COMDAT ?_Init_atomic_counter@std@@YAXAEAKK@Z
_TEXT	SEGMENT
_Counter$ = 8
_Value$ = 16
?_Init_atomic_counter@std@@YAXAEAKK@Z PROC		; std::_Init_atomic_counter, COMDAT

; 62   : 	{	// non-atomically initialize counter

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 63   : 	_Counter = _Value;

  00009	48 8b 44 24 08	 mov	 rax, QWORD PTR _Counter$[rsp]
  0000e	8b 4c 24 10	 mov	 ecx, DWORD PTR _Value$[rsp]
  00012	89 08		 mov	 DWORD PTR [rax], ecx

; 64   : 	}

  00014	c3		 ret	 0
?_Init_atomic_counter@std@@YAXAEAKK@Z ENDP		; std::_Init_atomic_counter
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPEAX_K1@Z
_TEXT	SEGMENT
_Ptr_user$1 = 32
_Ptr_container$2 = 40
_User_size$ = 48
_Ptr_ptr$3 = 56
_Ptr$ = 80
_Count$ = 88
_Sz$ = 96
?_Deallocate@std@@YAXPEAX_K1@Z PROC			; std::_Deallocate, COMDAT

; 92   : 	{	// deallocate storage for _Count elements of size _Sz

$LN9:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 93   :  #if defined(_M_IX86) || defined(_M_X64)
; 94   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

  00013	33 d2		 xor	 edx, edx
  00015	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0001c	48 f7 74 24 60	 div	 QWORD PTR _Sz$[rsp]
  00021	48 39 44 24 58	 cmp	 QWORD PTR _Count$[rsp], rax
  00026	76 05		 jbe	 SHORT $LN2@Deallocate
  00028	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
$LN2@Deallocate:

; 95   : 	const size_t _User_size = _Count * _Sz;

  0002d	48 8b 44 24 58	 mov	 rax, QWORD PTR _Count$[rsp]
  00032	48 0f af 44 24
	60		 imul	 rax, QWORD PTR _Sz$[rsp]
  00038	48 89 44 24 30	 mov	 QWORD PTR _User_size$[rsp], rax

; 96   : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

  0003d	48 81 7c 24 30
	00 10 00 00	 cmp	 QWORD PTR _User_size$[rsp], 4096 ; 00001000H
  00046	0f 82 89 00 00
	00		 jb	 $LN3@Deallocate

; 97   : 		{	// deallocate large block
; 98   : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);

  0004c	48 8b 44 24 50	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00051	48 89 44 24 20	 mov	 QWORD PTR _Ptr_user$1[rsp], rax

; 99   : 		_SCL_SECURE_ALWAYS_VALIDATE(

  00056	48 8b 44 24 20	 mov	 rax, QWORD PTR _Ptr_user$1[rsp]
  0005b	48 83 e0 1f	 and	 rax, 31
  0005f	48 85 c0	 test	 rax, rax
  00062	74 05		 je	 SHORT $LN4@Deallocate
  00064	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
$LN4@Deallocate:

; 100  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 101  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);

  00069	48 8b 44 24 20	 mov	 rax, QWORD PTR _Ptr_user$1[rsp]
  0006e	48 83 e8 08	 sub	 rax, 8
  00072	48 89 44 24 38	 mov	 QWORD PTR _Ptr_ptr$3[rsp], rax

; 102  : 		const uintptr_t _Ptr_container =
; 103  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

  00077	48 8b 44 24 38	 mov	 rax, QWORD PTR _Ptr_ptr$3[rsp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 89 44 24 28	 mov	 QWORD PTR _Ptr_container$2[rsp], rax

; 104  : 
; 105  :  #ifdef _DEBUG
; 106  : 		// If the following asserts, it likely means that we are performing
; 107  : 		// an aligned delete on memory coming from an unaligned allocation.
; 108  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 109  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 110  : 				_BIG_ALLOCATION_SENTINEL);
; 111  :  #endif /* _DEBUG */
; 112  : 
; 113  : 		// Extra paranoia on aligned allocation/deallocation
; 114  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

  00084	48 8b 44 24 20	 mov	 rax, QWORD PTR _Ptr_user$1[rsp]
  00089	48 39 44 24 28	 cmp	 QWORD PTR _Ptr_container$2[rsp], rax
  0008e	72 05		 jb	 SHORT $LN5@Deallocate
  00090	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
$LN5@Deallocate:

; 115  : 
; 116  :  #ifdef _DEBUG
; 117  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 118  : 			<= _Ptr_user - _Ptr_container);
; 119  : 
; 120  :  #else /* _DEBUG */
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

  00095	48 8b 44 24 28	 mov	 rax, QWORD PTR _Ptr_container$2[rsp]
  0009a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Ptr_user$1[rsp]
  0009f	48 2b c8	 sub	 rcx, rax
  000a2	48 8b c1	 mov	 rax, rcx
  000a5	48 83 f8 08	 cmp	 rax, 8
  000a9	73 05		 jae	 SHORT $LN6@Deallocate
  000ab	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
$LN6@Deallocate:

; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  :  #endif /* _DEBUG */
; 124  : 
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

  000b0	48 8b 44 24 28	 mov	 rax, QWORD PTR _Ptr_container$2[rsp]
  000b5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Ptr_user$1[rsp]
  000ba	48 2b c8	 sub	 rcx, rax
  000bd	48 8b c1	 mov	 rax, rcx
  000c0	48 83 f8 27	 cmp	 rax, 39			; 00000027H
  000c4	76 05		 jbe	 SHORT $LN7@Deallocate
  000c6	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
$LN7@Deallocate:

; 126  : 			<= _NON_USER_SIZE);
; 127  : 
; 128  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000cb	48 8b 44 24 28	 mov	 rax, QWORD PTR _Ptr_container$2[rsp]
  000d0	48 89 44 24 50	 mov	 QWORD PTR _Ptr$[rsp], rax
$LN3@Deallocate:

; 129  : 		}
; 130  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 131  : 
; 132  : 	::operator delete(_Ptr);

  000d5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  000da	e8 00 00 00 00	 call	 ??3@YAXPEAX@Z		; operator delete
$LN8@Deallocate:

; 133  : 	}

  000df	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e3	c3		 ret	 0
?_Deallocate@std@@YAXPEAX_K1@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPEAX_K0_N@Z
_TEXT	SEGMENT
_Ptr$ = 32
_User_size$ = 40
_Ptr_container$1 = 48
_Block_size$2 = 56
_Count$ = 80
_Sz$ = 88
_Try_aligned_allocation$ = 96
?_Allocate@std@@YAPEAX_K0_N@Z PROC			; std::_Allocate, COMDAT

; 48   : 	{	// allocate storage for _Count elements of size _Sz

$LN10:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 49   : 	void *_Ptr = 0;

  00013	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR _Ptr$[rsp], 0

; 50   : 
; 51   : 	if (_Count == 0)

  0001c	48 83 7c 24 50
	00		 cmp	 QWORD PTR _Count$[rsp], 0
  00022	75 0a		 jne	 SHORT $LN2@Allocate

; 52   : 		return (_Ptr);

  00024	48 8b 44 24 20	 mov	 rax, QWORD PTR _Ptr$[rsp]
  00029	e9 c5 00 00 00	 jmp	 $LN1@Allocate
$LN2@Allocate:

; 53   : 
; 54   : 	// check overflow of multiply
; 55   : 	if ((size_t)(-1) / _Sz < _Count)

  0002e	33 d2		 xor	 edx, edx
  00030	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00037	48 f7 74 24 58	 div	 QWORD PTR _Sz$[rsp]
  0003c	48 3b 44 24 50	 cmp	 rax, QWORD PTR _Count$[rsp]
  00041	73 05		 jae	 SHORT $LN3@Allocate

; 56   : 		_Xbad_alloc();	// report no memory

  00043	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN3@Allocate:

; 57   : 	const size_t _User_size = _Count * _Sz;

  00048	48 8b 44 24 50	 mov	 rax, QWORD PTR _Count$[rsp]
  0004d	48 0f af 44 24
	58		 imul	 rax, QWORD PTR _Sz$[rsp]
  00053	48 89 44 24 28	 mov	 QWORD PTR _User_size$[rsp], rax

; 58   : 
; 59   :  #if defined(_M_IX86) || defined(_M_X64)
; 60   : 	if (_Try_aligned_allocation
; 61   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

  00058	0f b6 44 24 60	 movzx	 eax, BYTE PTR _Try_aligned_allocation$[rsp]
  0005d	85 c0		 test	 eax, eax
  0005f	74 71		 je	 SHORT $LN4@Allocate
  00061	48 81 7c 24 28
	00 10 00 00	 cmp	 QWORD PTR _User_size$[rsp], 4096 ; 00001000H
  0006a	72 66		 jb	 SHORT $LN4@Allocate

; 62   : 		{	// allocate large block
; 63   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 64   : 			"Big allocations should at least match vector register size");
; 65   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

  0006c	48 8b 44 24 28	 mov	 rax, QWORD PTR _User_size$[rsp]
  00071	48 83 c0 27	 add	 rax, 39			; 00000027H
  00075	48 89 44 24 38	 mov	 QWORD PTR _Block_size$2[rsp], rax

; 66   : 		if (_Block_size <= _User_size)

  0007a	48 8b 44 24 28	 mov	 rax, QWORD PTR _User_size$[rsp]
  0007f	48 39 44 24 38	 cmp	 QWORD PTR _Block_size$2[rsp], rax
  00084	77 05		 ja	 SHORT $LN6@Allocate

; 67   : 			_Xbad_alloc();	// report no memory

  00086	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN6@Allocate:

; 68   : 		const uintptr_t _Ptr_container =
; 69   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

  0008b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Block_size$2[rsp]
  00090	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  00095	48 89 44 24 30	 mov	 QWORD PTR _Ptr_container$1[rsp], rax

; 70   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

  0009a	48 83 7c 24 30
	00		 cmp	 QWORD PTR _Ptr_container$1[rsp], 0
  000a0	75 05		 jne	 SHORT $LN7@Allocate
  000a2	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
$LN7@Allocate:

; 71   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

  000a7	48 8b 44 24 30	 mov	 rax, QWORD PTR _Ptr_container$1[rsp]
  000ac	48 83 c0 27	 add	 rax, 39			; 00000027H
  000b0	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H
  000b4	48 89 44 24 20	 mov	 QWORD PTR _Ptr$[rsp], rax

; 72   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 73   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  000b9	b8 08 00 00 00	 mov	 eax, 8
  000be	48 6b c0 ff	 imul	 rax, rax, -1
  000c2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _Ptr$[rsp]
  000c7	48 8b 54 24 30	 mov	 rdx, QWORD PTR _Ptr_container$1[rsp]
  000cc	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 74   : 
; 75   :  #ifdef _DEBUG
; 76   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 77   :  #endif /* _DEBUG */
; 78   : 		}
; 79   : 	else

  000d0	eb 1c		 jmp	 SHORT $LN5@Allocate
$LN4@Allocate:

; 80   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 81   : 
; 82   : 		{	// allocate normal block
; 83   : 		_Ptr = ::operator new(_User_size);

  000d2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _User_size$[rsp]
  000d7	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new
  000dc	48 89 44 24 20	 mov	 QWORD PTR _Ptr$[rsp], rax

; 84   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

  000e1	48 83 7c 24 20
	00		 cmp	 QWORD PTR _Ptr$[rsp], 0
  000e7	75 05		 jne	 SHORT $LN8@Allocate
  000e9	e8 00 00 00 00	 call	 _invalid_parameter_noinfo_noreturn
$LN8@Allocate:
$LN5@Allocate:

; 85   : 		}
; 86   : 	return (_Ptr);

  000ee	48 8b 44 24 20	 mov	 rax, QWORD PTR _Ptr$[rsp]
$LN1@Allocate:
$LN9@Allocate:

; 87   : 	}

  000f3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f7	c3		 ret	 0
?_Allocate@std@@YAPEAX_K0_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT

; 54   : 		{	// adopt this iterator by parent

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 55   : 		}

  0000a	c3		 ret	 0
?_Adopt@_Iterator_base0@std@@QEAAXPEBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Swap_all@_Container_base0@std@@QEAAXAEAU12@@Z
_TEXT	SEGMENT
this$ = 8
__formal$ = 16
?_Swap_all@_Container_base0@std@@QEAAXAEAU12@@Z PROC	; std::_Container_base0::_Swap_all, COMDAT

; 47   : 		{	// swap all iterators

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 48   : 		}

  0000a	c3		 ret	 0
?_Swap_all@_Container_base0@std@@QEAAXAEAU12@@Z ENDP	; std::_Container_base0::_Swap_all
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?_Orphan_all@_Container_base0@std@@QEAAXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT

; 43   : 		{	// orphan all iterators

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 44   : 		}

  00005	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QEAAXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?eof@?$char_traits@D@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$char_traits@D@std@@SAHXZ PROC			; std::char_traits<char>::eof, COMDAT

; 606  : 		return (EOF);

  00000	b8 ff ff ff ff	 mov	 eax, -1

; 607  : 		}

  00005	c3		 ret	 0
?eof@?$char_traits@D@std@@SAHXZ ENDP			; std::char_traits<char>::eof
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?not_eof@?$char_traits@D@std@@SAHAEBH@Z
_TEXT	SEGMENT
tv68 = 32
tv69 = 36
_Meta$ = 64
?not_eof@?$char_traits@D@std@@SAHAEBH@Z PROC		; std::char_traits<char>::not_eof, COMDAT

; 600  : 		{	// return anything but EOF

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 601  : 		return (_Meta != eof() ? _Meta : !eof());

  00009	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Meta$[rsp]
  00013	39 01		 cmp	 DWORD PTR [rcx], eax
  00015	74 0d		 je	 SHORT $LN5@not_eof
  00017	48 8b 44 24 40	 mov	 rax, QWORD PTR _Meta$[rsp]
  0001c	8b 00		 mov	 eax, DWORD PTR [rax]
  0001e	89 44 24 24	 mov	 DWORD PTR tv69[rsp], eax
  00022	eb 23		 jmp	 SHORT $LN6@not_eof
$LN5@not_eof:
  00024	e8 00 00 00 00	 call	 ?eof@?$char_traits@D@std@@SAHXZ ; std::char_traits<char>::eof
  00029	85 c0		 test	 eax, eax
  0002b	75 0a		 jne	 SHORT $LN3@not_eof
  0002d	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
  00035	eb 08		 jmp	 SHORT $LN4@not_eof
$LN3@not_eof:
  00037	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
$LN4@not_eof:
  0003f	8b 44 24 20	 mov	 eax, DWORD PTR tv68[rsp]
  00043	89 44 24 24	 mov	 DWORD PTR tv69[rsp], eax
$LN6@not_eof:
  00047	8b 44 24 24	 mov	 eax, DWORD PTR tv69[rsp]

; 602  : 		}

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
?not_eof@?$char_traits@D@std@@SAHAEBH@Z ENDP		; std::char_traits<char>::not_eof
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z
_TEXT	SEGMENT
tv65 = 0
_Left$ = 32
_Right$ = 40
?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z PROC	; std::char_traits<char>::eq_int_type, COMDAT

; 594  : 		{	// test for metacharacter equality

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 595  : 		return (_Left == _Right);

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR _Left$[rsp]
  00013	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Right$[rsp]
  00018	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0001a	39 08		 cmp	 DWORD PTR [rax], ecx
  0001c	75 09		 jne	 SHORT $LN3@eq_int_typ
  0001e	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv65[rsp], 1
  00025	eb 07		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  00027	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv65[rsp], 0
$LN4@eq_int_typ:
  0002e	0f b6 04 24	 movzx	 eax, BYTE PTR tv65[rsp]

; 596  : 		}

  00032	48 83 c4 18	 add	 rsp, 24
  00036	c3		 ret	 0
?eq_int_type@?$char_traits@D@std@@SA_NAEBH0@Z ENDP	; std::char_traits<char>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?to_int_type@?$char_traits@D@std@@SAHAEBD@Z
_TEXT	SEGMENT
_Ch$ = 8
?to_int_type@?$char_traits@D@std@@SAHAEBD@Z PROC	; std::char_traits<char>::to_int_type, COMDAT

; 588  : 		{	// convert character to metacharacter

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 589  : 		return ((unsigned char)_Ch);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Ch$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 590  : 		}

  0000d	c3		 ret	 0
?to_int_type@?$char_traits@D@std@@SAHAEBD@Z ENDP	; std::char_traits<char>::to_int_type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?to_char_type@?$char_traits@D@std@@SADAEBH@Z
_TEXT	SEGMENT
_Meta$ = 8
?to_char_type@?$char_traits@D@std@@SADAEBH@Z PROC	; std::char_traits<char>::to_char_type, COMDAT

; 582  : 		{	// convert metacharacter to character

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 583  : 		return ((_Elem)_Meta);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR _Meta$[rsp]
  0000a	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 584  : 		}

  0000d	c3		 ret	 0
?to_char_type@?$char_traits@D@std@@SADAEBH@Z ENDP	; std::char_traits<char>::to_char_type
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?eq@?$char_traits@D@std@@SA_NAEBD0@Z
_TEXT	SEGMENT
tv67 = 0
_Left$ = 32
_Right$ = 40
?eq@?$char_traits@D@std@@SA_NAEBD0@Z PROC		; std::char_traits<char>::eq, COMDAT

; 570  : 		{	// test for element equality

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 571  : 		return (_Left == _Right);

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR _Left$[rsp]
  00013	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00016	48 8b 4c 24 28	 mov	 rcx, QWORD PTR _Right$[rsp]
  0001b	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  0001e	3b c1		 cmp	 eax, ecx
  00020	75 09		 jne	 SHORT $LN3@eq
  00022	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv67[rsp], 1
  00029	eb 07		 jmp	 SHORT $LN4@eq
$LN3@eq:
  0002b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv67[rsp], 0
$LN4@eq:
  00032	0f b6 04 24	 movzx	 eax, BYTE PTR tv67[rsp]

; 572  : 		}

  00036	48 83 c4 18	 add	 rsp, 24
  0003a	c3		 ret	 0
?eq@?$char_traits@D@std@@SA_NAEBD0@Z ENDP		; std::char_traits<char>::eq
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAEADAEBD@Z
_TEXT	SEGMENT
_Left$ = 8
_Right$ = 16
?assign@?$char_traits@D@std@@SAXAEADAEBD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 564  : 		{	// assign an element

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 565  : 		_Left = _Right;

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR _Left$[rsp]
  0000f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR _Right$[rsp]
  00014	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00017	88 08		 mov	 BYTE PTR [rax], cl

; 566  : 		}

  00019	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAEADAEBD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAPEADPEAD_KD@Z
_TEXT	SEGMENT
_First$ = 48
_Count$ = 56
_Ch$ = 64
?assign@?$char_traits@D@std@@SAPEADPEAD_KD@Z PROC	; std::char_traits<char>::assign, COMDAT

; 559  : 		{	// assign _Count * _Ch to [_First, ...)

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 560  : 		return ((_Elem *)_CSTD memset(_First, _Ch, _Count));

  00013	0f be 44 24 40	 movsx	 eax, BYTE PTR _Ch$[rsp]
  00018	4c 8b 44 24 38	 mov	 r8, QWORD PTR _Count$[rsp]
  0001d	8b d0		 mov	 edx, eax
  0001f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _First$[rsp]
  00024	e8 00 00 00 00	 call	 memset

; 561  : 		}

  00029	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002d	c3		 ret	 0
?assign@?$char_traits@D@std@@SAPEADPEAD_KD@Z ENDP	; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z
_TEXT	SEGMENT
tv69 = 32
_First1$ = 64
_First2$ = 72
_Count$ = 80
?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z PROC	; std::char_traits<char>::move, COMDAT

; 552  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 553  : 		return (_Count == 0 ? _First1

  00013	48 83 7c 24 50
	00		 cmp	 QWORD PTR _Count$[rsp], 0
  00019	75 0c		 jne	 SHORT $LN3@move
  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR _First1$[rsp]
  00020	48 89 44 24 20	 mov	 QWORD PTR tv69[rsp], rax
  00025	eb 19		 jmp	 SHORT $LN4@move
$LN3@move:
  00027	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Count$[rsp]
  0002c	48 8b 54 24 48	 mov	 rdx, QWORD PTR _First2$[rsp]
  00031	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First1$[rsp]
  00036	e8 00 00 00 00	 call	 memmove
  0003b	48 89 44 24 20	 mov	 QWORD PTR tv69[rsp], rax
$LN4@move:
  00040	48 8b 44 24 20	 mov	 rax, QWORD PTR tv69[rsp]

; 554  : 			: (_Elem *)_CSTD memmove(_First1, _First2, _Count));
; 555  : 		}

  00045	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00049	c3		 ret	 0
?move@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ENDP	; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z
_TEXT	SEGMENT
tv69 = 32
_First1$ = 64
_First2$ = 72
_Count$ = 80
?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z PROC	; std::char_traits<char>::copy, COMDAT

; 529  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 530  : 		return (_Count == 0 ? _First1

  00013	48 83 7c 24 50
	00		 cmp	 QWORD PTR _Count$[rsp], 0
  00019	75 0c		 jne	 SHORT $LN3@copy
  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR _First1$[rsp]
  00020	48 89 44 24 20	 mov	 QWORD PTR tv69[rsp], rax
  00025	eb 19		 jmp	 SHORT $LN4@copy
$LN3@copy:
  00027	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Count$[rsp]
  0002c	48 8b 54 24 48	 mov	 rdx, QWORD PTR _First2$[rsp]
  00031	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First1$[rsp]
  00036	e8 00 00 00 00	 call	 memcpy
  0003b	48 89 44 24 20	 mov	 QWORD PTR tv69[rsp], rax
$LN4@copy:
  00040	48 8b 44 24 20	 mov	 rax, QWORD PTR tv69[rsp]

; 531  : 			: (_Elem *)_CSTD memcpy(_First1, _First2, _Count));
; 532  : 		}

  00045	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00049	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPEADPEADPEBD_K@Z ENDP	; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SA_KPEBD@Z
_TEXT	SEGMENT
tv68 = 32
_First$ = 64
?length@?$char_traits@D@std@@SA_KPEBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 522  : 		{	// find length of null-terminated string

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 523  : 		return (*_First == 0 ? 0

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR _First$[rsp]
  0000e	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00011	85 c0		 test	 eax, eax
  00013	75 0b		 jne	 SHORT $LN3@length
  00015	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR tv68[rsp], 0
  0001e	eb 0f		 jmp	 SHORT $LN4@length
$LN3@length:
  00020	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First$[rsp]
  00025	e8 00 00 00 00	 call	 strlen
  0002a	48 89 44 24 20	 mov	 QWORD PTR tv68[rsp], rax
$LN4@length:
  0002f	48 8b 44 24 20	 mov	 rax, QWORD PTR tv68[rsp]

; 524  : 			: _CSTD strlen(_First));
; 525  : 		}

  00034	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00038	c3		 ret	 0
?length@?$char_traits@D@std@@SA_KPEBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\iosfwd
;	COMDAT ?compare@?$char_traits@D@std@@SAHPEBD0_K@Z
_TEXT	SEGMENT
tv69 = 32
_First1$ = 64
_First2$ = 72
_Count$ = 80
?compare@?$char_traits@D@std@@SAHPEBD0_K@Z PROC		; std::char_traits<char>::compare, COMDAT

; 516  : 		{	// compare [_First1, _First1 + _Count) with [_First2, ...)

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 517  : 		return (_Count == 0 ? 0

  00013	48 83 7c 24 50
	00		 cmp	 QWORD PTR _Count$[rsp], 0
  00019	75 0a		 jne	 SHORT $LN3@compare
  0001b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv69[rsp], 0
  00023	eb 18		 jmp	 SHORT $LN4@compare
$LN3@compare:
  00025	4c 8b 44 24 50	 mov	 r8, QWORD PTR _Count$[rsp]
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _First2$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _First1$[rsp]
  00034	e8 00 00 00 00	 call	 memcmp
  00039	89 44 24 20	 mov	 DWORD PTR tv69[rsp], eax
$LN4@compare:
  0003d	8b 44 24 20	 mov	 eax, DWORD PTR tv69[rsp]

; 518  : 			: _CSTD memcmp(_First1, _First2, _Count));
; 519  : 		}

  00041	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00045	c3		 ret	 0
?compare@?$char_traits@D@std@@SAHPEBD0_K@Z ENDP		; std::char_traits<char>::compare
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??3@YAXPEAX0@Z
_TEXT	SEGMENT
__formal$ = 8
__formal$ = 16
??3@YAXPEAX0@Z PROC					; operator delete, COMDAT

; 93   :     {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 94   :         return;
; 95   :     }

  0000a	c3		 ret	 0
??3@YAXPEAX0@Z ENDP					; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 8
_Where$ = 16
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 87   :     {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 88   :         (void)_Size;
; 89   :         return _Where;

  0000a	48 8b 44 24 10	 mov	 rax, QWORD PTR _Where$[rsp]

; 90   :     }

  0000f	c3		 ret	 0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 48
__flags$ = 56
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  00012	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00017	8b 44 24 38	 mov	 eax, DWORD PTR __flags$[rsp]
  0001b	83 e0 01	 and	 eax, 1
  0001e	85 c0		 test	 eax, eax
  00020	74 0f		 je	 SHORT $LN2@scalar
  00022	ba 18 00 00 00	 mov	 edx, 24
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR this$[rsp]
  0002c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00036	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003a	c3		 ret	 0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 0
this$ = 32
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 88   :     {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 89   :         return _Data._What ? _Data._What : "Unknown exception";

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00013	74 0f		 je	 SHORT $LN3@what
  00015	48 8b 44 24 20	 mov	 rax, QWORD PTR this$[rsp]
  0001a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0001e	48 89 04 24	 mov	 QWORD PTR tv69[rsp], rax
  00022	eb 0b		 jmp	 SHORT $LN4@what
$LN3@what:
  00024	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception?$AA@
  0002b	48 89 04 24	 mov	 QWORD PTR tv69[rsp], rax
$LN4@what:
  0002f	48 8b 04 24	 mov	 rax, QWORD PTR tv69[rsp]

; 90   :     }

  00033	48 83 c4 18	 add	 rsp, 24
  00037	c3		 ret	 0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 83   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00015	48 89 08	 mov	 QWORD PTR [rax], rcx

; 84   :         __std_exception_destroy(&_Data);

  00018	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  0001d	48 83 c0 08	 add	 rax, 8
  00021	48 8b c8	 mov	 rcx, rax
  00024	e8 00 00 00 00	 call	 __std_exception_destroy

; 85   :     }

  00029	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002d	c3		 ret	 0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 48
_Other$ = 56
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 66   :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  0000f	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0001b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 65   :         : _Data()

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 c0 08	 add	 rax, 8
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 10 00 00 00	 mov	 ecx, 16
  00031	f3 aa		 rep stosb

; 67   :         __std_exception_copy(&_Other._Data, &_Data);

  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _Other$[rsp]
  00041	48 83 c1 08	 add	 rcx, 8
  00045	48 8b d0	 mov	 rdx, rax
  00048	e8 00 00 00 00	 call	 __std_exception_copy

; 68   :     }

  0004d	48 8b 44 24 30	 mov	 rax, QWORD PTR this$[rsp]
  00052	48 83 c4 20	 add	 rsp, 32			; 00000020H
  00056	5f		 pop	 rdi
  00057	c3		 ret	 0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 16
_Message$ = 24
__formal$ = 32
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 60   :     {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	57		 push	 rdi
  00010	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0001c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 59   :         : _Data()

  0001f	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00024	48 83 c0 08	 add	 rax, 8
  00028	48 8b f8	 mov	 rdi, rax
  0002b	33 c0		 xor	 eax, eax
  0002d	b9 10 00 00 00	 mov	 ecx, 16
  00032	f3 aa		 rep stosb

; 61   :         _Data._What = _Message;

  00034	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00039	48 8b 4c 24 18	 mov	 rcx, QWORD PTR _Message$[rsp]
  0003e	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 62   :     }

  00042	48 8b 44 24 10	 mov	 rax, QWORD PTR this$[rsp]
  00047	5f		 pop	 rdi
  00048	c3		 ret	 0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBD@Z
_TEXT	SEGMENT
_InitData$ = 32
this$ = 64
_Message$ = 72
??0exception@std@@QEAA@QEBD@Z PROC			; std::exception::exception, COMDAT

; 53   :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	57		 push	 rdi
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H
  0000f	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0001b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 52   :         : _Data()

  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00023	48 83 c0 08	 add	 rax, 8
  00027	48 8b f8	 mov	 rdi, rax
  0002a	33 c0		 xor	 eax, eax
  0002c	b9 10 00 00 00	 mov	 ecx, 16
  00031	f3 aa		 rep stosb

; 54   :         __std_exception_data _InitData = { _Message, true };

  00033	48 8b 44 24 48	 mov	 rax, QWORD PTR _Message$[rsp]
  00038	48 89 44 24 20	 mov	 QWORD PTR _InitData$[rsp], rax
  0003d	c6 44 24 28 01	 mov	 BYTE PTR _InitData$[rsp+8], 1

; 55   :         __std_exception_copy(&_InitData, &_Data);

  00042	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  00047	48 83 c0 08	 add	 rax, 8
  0004b	48 8b d0	 mov	 rdx, rax
  0004e	48 8d 4c 24 20	 lea	 rcx, QWORD PTR _InitData$[rsp]
  00053	e8 00 00 00 00	 call	 __std_exception_copy

; 56   :     }

  00058	48 8b 44 24 40	 mov	 rax, QWORD PTR this$[rsp]
  0005d	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00061	5f		 pop	 rdi
  00062	c3		 ret	 0
??0exception@std@@QEAA@QEBD@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\stdio.h
;	COMDAT sprintf_s
_TEXT	SEGMENT
_Result$ = 48
_ArgList$ = 56
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
sprintf_s PROC						; COMDAT

; 1839 :         {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1840 :             int _Result;
; 1841 :             va_list _ArgList;
; 1842 :             __crt_va_start(_ArgList, _Format);

  00018	e8 00 00 00 00	 call	 ??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
  0001d	48 8d 44 24 68	 lea	 rax, QWORD PTR _Format$[rsp+8]
  00022	48 89 44 24 38	 mov	 QWORD PTR _ArgList$[rsp], rax

; 1843 :             _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00027	48 8b 44 24 38	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0002c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00031	45 33 c9	 xor	 r9d, r9d
  00034	4c 8b 44 24 60	 mov	 r8, QWORD PTR _Format$[rsp]
  00039	48 8b 54 24 58	 mov	 rdx, QWORD PTR _BufferCount$[rsp]
  0003e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00043	e8 00 00 00 00	 call	 _vsprintf_s_l
  00048	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1844 :             __crt_va_end(_ArgList);

  0004c	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 1845 :             return _Result;

  00055	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]

; 1846 :         }

  00059	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005d	c3		 ret	 0
sprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\stdio.h
;	COMDAT _vsprintf_s_l
_TEXT	SEGMENT
_Result$ = 48
tv73 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsprintf_s_l PROC					; COMDAT

; 1495 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1496 :         int const _Result = __stdio_common_vsprintf_s(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Locale$[rsp]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00031	4c 8b 4c 24 60	 mov	 r9, QWORD PTR _Format$[rsp]
  00036	4c 8b 44 24 58	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  0003b	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00040	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00043	e8 00 00 00 00	 call	 __stdio_common_vsprintf_s
  00048	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1497 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1498 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1499 : 
; 1500 :         return _Result < 0 ? -1 : _Result;

  0004c	83 7c 24 30 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00051	7d 0a		 jge	 SHORT $LN3@vsprintf_s
  00053	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR tv73[rsp], -1
  0005b	eb 08		 jmp	 SHORT $LN4@vsprintf_s
$LN3@vsprintf_s:
  0005d	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]
  00061	89 44 24 34	 mov	 DWORD PTR tv73[rsp], eax
$LN4@vsprintf_s:
  00065	8b 44 24 34	 mov	 eax, DWORD PTR tv73[rsp]

; 1501 :     }

  00069	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006d	c3		 ret	 0
_vsprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft visual studio 14.0\vc\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ PROC ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

  00000	c3		 ret	 0
??$__vcrt_va_start_verify_argument_type@QEBD@@YAXXZ ENDP ; __vcrt_va_start_verify_argument_type<char const * __ptr64 const>
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 86   :         static unsigned __int64 _OptionsStorage;
; 87   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 88   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_math.h
;	COMDAT frexpl
_TEXT	SEGMENT
_X$ = 48
_Y$ = 56
frexpl	PROC						; COMDAT

; 862  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	f2 0f 11 44 24
	08		 movsd	 QWORD PTR [rsp+8], xmm0
  0000b	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 863  :         return frexp((double)_X, _Y);

  0000f	48 8b 54 24 38	 mov	 rdx, QWORD PTR _Y$[rsp]
  00014	f2 0f 10 44 24
	30		 movsd	 xmm0, QWORD PTR _X$[rsp]
  0001a	e8 00 00 00 00	 call	 frexp

; 864  :     }

  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	c3		 ret	 0
frexpl	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\10\include\10.0.16299.0\ucrt\corecrt_math.h
;	COMDAT fabsl
_TEXT	SEGMENT
_X$ = 48
fabsl	PROC						; COMDAT

; 841  :     {

$LN3:
  00000	f2 0f 11 44 24
	08		 movsd	 QWORD PTR [rsp+8], xmm0
  00006	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 842  :         return fabs((double)_X);

  0000a	f2 0f 10 44 24
	30		 movsd	 xmm0, QWORD PTR _X$[rsp]
  00010	e8 00 00 00 00	 call	 fabs

; 843  :     }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
fabsl	ENDP
_TEXT	ENDS
END
